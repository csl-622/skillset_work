<?xml version="1.0" encoding="utf-8"?>
<posthistory>
  <row Id="1" PostHistoryTypeId="2" PostId="1" RevisionGUID="4f1b41df-72d1-4c71-8b92-b75ad0eb5aa7" CreationDate="2016-04-19T20:11:37.597" UserId="24" Text="We are planning to build a reconstruction of the [PDP-6](https://en.wikipedia.org/wiki/PDP-6). The project is making a lot of progress, but currently we have a critical lack of software. Does anybody know where we can find software to run on the reconstructed machine?" />
  <row Id="2" PostHistoryTypeId="1" PostId="1" RevisionGUID="4f1b41df-72d1-4c71-8b92-b75ad0eb5aa7" CreationDate="2016-04-19T20:11:37.597" UserId="24" Text="Where can I find software for the PDP-6?" />
  <row Id="3" PostHistoryTypeId="3" PostId="1" RevisionGUID="4f1b41df-72d1-4c71-8b92-b75ad0eb5aa7" CreationDate="2016-04-19T20:11:37.597" UserId="24" Text="&lt;pdp-6&gt;&lt;software&gt;" />
  <row Id="4" PostHistoryTypeId="2" PostId="2" RevisionGUID="0883ba34-b780-44dc-b9e7-f8203e9d6299" CreationDate="2016-04-19T20:13:08.790" UserId="13" Text="I used to blow the dust out of the cartridges but I heard that wasn't good. &#xD;&#xA;&#xD;&#xA;What is the proper way to clean old NES and SNES game cartridges?" />
  <row Id="5" PostHistoryTypeId="1" PostId="2" RevisionGUID="0883ba34-b780-44dc-b9e7-f8203e9d6299" CreationDate="2016-04-19T20:13:08.790" UserId="13" Text="Reconditioning old NES cartridges" />
  <row Id="6" PostHistoryTypeId="3" PostId="2" RevisionGUID="0883ba34-b780-44dc-b9e7-f8203e9d6299" CreationDate="2016-04-19T20:13:08.790" UserId="13" Text="&lt;nes&gt;&lt;snes&gt;&lt;best-practice&gt;&lt;game-cartridge&gt;&lt;cleaning&gt;" />
  <row Id="7" PostHistoryTypeId="2" PostId="3" RevisionGUID="ea30050a-4490-45c3-887f-effe36970806" CreationDate="2016-04-19T20:20:24.960" UserId="37" Text="Doing spring cleaning with family, I found some old C64 disks. These are really old and no one knows what to do with them. Archiving or dumping them seems to be options but we are unsure how to do so efficiently and safely.&#xD;&#xA;&#xD;&#xA;So, how do you archive and dump old C64 disks efficiently and safely?" />
  <row Id="8" PostHistoryTypeId="1" PostId="3" RevisionGUID="ea30050a-4490-45c3-887f-effe36970806" CreationDate="2016-04-19T20:20:24.960" UserId="37" Text="Dumping and archiving C64 disks" />
  <row Id="9" PostHistoryTypeId="3" PostId="3" RevisionGUID="ea30050a-4490-45c3-887f-effe36970806" CreationDate="2016-04-19T20:20:24.960" UserId="37" Text="&lt;cleanup&gt;" />
  <row Id="10" PostHistoryTypeId="2" PostId="4" RevisionGUID="86dcf947-8263-42ea-b5e9-d7189cdab61e" CreationDate="2016-04-19T20:20:28.600" UserId="29" Text="The Radio Shack game Wildcatting uses the wrong color set when being played on a Color Computer 3 with an RGB monitor.&#xD;&#xA;&#xD;&#xA;How can I choose the correct color set before this game automatically executes?" />
  <row Id="11" PostHistoryTypeId="1" PostId="4" RevisionGUID="86dcf947-8263-42ea-b5e9-d7189cdab61e" CreationDate="2016-04-19T20:20:28.600" UserId="29" Text="How do I change the CoCo 3 color palette before running a Color Computer ROM Pak?" />
  <row Id="12" PostHistoryTypeId="3" PostId="4" RevisionGUID="86dcf947-8263-42ea-b5e9-d7189cdab61e" CreationDate="2016-04-19T20:20:28.600" UserId="29" Text="&lt;color-computer&gt;&lt;program-pak&gt;" />
  <row Id="13" PostHistoryTypeId="2" PostId="5" RevisionGUID="83a724c0-1b13-4aee-be23-c60caa3345b0" CreationDate="2016-04-19T20:20:28.600" UserId="29" Text="If you have a Multi-Pak, put the Program Pak in Slot 1 and set the switch to slot 2. Turn on the Multi-Pak and then the Color Computer 3.&#xD;&#xA;&#xD;&#xA;type: `PALETTE RGB` to set the proper color set.&#xD;&#xA;&#xD;&#xA;type: `POKE 65407,0` to switch the Multi-Pak to slot 1.&#xD;&#xA;&#xD;&#xA;The game will then automatically start with the proper colors." />
  <row Id="14" PostHistoryTypeId="6" PostId="3" RevisionGUID="14f90fee-5628-4bf2-bb61-4a0ce182d353" CreationDate="2016-04-19T20:21:30.367" UserId="24" Comment="add more specific tags" Text="&lt;cleanup&gt;&lt;c64&gt;&lt;floppy-disk&gt;&lt;archival&gt;" />
  <row Id="15" PostHistoryTypeId="24" PostId="3" RevisionGUID="14f90fee-5628-4bf2-bb61-4a0ce182d353" CreationDate="2016-04-19T20:21:30.367" Comment="Proposed by 24 approved by 37 edit id of 1" />
  <row Id="16" PostHistoryTypeId="6" PostId="3" RevisionGUID="3b9152cc-3d6b-4dd3-ac18-f429321a716d" CreationDate="2016-04-19T20:21:49.853" UserId="37" Comment="edited tags" Text="&lt;c64&gt;&lt;floppy-disk&gt;&lt;archival&gt;" />
  <row Id="17" PostHistoryTypeId="6" PostId="1" RevisionGUID="d679e1a0-dbc8-4922-a458-e4ea1be72d30" CreationDate="2016-04-19T20:22:16.770" UserId="24" Comment="tag company" Text="&lt;pdp-6&gt;&lt;software&gt;&lt;dec&gt;" />
  <row Id="18" PostHistoryTypeId="2" PostId="6" RevisionGUID="0559e71a-3567-4522-85e8-66187064da50" CreationDate="2016-04-19T20:25:04.930" UserId="40" Text="I used to use a clean rubber eraser to clean golden contacts in general, not only cartridges but that can also leave residues if you don't clean it properly after. &#xD;&#xA;&#xD;&#xA;There is a comprehensive article on Arstechnica website that recommends using Q-Tips, Brass polish, high-concentrated alcohol, and lint-free cloths. Based on the instructions and the companion video, it seems very effective. It demands you to open the cartridge though.&#xD;&#xA;&#xD;&#xA;See here for detailed instructions: [http://arstechnica.com/gaming/2013/08/the-cheap-easy-way-to-make-those-old-game-cartridges-as-good-as-new/][1]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://arstechnica.com/gaming/2013/08/the-cheap-easy-way-to-make-those-old-game-cartridges-as-good-as-new/" />
  <row Id="19" PostHistoryTypeId="6" PostId="3" RevisionGUID="9ef06712-b431-4e2a-b71a-3c3048ae6e1c" CreationDate="2016-04-19T20:25:23.103" UserId="44" Comment="Proper tag; [c-64] could be a synonym" Text="&lt;floppy-disk&gt;&lt;archival&gt;&lt;commodore-64&gt;" />
  <row Id="20" PostHistoryTypeId="24" PostId="3" RevisionGUID="9ef06712-b431-4e2a-b71a-3c3048ae6e1c" CreationDate="2016-04-19T20:25:23.103" Comment="Proposed by 44 approved by 37 edit id of 2" />
  <row Id="21" PostHistoryTypeId="2" PostId="7" RevisionGUID="cddd3adf-9e1f-4b87-80b9-b843d7f63af0" CreationDate="2016-04-19T20:25:35.183" UserId="12" Text="Cotton swabs and isopropyl (rubbing) alcohol should do the trick. Try to keep the alcohol from the plastics; use it sparingly.&#xD;&#xA;&#xD;&#xA;There is also fancy contact cleaner used in the electronics industry that works quite nice and is very stable. For example, &quot;CRC QD Contact Cleaner&quot;. Make sure you **don't** get the stuff used for lubricating potentiometers. We want the quick drying, stable stuff that doesn't leave a residue. This stuff is made for cleaning sensitive electronics and metal connectors.&#xD;&#xA;&#xD;&#xA;_Don't_ use a rubber eraser. This eventually removes the gold or copper cladding on the contact fingers. In a shop I worked at, you'd be read the riot act if you rubbed contacts with _anything_.&#xD;&#xA;&#xD;&#xA;And, yes: moist air from your mouth is not great for metals. I understand that blowing into the cart is part of our learned wisdom for getting these things to work, but it's really selection bias at work." />
  <row Id="22" PostHistoryTypeId="2" PostId="8" RevisionGUID="de364283-5151-45e6-959a-cf83e74782fc" CreationDate="2016-04-19T20:29:03.827" UserId="37" Text="I have also found a nice [ZX Spectrum][1] laying around. It needs a power source of course to run but there seems to be none that can be used to power it. Google doesn't seem to help and I would love to be able to use a machine that can be used...&#xD;&#xA;&#xD;&#xA;Is there a modern power source that can be used to power up my ZX Spectrum?&#xD;&#xA;&#xD;&#xA;   [1]:https://en.wikipedia.org/wiki/ZX_Spectrum" />
  <row Id="23" PostHistoryTypeId="1" PostId="8" RevisionGUID="de364283-5151-45e6-959a-cf83e74782fc" CreationDate="2016-04-19T20:29:03.827" UserId="37" Text="Powering up my ZX Spectrum" />
  <row Id="24" PostHistoryTypeId="3" PostId="8" RevisionGUID="de364283-5151-45e6-959a-cf83e74782fc" CreationDate="2016-04-19T20:29:03.827" UserId="37" Text="&lt;power&gt;&lt;computer&gt;" />
  <row Id="25" PostHistoryTypeId="2" PostId="9" RevisionGUID="dff786fe-56dc-40da-bf80-80de04cc7034" CreationDate="2016-04-19T20:30:54.373" UserId="49" Text="The simplest method of archiving old C-64 disks would be to get a ZoomFloppy and a 1571 floppy drive from eBay.  I say 1571 because it's much less likely to have alignment problems.&#xD;&#xA;&#xD;&#xA;The ZoomFloppy will allow you to control the 1571 from a Windows, Linux or MacOS computer.  You can convert the disks into .d64 images that are suitable for use with an emulator like VICE, or you can write them out to fresh media.&#xD;&#xA;The ZoomFloppy can be had here: http://store.go4retro.com/zoomfloppy/  (It looks like the store is currently out of stock.)" />
  <row Id="26" PostHistoryTypeId="5" PostId="7" RevisionGUID="a67fe4c0-0645-4614-b885-bdf16658bb3a" CreationDate="2016-04-19T20:31:48.763" UserId="12" Comment="added 278 characters in body" Text="Cotton swabs and isopropyl (rubbing) alcohol should do the trick. Try to keep the alcohol from the plastics; use it sparingly.&#xD;&#xA;&#xD;&#xA;There is also fancy contact cleaner used in the electronics industry that works quite nice and is very stable. For example, &quot;CRC QD Contact Cleaner&quot;. Make sure you **don't** get the stuff used for lubricating potentiometers. We want the quick drying, stable stuff that doesn't leave a residue. This stuff is made for cleaning sensitive electronics and metal connectors.&#xD;&#xA;&#xD;&#xA;_Don't_ use a rubber eraser. This eventually removes the gold or copper cladding on the contact fingers. In a shop I worked at, you'd be read the riot act if you rubbed contacts with _anything_. And I'll have to disagree with anyone who suggests that paste metal cleaners from the store are useful for anything but the grungiest, filthiest carts, and even then I wouldn't recommend it. These compounds often have gritty lapping material in them, which is all sorts of bad.&#xD;&#xA;&#xD;&#xA;And, yes: moist air from your mouth is not great for metals. I understand that blowing into the cart is part of our learned wisdom for getting these things to work, but it's really selection bias at work." />
  <row Id="27" PostHistoryTypeId="2" PostId="10" RevisionGUID="2bfc3d8a-1cb7-4062-a056-40620c505643" CreationDate="2016-04-19T20:33:24.703" UserId="55" Text="I am writing a Spectrum emulator, however I am finding it difficult to find official or reliable information about the ULA, its functioning and its pins.&#xD;&#xA;&#xD;&#xA;Are there official sources documenting its inner workings?" />
  <row Id="28" PostHistoryTypeId="1" PostId="10" RevisionGUID="2bfc3d8a-1cb7-4062-a056-40620c505643" CreationDate="2016-04-19T20:33:24.703" UserId="55" Text="Documentation for the ZX Spectrum ULA" />
  <row Id="29" PostHistoryTypeId="3" PostId="10" RevisionGUID="2bfc3d8a-1cb7-4062-a056-40620c505643" CreationDate="2016-04-19T20:33:24.703" UserId="55" Text="&lt;zx-spectrum&gt;&lt;hardware&gt;" />
  <row Id="30" PostHistoryTypeId="6" PostId="8" RevisionGUID="75767fad-6f6f-4ea6-bfa4-2c7e33ab7fbe" CreationDate="2016-04-19T20:33:36.860" UserId="55" Comment="edited tags" Text="&lt;power&gt;&lt;computer&gt;&lt;zx-spectrum&gt;" />
  <row Id="31" PostHistoryTypeId="2" PostId="11" RevisionGUID="aea44f01-3aeb-4dee-bb4b-9a1c9c1c04c9" CreationDate="2016-04-19T20:34:57.407" UserId="24" Text="I am the owner of an [Epson HX-20](https://en.wikipedia.org/wiki/Epson_HX-20) laptop computer. It runs well except for the builtin cassette drive which doesn't seem to work reliably. After carefully disassembling it I found that the belt seems to be quite loose, possibly because of the age.&#xD;&#xA;&#xD;&#xA;What is a good replacement for the defective drive belt? How can I find out the dimensions of the belt so I can find a replacement? The maintenance manual is silent on the dimensions of the belt and I don't think that the original still has the same length it had when it came out of the factory." />
  <row Id="32" PostHistoryTypeId="1" PostId="11" RevisionGUID="aea44f01-3aeb-4dee-bb4b-9a1c9c1c04c9" CreationDate="2016-04-19T20:34:57.407" UserId="24" Text="What to replace the belt in the cassette drive of an Epson HX-20 with?" />
  <row Id="33" PostHistoryTypeId="3" PostId="11" RevisionGUID="aea44f01-3aeb-4dee-bb4b-9a1c9c1c04c9" CreationDate="2016-04-19T20:34:57.407" UserId="24" Text="&lt;cassette&gt;&lt;maintenance&gt;&lt;hx-20&gt;&lt;epson&gt;&lt;belt&gt;" />
  <row Id="34" PostHistoryTypeId="5" PostId="7" RevisionGUID="a3b92dab-89ba-4d24-aab2-1b9b148803e3" CreationDate="2016-04-19T20:36:53.797" UserId="12" Comment="added 278 characters in body" Text="Cotton swabs and isopropyl (rubbing) alcohol should do the trick. Try to keep the alcohol from the plastics; use it sparingly.&#xD;&#xA;&#xD;&#xA;There is also fancy contact cleaner used in the electronics industry that works quite nice and is very stable. For example, &quot;CRC QD Contact Cleaner&quot;. Make sure you **don't** get the stuff used for lubricating potentiometers. We want the quick drying, stable stuff that doesn't leave a residue. This stuff is made for cleaning sensitive electronics and metal connectors. When in doubt, read the datasheet for the product. It'll say stuff like:&#xD;&#xA;&#xD;&#xA;&gt;Ideal for telephones, PCs, relays, **edge connectors**, tape heads, buss&#xD;&#xA;&gt;bars, circuits, contacts, printed circuit boards, switches and circuit&#xD;&#xA;&gt;breakers&#xD;&#xA;&#xD;&#xA;(Emphasis mine)&#xD;&#xA;&#xD;&#xA;_Don't_ use a rubber eraser. This eventually removes the gold or copper cladding on the contact fingers. In a shop I worked at, you'd be read the riot act if you rubbed contacts with _anything_. And I'll have to disagree with anyone who suggests that paste metal cleaners from the store are useful for anything but the grungiest, filthiest carts, and even then I wouldn't recommend it. These compounds often have gritty lapping material in them, which is all sorts of bad.&#xD;&#xA;&#xD;&#xA;And, yes: moist air from your mouth is not great for metals. I understand that blowing into the cart is part of our learned wisdom for getting these things to work, but it's really selection bias at work." />
  <row Id="35" PostHistoryTypeId="2" PostId="12" RevisionGUID="b88ffbb1-581c-4e3f-b72d-eaa5fdca1ee4" CreationDate="2016-04-19T20:38:21.477" UserId="61" Text="Unless you expect to be reading &quot;flippy&quot; diskettes (recorded by flipping disk over), the DeviceSide FC-5025 will let you image C-64 diskettes using any contemporary machine with a USB port:&#xD;&#xA;&#xD;&#xA;http://www.deviceside.com/fc5025.html&#xD;&#xA;&#xD;&#xA;Unlike the ZoomFloppy, this will not support writing to diskettes.  It's intended for image capture only." />
  <row Id="37" PostHistoryTypeId="5" PostId="8" RevisionGUID="046f425d-9d73-46cd-b09d-b21fbf91606d" CreationDate="2016-04-19T20:40:07.173" UserId="37" Comment="added 7 characters in body" Text="I have also found a nice [ZX Spectrum][1] laying around. It needs a power source of course to run but there seems to be none that can be used to power it. Google doesn't seem to help and I would love to be able to use a machine that can be used...&#xD;&#xA;&#xD;&#xA;Is there a modern/recent power source that can be used to power up my ZX Spectrum?&#xD;&#xA;&#xD;&#xA;   [1]:https://en.wikipedia.org/wiki/ZX_Spectrum" />
  <row Id="38" PostHistoryTypeId="2" PostId="14" RevisionGUID="e463e7ea-4371-4946-9723-9c77ef895841" CreationDate="2016-04-19T20:43:40.220" UserId="-1" Text="" />
  <row Id="39" PostHistoryTypeId="2" PostId="15" RevisionGUID="3fd1e21b-b173-42d3-bd95-cdc25b83e416" CreationDate="2016-04-19T20:43:40.220" UserId="-1" Text="" />
  <row Id="40" PostHistoryTypeId="2" PostId="16" RevisionGUID="5b6f5723-affa-476b-8ae4-b284369cca39" CreationDate="2016-04-19T20:44:17.003" UserId="-1" Text="" />
  <row Id="41" PostHistoryTypeId="2" PostId="17" RevisionGUID="b8aaf4bd-283a-411b-8dd9-9823ad2a95ec" CreationDate="2016-04-19T20:44:17.003" UserId="-1" Text="" />
  <row Id="42" PostHistoryTypeId="2" PostId="18" RevisionGUID="3342a886-c3ae-4a4f-8699-b422797f40fa" CreationDate="2016-04-19T20:45:37.940" UserId="-1" Text="" />
  <row Id="43" PostHistoryTypeId="2" PostId="19" RevisionGUID="add21db4-2e96-42db-8175-d686ac7833d8" CreationDate="2016-04-19T20:45:37.940" UserId="-1" Text="" />
  <row Id="44" PostHistoryTypeId="2" PostId="20" RevisionGUID="5da068a1-ce45-4962-8d94-0463b36afe28" CreationDate="2016-04-19T20:46:30.630" UserId="-1" Text="" />
  <row Id="45" PostHistoryTypeId="2" PostId="21" RevisionGUID="bae9a55d-5c6c-4927-84d5-0ffa0dbcac31" CreationDate="2016-04-19T20:46:30.630" UserId="-1" Text="" />
  <row Id="46" PostHistoryTypeId="2" PostId="22" RevisionGUID="ffc92058-5383-4a19-ac11-c97f3590a50f" CreationDate="2016-04-19T20:48:11.160" UserId="-1" Text="" />
  <row Id="47" PostHistoryTypeId="2" PostId="23" RevisionGUID="e184b170-083e-4895-be7b-4b65fc8c5452" CreationDate="2016-04-19T20:48:11.160" UserId="-1" Text="" />
  <row Id="48" PostHistoryTypeId="2" PostId="24" RevisionGUID="6190cd78-5603-4474-bf88-e297fc88a7ce" CreationDate="2016-04-19T20:49:27.720" UserId="64" Text="I opened up an Amiga 600 to install a hard drive, and after reconnecting the keyboard ribbon and powering the computer up, at least one column of keys no longer works.  What did I do wrong and what can I do to fix it?" />
  <row Id="49" PostHistoryTypeId="1" PostId="24" RevisionGUID="6190cd78-5603-4474-bf88-e297fc88a7ce" CreationDate="2016-04-19T20:49:27.720" UserId="64" Text="What should I do when some of the keys of my Amiga 600 have stopped working?" />
  <row Id="50" PostHistoryTypeId="3" PostId="24" RevisionGUID="6190cd78-5603-4474-bf88-e297fc88a7ce" CreationDate="2016-04-19T20:49:27.720" UserId="64" Text="&lt;amiga&gt;" />
  <row Id="51" PostHistoryTypeId="2" PostId="25" RevisionGUID="9e75cc79-ec5d-4ae0-9b64-05b052f43a55" CreationDate="2016-04-19T20:50:42.697" UserId="29" Text="Hitachi was a second source for the 6809 Micro Processor. The 6309 had many secret features. What advantages does the HD6309 have over the MC6809?" />
  <row Id="52" PostHistoryTypeId="1" PostId="25" RevisionGUID="9e75cc79-ec5d-4ae0-9b64-05b052f43a55" CreationDate="2016-04-19T20:50:42.697" UserId="29" Text="Advantages of a HD6309" />
  <row Id="53" PostHistoryTypeId="3" PostId="25" RevisionGUID="9e75cc79-ec5d-4ae0-9b64-05b052f43a55" CreationDate="2016-04-19T20:50:42.697" UserId="29" Text="&lt;6809&gt;" />
  <row Id="54" PostHistoryTypeId="2" PostId="26" RevisionGUID="760339c2-3854-4a24-af21-27c7a858a828" CreationDate="2016-04-19T20:50:42.697" UserId="29" Text="0. Pin and software compatible.&#xD;&#xA;1. Two extra 8-bit accumulators.&#xD;&#xA;2. Instruction fetch pipeline.&#xD;&#xA;3. Division instruction.&#xD;&#xA;4. Lower power consumption." />
  <row Id="58" PostHistoryTypeId="6" PostId="2" RevisionGUID="ad4672fd-444c-4bb9-9859-60c733a2662c" CreationDate="2016-04-19T20:55:58.403" UserId="44" Comment="Removed potential meta tag" Text="&lt;nes&gt;&lt;snes&gt;&lt;game-cartridge&gt;&lt;cleaning&gt;" />
  <row Id="59" PostHistoryTypeId="24" PostId="2" RevisionGUID="ad4672fd-444c-4bb9-9859-60c733a2662c" CreationDate="2016-04-19T20:55:58.403" Comment="Proposed by 44 approved by -1 edit id of 3" />
  <row Id="60" PostHistoryTypeId="4" PostId="2" RevisionGUID="114e0b11-4d2a-4e60-9089-70d8c709f3e0" CreationDate="2016-04-19T20:55:58.403" UserId="13" Comment="Removed potential meta tag" Text="Reconditioning old Nintendo game cartridges" />
  <row Id="62" PostHistoryTypeId="2" PostId="28" RevisionGUID="489adadc-d4e1-4aad-b652-a3d0c43b05b1" CreationDate="2016-04-19T21:07:22.283" UserId="74" Text="The first hope is that this is merely the ribbon not sitting well in the socket - try to reseat it; check if a corner didn't fold up.&#xD;&#xA;&#xD;&#xA;If it's not the case, and you don't have a spare keyboard, you're in for a &quot;surgical&quot; fix. The paths on the ribbon are printed with a kind of carbon component, which is *brittle*. In particular the fold just above the connector is a place of frequent faults. Inspect it for cracks. If you see any, you will need to obtain a graphite paste, or some other substance used in electronics to fix broken paths through application like paste. Strip the outer layer of the foil with a fine knife (the paths are actually sandwiched between them even if they seem exposed, the foil is really thin), and fix the path with the paste. &#xD;&#xA;&#xD;&#xA;Then inspect the paths for any more cracks which might have appeared in the process of fixing that broken path...&#xD;&#xA;&#xD;&#xA;Then fix them too...&#xD;&#xA;&#xD;&#xA;Then assembly everything before the paste dries up completely, hoping for the best, because it's far more brittle than the paths themselves. Which also means you'll likely have to repeat the procedure every time you open the cover. With the number of broken paths likely climbing.&#xD;&#xA;&#xD;&#xA;A total pain in the neck, but works... kinda. It's really better to get a broken A600 and just replace the keyboard.&#xD;&#xA;&#xD;&#xA;Regardless, avoid bending the ribbon at the fold before the connector at all cost." />
  <row Id="63" PostHistoryTypeId="2" PostId="29" RevisionGUID="d2362222-12e7-4836-8632-2420ff5848d5" CreationDate="2016-04-19T21:07:57.447" UserId="29" Text="[World Of Spectrum][1] says:&#xD;&#xA;&#xD;&#xA; - Input: 240V AC, 50Hz&#xD;&#xA; - Output: 9V DC, 1.4A&#xD;&#xA; - Centre Polarity: -ve (inner diameter is 2.5mm)&#xD;&#xA;&#xD;&#xA;  [1]: http://www.worldofspectrum.org/faq/reference/hardware.htm" />
  <row Id="64" PostHistoryTypeId="2" PostId="30" RevisionGUID="4614d545-a6f8-415e-ae15-543d6a090ecf" CreationDate="2016-04-19T21:13:01.830" UserId="74" Text="I still have some tapes for my Atari 65XE, and I'd like to play some of the old games I got, but I don't have the Atari anymore. I have a tape recorder of quality surpassing the Atari one by quite a bit though, and a PC with a good audio input capable of sampling the signal at well above the standard 600 baud of Atari tape storage.&#xD;&#xA;&#xD;&#xA;Is there some way to dump these games to PC, and convert them to ADF files - the emulator images?" />
  <row Id="65" PostHistoryTypeId="1" PostId="30" RevisionGUID="4614d545-a6f8-415e-ae15-543d6a090ecf" CreationDate="2016-04-19T21:13:01.830" UserId="74" Text="How to convert Atari (65XE) tapes to ADF?" />
  <row Id="66" PostHistoryTypeId="3" PostId="30" RevisionGUID="4614d545-a6f8-415e-ae15-543d6a090ecf" CreationDate="2016-04-19T21:13:01.830" UserId="74" Text="&lt;atari&gt;&lt;storage&gt;&lt;emulation&gt;" />
  <row Id="67" PostHistoryTypeId="2" PostId="31" RevisionGUID="3d0dbcfb-9b6b-4f3c-b597-f961efc80ce6" CreationDate="2016-04-19T21:13:21.580" UserId="37" Text="I have also found a working 1978 Apple II. Now my dad wants me to transfer its data to another device without using fancy Apple II exclusive hardware and if possible, through a cassette port.&#xD;&#xA;&#xD;&#xA;Now, how else can I transfer the data from the Apple II to another device like my computer without using specially design hardware for the Apple II? If possible, let the method include using a cassette port." />
  <row Id="68" PostHistoryTypeId="1" PostId="31" RevisionGUID="3d0dbcfb-9b6b-4f3c-b597-f961efc80ce6" CreationDate="2016-04-19T21:13:21.580" UserId="37" Text="Transferring from Apple II" />
  <row Id="69" PostHistoryTypeId="3" PostId="31" RevisionGUID="3d0dbcfb-9b6b-4f3c-b597-f961efc80ce6" CreationDate="2016-04-19T21:13:21.580" UserId="37" Text="&lt;data-transfer&gt;&lt;apple&gt;" />
  <row Id="70" PostHistoryTypeId="6" PostId="30" RevisionGUID="20083af2-11c1-4517-a097-369e72af514c" CreationDate="2016-04-19T21:16:04.097" UserId="37" Comment="Retag/Added new tag" Text="&lt;atari&gt;&lt;emulation&gt;&lt;data-transfer&gt;" />
  <row Id="71" PostHistoryTypeId="24" PostId="30" RevisionGUID="20083af2-11c1-4517-a097-369e72af514c" CreationDate="2016-04-19T21:16:04.097" Comment="Proposed by 37 approved by 74 edit id of 10" />
  <row Id="72" PostHistoryTypeId="5" PostId="30" RevisionGUID="df8642a8-aec2-4c8c-8028-c6b1e76d589b" CreationDate="2016-04-19T21:17:00.523" UserId="74" Comment="edited body; edited title" Text="I still have some tapes for my Atari 65XE, and I'd like to play some of the old games I got, but I don't have the Atari anymore. I have a tape recorder of quality surpassing the Atari one by quite a bit though, and a PC with a good audio input capable of sampling the signal at well above the standard 600 baud of Atari tape storage.&#xD;&#xA;&#xD;&#xA;Is there some way to dump these games to PC, and convert them to ATR files - the emulator images?" />
  <row Id="73" PostHistoryTypeId="4" PostId="30" RevisionGUID="df8642a8-aec2-4c8c-8028-c6b1e76d589b" CreationDate="2016-04-19T21:17:00.523" UserId="74" Comment="edited body; edited title" Text="How to convert Atari (65XE) tapes to ATR?" />
  <row Id="75" PostHistoryTypeId="2" PostId="33" RevisionGUID="6c625739-591a-49d9-97a2-383667a22b64" CreationDate="2016-04-19T21:19:48.097" UserId="37" Text="Going to the store is treacherous for me. So I prefer doing stuff at home, including cleaning up 5 1/4 floppy disks with only home supplies. Unfortunately, I do not know how or which materials/chemicals to use. This is a dilemma for me especially if I accidentally damage the disks.&#xD;&#xA;&#xD;&#xA;How can I safely clean these floppy disks with only supplies usually found at home instead of a NOS cleaning kit?" />
  <row Id="76" PostHistoryTypeId="1" PostId="33" RevisionGUID="6c625739-591a-49d9-97a2-383667a22b64" CreationDate="2016-04-19T21:19:48.097" UserId="37" Text="Cleaning 5 1/4 floppy drives" />
  <row Id="77" PostHistoryTypeId="3" PostId="33" RevisionGUID="6c625739-591a-49d9-97a2-383667a22b64" CreationDate="2016-04-19T21:19:48.097" UserId="37" Text="&lt;cleaning&gt;&lt;floppy-disk&gt;" />
  <row Id="78" PostHistoryTypeId="2" PostId="34" RevisionGUID="ea2de6b2-47f8-44de-978f-417ffd52331c" CreationDate="2016-04-19T21:23:15.263" UserId="74" Text="Our demoscene group managed to release only one demo before it fell apart, but these being the early days of the Internet in my country, and me getting lucky with obtaining access to it and creating our own webpage, I published the demo on the net in the most common Amiga floppy archivisation system of the day - Disk Mashing System, DMS, an Amiga shareware program.&#xD;&#xA;&#xD;&#xA;The amiga is long gone, the web host is long gone, but last I checked, the Internet Archive still holds the DMS image of our demo. I'd like to take a trip down the memory lane, except the DMS format is dead - currently ADF is the defacto standard of keeping Amiga floppies archived as files, and the emulators can handle that.&#xD;&#xA;&#xD;&#xA;How can I convert our demo from DMS to ADF without having an Amiga?" />
  <row Id="79" PostHistoryTypeId="1" PostId="34" RevisionGUID="ea2de6b2-47f8-44de-978f-417ffd52331c" CreationDate="2016-04-19T21:23:15.263" UserId="74" Text="How to convert Amiga DMS to ADF?" />
  <row Id="80" PostHistoryTypeId="3" PostId="34" RevisionGUID="ea2de6b2-47f8-44de-978f-417ffd52331c" CreationDate="2016-04-19T21:23:15.263" UserId="74" Text="&lt;amiga&gt;&lt;emulation&gt;" />
  <row Id="81" PostHistoryTypeId="2" PostId="35" RevisionGUID="53b13649-083f-49e4-89a9-ea9b3a3768e7" CreationDate="2016-04-19T21:25:40.213" UserId="80" Text="Buy, and study carefully, [The ZX Spectrum ULA](http://www.zxdesign.info/book/). The book is the result of opening the chip and reverse-engineering it down to the transistor level." />
  <row Id="82" PostHistoryTypeId="2" PostId="36" RevisionGUID="53b15337-7ec9-4da6-afae-6bc0d8e24395" CreationDate="2016-04-19T21:29:26.527" UserId="75" Text="It's difficult to find a modern LCD monitor that can display a 15 kHz signal through VGA, so I'm wondering if S-Video is just as good when displaying 240p and 480i? I've looked at screenshot and video comparisons online, but I can't see a difference." />
  <row Id="83" PostHistoryTypeId="1" PostId="36" RevisionGUID="53b15337-7ec9-4da6-afae-6bc0d8e24395" CreationDate="2016-04-19T21:29:26.527" UserId="75" Text="With a 15 kHz video signal (240p or 480i), does VGA have any real-world advantage over S-Video?" />
  <row Id="84" PostHistoryTypeId="3" PostId="36" RevisionGUID="53b15337-7ec9-4da6-afae-6bc0d8e24395" CreationDate="2016-04-19T21:29:26.527" UserId="75" Text="&lt;video&gt;&lt;display&gt;&lt;color&gt;&lt;vga&gt;&lt;s-video&gt;" />
  <row Id="85" PostHistoryTypeId="5" PostId="19" RevisionGUID="3b844744-e966-41ca-8b12-e8baa6bb9185" CreationDate="2016-04-19T21:29:45.997" UserId="37" Comment="added 99 characters in body" Text="For questions about the different versions and products of the NES (Nintendo Entertainment System) " />
  <row Id="86" PostHistoryTypeId="24" PostId="19" RevisionGUID="3b844744-e966-41ca-8b12-e8baa6bb9185" CreationDate="2016-04-19T21:29:45.997" Comment="Proposed by 37 approved by 47 edit id of 7" />
  <row Id="87" PostHistoryTypeId="5" PostId="17" RevisionGUID="cc8922ff-58c2-469e-a885-c814563d6bdb" CreationDate="2016-04-19T21:29:54.463" UserId="37" Comment="added 75 characters in body" Text="For questions about the different versions and products of the Commodore 64" />
  <row Id="88" PostHistoryTypeId="24" PostId="17" RevisionGUID="cc8922ff-58c2-469e-a885-c814563d6bdb" CreationDate="2016-04-19T21:29:54.463" Comment="Proposed by 37 approved by 47 edit id of 6" />
  <row Id="89" PostHistoryTypeId="5" PostId="23" RevisionGUID="880f97f7-bda9-4c68-992f-f689e483704b" CreationDate="2016-04-19T21:30:03.950" UserId="37" Comment="added 56 characters in body" Text="For questions about the products from the company, Epson" />
  <row Id="90" PostHistoryTypeId="24" PostId="23" RevisionGUID="880f97f7-bda9-4c68-992f-f689e483704b" CreationDate="2016-04-19T21:30:03.950" Comment="Proposed by 37 approved by 47 edit id of 9" />
  <row Id="91" PostHistoryTypeId="5" PostId="15" RevisionGUID="1df9b1ae-9469-4334-9ca1-952671131554" CreationDate="2016-04-19T21:30:09.857" UserId="37" Comment="added 83 characters in body" Text="For questions about the different versions and products of the ZX Spectrum computer" />
  <row Id="92" PostHistoryTypeId="24" PostId="15" RevisionGUID="1df9b1ae-9469-4334-9ca1-952671131554" CreationDate="2016-04-19T21:30:09.857" Comment="Proposed by 37 approved by 47 edit id of 5" />
  <row Id="93" PostHistoryTypeId="5" PostId="21" RevisionGUID="61db35b9-45f9-4747-bdef-7682b7343c7c" CreationDate="2016-04-19T21:30:19.370" UserId="37" Comment="added 55 characters in body" Text="For questions about care and upkeep of retro machinery " />
  <row Id="94" PostHistoryTypeId="24" PostId="21" RevisionGUID="61db35b9-45f9-4747-bdef-7682b7343c7c" CreationDate="2016-04-19T21:30:19.370" Comment="Proposed by 37 approved by 47 edit id of 8" />
  <row Id="95" PostHistoryTypeId="5" PostId="33" RevisionGUID="fc968d2b-9ef4-406e-811e-969017b1f05e" CreationDate="2016-04-19T21:32:08.837" UserId="29" Comment="Fixed grammer, focused on drives." Text="Going to the store is treacherous for me. So I prefer doing stuff at home, including cleaning up 5 1/4 floppy disks with only home supplies. Unfortunately, I do not know how or which materials/chemicals to use. This is a dilemma for me because I might accidentally damage a disk.&#xD;&#xA;&#xD;&#xA;How can I safely clean these floppy drives with only supplies usually found at home instead of a NOS cleaning kit?" />
  <row Id="96" PostHistoryTypeId="24" PostId="33" RevisionGUID="fc968d2b-9ef4-406e-811e-969017b1f05e" CreationDate="2016-04-19T21:32:08.837" Comment="Proposed by 29 approved by 37 edit id of 11" />
  <row Id="97" PostHistoryTypeId="2" PostId="37" RevisionGUID="0dea16de-1088-4de9-845a-ae91ad3f8d05" CreationDate="2016-04-19T21:32:46.007" UserId="56" Text="Some Apple II 5.25&quot; floppies used a special pattern of bytes that could not be automatically detected by disk copying software.  How could the pattern be invisible to disk copiers but detectable by the program itself?&#xD;&#xA;" />
  <row Id="98" PostHistoryTypeId="1" PostId="37" RevisionGUID="0dea16de-1088-4de9-845a-ae91ad3f8d05" CreationDate="2016-04-19T21:32:46.007" UserId="56" Text="How does &quot;bit-slip&quot; copy protection work?" />
  <row Id="99" PostHistoryTypeId="3" PostId="37" RevisionGUID="0dea16de-1088-4de9-845a-ae91ad3f8d05" CreationDate="2016-04-19T21:32:46.007" UserId="56" Text="&lt;floppy-disk&gt;&lt;apple-ii&gt;&lt;copy-protection&gt;" />
  <row Id="100" PostHistoryTypeId="2" PostId="38" RevisionGUID="64623db9-7ffd-46a9-9038-0508aa47839b" CreationDate="2016-04-19T21:32:46.007" UserId="56" Text="The Apple II reads disk tracks as a continuous stream of bits.  To make sense of the data, it's necessary to figure out where individual bytes start.  This is done with self-sync bytes.&#xD;&#xA;&#xD;&#xA;Standard self-sync bytes are `FF`, followed by two &quot;invisible&quot; zeroes:&#xD;&#xA;&#xD;&#xA;     byte 0  **  byte 1  **  byte 2  **&#xD;&#xA;    11111111 00 11111111 00 11111111 00&#xD;&#xA;&#xD;&#xA;The Apple II will read bits from the bit stream, sliding them in from right to left, until a `1` lands in the high bit of the 8-bit register.  If you start reading from a `1`, you will read 7 more bits.  If you start reading from a `0`, you will read 8 or 9 more bits, because the initial zeroes just slide off the left end of the register.  With just a few self-sync bytes, we can ensure that we fall into sync with the byte boundaries.&#xD;&#xA;&#xD;&#xA;For example, suppose you started reading at an offset of 4 bits into a self-sync pattern:&#xD;&#xA;&#xD;&#xA;    ....11110011111111001111111100&#xD;&#xA;&#xD;&#xA;The code would read `11110011` for the first byte, `11111100` for the second, and `11111111` for the third -- synchronization achieved.  The extra zeroes are read, but just slide off the left end of the register, because we're waiting for a `1` to appear in the high bit.  The only way to tell the difference between a self-sync `FF`, and a regular `FF`, is by how long it takes to read.  With one bit arriving every 4 CPU cycles, detecting the difference is tricky.&#xD;&#xA;&#xD;&#xA;The trick exploited by the bit-slip technique is to follow the self-sync bytes with a pattern that includes additional zeroes between bytes.  For example, consider this stream:&#xD;&#xA;&#xD;&#xA;    11100111011100111001110011111100111&#xD;&#xA;&#xD;&#xA;If we latch 8-bit bytes as usual, we'll read it like this:&#xD;&#xA;&#xD;&#xA;     byte 0  *  byte 1  **  byte 2   byte 3&#xD;&#xA;    11100111 0 11100111 00 11100111 11100111&#xD;&#xA;&#xD;&#xA;Because the &quot;extra&quot; `0` bits &quot;between&quot; bytes are ignored, this will be read as `E7 E7 E7 E7`.  But what happens if we deliberately stall for 12 cycles, ignoring the first three bits?&#xD;&#xA;&#xD;&#xA;    xxx **  byte 0  *  byte 1  **  byte 2  ...&#xD;&#xA;    111 00 11101110 0 11100111 00 11111100 111&#xD;&#xA;&#xD;&#xA;We get a different pattern: `EE E7 FC`.  By deliberately desynchronizing the stream, the program can detect the shifted pattern.  And because the pattern starts with zeroes, the delay doesn't have to be perfectly cycle-accurate.&#xD;&#xA;&#xD;&#xA;For additional details, see [this article][1] and this [comp.sys.apple2 posting][2].&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://mirrors.apple2.org.za/ftp.apple.asimov.net/images/games/action/Ikari%20Warriors%20%284am%20crack%29.txt&#xD;&#xA;  [2]: https://groups.google.com/forum/#!msg/comp.sys.apple2/3zdIhTxSqY4/IddZHUro20oJ" />
  <row Id="101" PostHistoryTypeId="2" PostId="39" RevisionGUID="ee84918a-003f-4982-be19-8e09d6ccd325" CreationDate="2016-04-19T21:33:18.533" UserId="74" Text="On the local auction portal I have spotted ads for some &quot;supercharged&quot; 8-bit Ataris (800XL, 65XE etc) - modified to support 4 megabytes of RAM.&#xD;&#xA;&#xD;&#xA;The auctions were scarce in details, more concentrating on praising the product than providing any actual technical details.&#xD;&#xA;&#xD;&#xA;Can someone tell me more about that mod? How does that work? How does that play with standard Atari software? How to access the extra memory and of what use could it be?" />
  <row Id="102" PostHistoryTypeId="1" PostId="39" RevisionGUID="ee84918a-003f-4982-be19-8e09d6ccd325" CreationDate="2016-04-19T21:33:18.533" UserId="74" Text="How does the 4MB mod for 8-bit Atari work?" />
  <row Id="103" PostHistoryTypeId="3" PostId="39" RevisionGUID="ee84918a-003f-4982-be19-8e09d6ccd325" CreationDate="2016-04-19T21:33:18.533" UserId="74" Text="&lt;atari&gt;&lt;hardware-mods&gt;" />
  <row Id="104" PostHistoryTypeId="2" PostId="40" RevisionGUID="23f1f032-55c2-4201-9848-cbb185a9ad8f" CreationDate="2016-04-19T21:33:37.120" UserId="-1" Text="" />
  <row Id="105" PostHistoryTypeId="2" PostId="41" RevisionGUID="f94266d2-ee2c-476b-a5b2-acc8142ce320" CreationDate="2016-04-19T21:33:37.120" UserId="-1" Text="" />
  <row Id="106" PostHistoryTypeId="2" PostId="42" RevisionGUID="9561bcd4-30d4-4720-b0ac-e24f6bbb4ef7" CreationDate="2016-04-19T21:34:59.757" UserId="55" Text="Is there a way, such a specific interface adapter, which would allow me to connect a PS/2 keyboard to an original ZX Spectrum?&#xD;&#xA;&#xD;&#xA;I expect the keyboard to work similarly to the ZX Spectrum itself -- in other words, pressing P would trigger send the same interrupt to the CPU as the rubber keyboard.&#xD;&#xA;&#xD;&#xA;It should be doable since some joystick interfaces, such as the Sinclair Interface 2, did map joystick events to key presses." />
  <row Id="107" PostHistoryTypeId="1" PostId="42" RevisionGUID="9561bcd4-30d4-4720-b0ac-e24f6bbb4ef7" CreationDate="2016-04-19T21:34:59.757" UserId="55" Text="Adapting a &quot;modern&quot; keyboard to a ZX Spectrum" />
  <row Id="108" PostHistoryTypeId="3" PostId="42" RevisionGUID="9561bcd4-30d4-4720-b0ac-e24f6bbb4ef7" CreationDate="2016-04-19T21:34:59.757" UserId="55" Text="&lt;zx-spectrum&gt;&lt;hardware&gt;&lt;keyboards&gt;" />
  <row Id="109" PostHistoryTypeId="2" PostId="43" RevisionGUID="30b4d913-bd16-4736-ad8e-9d84103d4415" CreationDate="2016-04-19T21:36:52.620" UserId="81" Text="From some quick research, [WinUAE](http://www.winuae.net/) (a popular Amiga emulator) supports reading a DMS file just like an ADF. So you could probably mount it and then save it back as ADF.&#xD;&#xA;&#xD;&#xA;Also, according to the [ADF Opus tool](http://adfopus.sourceforge.net/) site, they can read DMS also." />
  <row Id="110" PostHistoryTypeId="2" PostId="44" RevisionGUID="63f139ac-00e2-4302-87d4-b120d6eb3562" CreationDate="2016-04-19T21:42:46.023" UserId="74" Text="The game [Universe](https://en.wikipedia.org/wiki/Universe_%281994_video_game%29) for Amiga boasted ability of use of  256 different Amiga colors available through the ECS chips, with only limitation of 64 colors in halfbrite palette (32 arbitrary + 32 at half brightness of the first 32) per scanline.&#xD;&#xA;&#xD;&#xA;This was pretty much unachievable in common use, and while there were games or programs that would switch the palette at cost of one entirely black scanline (e.g. Personal Paint keeping the toolbox bar in its original palette while providing all 64 colors of halfbrite for painting) this was the only case I know about where a full palette switch could be achieved within each scanline.... or something around that, my memory may be sketchy.&#xD;&#xA;&#xD;&#xA;How was that possible? Was that used elsewhere?&#xD;&#xA;Advanced answers, even with assembly code snippets are most welcome." />
  <row Id="111" PostHistoryTypeId="1" PostId="44" RevisionGUID="63f139ac-00e2-4302-87d4-b120d6eb3562" CreationDate="2016-04-19T21:42:46.023" UserId="74" Text="How to obtain 256 arbitrary colors with limitation of 64 per line in Amiga (ECS)?" />
  <row Id="112" PostHistoryTypeId="3" PostId="44" RevisionGUID="63f139ac-00e2-4302-87d4-b120d6eb3562" CreationDate="2016-04-19T21:42:46.023" UserId="74" Text="&lt;amiga&gt;&lt;graphics&gt;" />
  <row Id="113" PostHistoryTypeId="2" PostId="45" RevisionGUID="ab752fe2-1d80-4035-88c9-92fd08128bd6" CreationDate="2016-04-19T21:45:23.553" UserId="-1" Text="" />
  <row Id="114" PostHistoryTypeId="2" PostId="46" RevisionGUID="d8e2c013-be7c-4552-afb6-8597e0dcec0d" CreationDate="2016-04-19T21:45:23.553" UserId="-1" Text="" />
  <row Id="115" PostHistoryTypeId="2" PostId="47" RevisionGUID="5c5907ed-6317-4f0e-8cf5-164eb1c189f6" CreationDate="2016-04-19T21:47:33.127" UserId="-1" Text="" />
  <row Id="116" PostHistoryTypeId="2" PostId="48" RevisionGUID="4ab17228-0251-490c-8c8f-3af4659bfb67" CreationDate="2016-04-19T21:47:33.127" UserId="-1" Text="" />
  <row Id="117" PostHistoryTypeId="2" PostId="49" RevisionGUID="3ede7e91-4e0a-42bd-9a9e-82627baae97a" CreationDate="2016-04-19T21:51:59.167" UserId="-1" Text="" />
  <row Id="118" PostHistoryTypeId="2" PostId="50" RevisionGUID="2ebec79c-b8d2-4339-afc9-7b8b93ef1af9" CreationDate="2016-04-19T21:51:59.167" UserId="-1" Text="" />
  <row Id="119" PostHistoryTypeId="2" PostId="51" RevisionGUID="11538b01-ef4d-4da8-8229-9b27f78af022" CreationDate="2016-04-19T21:53:45.113" UserId="90" Text="Actually, you're asking about two separate things here. The first is &quot;how to get my tapes to a PC&quot; and second is &quot;how to convert tape records into a disk file/image&quot;.&#xD;&#xA;&#xD;&#xA;The former can be solved with http://turgen.sourceforge.net, the latter is a bit more complicated. There had been many native tools for this task but the conversion is not always possible -- for instance many tape games load to awfully low addresses in RAM (overwriting the DOS) or use a copy protection or load parts into RAM after some point in game etc.&#xD;&#xA;&#xD;&#xA;However, if you don't have anything special on those tapes (i.e. just classic games/programs), I'd suggest to google for them first, they might be available in ATR/XEX format already (http://a8.fandal.cz is a good start)." />
  <row Id="120" PostHistoryTypeId="5" PostId="25" RevisionGUID="d52f405d-d0b3-43da-9983-97247ede8dc7" CreationDate="2016-04-19T21:57:02.220" UserId="81" Comment="Added some more context links and clearing the title a bit" Text="Hitachi was a second source for the [Motorola 6809](https://en.wikipedia.org/wiki/Motorola_6809) Micro Processor. The 6309 had many secret features. What advantages does the HD6309 have over the MC6809?" />
  <row Id="121" PostHistoryTypeId="4" PostId="25" RevisionGUID="d52f405d-d0b3-43da-9983-97247ede8dc7" CreationDate="2016-04-19T21:57:02.220" UserId="81" Comment="Added some more context links and clearing the title a bit" Text="Advantages of a Hitacchi HD6309 versus a plain Motorola MC6809" />
  <row Id="122" PostHistoryTypeId="24" PostId="25" RevisionGUID="d52f405d-d0b3-43da-9983-97247ede8dc7" CreationDate="2016-04-19T21:57:02.220" Comment="Proposed by 81 approved by -1 edit id of 16" />
  <row Id="123" PostHistoryTypeId="4" PostId="25" RevisionGUID="2528ebda-49f5-4822-9d9f-3a7519dcfd79" CreationDate="2016-04-19T21:57:02.220" UserId="29" Comment="Added some more context links and clearing the title a bit" Text="Advantages of a Hitachi HD6309 versus a plain Motorola MC6809" />
  <row Id="124" PostHistoryTypeId="2" PostId="52" RevisionGUID="f280d376-216d-4af3-84e5-e3361eed2ecc" CreationDate="2016-04-19T22:04:18.050" UserId="56" Text="The Apple IIgs video memory is controlled by the 1MHz Mega II chip, so directly accessing the Super Hi-Res page in bank $E1 is slower than accessing other memory.  How can I render in &quot;fast&quot; memory, and then just copy the final result to &quot;slow&quot; memory?&#xD;&#xA;" />
  <row Id="125" PostHistoryTypeId="1" PostId="52" RevisionGUID="f280d376-216d-4af3-84e5-e3361eed2ecc" CreationDate="2016-04-19T22:04:18.050" UserId="56" Text="How do I use shadowed memory to render Super Hi-Res quickly?" />
  <row Id="126" PostHistoryTypeId="3" PostId="52" RevisionGUID="f280d376-216d-4af3-84e5-e3361eed2ecc" CreationDate="2016-04-19T22:04:18.050" UserId="56" Text="&lt;apple-ii&gt;&lt;graphics&gt;&lt;apple-iigs&gt;" />
  <row Id="127" PostHistoryTypeId="2" PostId="53" RevisionGUID="3e924bbf-b55e-4bfa-9ae2-4e324c4f0aff" CreationDate="2016-04-19T22:04:18.050" UserId="56" Text="What you want to do looks like this:&#xD;&#xA;&#xD;&#xA; 1. Perform computation for the current frame.&#xD;&#xA; 2. Disable shadowing ($E0/C035 &amp;= $F7).&#xD;&#xA; 3. Render the frame into bank $01.&#xD;&#xA; 4. Enable shadowing ($E0/C035 |= $08).&#xD;&#xA; 5. Wait for the scan beam to reach a point where tearing won't be visible.&#xD;&#xA; 6. Copy the frame from $01 to $E1.&#xD;&#xA;&#xD;&#xA;The fun trick is in step 6.  Using the extended-memory switches introduced on the 128K Apple //e ($E0/C003 and $E0/C005), you can map the memory from bank $01 into bank $00.  If you map the stack and direct page on top of the graphics screen, you can use the 65816 `PEI` instruction to copy the data onto itself.  With shadowing enabled, the data will be shadow-copied into the same area of bank $E1.&#xD;&#xA;" />
  <row Id="128" PostHistoryTypeId="2" PostId="54" RevisionGUID="8413e4fe-bc22-4fb5-b790-e051f0cc88bc" CreationDate="2016-04-19T22:06:00.410" UserId="55" Text="There are some tape copiers, such as [LERM](https://archive.org/details/zx_Lerm_Tape_Copier_7_1985_Lerm_Software) that claim to be able to copy tapes which contain software that takes the full 48kbyte of RAM. &#xD;&#xA;&#xD;&#xA;However this seems impossible on a Spectrum, when the whole 48k are read from a single file on disk.&#xD;&#xA;&#xD;&#xA;How do they work?" />
  <row Id="129" PostHistoryTypeId="1" PostId="54" RevisionGUID="8413e4fe-bc22-4fb5-b790-e051f0cc88bc" CreationDate="2016-04-19T22:06:00.410" UserId="55" Text="How did Spectrum tape copiers work?" />
  <row Id="130" PostHistoryTypeId="3" PostId="54" RevisionGUID="8413e4fe-bc22-4fb5-b790-e051f0cc88bc" CreationDate="2016-04-19T22:06:00.410" UserId="55" Text="&lt;zx-spectrum&gt;&lt;copy-protection&gt;&lt;software&gt;" />
  <row Id="131" PostHistoryTypeId="2" PostId="55" RevisionGUID="416a805b-9792-4364-9b41-4e758aa6acab" CreationDate="2016-04-19T22:06:00.410" UserId="55" Text="These programs usually had a mono-color background with very little text. By setting the color of the screen as &quot;black ink on black paper&quot; or &quot;white ink on white paper&quot;, it is possible to relocate the whole software in video RAM and hide it from view.&#xD;&#xA;&#xD;&#xA;These programs were tiny asm utilities (they used 1 or 2 kilobytes or RAM) which copied themselves to videoram and used the rest of RAM as a buffer to copy the software they read from tape. Usually they discarded or corrupted the tiny bit of video memory they could not copy.&#xD;&#xA;&#xD;&#xA;So, technically, they were not copying the whole 48k, but they did allow you to make a copy of a 48kbyte file, by discarding the video data.&#xD;&#xA;&#xD;&#xA;See for example [Two Speed Copy](https://archive.org/details/zx_2_Speed_Copy_19xx_Ivan_Stich_cs):&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/VdsVP.png" />
  <row Id="132" PostHistoryTypeId="2" PostId="56" RevisionGUID="02f957be-828b-4eaa-b6a2-b33eee308b35" CreationDate="2016-04-19T22:10:22.890" UserId="81" Text="A lot of programs released for the Commodore 64 contained different software for the PAL or NTSC computer. Why did they have different versions of the hardware? Did the software have to be different too?" />
  <row Id="133" PostHistoryTypeId="1" PostId="56" RevisionGUID="02f957be-828b-4eaa-b6a2-b33eee308b35" CreationDate="2016-04-19T22:10:22.890" UserId="81" Text="What are the differences between a PAL and NTSC C64?" />
  <row Id="134" PostHistoryTypeId="3" PostId="56" RevisionGUID="02f957be-828b-4eaa-b6a2-b33eee308b35" CreationDate="2016-04-19T22:10:22.890" UserId="81" Text="&lt;software&gt;&lt;hardware&gt;&lt;commodore-64&gt;" />
  <row Id="135" PostHistoryTypeId="2" PostId="57" RevisionGUID="f8365d86-2cef-44ad-917b-6f21f76e601c" CreationDate="2016-04-19T22:13:27.593" UserId="92" Text="The timing of some programs - most notably games - is different due to the different frame rates of NTSC (60 Hz) and PAL (60 Hz). It may also affect the timing of the SID tunes if they are played and synchronize to the vertical blanking of the frame." />
  <row Id="136" PostHistoryTypeId="5" PostId="57" RevisionGUID="c4de7921-49a3-423c-b485-5880df6fed09" CreationDate="2016-04-19T22:13:47.970" UserId="55" Comment="edited body" Text="The timing of some programs - most notably games - is different due to the different frame rates of NTSC (60 Hz) and PAL (50 Hz). It may also affect the timing of the SID tunes if they are played and synchronize to the vertical blanking of the frame." />
  <row Id="137" PostHistoryTypeId="5" PostId="57" RevisionGUID="1378da2b-93c4-48ee-b1f6-f59688a15672" CreationDate="2016-04-19T22:13:49.957" UserId="92" Comment="fixed SID tune explanation" Text="The timing of some programs - most notably games - is different due to the different frame rates of NTSC (60 Hz) and PAL (50 Hz). It may also affect the timing of the SID tunes if the SID registers are written during and synchronized to the vertical blanking of the frame." />
  <row Id="138" PostHistoryTypeId="4" PostId="54" RevisionGUID="e17d322b-b047-49a4-8b60-10a9b331e0aa" CreationDate="2016-04-19T22:14:10.330" UserId="55" Comment="edited title" Text="How did &quot;full memory&quot; Spectrum tape copiers work?" />
  <row Id="139" PostHistoryTypeId="2" PostId="58" RevisionGUID="45ed057b-b012-4d4f-83f2-6e92e967a315" CreationDate="2016-04-19T22:19:15.897" UserId="-1" Text="" />
  <row Id="140" PostHistoryTypeId="2" PostId="59" RevisionGUID="4fc896ec-34e4-4f21-9c7a-3c7febf869cb" CreationDate="2016-04-19T22:19:15.897" UserId="-1" Text="" />
  <row Id="141" PostHistoryTypeId="2" PostId="60" RevisionGUID="9d26a1f0-5d77-4d79-aa04-45b3876ca0bf" CreationDate="2016-04-19T22:22:06.960" UserId="77" Text="You can simply cut open the disk -in side where you hold the disk and insert it into the floppy drive- and let it soak a few min in water and liquid dishwash soap. &#xD;&#xA;&#xD;&#xA;To dry them you need to wipe from center and out with a paper towel or a soft cloth, lay the disc on top of a papertowel or soft cloth rather than table while doing so.&#xD;&#xA;&#xD;&#xA;you can also do it the slow way, water/ipa and cottonstick.&#xD;&#xA;https://www.youtube.com/watch?v=01n8RgHgIwg" />
  <row Id="142" PostHistoryTypeId="2" PostId="61" RevisionGUID="975c6d6d-9f22-45ba-80b1-570a44ce4ef6" CreationDate="2016-04-19T22:40:10.070" UserId="99" Text="Assuming your data is on floppy disk and you have a functioning disk drive it is pretty easy to transfer files from an Apple II via cassette port. The program that I recommend using is called ADTPRO.&#xD;&#xA;http://adtpro.sourceforge.net/&#xD;&#xA;&#xD;&#xA;You will need to first bootstrap ADTPRO using the following tutorial:&#xD;&#xA;http://adtpro.sourceforge.net/bootstrapaudio.html&#xD;&#xA;&#xD;&#xA;Once the ADTPRO program has been loaded you will use it to send the disk images from the Apple II to your modern computer using the following tutorial:&#xD;&#xA;http://adtpro.sourceforge.net/sending.html&#xD;&#xA;&#xD;&#xA;The files will stored on your computer in a DSK file format which you can open and in somecase manipulate files using an archive manager like CiderPress https://sourceforge.net/projects/ciderpress/ or you can use them in most Apple II emulators.&#xD;&#xA;&#xD;&#xA;While you can transfer files from the Apple II using the cassette interface, it will be much easier and go much faster if you can use serial, but that would require a USB to serial adapter and a Super Serial Card (SSC) in your Apple II (which typical sells for $25-$40 on eBay)." />
  <row Id="143" PostHistoryTypeId="2" PostId="62" RevisionGUID="6b1a9218-a3af-4509-96c5-c21263bb2872" CreationDate="2016-04-19T22:43:56.227" UserId="77" Text="The program &quot;Dumpers&quot; use is warpcopy, it does require some additional hardware, i.e. network cartridge for the C64, a full C64 setup and a diskettedrive (1541-II recommended as it is the easiest to access to clean the head), a PC and network cable.&#xD;&#xA;&#xD;&#xA;WarpCopy works as a client server, the C64 being the server and the pc the client, automatic file naming is also an awesome feature of WC.&#xD;&#xA;&#xD;&#xA;The reason for using warpcopy is it's efficient way of handling errors.&#xD;&#xA;d64copy with a X(a/e/m)1541 cable or ZoomFloppy can be quite troublesome when encountering errors, even though it does have retries.&#xD;&#xA;I've made a script with parameters set so d64copy would mimic warpcopy. I quickly stopped using it as it didn't satisfy my needs.&#xD;&#xA;&#xD;&#xA;Kryoflux and a PC floppy drive can be a good option but isn't as fast as d64copy or warpcopy.&#xD;&#xA;&#xD;&#xA;I'm not mentioning nibread (duh, just did) as that would just be pointless unless you're dumping originals.&#xD;&#xA;&#xD;&#xA;And of course depending on how the disks were stored, you might need to want to clean the disks.&#xD;&#xA;&#xD;&#xA;Translate from Danish, there are some useful links &#xD;&#xA;http://blog.tomse.dk/2012/11/15/64nic-warpcopy/" />
  <row Id="144" PostHistoryTypeId="5" PostId="53" RevisionGUID="bbcde662-da72-4d6a-bcfd-ee351fa679fb" CreationDate="2016-04-19T22:50:11.750" UserId="56" Comment="Added note about disabling interrupts; clarify address range" Text="The memory shadowing feature copies writes from $01/2000-9FFF to the corresponding location in bank $E1.&#xD;&#xA;&#xD;&#xA;What you want to do looks like this:&#xD;&#xA;&#xD;&#xA; 1. Perform computation for the current frame.&#xD;&#xA; 2. Disable shadowing ($E0/C035 &amp;= $F7).&#xD;&#xA; 3. Render the frame into bank $01.&#xD;&#xA; 4. Enable shadowing ($E0/C035 |= $08).&#xD;&#xA; 5. Wait for the scan beam to reach a point where tearing won't be visible.&#xD;&#xA; 6. Copy the frame from $01 to $E1.&#xD;&#xA;&#xD;&#xA;The fun trick is in step 6.  Using the extended-memory switches introduced on the 128K Apple //e ($E0/C003 and $E0/C005), you can map the memory from bank $01 into bank $00.  If you map the stack and direct page on top of the graphics screen, you can use the 65816 `PEI` instruction to push a 16-bit value from the direct page to the stack, copying the data onto itself.  With shadowing enabled, the data will be shadow-copied into the same area of bank $E1.&#xD;&#xA;&#xD;&#xA;Make sure you have interrupts disabled while using the stack this way.&#xD;&#xA;" />
  <row Id="145" PostHistoryTypeId="2" PostId="63" RevisionGUID="6e987e4e-19db-47b6-9107-6fec558731e0" CreationDate="2016-04-19T22:59:08.727" UserId="4" Text="Hardware-wise, the Commodore 64, like most early computers, was synchronized to its graphics output: in the case of the C64, the CPU clock was derived from the timing crystal in the video hardware.&#xD;&#xA;&#xD;&#xA;From a game-programming standpoint, the most important timing element is the vertical refresh rate: the 50 Hz (PAL) or 60 Hz (NTSC) rate at which the screen started drawing each frame.  A game coded for one frame rate would appear too fast or too slow on the other.  Given the limited CPU capabilities of the hardware (you've only got 19,700 or 17,050 CPU cycles per frame), a re-write of the software was often the only way to adapt while still being able to run fast enough.&#xD;&#xA;&#xD;&#xA;The C64 additionally had the ability to change the settings of the VIC-II graphics chip from code.  Normally this would be done during the vertical-blanking interval, when no signal was being output to the screen, but making the changes during the drawing interval permitted graphical effects (eg. number of colors) beyond the stated specs of the chip -- but this required cycle-perfect timing of the changes, and this timing was different for PAL and NTSC." />
  <row Id="146" PostHistoryTypeId="2" PostId="64" RevisionGUID="9696febd-6c6e-4abb-a8f2-434c89d1b8b4" CreationDate="2016-04-19T23:03:46.837" UserId="103" Text="My Compaq Presario CDS 633 outputs color in Windows 3.1 but not in DOS. How can I get color in DOS?  I have tried the MODE setting, but it did not change anything.  ANSI.SYS also has a LOADHIGH line in CONFIG.SYS." />
  <row Id="147" PostHistoryTypeId="1" PostId="64" RevisionGUID="9696febd-6c6e-4abb-a8f2-434c89d1b8b4" CreationDate="2016-04-19T23:03:46.837" UserId="103" Text="My Compaq Presario CDS 633 outputs color in Windows 3.1 but not in DOS. How can I get color in DOS?" />
  <row Id="148" PostHistoryTypeId="3" PostId="64" RevisionGUID="9696febd-6c6e-4abb-a8f2-434c89d1b8b4" CreationDate="2016-04-19T23:03:46.837" UserId="103" Text="&lt;display&gt;&lt;color&gt;&lt;dos&gt;" />
  <row Id="149" PostHistoryTypeId="2" PostId="65" RevisionGUID="006c11a0-da99-4268-a054-a63f5ad8b1af" CreationDate="2016-04-19T23:12:43.073" UserId="105" Text="I did such interface long time ago. It was(is) an internal interface designed to fit in a place near the right side of the board when using the Plus case.&#xD;&#xA;&#xD;&#xA;Technical details here:&#xD;&#xA;http://www.zxprojects.com/index.php/ps2-adapter" />
  <row Id="151" PostHistoryTypeId="2" PostId="66" RevisionGUID="3c37c24d-4809-4156-b14e-91ba7e948ce1" CreationDate="2016-04-19T23:24:08.220" UserId="105" Text="S-Video relays on colour transformation from RGB to YUV and then, takes U and V and modulate them using a colour subcarrier. The TV has to undo all these steps in order to get the original RGB signal. If the subcarrier frequency is not in phase with the pixel clock (as it will be the case if using different crystals), then moving artifacts will show up in the final image. Those moving artifacts are ofcourse not visible in a screenshot.&#xD;&#xA;&#xD;&#xA;There are upscalers that can take a 15kHz RGB signal (as generated by the Commodore Amiga, for example) and convert it into HDMI along with the audio. There are similar converters that do the same from RGB to VGA. Look for &quot;arcade rgb to vga&quot;" />
  <row Id="152" PostHistoryTypeId="2" PostId="67" RevisionGUID="030b25f0-f6ec-4dd0-b339-6b729f6c0bcb" CreationDate="2016-04-19T23:24:30.987" UserId="-1" Text="" />
  <row Id="153" PostHistoryTypeId="2" PostId="68" RevisionGUID="39910c82-39f9-4332-9cea-bdd16b56135d" CreationDate="2016-04-19T23:24:30.987" UserId="-1" Text="" />
  <row Id="154" PostHistoryTypeId="2" PostId="69" RevisionGUID="26ff2fcc-e936-4dbc-917f-a7ff3bb0f3e1" CreationDate="2016-04-19T23:38:28.627" UserId="92" Text="On a PAL Amiga, a full line sweep translates to about 454 virtual pixels. (64 µs duration of a horizontal line, 7.093790 MHz pixel clock =~ 140.968 ns per pixel: 64 µs / 140.968 ns =~ 454).&#xD;&#xA;&#xD;&#xA;I say virtual pixels because not all of those pixels are actually usable as there is the horizontal sync period of about 4 µs and the back porch of about 8 µs, leaving about 52 µs or about 369 pixels. In practice, the number of used pixels was even lower (so it would fit into the visible non-distorted area of the CRT) - usually 320 pixels.&#xD;&#xA;&#xD;&#xA;Therefore, the number of pixel-times where nothing is displayed is about 134. Copper lists allowed positioning (waiting) horizontally with 4 pixel granularity and a copper MOVE instruction took 8 pixels to complete. 134 / 8 are a little more than 16. So you can update about 14 to 16 color registers each line outside of the display window when using copper lists.&#xD;&#xA;&#xD;&#xA;* See here for a detailed analysis of PAL video timings: http://martin.hinner.info/vga/pal.html&#xD;&#xA;* How the copper timing is performed: http://coppershade.org/articles/AMIGA/Agnus/Copper:_Exact_WAIT_Timing/&#xD;&#xA;&#xD;&#xA;So assuming we use 5 bitplanes (32 colors), we could use 16 colors for the background and prepare a copper list that changes those 16 colors (or most of them) each line, providing for a very colorful setting. The copper list could be prepared once when switching to a different scene and then not changed anymore while the scene is active, or it could be prepared once per frame during the vertical blanking area.&#xD;&#xA;&#xD;&#xA;We could then use the remaining 16 colors (which remain static) for blitting the animated character onto the background.&#xD;&#xA;&#xD;&#xA;I haven't researched whether the game actually uses that technique, but it seems likely." />
  <row Id="155" PostHistoryTypeId="2" PostId="70" RevisionGUID="5b044289-dd03-4479-8956-f0d8ac1f0ad4" CreationDate="2016-04-19T23:40:10.217" UserId="71" Text="Ideally you should clean the drive read/write head with a cotton swab dipped in 90+% cleaning alcohol (e.g. isopropyl alcohol). The aim is to leave nothing on the head - dirt, cotton, nor cleaner residue.&#xD;&#xA;&#xD;&#xA;The Apple II drive head is quite hardy, and there are legends of people in a pinch cleaning it with a T-shirt - which I do not recommend unless your need is dire.&#xD;&#xA;&#xD;&#xA;Finding the drive head is reasonably easy: if the drive is placed in its normal orientation, the head presses up onto the bottom of an inserted disk. [Here is an excellent video tutorial.][1]&#xD;&#xA;&#xD;&#xA;  [1]: https://www.youtube.com/watch?v=CMF3PL17kqg" />
  <row Id="156" PostHistoryTypeId="2" PostId="71" RevisionGUID="52050f98-daea-4718-92f0-2b6e358a4da8" CreationDate="2016-04-19T23:52:28.840" UserId="-1" Text="" />
  <row Id="157" PostHistoryTypeId="2" PostId="72" RevisionGUID="5ac094ce-4e70-42a5-8bf1-e93f374accb2" CreationDate="2016-04-19T23:52:28.840" UserId="-1" Text="" />
  <row Id="158" PostHistoryTypeId="2" PostId="73" RevisionGUID="2c278a52-eecb-47b9-9c55-14cf58307eaf" CreationDate="2016-04-19T23:59:24.187" UserId="22" Text="In my experience, just about any rubber band can be used, in a pinch, to replace a belt as long as you make it snug, but not too snug.  I'm talking about those centimeter or more wide rubber bands they use on newspapers and the like.  I repaired a VCR using the rubber band around a stalk of celery.  Again, these are for &quot;in a pinch,&quot; and you might be able to find a brand new belt online.  Lots of online electronics stores sell belts.&#xD;&#xA;&#xD;&#xA;As for finding it's size, use a piece of string, or a length of dental floss (non-waxed, if you have it), and wrap it along the belt's guidepath.  That will give you the linear length of the belt.  If the beltwheels contain flanges, you can use those to gauge the thickness of the belt.  If the wheels have rounded impressions around their diameter, make sure to get a rounded belt!&#xD;&#xA;&#xD;&#xA;Of course, it would be best if you can get an equivalent belt from a &quot;for parts&quot; drive.  However, realize that those parts are ALSO as old as the original equipment, and are just as likely to fail as the original part." />
  <row Id="160" PostHistoryTypeId="5" PostId="70" RevisionGUID="9629bc08-6980-4596-aca5-588e125d53aa" CreationDate="2016-04-20T00:08:29.570" UserId="71" Comment="Added a video for PC drive head location." Text="Ideally you should clean the drive read/write head(s) with a cotton swab dipped in 90+% cleaning alcohol (e.g. isopropyl). The aim is to leave nothing on the head - dirt, cotton, nor cleaner residue.&#xD;&#xA;&#xD;&#xA;The Apple II drive head is quite hardy, and there are legends of people in a pinch cleaning it with a T-shirt - which I do not recommend unless your need is dire!&#xD;&#xA;&#xD;&#xA;Finding the Apple II drive head is reasonably easy: if the drive is placed in its normal orientation, the head presses up onto the bottom of an inserted disk. [Here is an excellent video tutorial.][1]&#xD;&#xA;&#xD;&#xA;Other drives might differ, but [this PC 1.2MB drive][2] also has the head on the bottom.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://www.youtube.com/watch?v=CMF3PL17kqg&#xD;&#xA;  [2]: https://www.youtube.com/watch?v=kCBLJMqTFng" />
  <row Id="161" PostHistoryTypeId="2" PostId="74" RevisionGUID="fee9b23f-34d0-46f7-aecf-9cabf8072425" CreationDate="2016-04-20T00:12:51.970" UserId="107" Text="As the title states, the eMac has a clear section at the back of it's housing that forms a grill for the fan inside. This seems to be pretty good at catching dust that's impossible to get at simply by removing and washing the housing, is there a way to remove this part so I can actually get it clean?&#xD;&#xA;&#xD;&#xA;[![Back of an eMac][1]][1]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/2idxr.jpg" />
  <row Id="162" PostHistoryTypeId="1" PostId="74" RevisionGUID="fee9b23f-34d0-46f7-aecf-9cabf8072425" CreationDate="2016-04-20T00:12:51.970" UserId="107" Text="How do you remove the clear section from the back of the eMac's housing?" />
  <row Id="163" PostHistoryTypeId="3" PostId="74" RevisionGUID="fee9b23f-34d0-46f7-aecf-9cabf8072425" CreationDate="2016-04-20T00:12:51.970" UserId="107" Text="&lt;emac&gt;&lt;restoration&gt;" />
  <row Id="164" PostHistoryTypeId="2" PostId="75" RevisionGUID="2ead9d27-948c-4c10-a541-e27383037088" CreationDate="2016-04-20T00:14:04.180" UserId="-1" Text="" />
  <row Id="165" PostHistoryTypeId="2" PostId="76" RevisionGUID="6f57b0db-b0ff-41e2-98c7-55aee6d51f33" CreationDate="2016-04-20T00:14:04.180" UserId="-1" Text="" />
  <row Id="166" PostHistoryTypeId="2" PostId="77" RevisionGUID="27277edb-197d-462d-ba7d-b5977906d3e9" CreationDate="2016-04-20T00:15:09.437" UserId="-1" Text="" />
  <row Id="167" PostHistoryTypeId="2" PostId="78" RevisionGUID="ac1969e1-e1a8-4544-ad0e-895690c5dc32" CreationDate="2016-04-20T00:15:09.437" UserId="-1" Text="" />
  <row Id="168" PostHistoryTypeId="2" PostId="79" RevisionGUID="ba04b069-4be0-4b8a-bd95-b9f4975c8cd2" CreationDate="2016-04-20T00:17:43.760" UserId="107" Text="eMacs have a 3.6V PRAM battery and some sources indicate that when the voltage starts to drop that they may have trouble booting. Will an eMac work without a battery?" />
  <row Id="169" PostHistoryTypeId="1" PostId="79" RevisionGUID="ba04b069-4be0-4b8a-bd95-b9f4975c8cd2" CreationDate="2016-04-20T00:17:43.760" UserId="107" Text="Will an eMac boot without a PRAM battery installed?" />
  <row Id="170" PostHistoryTypeId="3" PostId="79" RevisionGUID="ba04b069-4be0-4b8a-bd95-b9f4975c8cd2" CreationDate="2016-04-20T00:17:43.760" UserId="107" Text="&lt;emac&gt;&lt;restoration&gt;" />
  <row Id="171" PostHistoryTypeId="2" PostId="80" RevisionGUID="15b2be39-fd44-4ed8-b48c-d61fb96dfb83" CreationDate="2016-04-20T00:19:36.083" UserId="107" Text="No. I measured the voltage across the power pins before and after installing a new battery and observed a change from 0V to 3.6V. The three pins for the power switch are 3.6V, ground and ground, with this potential difference coming from the PRAM battery. Without a battery installed (or with a battery that's severely depleted) closing the switch does nothing and the machine will not power on or show any signs of life.&#xD;&#xA;&#xD;&#xA;" />
  <row Id="172" PostHistoryTypeId="2" PostId="81" RevisionGUID="51e69080-52e5-4e76-a410-9703e7162f37" CreationDate="2016-04-20T00:21:29.717" UserId="-1" Text="" />
  <row Id="173" PostHistoryTypeId="2" PostId="82" RevisionGUID="53103660-191c-4358-aea4-b0a92f8c14a2" CreationDate="2016-04-20T00:21:29.717" UserId="-1" Text="" />
  <row Id="174" PostHistoryTypeId="2" PostId="83" RevisionGUID="23b6bf5f-08b8-4d78-8b2e-1484bfb38fae" CreationDate="2016-04-20T00:23:42.057" UserId="-1" Text="" />
  <row Id="175" PostHistoryTypeId="2" PostId="84" RevisionGUID="4f562039-0cd5-4996-b175-e01cd9f650be" CreationDate="2016-04-20T00:23:42.057" UserId="-1" Text="" />
  <row Id="176" PostHistoryTypeId="2" PostId="85" RevisionGUID="701124f0-6338-4216-995c-db8961a2a9fd" CreationDate="2016-04-20T00:29:12.747" UserId="56" Text="Apple II emulators accept disk images in &quot;DOS order&quot; or &quot;ProDOS order&quot;.  What's the difference?  Why have two different formats?" />
  <row Id="177" PostHistoryTypeId="1" PostId="85" RevisionGUID="701124f0-6338-4216-995c-db8961a2a9fd" CreationDate="2016-04-20T00:29:12.747" UserId="56" Text="What's the difference between DOS-ordered and ProDOS-ordered disk images?" />
  <row Id="178" PostHistoryTypeId="3" PostId="85" RevisionGUID="701124f0-6338-4216-995c-db8961a2a9fd" CreationDate="2016-04-20T00:29:12.747" UserId="56" Text="&lt;apple-ii&gt;&lt;disk-image&gt;" />
  <row Id="179" PostHistoryTypeId="2" PostId="86" RevisionGUID="c7751785-b2d2-4a80-a4a5-5b382ff50c54" CreationDate="2016-04-20T00:29:12.747" UserId="56" Text="The reasons are partly technical and partly historical.&#xD;&#xA;&#xD;&#xA;The basic Apple II disk image formats are unadorned and unstructured.  The files just hold a copy of the disk data, from the first track to the last, as read by the operating system.  The way in which the data is read from the physical floppy determines the ordering.&#xD;&#xA;&#xD;&#xA;If your disk imaging program runs under DOS 3.3, it will start at track 0 sector 0 (t0s0), reading 256 bytes.  It continues on that track through t0s15, then advances to the next track (t1s0).  It stops when it reaches t34s15.  If an emulator wants to read (say) track 10 sector 7, it seeks to file offset `(10 * 16 + 7) * 256 = 42752` and reads 256 bytes.&#xD;&#xA;&#xD;&#xA;If your disk imaging program runs under ProDOS, it will start at block 0, reading 512 bytes, and continue through block 279.  If an emulator wants to read block 100, it seeks to offset `(100 * 512) = 51200`, and reads 512 bytes.&#xD;&#xA;&#xD;&#xA;The trouble comes because the 512-byte ProDOS blocks don't map neatly on top of DOS 3.3 sectors.  While 5.25&quot; ProDOS disks still use the same 256-byte sector structure in the low-level disk format, the higher-level blocks are mapped across non-adjacent sectors.  ProDOS block 0 occupies sectors 0 and 2, not 0 and 1.&#xD;&#xA;&#xD;&#xA;If an emulator wants to read track 0 sector 1 from a DOS-ordered disk, it can do trivial math (`(0 * 16 + 1) * 256`) and seek to offset 256.  For a ProDOS ordered disk, that sector is actually the first half of block four, so the emulator would seek to offset `4 * 512 = 2048`.&#xD;&#xA;&#xD;&#xA;Various disk imaging programs are available, some written for DOS, some for ProDOS.  Because neither format was widely accepted as the One True Way, emulators have to cope with both.  In many cases the format can be auto-detected, but it's generally best to use file extensions to identify the format (`.po` / `.do`).  Fortunately the sector/block conversion can be managed with a simple lookup table.&#xD;&#xA;&#xD;&#xA;Many emulators also support &quot;nibble&quot; images, which contain the raw bytes as read from the drive, one track at a time.  The track format contains sector numbers in the address header fields, so there is no ambiguity about the ordering.&#xD;&#xA;&#xD;&#xA;The order in which sectors physically appear on a track is irrelevant except for performance.  Tools like Bag of Tricks allowed one to &quot;skew&quot; the sectors in a way that made reads of consecutive sectors faster.  DOS 3.3 wasn't fast enough to read the track in a single revolution, so the idea was to interleave the data such that, at the point DOS had finished reading and processing sector N, sector N+1 was about to pass under the drive head.  Because the sectors were explicitly numbered in the address field, this was invisible to DOS and ProDOS, and has no effect on disk images.&#xD;&#xA;" />
  <row Id="180" PostHistoryTypeId="2" PostId="87" RevisionGUID="96e18d88-8c34-4e57-870f-8afd44105391" CreationDate="2016-04-20T00:49:44.527" UserId="-1" Text="" />
  <row Id="181" PostHistoryTypeId="2" PostId="88" RevisionGUID="645d6b0f-6c64-45f6-b493-1b9ad139cea5" CreationDate="2016-04-20T00:49:44.527" UserId="-1" Text="" />
  <row Id="183" PostHistoryTypeId="2" PostId="89" RevisionGUID="a7c7fde4-59a4-4b29-8c3c-43185f1fa1b8" CreationDate="2016-04-20T01:25:28.607" UserId="89" Text="I have been trying to work out how to open a Mac SE/30, in order to have a better look at its internal condition. I have the [repair manual](http://www.apple-collection.com/CarPos/macse30.pdf), and in the &quot;Take Apart&quot; section it references a &quot;pull-apart tool&quot;. However, I cannot find any mention of this tool or where to buy one. Attempts to lever the case off using screwdrivers and similar implements have been unsuccessful. What is a pull-apart tool? Where can I get one, or what can I use instead?" />
  <row Id="184" PostHistoryTypeId="1" PostId="89" RevisionGUID="a7c7fde4-59a4-4b29-8c3c-43185f1fa1b8" CreationDate="2016-04-20T01:25:28.607" UserId="89" Text="How do you open an SE/30? (a.k.a. what is a &quot;pull-apart tool&quot;?)" />
  <row Id="185" PostHistoryTypeId="3" PostId="89" RevisionGUID="a7c7fde4-59a4-4b29-8c3c-43185f1fa1b8" CreationDate="2016-04-20T01:25:28.607" UserId="89" Text="&lt;hardware&gt;&lt;apple&gt;&lt;macintosh&gt;" />
  <row Id="186" PostHistoryTypeId="2" PostId="90" RevisionGUID="2d33e847-de9e-4636-b853-7801118e210d" CreationDate="2016-04-20T01:39:47.257" UserId="12" Text="They are _probably_ referring to a [spudger][1], though it's hard to tell. If it is intended to safely lever apart plastic parts that are held together with friction in such a way that a screwdriver would damage the case, then this is probably what it is.&#xD;&#xA;&#xD;&#xA;A number of different spudgers (sizes, stiffness, etc.) are handy tools for retrocomputing fans.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://en.wikipedia.org/wiki/Spudger" />
  <row Id="187" PostHistoryTypeId="2" PostId="91" RevisionGUID="3f75cadd-29c2-4bdf-a33d-a35114c70c0f" CreationDate="2016-04-20T01:40:27.290" UserId="115" Text="Zero-page memory maps of the PET that I've found claim that the zero page address range`$00C2..$00D9` are used for static data, e.g. http://www.classiccmp.org/dunfield/pet/petmem.txt says:&#xD;&#xA;&#xD;&#xA;     RIDATA	00C2		Cassette Temp (64#00AA) read flags: 0=scan,&#xD;&#xA;     				    1-15=count, $40=load, $80=end of tape marker&#xD;&#xA;     RIPRTY	00C3		Cassette Short Cnt (64#00AB): counter of seconds&#xD;&#xA;     				    before tape write / checksum&#xD;&#xA;     PNT	00C4-00C5	Pointer: Current Screen	Line Address&#xD;&#xA;     PNTR	00C6		Cursor Column on Current Line&#xD;&#xA;     SAL	00C7-00C8	Pointer: Tape Buffer/ Screen Scrolling&#xD;&#xA;     EAL	00C9-00CA	Tape End Addresses/End of Program&#xD;&#xA;     CMP0	00CB-00CC	Tape Timing Constants&#xD;&#xA;     QTSW	00CD		Flag: Editor in Quote Mode, $00 = NO&#xD;&#xA;     BITTS	00CE		Cassette Temp (64#00B4): Tape read timer flag&#xD;&#xA;     		            =IRQ enabled for Timer 1&#xD;&#xA;    	    00CF		End of tape read&#xD;&#xA;        	00D0		Read character error&#xD;&#xA;     FNLEN	00D1		Length of Current File Name&#xD;&#xA;     LA	    00D2		Current Logical File Number&#xD;&#xA;     SA     00D3        Current Secondary Address&#xD;&#xA;     FA	    00D4		Current Device Number&#xD;&#xA;     LNMX	00D5		Physical Screen Line Length&#xD;&#xA;    	    00D5        4.80: right side of window&#xD;&#xA;     TAPE1	00D6-00D7	Pointer: Start of Tape Buffer&#xD;&#xA;     TBLX	00D8		Current Cursor Physical Line Number&#xD;&#xA;     DATAX  00D9        Current Character to Print&#xD;&#xA;&#xD;&#xA;However, looking at the ROM disassembly, one can find places where the address `$00C2` is jumped to, e.g. http://www.zimmers.net/anonftp/pub/cbm/firmware/computers/pet/d/rom-1.html#C70A :&#xD;&#xA;&#xD;&#xA;     C70A  4C C2 00             JMP iC2       &#xD;&#xA;&#xD;&#xA;Looking at a disassembly starting at `$00C2` after booting up a PET, I can see reasonable-looking code:&#xD;&#xA;&#xD;&#xA;    .C:00c2  E6 C9       INC $C9&#xD;&#xA;    .C:00c4  D0 02       BNE $00C8&#xD;&#xA;    .C:00c6  E6 CA       INC $CA&#xD;&#xA;    .C:00c8  AD 00 04    LDA $0400&#xD;&#xA;    .C:00cb  C9 3A       CMP #$3A&#xD;&#xA;    .C:00cd  B0 0A       BCS $00D9&#xD;&#xA;    .C:00cf  C9 20       CMP #$20&#xD;&#xA;    .C:00d1  F0 EF       BEQ $00C2&#xD;&#xA;    .C:00d3  38          SEC&#xD;&#xA;    .C:00d4  E9 30       SBC #$30&#xD;&#xA;    .C:00d6  38          SEC&#xD;&#xA;    .C:00d7  E9 D0       SBC #$D0&#xD;&#xA;    .C:00d9  60          RTS&#xD;&#xA;&#xD;&#xA;What is this area used for? Where is the code that assembles this program into this area? What's this code supposed to do? (It seems to be scanning the area starting at `$0400` for `:` and ` ` characters?)" />
  <row Id="188" PostHistoryTypeId="1" PostId="91" RevisionGUID="3f75cadd-29c2-4bdf-a33d-a35114c70c0f" CreationDate="2016-04-20T01:40:27.290" UserId="115" Text="What is this code on the zero page that was put there by the BASIC ROM?" />
  <row Id="189" PostHistoryTypeId="3" PostId="91" RevisionGUID="3f75cadd-29c2-4bdf-a33d-a35114c70c0f" CreationDate="2016-04-20T01:40:27.290" UserId="115" Text="&lt;commodore-pet&gt;&lt;6502&gt;&lt;memory-layout&gt;&lt;firmware&gt;" />
  <row Id="190" PostHistoryTypeId="2" PostId="92" RevisionGUID="11aa1880-2872-4a42-9836-a751bc18832e" CreationDate="2016-04-20T01:43:09.540" UserId="115" Text="It's part of the BASIC interpreter loop. It reads one byte of the tokenized BASIC program, setting zero flag if it's a colon or a zero byte and clearing the carry if it's a number. You can see it used in the main part of the interpreter loop at [address `C6B5`][1].&#xD;&#xA;&#xD;&#xA;I'm not sure why this routine was placed in zero page. It's a cycle (or rarely two) faster to use `LDA $0400` over `LDA ($C9),Y`, but I can't see it actually making much difference. &#xD;&#xA;&#xD;&#xA;I should also note that the ROM disassembly you're looking at appears to be for a BASIC 1.0 ROM, while the memory map you've referenced is for versions 2.0 and 4.0.&#xD;&#xA;&#xD;&#xA;Here's what [Mapping the Commodore 64][2] by Sheldon Leemon says about the equivalent C64 routine:&#xD;&#xA;&#xD;&#xA;&gt; ### 115-138 &amp;nbsp; $73-$8A  &amp;nbsp; `CHRGET` &lt;br&gt; Subroutine: Get Next BASIC Text Character&#xD;&#xA;&gt;&#xD;&#xA;&gt; ...&#xD;&#xA;&gt; &#xD;&#xA;&gt; `CHRGET` is a crucial routine which BASIC uses to read text characters,&#xD;&#xA;&gt; such as the text of the BASIC program which is being interpreted. It&#xD;&#xA;&gt; is placed on zero page to make the routine run faster. Since it keeps&#xD;&#xA;&gt; track of the address of the character being read within the routine&#xD;&#xA;&gt; itself, the routine must be in RAM in order to update that pointer.&#xD;&#xA;&gt; The pointer to the address of the byte currently being read is really&#xD;&#xA;&gt; the operand of a `LDA` instruction. When entered from `CHRGET`, the&#xD;&#xA;&gt; routine increments the pointer by modifying the operand at `TXTPTR`&#xD;&#xA;&gt; (122, `$7A`), thus allowing the next character to be read.&#xD;&#xA;&gt; &#xD;&#xA;&gt; Entry at `CHRGOT` (121, `$79`) allows the current character to be read&#xD;&#xA;&gt; again.  The `CHRGET` routine skips spaces, sets the various flags or the&#xD;&#xA;&gt; status register (`.P`) to indicate whether the character read was a&#xD;&#xA;&gt; digit, statement terminator, or other type of character, and returns&#xD;&#xA;&gt; with the retrieved character in the Accumulator (`.A`).&#xD;&#xA;&gt;&#xD;&#xA;&gt; ... &#xD;&#xA;&gt;&#xD;&#xA;&gt; As this is such a central routine, a disassembly listing is given&#xD;&#xA;&gt; below to provide a better understanding of how it works.&#xD;&#xA;&gt; &#xD;&#xA;&gt;     115 $73   CHRGET  INC TXTPTR   ; increment low byte of TXTPTR&#xD;&#xA;&gt;     117 $75           BNE CHRGOT   ; if low byte isn't 0, skip next&#xD;&#xA;&gt;     119 $77           INC TXTPTR+1 ; increment high byte of TXTPTR&#xD;&#xA;&gt;     121 $79   CHRGOT  LDA          ; load byte from where TXTPTR points&#xD;&#xA;&gt;                                    ; entry here does not update TXTPTR,&#xD;&#xA;&gt;                                    ; allowing you to readl the old byte again&#xD;&#xA;&gt;     122 $7A   TXTPTR  $0207        ; pointer is really the LDA operand&#xD;&#xA;&gt;                                    ; TXTPTR+1 points to 512-580 ($200-$250)&#xD;&#xA;&gt;                                    ; when reading from the input buffer&#xD;&#xA;&gt;                                    ; in direct mode&#xD;&#xA;&gt;     124 $7C   POINTB  CMP #$3A     ; carry flag set if &gt; ASCII numeral 9&#xD;&#xA;&gt;     126 $7E           BCS EXIT     ; character is not a numeral--exit&#xD;&#xA;&gt;     128 $80           CMP #$20     ; if it is an ASCII space...&#xD;&#xA;&gt;     130 $82           BEQ CHRGET   ; ignore it and get next character&#xD;&#xA;&gt;     132 $84           SEC          ; prepare to subtract&#xD;&#xA;&gt;     133 $85           SBC #$30     ; ASCII 0-9 are between 48-57 ($30-$39)&#xD;&#xA;&gt;     135 $87           SEC          ; prepare to subtract again&#xD;&#xA;&gt;     136 $88           SBC #$D0     ; if &lt; ASCII 0 (57, $39) then carry is set&#xD;&#xA;&gt;     138 $8A   EXIT    RTS          ; carry is clear only for numeral on return&#xD;&#xA;&gt; &#xD;&#xA;&gt; The Accumulator (`.A` register) holds the character that was read on&#xD;&#xA;&gt; exit from the routine.  Status register (`.P`) bits which can be tested&#xD;&#xA;&gt; for on exit are:&#xD;&#xA;&gt; &#xD;&#xA;&gt;   Carry Clear if the character was an ASCII digit 0-9.   Carry Set,&#xD;&#xA;&gt; otherwise. Zero Set only if the character was a statement terminator&#xD;&#xA;&gt; 0 or an ASCII colon, 58 (`$3A`). Otherwise, Zero Clear.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA; [1]: http://www.zimmers.net/anonftp/pub/cbm/firmware/computers/pet/d/rom-1.html#C6B5&#xD;&#xA; [2]: http://unusedino.de/ec64/technical/project64/mapping_c64.html" />
  <row Id="191" PostHistoryTypeId="16" PostId="92" RevisionGUID="78842d9c-2af3-4a25-9ea1-60035776fc31" CreationDate="2016-04-20T01:43:09.540" UserId="115" />
  <row Id="192" PostHistoryTypeId="2" PostId="93" RevisionGUID="aa9804da-3d6b-41e0-aaee-1fbb344b98fc" CreationDate="2016-04-20T01:44:30.243" UserId="-1" Text="" />
  <row Id="193" PostHistoryTypeId="2" PostId="94" RevisionGUID="7efe6432-c051-400e-a21d-c346367d2271" CreationDate="2016-04-20T01:44:30.243" UserId="-1" Text="" />
  <row Id="194" PostHistoryTypeId="5" PostId="90" RevisionGUID="88ab2b79-1803-4945-b90b-e2b9014110a0" CreationDate="2016-04-20T01:55:10.850" UserId="12" Comment="Added a chunk of info from the linked site." Text="They are _probably_ referring to a [spudger][1], though it's hard to tell. If it is intended to safely lever apart plastic parts that are held together with friction in such a way that a screwdriver would damage the case, then this is probably what it is.&#xD;&#xA;&#xD;&#xA;A number of different spudgers (sizes, stiffness, etc.) are handy tools for retrocomputing fans.&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;&#xD;&#xA;Actually, even if a spudger might work, it is probably not what was intended.  I found [this reference][2]:&#xD;&#xA;&#xD;&#xA;&gt;One of my pull-apart tools is simply a spring clamp marked &quot;Pony 3201 Made in USA&quot;. I bought a Mac opener kit from APS long ago. This Mac opener kit consisted of ... a pull-apart tool ... The jaws (closed) of the clamp measure 3/4 inch (19 mm) wide and 1/16 inch (1.6 mm) thick. Just insert the jaws and squeeze. You can find a similar tool at any hardware or hobbyist shop or Home Depot or Office Depot. Instead of the pull-apart tool, you can use a medium to long flat-blade screwdriver to open the computer's case.&#xD;&#xA;&#xD;&#xA;So, a spudger or screwdriver might work, but it looks like the &quot;case-cracker&quot; intended for this job is a spring clamp of some kind.&#xD;&#xA;&#xD;&#xA;  [1]: https://en.wikipedia.org/wiki/Spudger&#xD;&#xA;  [2]: http://www.jagshouse.com/classicrepair.html" />
  <row Id="195" PostHistoryTypeId="2" PostId="95" RevisionGUID="ec9ecd56-fcee-47fa-a6ea-e783a5fb9c1c" CreationDate="2016-04-20T04:24:49.517" UserId="123" Text="There are take apart guides a Google search away (including the official Apple Service Source one), but from what I can see, you remove the two front feet with a #2 Phillips screwdriver while the eMac is face down on an ESD mat, then use a 2.5mm hex screwdriver to remove the three large-headed screws around the access plate on the bottom, then the six screws around the screen end of the rear housing (two each top, left and right).&#xD;&#xA;&#xD;&#xA;Gently lift approx 5cm only so you can (gently) disconnect the power button. The rear housing should then be able to lift off completely. I highly recommend reviewing the take apart guides befor starting!&#xD;&#xA;&#xD;&#xA;I've not found instructions for removing the grill/vent from the rear housing, but at least you should be able to clean it when the rear housing is removed without fear of wrecking the internals.&#xD;&#xA;&#xD;&#xA;europlus" />
  <row Id="196" PostHistoryTypeId="2" PostId="96" RevisionGUID="e17f2381-9736-43c6-b4a3-321979d02090" CreationDate="2016-04-20T04:41:51.337" UserId="123" Text="My &quot;pull apart tool&quot; of choice for toaster Macs is a pair of hands, utilising gravity and friction!&#xD;&#xA;&#xD;&#xA;Place the Mac face down on a softish surface, top or bottom facing towards you. Remove the Torx screws (make sure you get them all!) and then place your hands almost on the sides of the Mac as if you're about to clap.&#xD;&#xA;&#xD;&#xA;Then, move your hands quickly towards each other to grip the rear casing and move them up immediately on touching the sides - you're not trying to lift the machine, but let gravity keep the main part of the machine down while your hands try to break the friction holding the rear casing to the front. You may need a few attempts. I find machines tend to be easier to open this way after they've already been opened, but I have been able to open previously unopened machines using this method.&#xD;&#xA;&#xD;&#xA;It takes some practice, but I've had good success with it. You might like to try on a dud machine to get the hang of it just in case your unpractised method lifts the whole machine too much. You won't damage the case as you would trying to use a screwdriver or ordinary spudger, and you won't have to look for the official tool or one that works as well.&#xD;&#xA;&#xD;&#xA;Good luck!&#xD;&#xA;&#xD;&#xA;europlus" />
  <row Id="197" PostHistoryTypeId="2" PostId="97" RevisionGUID="9bb105d6-0879-4732-993b-97f111335150" CreationDate="2016-04-20T06:28:43.543" UserId="129" Text="As I lnow, there is no register in the VIC-II, which would enable this.&#xD;&#xA;&#xD;&#xA;Despite that, in nearly all intros and in ßany cases even in old games, sprites on the border were visible. Actually, it was the only way to put meaningful pixel images to the border.&#xD;&#xA;&#xD;&#xA;How did it work?" />
  <row Id="198" PostHistoryTypeId="1" PostId="97" RevisionGUID="9bb105d6-0879-4732-993b-97f111335150" CreationDate="2016-04-20T06:28:43.543" UserId="129" Text="How to move sprites to the border on c64?" />
  <row Id="199" PostHistoryTypeId="3" PostId="97" RevisionGUID="9bb105d6-0879-4732-993b-97f111335150" CreationDate="2016-04-20T06:28:43.543" UserId="129" Text="&lt;commodore-64&gt;" />
  <row Id="200" PostHistoryTypeId="2" PostId="98" RevisionGUID="6e76f3a7-0448-4836-a86e-5ed1a54cc4ee" CreationDate="2016-04-20T06:37:33.467" UserId="129" Text="Although only 16 different colors were allowed on c64 (more exactly, in the VIC-II), which came from a fixed palette, the video output created analogous tv signal.&#xD;&#xA;&#xD;&#xA;Which means, somewhere in the final, D/A conversion phase of the vic signal generation, a palette should have existed, which defined the different rgb signal levels, indexed by the 4bit color code.&#xD;&#xA;&#xD;&#xA;What is known from it? How many analogous signal levels had it?&#xD;&#xA;&#xD;&#xA;(Btw, in this 16-color palette, there were 5 greyscale colors. Thus, the number of analogous signal levels should have been at least 5.)" />
  <row Id="201" PostHistoryTypeId="1" PostId="98" RevisionGUID="6e76f3a7-0448-4836-a86e-5ed1a54cc4ee" CreationDate="2016-04-20T06:37:33.467" UserId="129" Text="How many analogous rgb signal level had the VIC-II?" />
  <row Id="202" PostHistoryTypeId="3" PostId="98" RevisionGUID="6e76f3a7-0448-4836-a86e-5ed1a54cc4ee" CreationDate="2016-04-20T06:37:33.467" UserId="129" Text="&lt;c64&gt;" />
  <row Id="203" PostHistoryTypeId="2" PostId="99" RevisionGUID="775a6216-1faf-4f45-a9a4-8b2b87645a76" CreationDate="2016-04-20T06:48:50.093" UserId="132" Text="I just finished the Steve Jobs biography and I thought...&#xD;&#xA;&#xD;&#xA;&gt; Was the apple Lisa really the first commercially available Graphical interface?&#xD;&#xA;&#xD;&#xA;This is just out of interest but I'll be really interested to know!" />
  <row Id="204" PostHistoryTypeId="1" PostId="99" RevisionGUID="775a6216-1faf-4f45-a9a4-8b2b87645a76" CreationDate="2016-04-20T06:48:50.093" UserId="132" Text="Was there any commercially available graphical interfaces before the apple Lisa?" />
  <row Id="205" PostHistoryTypeId="3" PostId="99" RevisionGUID="775a6216-1faf-4f45-a9a4-8b2b87645a76" CreationDate="2016-04-20T06:48:50.093" UserId="132" Text="&lt;apple&gt;&lt;graphics&gt;&lt;apple-lisa&gt;" />
  <row Id="207" PostHistoryTypeId="2" PostId="100" RevisionGUID="c0ee3fd5-3869-4633-8d08-e3d746891986" CreationDate="2016-04-20T06:52:27.670" UserId="107" Text="I hate to quote Wikipedia as a source of truth, but I had a feeling that a Xerox product would take the claim, and it looks as though I was right.&#xD;&#xA;&#xD;&#xA;&gt; The Star workstation, officially known as the Xerox 8010 Information System, was the first commercial system to incorporate various technologies that have since become standard in personal computers, including a bitmapped display, a window-based graphical user interface, icons, folders, mouse (two-button), Ethernet networking, file servers, print servers and e-mail.&#xD;&#xA;&#xD;&#xA;The Xeros PARC (Palo Alto Research Center) is famously known as being the birthplace of bitmap displays and windowing GUIs, I just wasn't sure if it was commercialised before I looked it up. " />
  <row Id="208" PostHistoryTypeId="6" PostId="99" RevisionGUID="1a7cd7e0-529f-40c9-8394-87f9fdf49fc9" CreationDate="2016-04-20T07:09:09.270" UserId="132" Comment="edited tags" Text="&lt;apple&gt;&lt;graphics&gt;&lt;apple-lisa&gt;&lt;history&gt;" />
  <row Id="209" PostHistoryTypeId="2" PostId="101" RevisionGUID="a62d0c03-3fdf-45e8-9953-6a09953692dd" CreationDate="2016-04-20T07:13:19.960" UserId="-1" Text="" />
  <row Id="210" PostHistoryTypeId="2" PostId="102" RevisionGUID="7e2bdff8-e342-4a3e-bf5b-6b607db20685" CreationDate="2016-04-20T07:13:19.960" UserId="-1" Text="" />
  <row Id="211" PostHistoryTypeId="2" PostId="103" RevisionGUID="ef33bf4a-8324-4cdf-8bcf-0dceef4a750d" CreationDate="2016-04-20T07:22:33.493" UserId="4" Text="The VIC-II had no output levels (or, equivalently, it had 16 output levels).  Each color in the VIC-II's palette was mapped to a distinct Y/I/Q combination; the presence of five shades of grey just means that five of those combinations had an I and Q of 0." />
  <row Id="212" PostHistoryTypeId="2" PostId="104" RevisionGUID="cbb7a976-e5ed-48ad-adab-ed6dbb80b2e7" CreationDate="2016-04-20T07:50:00.810" UserId="74" Text="Around the end of the time of Amiga popularity, obtaining a replacement Amiga floppy drive was a nuisance, while PC drives were ubiquitous and cheap. One could install a PC drive in Amiga after applying a small, trivial hardware modification - a friend got one made as we waited, some 10 minutes of work or so.&#xD;&#xA;&#xD;&#xA;What is the modification? How to adapt a PC FDD for use with Amiga?" />
  <row Id="213" PostHistoryTypeId="1" PostId="104" RevisionGUID="cbb7a976-e5ed-48ad-adab-ed6dbb80b2e7" CreationDate="2016-04-20T07:50:00.810" UserId="74" Text="What modification is required from a PC floppy for use in Amiga?" />
  <row Id="214" PostHistoryTypeId="3" PostId="104" RevisionGUID="cbb7a976-e5ed-48ad-adab-ed6dbb80b2e7" CreationDate="2016-04-20T07:50:00.810" UserId="74" Text="&lt;amiga&gt;&lt;hardware-mods&gt;" />
  <row Id="215" PostHistoryTypeId="5" PostId="69" RevisionGUID="288cdffc-f94a-4d58-8806-a55db7306a38" CreationDate="2016-04-20T08:27:33.097" UserId="92" Comment="Add some preformat markup to the register name and value." Text="On a PAL Amiga, a full line sweep translates to about 454 virtual pixels. (64 µs duration of a horizontal line, 7.093790 MHz pixel clock =~ 140.968 ns per pixel: 64 µs / 140.968 ns =~ 454).&#xD;&#xA;&#xD;&#xA;I say virtual pixels because not all of those pixels are actually usable as there is the horizontal sync period of about 4 µs and the back porch of about 8 µs, leaving about 52 µs or about 369 pixels. In practice, the number of used pixels was even lower (so it would fit into the visible non-distorted area of the CRT) - usually 320 pixels.&#xD;&#xA;&#xD;&#xA;Therefore, the number of pixel-times where nothing is displayed is about 134. Copper lists allowed positioning (waiting) horizontally with 4 pixel granularity and a copper MOVE instruction took 8 pixels to complete. 134 / 8 are a little more than 16. So you can update about 14 to 16 color registers each line outside of the display data fetch when using copper lists.&#xD;&#xA;&#xD;&#xA;* See here for a detailed analysis of PAL video timings: http://martin.hinner.info/vga/pal.html&#xD;&#xA;* How the copper timing is performed: http://coppershade.org/articles/AMIGA/Agnus/Copper:_Exact_WAIT_Timing/&#xD;&#xA;&#xD;&#xA;So assuming we use 5 bitplanes (32 colors), we could use 16 colors for the background and prepare a copper list that changes those 16 colors (or most of them) each line, providing for a very colorful setting. The copper list could be prepared once when switching to a different scene and then not changed anymore while the scene is active, or it could be prepared once per frame during the vertical blanking area.&#xD;&#xA;&#xD;&#xA;We could then use the remaining 16 colors (which remain static) for blitting the animated character onto the background.&#xD;&#xA;&#xD;&#xA;Update:&#xD;&#xA;&#xD;&#xA;I checked the game for what it actually does and it pretty much matches:&#xD;&#xA;&#xD;&#xA;It loads `BPLCON0` with `$6200`, which means 6 bitplanes without HAM mode, i. e. EHB (Extra HalfBrite) mode (64 colors with 32 freely controllable palette entries and the remaining 32 colors roughly half as bright as the first 32), as you originally suggested.&#xD;&#xA;&#xD;&#xA;Apart from that it uses the technique I outlined above: In the Copper list it does a `WAIT $xxE1FFFC` for each raster line and then changes a couple of colors (about 2 to 8 per line) out of the first 16 (leaving index 0 alone - as a consequence it also affects color indices 33 to 47 of the EHB image) and doesn't touch color indices 16 to 31 (consequentially, indices 48 to 63 of the EHB image also remain static)." />
  <row Id="216" PostHistoryTypeId="2" PostId="105" RevisionGUID="ac78c111-7a30-488f-bc88-0d71b1a55470" CreationDate="2016-04-20T08:31:50.817" UserId="146" Text="I've got an old Nintendo Game Boy, with a number of games for it. The problem is that most of these games don't load any more, and I suspect that's an issue with the contacts either in the unit, or in the game card.&#xD;&#xA;&#xD;&#xA;Looking into the contacts on the game cards, a number of them have metal oxide marking on them, especially where the gold plating has worn away. The contacts on the Game Boy itself aren't faring much better.&#xD;&#xA;&#xD;&#xA;Is there anything I can or should do to rejuvenate the contacts so I can use it again?" />
  <row Id="217" PostHistoryTypeId="1" PostId="105" RevisionGUID="ac78c111-7a30-488f-bc88-0d71b1a55470" CreationDate="2016-04-20T08:31:50.817" UserId="146" Text="How can I rejuvenate Game Boy contacts?" />
  <row Id="218" PostHistoryTypeId="3" PostId="105" RevisionGUID="ac78c111-7a30-488f-bc88-0d71b1a55470" CreationDate="2016-04-20T08:31:50.817" UserId="146" Text="&lt;game-cartridge&gt;&lt;game-boy&gt;&lt;nintendo&gt;" />
  <row Id="220" PostHistoryTypeId="6" PostId="98" RevisionGUID="a1ca34d4-87af-4ca9-af5a-140f25ab3e04" CreationDate="2016-04-20T09:03:54.153" UserId="115" Comment="[commodore-64] tag already exists" Text="&lt;commodore-64&gt;" />
  <row Id="221" PostHistoryTypeId="24" PostId="98" RevisionGUID="a1ca34d4-87af-4ca9-af5a-140f25ab3e04" CreationDate="2016-04-20T09:03:54.153" Comment="Proposed by 115 approved by 129 edit id of 38" />
  <row Id="222" PostHistoryTypeId="2" PostId="106" RevisionGUID="5889beba-3eb1-4ad7-a99a-cafaca7c59de" CreationDate="2016-04-20T09:40:12.707" UserId="148" Text="Bitsavers has some PDFs of printouts of [tsExec1.4](http://bitsavers.trailing-edge.com/pdf/dec/pdp6/tsExec1.4/). Not sure if this is complete.&#xD;&#xA;&#xD;&#xA;There's a lot of PDP-10 software e.g. at [trailing-edge](http://pdp-10.trailing-edge.com/), I suppose at least some of that could be adapted to run on the PDP-6 (but you probably already thought of that).&#xD;&#xA;" />
  <row Id="223" PostHistoryTypeId="2" PostId="107" RevisionGUID="4b899d98-e403-451a-b06f-e3f89136b729" CreationDate="2016-04-20T09:54:03.903" UserId="89" Text="Depending on how bad the corrosion is, various techniques can work. First, just try plain old water (or better yet, isopropyl alcohol) and a cotton bud - on the cartridges *and* the Game Boy itself. Failing that, try the same technique with distilled (white) vinegar. If all else fails - **very** carefully rubbing with a fine-grit sandpaper can help to remove stubborn coatings.&#xD;&#xA;&#xD;&#xA;If the contacts aren't the problem, try some basic troubleshooting. Which cartridges don't work? Is it random, or always the same ones? If there's a pattern, then those cartridges are particularly suspect." />
  <row Id="225" PostHistoryTypeId="2" PostId="108" RevisionGUID="e42e05da-24b7-471b-81b4-ed7bc3d61e9f" CreationDate="2016-04-20T10:01:50.827" UserId="79" Text="The differences between PC floppy drives and Amiga floppy drives are as follows:&#xD;&#xA;&#xD;&#xA;* PC floppy drives normally answer to drive select 1 (DS1), internal Amiga drives answer to DS0&#xD;&#xA;* pin 34 on the connector is used for disk change on the PC, disk ready on the Amiga&#xD;&#xA;* pin 2 on the connector is used for high-density detection on the PC, disk change on the Amiga&#xD;&#xA;&#xD;&#xA;So modifying a PC drive so it works inside an Amiga involves :&#xD;&#xA;&#xD;&#xA;* switching the drive to DS0 (on some drives this is a jumper, but on most drives you'll need to desolder the DS1 pads and bridge the DS0 pads)&#xD;&#xA;* re-routing pins 2 and 34&#xD;&#xA;* grounding the HD detection signal&#xD;&#xA;&#xD;&#xA;You'll need a PC drive which exposes the disk ready signal somewhere on its PCB.&#xD;&#xA;&#xD;&#xA;There are many examples of this on Amiga forums; [here's one][1], [here's another][2]. Ian Stedman has an [add-on board][3] which can be used instead of modifying the drives; it synthesises the disk ready signal using a couple of other signals.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.amibay.com/showthread.php?18582-Modifying-PC-Floppy-Drive-for-Amiga-Use&#xD;&#xA;  [2]: http://eab.abime.net/showthread.php?t=30944&#xD;&#xA;  [3]: http://www.ianstedman.co.uk/Amiga/designs/Floppy_Adaptor_V2/floppy_adaptor_v2.html" />
  <row Id="226" PostHistoryTypeId="2" PostId="109" RevisionGUID="b6e8902a-bb57-4e8e-8867-6edd9f56659e" CreationDate="2016-04-20T10:47:29.887" UserId="-1" Text="" />
  <row Id="227" PostHistoryTypeId="2" PostId="110" RevisionGUID="3bb6816e-7fea-4a1f-953a-3cce8114d65d" CreationDate="2016-04-20T10:47:29.887" UserId="-1" Text="" />
  <row Id="228" PostHistoryTypeId="2" PostId="111" RevisionGUID="0ee81a63-01c7-46da-9046-bff78409c928" CreationDate="2016-04-20T10:48:37.580" UserId="-1" Text="" />
  <row Id="229" PostHistoryTypeId="2" PostId="112" RevisionGUID="3fc9d48e-1584-47ad-9ba9-7b4cf5424f49" CreationDate="2016-04-20T10:48:37.580" UserId="-1" Text="" />
  <row Id="230" PostHistoryTypeId="2" PostId="113" RevisionGUID="ec63629e-1b49-46ea-97f1-6c9a2d90cf09" CreationDate="2016-04-20T10:54:14.743" UserId="69" Text="I'm using Workbench 1.3 in Amiga 500.&#xD;&#xA;&#xD;&#xA;I managed to change the Spanish keyboard in &quot;SetMap&quot;, as shown in the following figure:&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;And I can write text with special spanish characters (ñ,ç,ó,á,...) from regular application like NotePad:&#xD;&#xA;&#xD;&#xA;[![enter image description here][2]][2]&#xD;&#xA;&#xD;&#xA;But when I try to use AmigaShell, keyboard layout is in USA key-map always, and its very difficult to write in Spanish Keyboard. &#xD;&#xA;&#xD;&#xA;How I could change Amiga Shell Key Layout to Spanish Key Layout?&#xD;&#xA;&#xD;&#xA;Thanks in advance.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/QwJQJ.png&#xD;&#xA;  [2]: http://i.stack.imgur.com/bfGjh.png" />
  <row Id="231" PostHistoryTypeId="1" PostId="113" RevisionGUID="ec63629e-1b49-46ea-97f1-6c9a2d90cf09" CreationDate="2016-04-20T10:54:14.743" UserId="69" Text="Change Amiga Shell keyboard layout in Workbench 1.3" />
  <row Id="232" PostHistoryTypeId="3" PostId="113" RevisionGUID="ec63629e-1b49-46ea-97f1-6c9a2d90cf09" CreationDate="2016-04-20T10:54:14.743" UserId="69" Text="&lt;amiga&gt;&lt;workbench1.3&gt;&lt;amigashell&gt;&lt;amiga500&gt;" />
  <row Id="233" PostHistoryTypeId="5" PostId="28" RevisionGUID="b822c770-94a2-4dab-a8dc-3fc593db5bca" CreationDate="2016-04-20T11:31:10.203" UserId="74" Comment="added 1066 characters in body" Text="The first hope is that this is merely the ribbon not sitting well in the socket - try to reseat it; check if a corner didn't fold up.&#xD;&#xA;&#xD;&#xA;If it's not the case, and you don't have a spare keyboard, you're in for a &quot;surgical&quot; fix. The paths on the ribbon are printed with a kind of carbon component, which is *brittle*. In particular the fold just above the connector is a place of frequent faults. Inspect it for cracks. If you see any, you will need to obtain a graphite paste, or some other substance used in electronics to fix broken paths through application like paste. Strip the outer layer of the foil with a fine knife (the paths are actually sandwiched between them even if they seem exposed, the foil is really thin), and fix the path with the paste. &#xD;&#xA;&#xD;&#xA;Then inspect the paths for any more cracks which might have appeared in the process of fixing that broken path...&#xD;&#xA;&#xD;&#xA;Then fix them too...&#xD;&#xA;&#xD;&#xA;Then assembly everything before the paste dries up completely, hoping for the best, because it's far more brittle than the paths themselves. Which also means you'll likely have to repeat the procedure every time you open the cover. With the number of broken paths likely climbing.&#xD;&#xA;&#xD;&#xA;A total pain in the neck, but works... kinda. It's really better to get a broken A600 and just replace the keyboard.&#xD;&#xA;&#xD;&#xA;Regardless, avoid bending the ribbon at the fold before the connector at all cost.&#xD;&#xA;&#xD;&#xA;EDIT:&#xD;&#xA;I recalled one more mode of failure - if the keyboard was plugged and unplugged relatively frequently, it's likely the carbon print has rubbed off right at where the socket pins connect. It should be visible when looking against a light (bulb etc) - the light will show through the pads.&#xD;&#xA;In this case the best option is to trim about a millimeter of the ribbon off the end - the pads extend quite a bit above the point of connection, so there's quite a bit of spare room, and the connection will be made with fresh, unscratched part of the pads. Just use either scisors or x-acto knife (or similar), to shorten the ribbon by about a millimeter. Take care not to let the knife slide over the paths/tracks of the part that's not discarded. &#xD;&#xA;&#xD;&#xA;&lt;sub&gt;I had to deal with that stuff way more often than I should have... I'd take the disk from my A600 to work, where I could mount it under Linux and point to its mount point with UAE, running emulated Amiga at work and getting stuff from the net to the disk, then in the evening reinstall it in my Amiga and make use of the goodies obtained. Of course the wear on the keyboard ribbon took its toll.&lt;/sub&gt;" />
  <row Id="234" PostHistoryTypeId="2" PostId="114" RevisionGUID="40de303e-22b5-479d-838f-949e60ea9c75" CreationDate="2016-04-20T12:07:25.917" UserId="79" Text="Memory beyond 48 KB on 8-bit Ataris is all based on bank-switching, since the 6502 processor only has 16 address lines. The CPU can address 64 KB total, and that has to include ROM and memory-mapped I/O (0xD000-0xD7FF) as well as RAM. PIA Port B, at address 0xD301, is used to swap parts of physical memory in and out of various banks, so different physical locations show up in the same address space:&#xD;&#xA;&#xD;&#xA;* bit 0 enables or disables the OS ROM, from 0xC000 to 0xCFFF and 0xD800 to 0xFFFF; disabling it gives back 14 KB of RAM&#xD;&#xA;* bit 1 enables or disables the BASIC ROM, from 0xA000 to 0xBFFF; disabling it gives back 8 KB of RAM&#xD;&#xA;* bits 2 and 3 provide bank selection on 130XEs (since they have 128 KB of RAM)&#xD;&#xA;* bits 4 and 5 control CPU/ANTIC access (the CPU and ANTIC can bank-switch independently, which makes sense since ANTIC has its own RAM ports)&#xD;&#xA;* bit 6 enables or disables the Missile Command ROM on XEs, at the same locations as the BASIC ROM&#xD;&#xA;* bit 7 enables or disables the self-test ROM, from 0x5000 to 0x57FF; disabling it gives back 2 KB of RAM&#xD;&#xA;&#xD;&#xA;Memory expansion modifications typically involve adding a bank-switching chip and memory chips, and use more bits for bank selection. There were many different memory expansions sold back when 8-bit Ataris were current, and there are still a few varieties available now — *e.g.* [the Ultimate 1MB][1] (which isn’t just a memory expansion). 4 MB is the maximum possible, using 256 16 KB banks (with 8 selection bits).&#xD;&#xA;&#xD;&#xA;“Standard” software doesn’t know about it, but there is some software which does; any software which could benefit from a 130XE would know how to use bank switching. (This is mostly games and demos though.) There were various switching standards, and some modern boards support different approaches; you’ll find mentions such as “RAMbo 320KB”, “CompyShop 576KB” and “RAMbo 1088KB”. Expansions end up being most useful as RAM disks.&#xD;&#xA;&#xD;&#xA;[Some expansions][2] include a replacement 16-bit CPU, the 65816, which has a default 6502-compatible mode but has 24 address lines and can be used to access up to 16MB of RAM.&#xD;&#xA;&#xD;&#xA;The [Atari 8-bit FAQ][3] section 6.11 covers memory expansion boards. [a8.fandal.cz][4] lists software which can use 130XE-style memory expansions.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://lotharek.pl/product.php?pid=67&#xD;&#xA;  [2]: http://atariage.com/forums/topic/249405-new-4mb-ram-expansion/&#xD;&#xA;  [3]: ftp://rtfm.mit.edu/pub/faqs/atari-8-bit/faq&#xD;&#xA;  [4]: http://a8.fandal.cz/search.php?search=130XE&amp;butt_details_x=x" />
  <row Id="236" PostHistoryTypeId="2" PostId="115" RevisionGUID="201accb6-7d98-4a1e-b985-631cc2ca656d" CreationDate="2016-04-20T13:19:23.667" UserId="92" Text="Alright, you seem to already have the correct keymap file in `DEVS:keymaps/`, as you seem to be able to use the Keymap in Workbench programs. That's good (otherwise you would have had to copy it from `&quot;Extras 1.3:Devs/keymaps&quot;` to `DEVS:keymaps/`).&#xD;&#xA;&#xD;&#xA;Now open your Workbench disk and start the `Shell`. In the Shell, type:&#xD;&#xA;&#xD;&#xA;    ed S:Startup-Sequence&#xD;&#xA;&#xD;&#xA;This will bring up a text editor showing the Amiga startup script (similar in vein to MS-DOS' autoexec.bat). In there look for a line similar to this:&#xD;&#xA;&#xD;&#xA;    SYS:System/SetMap usa1&#xD;&#xA;&#xD;&#xA;Change the `usa1` or whatever keymap it loads to `e`. Make very sure that you don't change anything else or you might have a hard time to fix it next time you try to boot Workbench. Now press **Esc**, which will bring you into command mode. You will see a lone `*` at the beginning of the bottom line of the editor after which you can enter commands. Type `x` and press the **Enter** key, which will save the changed file and exit the editor.&#xD;&#xA;&#xD;&#xA;Next time you boot up Workbench it should have changed the CLI and Shell keymap to Español.&#xD;&#xA;&#xD;&#xA;In case you don't find a line with `Setmap` in the `Startup-Sequence`, you will need to insert it there yourself. I would suggest somewhere before `LoadWB`. Press Enter to create a new empty line and put the following command there:&#xD;&#xA;&#xD;&#xA;    SYS:System/SetMap e&#xD;&#xA;&#xD;&#xA;Then perform the same saving as above (**Esc**, then `x`, then **Enter**) and reboot.&#xD;&#xA;" />
  <row Id="239" PostHistoryTypeId="5" PostId="97" RevisionGUID="518e22a3-a6d5-432e-9741-b23eb27983fb" CreationDate="2016-04-20T14:38:31.997" UserId="107" Comment="Fixed spelling which appears to have been caused by an incorrect keyboard map" Text="As far as I know, there is no register in the VIC-II, which would enable this.&#xD;&#xA;&#xD;&#xA;Despite that, in nearly all intros and in many cases even in old games, sprites on the border were visible. Actually, it was the only way to put meaningful pixel images to the border.&#xD;&#xA;&#xD;&#xA;How did it work?" />
  <row Id="240" PostHistoryTypeId="24" PostId="97" RevisionGUID="518e22a3-a6d5-432e-9741-b23eb27983fb" CreationDate="2016-04-20T14:38:31.997" Comment="Proposed by 107 approved by 47 edit id of 35" />
  <row Id="241" PostHistoryTypeId="5" PostId="41" RevisionGUID="4c0f502c-a739-4cd0-905b-1ee1b4dd108d" CreationDate="2016-04-20T14:42:07.703" UserId="37" Comment="added 42 characters in body" Text="For questions about products made by Apple" />
  <row Id="242" PostHistoryTypeId="24" PostId="41" RevisionGUID="4c0f502c-a739-4cd0-905b-1ee1b4dd108d" CreationDate="2016-04-20T14:42:07.703" Comment="Proposed by 37 approved by 47 edit id of 12" />
  <row Id="243" PostHistoryTypeId="5" PostId="76" RevisionGUID="e84b04e4-745c-43c6-8675-18b374689d6b" CreationDate="2016-04-20T14:42:15.907" UserId="107" Comment="Removed wikipedia footnote marker." Text="For all questions relating specifically to Apple's eMac computers which were available between 2002 and 2006." />
  <row Id="244" PostHistoryTypeId="24" PostId="76" RevisionGUID="e84b04e4-745c-43c6-8675-18b374689d6b" CreationDate="2016-04-20T14:42:15.907" Comment="Proposed by 107 approved by 47 edit id of 25" />
  <row Id="245" PostHistoryTypeId="5" PostId="72" RevisionGUID="8bedbea8-9b9d-490f-af8c-4ffbde3624b6" CreationDate="2016-04-20T14:42:23.580" UserId="56" Comment="added 65 characters in body" Text="Discussions of copy protection techniques used on retro software." />
  <row Id="246" PostHistoryTypeId="24" PostId="72" RevisionGUID="8bedbea8-9b9d-490f-af8c-4ffbde3624b6" CreationDate="2016-04-20T14:42:23.580" Comment="Proposed by 56 approved by 47 edit id of 22" />
  <row Id="247" PostHistoryTypeId="6" PostId="56" RevisionGUID="5c32c5de-1ded-40e8-b03a-feada3d36feb" CreationDate="2016-04-20T14:42:27.377" UserId="115" Comment="[commodore-64] tag already exists" Text="&lt;hardware&gt;&lt;software&gt;&lt;commodore-64&gt;&lt;video&gt;" />
  <row Id="248" PostHistoryTypeId="24" PostId="56" RevisionGUID="5c32c5de-1ded-40e8-b03a-feada3d36feb" CreationDate="2016-04-20T14:42:27.377" Comment="Proposed by 115 approved by 47 edit id of 39" />
  <row Id="249" PostHistoryTypeId="5" PostId="82" RevisionGUID="393c2101-2bec-44dd-8ff8-011a94fc5997" CreationDate="2016-04-20T14:43:00.067" UserId="107" Comment="added 98 characters in body" Text="This tag should be used for all questions related to use, restoration and imaging of floppy disks." />
  <row Id="250" PostHistoryTypeId="24" PostId="82" RevisionGUID="393c2101-2bec-44dd-8ff8-011a94fc5997" CreationDate="2016-04-20T14:43:00.067" Comment="Proposed by 107 approved by -1 edit id of 27" />
  <row Id="251" PostHistoryTypeId="5" PostId="82" RevisionGUID="24d9aacc-db20-4bba-bbf4-148b657368f7" CreationDate="2016-04-20T14:43:00.067" UserId="47" Comment="deleted 28 characters in body" Text="Questions related to the use, restoration and imaging of floppy disks." />
  <row Id="252" PostHistoryTypeId="5" PostId="81" RevisionGUID="fa265ffc-5cd4-4cc2-b48b-b07b3c56abb1" CreationDate="2016-04-20T14:43:04.393" UserId="107" Comment="added 181 characters in body" Text="Floppy disks are a magnetic storage medium that enjoyed great popularity in the 80s and 90s. Common physical sizes for disks were 8&quot;, 5.25&quot; and 3.5&quot; with varying storage capacities." />
  <row Id="253" PostHistoryTypeId="24" PostId="81" RevisionGUID="fa265ffc-5cd4-4cc2-b48b-b07b3c56abb1" CreationDate="2016-04-20T14:43:04.393" Comment="Proposed by 107 approved by 47 edit id of 29" />
  <row Id="254" PostHistoryTypeId="5" PostId="68" RevisionGUID="a2b8ccc3-7776-4cad-9b5c-0c197afb5598" CreationDate="2016-04-20T14:43:09.253" UserId="37" Comment="added 65 characters in body" Text="For questions about transferring data from one device to another " />
  <row Id="255" PostHistoryTypeId="24" PostId="68" RevisionGUID="a2b8ccc3-7776-4cad-9b5c-0c197afb5598" CreationDate="2016-04-20T14:43:09.253" Comment="Proposed by 37 approved by 47 edit id of 20" />
  <row Id="256" PostHistoryTypeId="5" PostId="96" RevisionGUID="d0470f69-93e2-4f00-b1b0-892866f2ec32" CreationDate="2016-04-20T14:44:09.633" UserId="133" Comment="Removed redundant signature" Text="My &quot;pull apart tool&quot; of choice for toaster Macs is a pair of hands, utilising gravity and friction!&#xD;&#xA;&#xD;&#xA;Place the Mac face down on a softish surface, top or bottom facing towards you. Remove the Torx screws (make sure you get them all!) and then place your hands almost on the sides of the Mac as if you're about to clap.&#xD;&#xA;&#xD;&#xA;Then, move your hands quickly towards each other to grip the rear casing and move them up immediately on touching the sides - you're not trying to lift the machine, but let gravity keep the main part of the machine down while your hands try to break the friction holding the rear casing to the front. You may need a few attempts. I find machines tend to be easier to open this way after they've already been opened, but I have been able to open previously unopened machines using this method.&#xD;&#xA;&#xD;&#xA;It takes some practice, but I've had good success with it. You might like to try on a dud machine to get the hang of it just in case your unpractised method lifts the whole machine too much. You won't damage the case as you would trying to use a screwdriver or ordinary spudger, and you won't have to look for the official tool or one that works as well.&#xD;&#xA;&#xD;&#xA;Good luck!" />
  <row Id="257" PostHistoryTypeId="24" PostId="96" RevisionGUID="d0470f69-93e2-4f00-b1b0-892866f2ec32" CreationDate="2016-04-20T14:44:09.633" Comment="Proposed by 133 approved by 47 edit id of 34" />
  <row Id="258" PostHistoryTypeId="5" PostId="49" RevisionGUID="2fe4be1e-2c6e-4113-b7c0-0d548eb91d67" CreationDate="2016-04-20T14:44:13.883" UserId="89" Comment="Created tag wiki (let me know if it's too &quot;historical&quot;, I will be glad to edit)." Text="The Apple II (or apple ][) is an 8-bit home computer series designed by Apple's Steve Wozniak and Steve Jobs. The series was introduced in 1977 and produced until 1993. It was Apple's first mass-market product, and extremely successful, with sales growing exponentially for the first 5 years. When first introduced, its colour support was noteworthy for such an inexpensive (at the time) computer.&#xD;&#xA;&#xD;&#xA;Software available for the Apple II includes games, BASIC and other interpreters, and a variety of business and practical programs, including VisiCalc, which introduced the idea of the &quot;spreadsheet&quot; to the microcomputing world.&#xD;&#xA;&#xD;&#xA;Peripherals include displays, tape and disk storage, modems, and a large variety of expansion cards, some of which contain additional processors to allow the Apple II to run software designed for architectures other than its own 6502." />
  <row Id="259" PostHistoryTypeId="24" PostId="49" RevisionGUID="2fe4be1e-2c6e-4113-b7c0-0d548eb91d67" CreationDate="2016-04-20T14:44:13.883" Comment="Proposed by 89 approved by 47 edit id of 17" />
  <row Id="260" PostHistoryTypeId="5" PostId="58" RevisionGUID="67e64221-f3d6-481c-8793-772bb5f68f05" CreationDate="2016-04-20T14:44:16.650" UserId="56" Comment="added 191 characters in body" Text="The Apple IIgs was released by Apple Computer in September 1986.  The fifth model in the Apple II line, it featured a 16-bit CPU and significantly enhanced graphic and sound capabilities.&#xD;&#xA;&#xD;&#xA;" />
  <row Id="261" PostHistoryTypeId="24" PostId="58" RevisionGUID="67e64221-f3d6-481c-8793-772bb5f68f05" CreationDate="2016-04-20T14:44:16.650" Comment="Proposed by 56 approved by 47 edit id of 18" />
  <row Id="262" PostHistoryTypeId="5" PostId="88" RevisionGUID="29507f56-46f2-4a9c-92b7-5b31fa444e2d" CreationDate="2016-04-20T14:44:28.120" UserId="56" Comment="added 79 characters in body" Text="This is for questions about disk contents that have been extracted into a file." />
  <row Id="263" PostHistoryTypeId="24" PostId="88" RevisionGUID="29507f56-46f2-4a9c-92b7-5b31fa444e2d" CreationDate="2016-04-20T14:44:28.120" Comment="Proposed by 56 approved by 47 edit id of 31" />
  <row Id="264" PostHistoryTypeId="5" PostId="112" RevisionGUID="1b1c5160-aa3c-4f8c-a219-d2be037fe049" CreationDate="2016-04-20T14:44:35.590" UserId="107" Comment="added 195 characters in body" Text="S-Video should be used for all questions relating to the S-Video standard, a video signal system that seperates chrominance and luma and thus provides a better quality image than composite video." />
  <row Id="265" PostHistoryTypeId="24" PostId="112" RevisionGUID="1b1c5160-aa3c-4f8c-a219-d2be037fe049" CreationDate="2016-04-20T14:44:35.590" Comment="Proposed by 107 approved by 47 edit id of 41" />
  <row Id="266" PostHistoryTypeId="6" PostId="4" RevisionGUID="1f73907b-b183-417e-8ae7-653c316d6696" CreationDate="2016-04-20T14:44:38.510" UserId="40" Comment="adding 'coco' as tag" Text="&lt;color-computer&gt;&lt;program-pak&gt;&lt;coco&gt;" />
  <row Id="267" PostHistoryTypeId="24" PostId="4" RevisionGUID="1f73907b-b183-417e-8ae7-653c316d6696" CreationDate="2016-04-20T14:44:38.510" Comment="Proposed by 40 approved by 47 edit id of 42" />
  <row Id="268" PostHistoryTypeId="5" PostId="46" RevisionGUID="bbb82dc7-b9ce-4d88-92c5-1e229f0585df" CreationDate="2016-04-20T14:44:44.340" UserId="89" Comment="added 95 characters in body" Text="For questions about different versions of, and products for, Atari consoles and home computers." />
  <row Id="269" PostHistoryTypeId="24" PostId="46" RevisionGUID="bbb82dc7-b9ce-4d88-92c5-1e229f0585df" CreationDate="2016-04-20T14:44:44.340" Comment="Proposed by 89 approved by 47 edit id of 13" />
  <row Id="270" PostHistoryTypeId="5" PostId="78" RevisionGUID="0c969e97-07a1-4fa4-961f-c5ac71a5010d" CreationDate="2016-04-20T14:45:14.437" UserId="107" Comment="added 129 characters in body" Text="Used to flag questions about the restoration of old machines: from cosmetic through to electronics such as capacitor replacement." />
  <row Id="271" PostHistoryTypeId="24" PostId="78" RevisionGUID="0c969e97-07a1-4fa4-961f-c5ac71a5010d" CreationDate="2016-04-20T14:45:14.437" Comment="Proposed by 107 approved by -1 edit id of 26" />
  <row Id="272" PostHistoryTypeId="5" PostId="78" RevisionGUID="4944a0e6-f4aa-475b-a9c0-b3ae739e5c34" CreationDate="2016-04-20T14:45:14.437" UserId="47" Comment="deleted 13 characters in body" Text="Questions about the restoration of old machines: from cosmetic through to electronics such as capacitor replacement." />
  <row Id="273" PostHistoryTypeId="5" PostId="50" RevisionGUID="b34dbf7e-4e32-414c-b49c-03d8bbf2f230" CreationDate="2016-04-20T14:45:25.593" UserId="89" Comment="Created tag wiki (let me know if it's too &quot;historical&quot;, I will be glad to edit)." Text="For questions about the Apple II series of personal computers, and related software and hardware." />
  <row Id="274" PostHistoryTypeId="24" PostId="50" RevisionGUID="b34dbf7e-4e32-414c-b49c-03d8bbf2f230" CreationDate="2016-04-20T14:45:25.593" Comment="Proposed by 89 approved by 47 edit id of 15" />
  <row Id="275" PostHistoryTypeId="5" PostId="75" RevisionGUID="33bf96d8-4195-4f3b-8334-e62455e326d1" CreationDate="2016-04-20T14:45:32.687" UserId="107" Comment="Removed wikipedia footnote marker." Text="The eMac, short for education Mac, is a Macintosh desktop computer made by Apple Inc. It was originally aimed at the education market, but was later made available as a cheaper mass market alternative to Apple's second-generation LCD display iMac G4. The eMac was pulled from retail on October 12, 2005 and was sold exclusively to educational institutions thereafter. It was discontinued by Apple on July 5, 2006 and replaced by a cheaper, low-end iMac that, like the eMac, was originally sold exclusively to educational institutions.&#xD;&#xA;&#xD;&#xA;The eMac design closely resembles the first-generation iMac. Compared to the first iMac, eMacs feature a PowerPC G4 processor that is significantly faster than the previous generation G3 processors, as well as a 17-inch flat CRT display. Unlike the iMac G3, however, the eMac is not meant to be portable as it weighs 50 lb (23 kg) and lacks a carrying handle.&#xD;&#xA;" />
  <row Id="276" PostHistoryTypeId="24" PostId="75" RevisionGUID="33bf96d8-4195-4f3b-8334-e62455e326d1" CreationDate="2016-04-20T14:45:32.687" Comment="Proposed by 107 approved by 47 edit id of 24" />
  <row Id="277" PostHistoryTypeId="5" PostId="71" RevisionGUID="208aa064-8435-415e-9fe4-d700ae2f1bce" CreationDate="2016-04-20T14:45:35.593" UserId="56" Comment="added 771 characters in body" Text="Two aspects of copy protection are relevant to retro-computing:&#xD;&#xA;&#xD;&#xA; 1. Preservation of old software.  Physical media decays, so getting a working copy of the software often requires defeating copy protection.&#xD;&#xA; 2. Insight into hardware.  Copy protection often takes advantage of edge cases and obscure knowledge, e.g. deliberately using a broken 6502 instruction to confuse people tracing through code.  Exploring specific examples can be very educational.&#xD;&#xA;&#xD;&#xA;These actions should not be used to violate copyright law.&#xD;&#xA;&#xD;&#xA;In the United States, the DMCA initially prevented research into copy protection techniques, but was later amended to allow research and circumvention for &quot;abandonware&quot; (cf. [wikipedia][1]).&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://en.wikipedia.org/wiki/Abandonware#DMCA" />
  <row Id="278" PostHistoryTypeId="24" PostId="71" RevisionGUID="208aa064-8435-415e-9fe4-d700ae2f1bce" CreationDate="2016-04-20T14:45:35.593" Comment="Proposed by 56 approved by 47 edit id of 21" />
  <row Id="279" PostHistoryTypeId="5" PostId="84" RevisionGUID="d2dfb6e2-2526-4110-a462-af0221c3e213" CreationDate="2016-04-20T14:46:44.833" UserId="107" Comment="added 69 characters in body" Text="This tag should be used for all questions related to Amiga computers." />
  <row Id="280" PostHistoryTypeId="24" PostId="84" RevisionGUID="d2dfb6e2-2526-4110-a462-af0221c3e213" CreationDate="2016-04-20T14:46:44.833" Comment="Proposed by 107 approved by -1 edit id of 28" />
  <row Id="281" PostHistoryTypeId="5" PostId="84" RevisionGUID="5d312c15-24fd-4fc8-b3d9-7a727690e34b" CreationDate="2016-04-20T14:46:44.833" UserId="47" Comment="added 5 characters in body" Text="For questions related to the Commodore Amiga family of personal computers." />
  <row Id="282" PostHistoryTypeId="5" PostId="48" RevisionGUID="0a81c6d2-a1ae-41e3-9085-c2bd31b2cebb" CreationDate="2016-04-20T14:46:59.630" UserId="89" Comment="added 111 characters in body" Text="For questions about processes and software for emulating retro computer and console hardware (e.g. MAME, QEMU)." />
  <row Id="283" PostHistoryTypeId="24" PostId="48" RevisionGUID="0a81c6d2-a1ae-41e3-9085-c2bd31b2cebb" CreationDate="2016-04-20T14:46:59.630" Comment="Proposed by 89 approved by 47 edit id of 14" />
  <row Id="284" PostHistoryTypeId="5" PostId="101" RevisionGUID="142abc46-673f-4d51-b0fd-7d3329aff78a" CreationDate="2016-04-20T14:49:59.910" UserId="132" Comment="added 149 characters in body" Text="Questions concerning the apple Lisa released on  January 19, 1983 and was the first commercially successful computer featuring a graphical interface." />
  <row Id="285" PostHistoryTypeId="24" PostId="101" RevisionGUID="142abc46-673f-4d51-b0fd-7d3329aff78a" CreationDate="2016-04-20T14:49:59.910" Comment="Proposed by 132 approved by -1 edit id of 36" />
  <row Id="286" PostHistoryTypeId="5" PostId="101" RevisionGUID="851804fe-7bac-4dd1-a3b5-b000fb06ef8b" CreationDate="2016-04-20T14:49:59.910" UserId="47" Comment="a bit too much extoling for an excerpt" Text="Questions about the Lisa personal computer introduced by Apple Computer Inc. on 19 January 1983." />
  <row Id="287" PostHistoryTypeId="5" PostId="94" RevisionGUID="51e3140a-8bf0-493e-9528-2e76d71cdb2a" CreationDate="2016-04-20T14:51:22.607" UserId="107" Comment="added 149 characters in body" Text="The 6502 tag should be used for all questions relating to the 6502 series of processors, both for hardware questions and assembly language questions." />
  <row Id="288" PostHistoryTypeId="24" PostId="94" RevisionGUID="51e3140a-8bf0-493e-9528-2e76d71cdb2a" CreationDate="2016-04-20T14:51:22.607" Comment="Proposed by 107 approved by -1 edit id of 33" />
  <row Id="289" PostHistoryTypeId="5" PostId="94" RevisionGUID="31f532aa-6704-494b-a950-a3a571906e79" CreationDate="2016-04-20T14:51:22.607" UserId="47" Comment="deleted 33 characters in body" Text="Questions relating to the 6502 series of processors by Motorola, including hardware and assembly language questions." />
  <row Id="290" PostHistoryTypeId="5" PostId="87" RevisionGUID="02505868-c107-453b-a699-194b92267032" CreationDate="2016-04-20T14:53:48.820" UserId="56" Comment="added 389 characters in body" Text="Disk images are files the hold block-by-block copies of physical media.  Sources include floppy disks, hard drives, and optical media.&#xD;&#xA;&#xD;&#xA;Some formats are &quot;raw&quot;, i.e. they contain nothing but the blocks from the source.  Others include headers with meta-data, and may compress the data to reduce space.&#xD;&#xA;&#xD;&#xA;In retrocomputing, disk images are frequently used in conjunction with emulators.&#xD;&#xA;" />
  <row Id="291" PostHistoryTypeId="24" PostId="87" RevisionGUID="02505868-c107-453b-a699-194b92267032" CreationDate="2016-04-20T14:53:48.820" Comment="Proposed by 56 approved by 47 edit id of 30" />
  <row Id="292" PostHistoryTypeId="5" PostId="59" RevisionGUID="cc5b2922-21aa-47a2-92b1-3ec54beff80b" CreationDate="2016-04-20T14:53:58.023" UserId="56" Comment="added 49 characters in body" Text="For questions related to the Apple IIgs computer." />
  <row Id="293" PostHistoryTypeId="24" PostId="59" RevisionGUID="cc5b2922-21aa-47a2-92b1-3ec54beff80b" CreationDate="2016-04-20T14:53:58.023" Comment="Proposed by 56 approved by 47 edit id of 19" />
  <row Id="296" PostHistoryTypeId="2" PostId="118" RevisionGUID="1841f262-a0eb-4e42-a914-93a13b24c67b" CreationDate="2016-04-20T16:11:35.703" UserId="177" Text="There was, at one time, a custom tool for this job called the &quot;Mac Cracker&quot; and Apple provided their own to dealers and authorized repair shops. &#xD;&#xA;&#xD;&#xA;http://www.tcocd.de/Pictures/Micro/Apple/mac_tool1_large.jpg&#xD;&#xA;&#xD;&#xA;In essence, what you need is a long handled Torx T15 driver and a spudger or similar tool to pry the halves of the case apart without damaging the plastic. There are other examples of &quot;case crackers&quot; that do the same thing, applying even pressure to force apart tower cases.&#xD;&#xA;&#xD;&#xA;http://www.pcmag.com/encyclopedia/term/39316/case-cracker&#xD;&#xA;&#xD;&#xA;Using a flat screwdriver to loosen the case is possible, but not advised. The small area over which the force is applied tends to crack or scar the case. You can often see signs of this kind of distress on used Macs. Best to use one the aforementioned tools, or just a couple of good whacks and gravity.&#xD;&#xA;" />
  <row Id="297" PostHistoryTypeId="2" PostId="119" RevisionGUID="d5aa4ecd-33bd-4189-8648-14d82b6205e5" CreationDate="2016-04-20T16:12:04.063" UserId="-1" Text="" />
  <row Id="298" PostHistoryTypeId="2" PostId="120" RevisionGUID="e6aede74-8dd3-4c3e-91f9-f787a5dad708" CreationDate="2016-04-20T16:12:04.063" UserId="-1" Text="" />
  <row Id="299" PostHistoryTypeId="2" PostId="121" RevisionGUID="948a8969-8114-4384-9922-4871b3eae415" CreationDate="2016-04-20T16:14:43.937" UserId="-1" Text="" />
  <row Id="300" PostHistoryTypeId="2" PostId="122" RevisionGUID="e56fa626-55ca-4773-8143-1e707d74fb11" CreationDate="2016-04-20T16:14:43.937" UserId="-1" Text="" />
  <row Id="301" PostHistoryTypeId="6" PostId="2" RevisionGUID="089a7ac6-cb62-42ea-8e8a-a57900886cc9" CreationDate="2016-04-20T16:15:47.750" UserId="13" Comment="added nintendo tag" Text="&lt;game-cartridge&gt;&lt;cleaning&gt;&lt;nintendo&gt;&lt;nes&gt;&lt;snes&gt;" />
  <row Id="302" PostHistoryTypeId="5" PostId="7" RevisionGUID="7094ca62-bee6-4ce0-ae00-99ae2ca65921" CreationDate="2016-04-20T16:33:33.130" UserId="12" Comment="Added info regarding cleaning cart circuits." Text="Cotton swabs and isopropyl (rubbing) alcohol should do the trick. Try to keep the alcohol from the plastics; use it sparingly.&#xD;&#xA;&#xD;&#xA;There is also fancy contact cleaner used in the electronics industry that works quite nice and is very stable. For example, &quot;CRC QD Contact Cleaner&quot;. Make sure you **don't** get the stuff used for lubricating potentiometers. We want the quick drying, stable stuff that doesn't leave a residue. This stuff is made for cleaning sensitive electronics and metal connectors. When in doubt, read the datasheet for the product. It'll say stuff like:&#xD;&#xA;&#xD;&#xA;&gt;Ideal for telephones, PCs, relays, **edge connectors**, tape heads, buss&#xD;&#xA;&gt;bars, circuits, contacts, printed circuit boards, switches and circuit&#xD;&#xA;&gt;breakers&#xD;&#xA;&#xD;&#xA;(Emphasis mine)&#xD;&#xA;&#xD;&#xA;This solution is also good for cleaning out really crufty carts, where the circuit board may be dirty enough to cause an electrical problem. In this case, you can either disassemble the cartridge and clean it gently with rubbing alcohol, or (if the cart is hard to split without breaking it) you can use the contact cleaner to spray inside the cart, letting the liquid run and &quot;boil&quot; (it has a very low boiling point, which is why it works as it does) clear out the cracks in the cart.&#xD;&#xA;&#xD;&#xA;However, unless you really have to, you probably **don't** need to clean out the inside of the carts. Maybe if they have been moldering in basement for years and you want to get rid of unsightly splotches or visible dirt. Electrically, everything inside the cart has a good connection (or did at the factory) and cleaning will not help improve that. But, as I say earlier, if cruft is causing what might be an electrical short, causing dodgy behaviour, cleaning the circuit board carefully with the right stuff is fine.&#xD;&#xA;&#xD;&#xA;Bonus: Good for cleaning keyboards, too. Especially older chiclet style keyboards.&#xD;&#xA;&#xD;&#xA;It should be ok for paper labels, etc. to be wetted with contact cleaner, but try not to soak it.&#xD;&#xA;&#xD;&#xA;_Don't_ use a rubber eraser. This eventually removes the gold or copper cladding on the contact fingers. In a shop I worked at, you'd be read the riot act if you rubbed contacts with _anything_. And I'll have to disagree with anyone who suggests that paste metal cleaners from the store are useful for anything but the grungiest, filthiest carts, and even then I wouldn't recommend it. These compounds often have gritty lapping material in them, which is all sorts of bad.&#xD;&#xA;&#xD;&#xA;And, yes: moist air from your mouth is not great for metals. I understand that blowing into the cart is part of our learned wisdom for getting these things to work, but it's really selection bias at work." />
  <row Id="303" PostHistoryTypeId="5" PostId="2" RevisionGUID="be83027f-e7cb-43c2-9ffb-2f7cf3673f7d" CreationDate="2016-04-20T16:33:57.177" UserId="13" Comment="reworded the question" Text="I used to blow the dust out of the cartridges but I heard that wasn't good. &#xD;&#xA;&#xD;&#xA;I am looking for the *proper way* to clean old Nintendo game cartridges (such as NES and SNES). &#xD;&#xA;&#xD;&#xA;Is cleaning the edge contacts sufficient or is it necessary to open the cartridge and do anything inside?" />
  <row Id="305" PostHistoryTypeId="5" PostId="7" RevisionGUID="68c0b807-3c12-4b15-9181-6d3b61c22bab" CreationDate="2016-04-20T16:39:54.227" UserId="12" Comment="edited body" Text="Cotton swabs and isopropyl (rubbing) alcohol should do the trick. Try to keep the alcohol from the plastics; use it sparingly.&#xD;&#xA;&#xD;&#xA;There is also fancy contact cleaner used in the electronics industry that works quite nice and is very stable. For example, &quot;CRC QD Contact Cleaner&quot;. Make sure you **don't** get the stuff used for lubricating potentiometers. We want the quick drying, stable stuff that doesn't leave a residue. This stuff is made for cleaning sensitive electronics and metal connectors. When in doubt, read the datasheet for the product. It'll say stuff like:&#xD;&#xA;&#xD;&#xA;&gt;Ideal for telephones, PCs, relays, **edge connectors**, tape heads, buss&#xD;&#xA;&gt;bars, circuits, contacts, printed circuit boards, switches and circuit&#xD;&#xA;&gt;breakers&#xD;&#xA;&#xD;&#xA;(Emphasis mine)&#xD;&#xA;&#xD;&#xA;This solution is also good for cleaning out really crufty carts, where the circuit board may be dirty enough to cause an electrical problem. In this case, you can either disassemble the cartridge and clean it gently with rubbing alcohol, or (if the cart is hard to split without breaking it) you can use the contact cleaner to spray inside the cart, letting the liquid run and &quot;boil&quot; (it has a very low boiling point, which is why it works as it does) clear out the cracks in the cart.&#xD;&#xA;&#xD;&#xA;Bonus: Good for cleaning keyboards, too. Especially older chiclet style keyboards.&#xD;&#xA;&#xD;&#xA;It should be ok for paper labels, etc. to be wetted with contact cleaner, but try not to soak it.&#xD;&#xA;&#xD;&#xA;However, unless you really have to, you probably **don't** need to clean out the inside of the carts. Maybe if they have been moldering in basement for years and you want to get rid of unsightly splotches or visible dirt. Electrically, everything inside the cart has a good connection (or did at the factory) and cleaning will not help improve that. But, as I say earlier, if cruft is causing what might be an electrical short, causing dodgy behaviour, cleaning the circuit board carefully with the right stuff is fine.&#xD;&#xA;&#xD;&#xA;_Don't_ use a rubber eraser. This eventually removes the gold or copper cladding on the contact fingers. In a shop I worked at, you'd be read the riot act if you rubbed contacts with _anything_. And I'll have to disagree with anyone who suggests that paste metal cleaners from the store are useful for anything but the grungiest, filthiest carts, and even then I wouldn't recommend it. These compounds often have gritty lapping material in them, which is all sorts of bad.&#xD;&#xA;&#xD;&#xA;I've also seen people recommend _sandpaper_ for stubborn oxide. This would be a mistake, and should not even be considered a last resort. Under few circumstances would oxide be so crufty that it needs grit to remove (and grit causes scratches, which _encourages_ and promotes further harder to handle oxide). If your carts are this fouled, you are already into Retrounaut Archeology, in which case you are sort of on your own. The rest of us should stick with non-destructive or minimally destructive techniques. &#xD;&#xA;&#xD;&#xA;And, yes: moist air from your mouth is not great for metals. I understand that blowing into the cart is part of our learned wisdom for getting these things to work, but it's really selection bias at work." />
  <row Id="306" PostHistoryTypeId="5" PostId="7" RevisionGUID="6d376859-8909-4d35-8b6e-395d126b182a" CreationDate="2016-04-20T16:49:59.903" UserId="12" Comment="WHY I SAY STUFF SO MUCH?" Text="Cotton swabs and isopropyl (rubbing) alcohol should do the trick. Try to keep the alcohol from the plastics; use it sparingly.&#xD;&#xA;&#xD;&#xA;There is also fancy contact cleaner used in the electronics industry that works quite nice and is very stable. For example, &quot;CRC QD Contact Cleaner&quot;. Make sure you **don't** get the type used for lubricating potentiometers. We want the quick drying, stable variety that doesn't leave a residue. This stuff is made for cleaning sensitive electronics and metal connectors. When in doubt, read the datasheet for the product. It'll say things like:&#xD;&#xA;&#xD;&#xA;&gt;Ideal for telephones, PCs, relays, **edge connectors**, tape heads, buss&#xD;&#xA;&gt;bars, circuits, contacts, printed circuit boards, switches and circuit&#xD;&#xA;&gt;breakers&#xD;&#xA;&#xD;&#xA;(Emphasis mine)&#xD;&#xA;&#xD;&#xA;This solution is also good for cleaning out really crufty carts, where the circuit board may be dirty enough to cause an electrical problem. In this case, you can either disassemble the cartridge and clean it gently with rubbing alcohol, or (if the cart is hard to split without breaking it) you can use the contact cleaner to spray inside the cart, letting the liquid run and &quot;boil&quot; (it has a very low boiling point, which is why it works as it does) clear out the cracks in the cart.&#xD;&#xA;&#xD;&#xA;Bonus: Good for cleaning keyboards, too. Especially older chiclet style keyboards.&#xD;&#xA;&#xD;&#xA;It should be ok for paper labels, etc. to be wetted with contact cleaner, but try not to soak it.&#xD;&#xA;&#xD;&#xA;However, unless you really have to, you probably **don't** need to clean out the inside of the carts. Maybe if they have been moldering in basement for years and you want to get rid of unsightly splotches or visible dirt. Electrically, everything inside the cart has a good connection (or did at the factory) and cleaning will not help improve that. But, as I say earlier, if cruft is causing what might be an electrical short, causing dodgy behaviour, cleaning the circuit board carefully with the right stuff is fine.&#xD;&#xA;&#xD;&#xA;_Don't_ use a rubber eraser. This eventually removes the gold or copper cladding on the contact fingers. In a shop I worked at, you'd be read the riot act if you rubbed contacts with _anything_. And I'll have to disagree with anyone who suggests that paste metal cleaners from the store are useful for anything but the grungiest, filthiest carts, and even then I wouldn't recommend it. These compounds often have gritty lapping material in them, which is all sorts of bad.&#xD;&#xA;&#xD;&#xA;I've also seen people recommend _sandpaper_ for stubborn oxide. This would be a mistake, and should not even be considered a last resort. Under few circumstances would oxide be so crufty that it needs grit to remove (and grit causes scratches, which _encourages_ and promotes further harder to handle oxide). If your carts are this fouled, you are already into Retrounaut Archeology, in which case you are sort of on your own. The rest of us should stick with non-destructive or minimally destructive techniques. &#xD;&#xA;&#xD;&#xA;And, yes: moist air from your mouth is not great for metals. I understand that blowing into the cart is part of our learned wisdom for getting these things to work, but it's really selection bias at work." />
  <row Id="307" PostHistoryTypeId="2" PostId="123" RevisionGUID="e5663310-4242-4f90-ac1a-2927da0fedc6" CreationDate="2016-04-20T16:55:03.693" UserId="55" Text="I have an old programmable Sharp calculator ([Sharp EL-9000 SUPER SCIENTIFIC](http://www.calculator.org/Pages/calculator.aspx?model=EL-9000&amp;make=Sharp)) which I used extensively back in the day. I would like to dump all the software I wrote, and be able to share it.&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;I vaguely remember its manual mentioning the existence of a serial cable, but I long lost the book. &#xD;&#xA;&#xD;&#xA;Is there an existing toolkit to do back up the software? Is there some specific format or site where I can upload my code to share it, or should I just use GitHub?&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/Heh72.jpg" />
  <row Id="308" PostHistoryTypeId="1" PostId="123" RevisionGUID="e5663310-4242-4f90-ac1a-2927da0fedc6" CreationDate="2016-04-20T16:55:03.693" UserId="55" Text="Dumping and sharing software for old Sharp calculator" />
  <row Id="309" PostHistoryTypeId="3" PostId="123" RevisionGUID="e5663310-4242-4f90-ac1a-2927da0fedc6" CreationDate="2016-04-20T16:55:03.693" UserId="55" Text="&lt;hardware&gt;&lt;sharp-el9000&gt;&lt;dump&gt;" />
  <row Id="310" PostHistoryTypeId="4" PostId="2" RevisionGUID="f808442c-317c-4fbf-87b9-e295e4567683" CreationDate="2016-04-20T17:01:46.747" UserId="12" Comment="Make sure &quot;cleaning&quot; is in the title, and that this applies to other types of carts." Text="Reconditioning and cleaning old Nintendo (and other) game cartridges" />
  <row Id="311" PostHistoryTypeId="24" PostId="2" RevisionGUID="f808442c-317c-4fbf-87b9-e295e4567683" CreationDate="2016-04-20T17:01:46.747" Comment="Proposed by 12 approved by 13 edit id of 46" />
  <row Id="312" PostHistoryTypeId="2" PostId="124" RevisionGUID="fd0666b1-e312-49b8-80c6-5878990bdb5d" CreationDate="2016-04-20T17:07:09.800" UserId="128" Text="I have a Nintendo GameBoy Color with some games that support saving your game status and also have a real-time clock, like Pokémon Red and Pokémon Silver.&#xD;&#xA;&#xD;&#xA;But recently the game does not save any more, the saved position is reset. Also the real-time clock stopped and time only goes one while the game is running instead of 24/7.&#xD;&#xA;&#xD;&#xA;How do such old Nintendo GameBoy games store savegames, what could cause this sudden failure and how could I fix this?" />
  <row Id="313" PostHistoryTypeId="1" PostId="124" RevisionGUID="fd0666b1-e312-49b8-80c6-5878990bdb5d" CreationDate="2016-04-20T17:07:09.800" UserId="128" Text="GameBoy Color games do not save any more" />
  <row Id="314" PostHistoryTypeId="3" PostId="124" RevisionGUID="fd0666b1-e312-49b8-80c6-5878990bdb5d" CreationDate="2016-04-20T17:07:09.800" UserId="128" Text="&lt;nintendo&gt;&lt;storage&gt;" />
  <row Id="315" PostHistoryTypeId="2" PostId="125" RevisionGUID="dd30342a-c2ad-409b-8cb2-3eb42f445b93" CreationDate="2016-04-20T17:10:00.337" UserId="181" Text="In addition to the previous:&#xD;&#xA;&#xD;&#xA;This routine with entries CHRGET and CHRGOT is not only part of the interpreter loop, it used in every statement and function which has to &quot;parse&quot; further data from the BASIC text (program), e.g. for parameters.&#xD;&#xA;On some occasions the pointer TXTPTR will be stacked, typically while executing a DEFFN'd function.&#xD;&#xA;&#xD;&#xA;Especially on older versions of CBM BASIC (which PET uses) this routine is the place to extent (patch) the interpreter for additional commands (only with newer BASIC versions hooks where introduced to do it in a nicer way).&#xD;&#xA;&#xD;&#xA;Regarding the placement of the routine in zero page: Even it uses self-modifying code, the TXTPTR refers the LDA parameter, I don't think the speed issue was the cause for this. Maybe they wanted to keep the Y register untouched. Comparing to BASIC 7.0 on a C128 this routine is moved out of page 0 and contains additional bank switching stuff. On the other hand you may count on having Y=0 after a call to this routine which may be valuable, too." />
  <row Id="316" PostHistoryTypeId="2" PostId="126" RevisionGUID="274f05e4-42ec-437e-a03f-dc9a6c01a10c" CreationDate="2016-04-20T17:13:58.743" UserId="180" Text="Gameboy games use a CR2025 battery which over the years eventually dies stopping games from saving and causing previously saved games to disappear. Note however while the game is powered you can still save, however once you power down the save will be gone.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;In order to replace the battery you must open up the cartridge with a 3.8mm screwdriver security bit. A common method on replacing the battery is to use an adhesive (preferably) electrical tape.&#xD;&#xA;&#xD;&#xA;[![enter image description here][2]][2]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/ptZWJ.jpg&#xD;&#xA;  [2]: http://i.stack.imgur.com/dqZR5.jpg" />
  <row Id="317" PostHistoryTypeId="8" PostId="8" RevisionGUID="2b51c15b-6869-49e8-895f-d2b533a5ed5b" CreationDate="2016-04-20T17:17:02.387" UserId="37" Comment="Rollback to [75767fad-6f6f-4ea6-bfa4-2c7e33ab7fbe]" Text="I have also found a nice [ZX Spectrum][1] laying around. It needs a power source of course to run but there seems to be none that can be used to power it. Google doesn't seem to help and I would love to be able to use a machine that can be used...&#xD;&#xA;&#xD;&#xA;Is there a modern power source that can be used to power up my ZX Spectrum?&#xD;&#xA;&#xD;&#xA;   [1]:https://en.wikipedia.org/wiki/ZX_Spectrum" />
  <row Id="318" PostHistoryTypeId="5" PostId="126" RevisionGUID="8abafa21-93cd-4d68-aa30-d544ea820a7a" CreationDate="2016-04-20T17:21:07.217" UserId="180" Comment="added 267 characters in body" Text="Gameboy games use a CR2025 battery which over the years eventually dies stopping games from saving and causing previously saved games to disappear. Note however while the game is powered you can still save, however once you power down the save will be gone.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;[![Original battery][1]][1]&#xD;&#xA;&#xD;&#xA;In order to replace the battery you must open up the cartridge with a 3.8mm screwdriver security bit. A common method on replacing the battery is to use an adhesive (preferably) electrical tape.&#xD;&#xA;&#xD;&#xA;[![Replaced Battery][2]][2]&#xD;&#xA;&#xD;&#xA;Once replaced you can continue to save games again, however down the road in 10-20 years you will have to replace the battery again.&#xD;&#xA;&#xD;&#xA;To avoid losing your saves forever there are [some great resources](http://stayornay.com/tech/?p=295) on actually transferring your existing saves to your PC.&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/ptZWJ.jpg&#xD;&#xA;  [2]: http://i.stack.imgur.com/dqZR5.jpg" />
  <row Id="319" PostHistoryTypeId="2" PostId="127" RevisionGUID="374eb95d-edd2-46b0-945d-009cc0e8b8d8" CreationDate="2016-04-20T17:22:35.153" UserId="37" Text="Gameboy games use CR2025 battery, which will die and [take all the data][1] with it:&#xD;&#xA;&#xD;&#xA;&gt; It's lost for good. Saved games back in those days were preserved through the use of a battery right in the game pack, not stored on the gaming device itself like it is today. And when that battery dies, so does the saves with it. It's not about corruption of the save or whatnot, there just simply isn't a charge to hold that save data between sessions.&#xD;&#xA;&#xD;&#xA;So you will need to get a new battery to keep on playing but your previous saved data is lost forever, as it is gone when the life of the battery is gone. You can replace the battery using the instructions of this [site][2] then your Gameboy should be properly working brand-new... literally.&#xD;&#xA;&#xD;&#xA;But you can also try this [site][3] to store the data and prevent from being lost due to battery death.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;   [1]:http://gaming.stackexchange.com/a/178589/100298&#xD;&#xA;   [2]:http://www.instructables.com/id/How-to-Change-Game-Boy-Cartridge-Battery/&#xD;&#xA;   [3]:http://stayornay.com/tech/?p=295" />
  <row Id="320" PostHistoryTypeId="5" PostId="126" RevisionGUID="b8e71c72-82bb-422e-a151-802b90025095" CreationDate="2016-04-20T17:22:55.350" UserId="180" Comment="added 267 characters in body" Text="Gameboy games use a CR2025 battery which over the years eventually dies stopping games from saving and causing previously saved games to disappear. Note however while the game is powered you can still save, however once you power down the save will be gone.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;[![Original battery][1]][1]&#xD;&#xA;&#xD;&#xA;In order to replace the battery you must open up the cartridge with a 3.8mm screwdriver security bit. Next you have to carefully pry the connectors loose from the existing battery since the original battery is actually soldered to the connectors. A common method on replacing the battery is to use an adhesive (preferably) electrical tape to hold the new battery in place. It's important to note you do *not* want to remove or break the current connectors, if you do so you will need to buy a complete kit which requires you to solder new connectors in place.&#xD;&#xA;&#xD;&#xA;[![Replaced Battery][2]][2]&#xD;&#xA;&#xD;&#xA;Once replaced you can continue to save games again, however down the road in 10-20 years you will have to replace the battery again.&#xD;&#xA;&#xD;&#xA;To avoid losing your saves forever there are [some great resources](http://stayornay.com/tech/?p=295) on actually transferring your existing saves to your PC.&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/ptZWJ.jpg&#xD;&#xA;  [2]: http://i.stack.imgur.com/dqZR5.jpg" />
  <row Id="323" PostHistoryTypeId="5" PostId="7" RevisionGUID="cf699fbe-7808-44b2-bbb0-16b600d38061" CreationDate="2016-04-20T17:40:21.693" UserId="12" Comment="added 239 characters in body" Text="Cotton swabs and isopropyl (rubbing) alcohol should do the trick. Try to keep the alcohol from the plastics; use it sparingly.&#xD;&#xA;&#xD;&#xA;There is also fancy contact cleaner used in the electronics industry that works quite nice and is very stable. For example, &quot;CRC QD Contact Cleaner&quot;. Make sure you **don't** get the type used for lubricating potentiometers. We want the quick drying, stable variety that doesn't leave a residue. This stuff is made for cleaning sensitive electronics and metal connectors. When in doubt, read the datasheet for the product. It'll say things like:&#xD;&#xA;&#xD;&#xA;&gt;Ideal for telephones, PCs, relays, **edge connectors**, tape heads, buss&#xD;&#xA;&gt;bars, circuits, contacts, printed circuit boards, switches and circuit&#xD;&#xA;&gt;breakers&#xD;&#xA;&#xD;&#xA;(Emphasis mine)&#xD;&#xA;&#xD;&#xA;This solution is also good for cleaning out really crufty carts, where the circuit board may be dirty enough to cause an electrical problem. In this case, you can either disassemble the cartridge and clean it gently with rubbing alcohol, or (if the cart is hard to split without breaking it) you can use the contact cleaner to spray inside the cart, letting the liquid run and &quot;boil&quot; (it has a very low boiling point, which is why it works as it does) clear out the cracks in the cart.&#xD;&#xA;&#xD;&#xA;Bonus: Good for cleaning keyboards, too. Especially older chiclet style keyboards.&#xD;&#xA;&#xD;&#xA;It should be ok for paper labels, etc. to be wetted with contact cleaner, but try not to soak it.&#xD;&#xA;&#xD;&#xA;However, unless you really have to, you probably **don't** need to clean out the inside of the carts. Maybe if they have been moldering in basement for years and you want to get rid of unsightly splotches or visible dirt. Electrically, everything inside the cart has a good connection (or did at the factory) and cleaning will not help improve that. But, as I say earlier, if cruft is causing what might be an electrical short, causing dodgy behaviour, cleaning the circuit board carefully with the right stuff is fine.&#xD;&#xA;&#xD;&#xA;The outsides of the cartridges should be treated the same way they told you in the original packaging material: at most use a damp cloth with regular water (and _maybe_ a little vinegar if you want to freshen them up) and allow to dry.&#xD;&#xA;&#xD;&#xA;_Don't_ use a rubber eraser. This eventually removes the gold or copper cladding on the contact fingers. In a shop I worked at, you'd be read the riot act if you rubbed contacts with _anything_. And I'll have to disagree with anyone who suggests that paste metal cleaners from the store are useful for anything but the grungiest, filthiest carts, and even then I wouldn't recommend it. These compounds often have gritty lapping material in them, which is all sorts of bad.&#xD;&#xA;&#xD;&#xA;I've also seen people recommend _sandpaper_ for stubborn oxide. This would be a mistake, and should not even be considered a last resort. Under few circumstances would oxide be so crufty that it needs grit to remove (and grit causes scratches, which _encourages_ and promotes further harder to handle oxide). If your carts are this fouled, you are already into Retrounaut Archeology, in which case you are sort of on your own. The rest of us should stick with non-destructive or minimally destructive techniques. &#xD;&#xA;&#xD;&#xA;And, yes: moist air from your mouth is not great for metals. I understand that blowing into the cart is part of our learned wisdom for getting these things to work, but it's really selection bias at work." />
  <row Id="324" PostHistoryTypeId="2" PostId="128" RevisionGUID="41a7ab5b-c6fe-445f-b965-670795b3c9dd" CreationDate="2016-04-20T17:45:28.477" UserId="37" Text="You need an assembler to do this trick. This is an interrupt timing trick with some behind-the-scenes coding. The frame allows sprites to sneak towards the edge without the device stopping them. They are connected to scan lines displayed by the device. Of course, for top and bottom, it is easier to make this happen as you only need to interrupt once and only need one scan line per sprite.&#xD;&#xA;&#xD;&#xA;&gt;  * Programm an interrupt, synced to start at a certain scan line, 7 pixel or sth like that before the lower border.&#xD;&#xA; * Set the register in VIC to make the border smaller. (There is a register that can do that.)&#xD;&#xA; * VIC now believes that the border already started and does not start to paint it.&#xD;&#xA; * -&gt; No border at the bottom.&#xD;&#xA; * Programm another interrupt after the real border to set it back to original.&#xD;&#xA;&#xD;&#xA;But for left and right borders, you have to make sure you repeat the process (the interruptions) per scan line:&#xD;&#xA;&#xD;&#xA;&gt;  * Programm an interrupt, synced to start at a certain scan line.&#xD;&#xA; * Then do some NOPs until you are 7 pixel before the right border.&#xD;&#xA; * Set the register in VIC to make the border smaller. &#xD;&#xA; * -&gt; No border at the right side.&#xD;&#xA; * Do some NOPs until you are after the real border and set the register back to original value.&#xD;&#xA; * Again do some NOPs until step 2.&#xD;&#xA;&#xD;&#xA;This answer is based on this [StackOverflow answer][1] and the code (plus more information) is shown in the linked answer.&#xD;&#xA;&#xD;&#xA;   [1]:http://stackoverflow.com/a/1477560/4052384" />
  <row Id="325" PostHistoryTypeId="2" PostId="129" RevisionGUID="2f63cdc6-fd38-4305-a5fa-21dcc1a1ac4a" CreationDate="2016-04-20T17:57:13.483" UserId="-1" Text="" />
  <row Id="326" PostHistoryTypeId="2" PostId="130" RevisionGUID="5f0b2188-e4af-4db7-8935-1b43aaad4f79" CreationDate="2016-04-20T17:57:13.483" UserId="-1" Text="" />
  <row Id="327" PostHistoryTypeId="2" PostId="131" RevisionGUID="3b28ce0d-1ad5-4b78-a72b-39cfdd4ca312" CreationDate="2016-04-20T17:58:07.390" UserId="-1" Text="" />
  <row Id="328" PostHistoryTypeId="2" PostId="132" RevisionGUID="1a1c47fd-0e00-4cdd-9696-64a6509f0e41" CreationDate="2016-04-20T17:58:07.390" UserId="-1" Text="" />
  <row Id="329" PostHistoryTypeId="5" PostId="65" RevisionGUID="9f835487-d223-4c41-bc29-5cd90cf5cfb4" CreationDate="2016-04-20T17:58:11.543" UserId="105" Comment="added 5730 characters in body" Text="I did such interface long time ago. It was(is) an internal interface designed to fit in a place near the right side of the board when using the Plus case.&#xD;&#xA;&#xD;&#xA;Technical details here:&#xD;&#xA;http://www.zxprojects.com/index.php/ps2-adapter&#xD;&#xA;&#xD;&#xA;This is the board&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;Designed to fit here:&#xD;&#xA;[![enter image description here][2]][2]&#xD;&#xA;&#xD;&#xA;Schematic. Very simple. One microcontroller does all the work.&#xD;&#xA;[![enter image description here][3]][3]&#xD;&#xA;&#xD;&#xA;Upon booting, the uC resets the keyboard and checks for scan 3 capability. If it's not present, then default to scan 2 mode. After then, the uC sends a command to the keyboard to leave the NumLock led on. That means that the keyboard is ready to use.&#xD;&#xA;&#xD;&#xA;Features new in the firmware version (v1.3b) or changed from previous releases:&#xD;&#xA;&#xD;&#xA; - Spanish and US-english keyboards supported (download and install the relevant update for your keyboard)&#xD;&#xA; - All the Spectrum keystrokes are supported, even those that needs to switch to E-Mode for a while (Velesoft request).&#xD;&#xA; - The Tab key has changed: now it maps to CAPS SHIFT+8, to help identing while working in GENS 3. Shift+Tab maps to CAPS SHIFT+5.&#xD;&#xA; - Trigger key on Sinclair mode has changed to the left Alt key. The &quot;0&quot; key can also be used.&#xD;&#xA; - The &quot;Application&quot; key toggles E-MODE on/off.&#xD;&#xA; - The pound sign has been mapped to the key that shows the grave accent (both symbols have the same ASCII code).&#xD;&#xA; - Spanish keyboard: the Ã‡ key is mapped to the (C) sign.&#xD;&#xA; - Macros are stored in flash. They are not erased when the computer turns off. A update procedure doesn't erase the current stored macros.&#xD;&#xA; - HOME and END keys also work as Begin Macro Recording (F3), and End Macro Recording (F4).&#xD;&#xA; - The PAUSE key pauses a macro recording, so a key typed after PAUSE is not recorded. Recording is resumed pressing PAUSE again. While in macro playback mode, the PAUSE key toggles current macro playing on/off.&#xD;&#xA;&#xD;&#xA;ISSUES RESOLVED:&#xD;&#xA;&#xD;&#xA; - Phantom keys appearing while the user types another key, or key combination does not happen anymore (hopefully). This was causes by the old way to give keytrokes to the ULA. From version 1.3, this method has radically changed. Now, the microcontroller polls the Z80A for IO requests to the ULA port. If there's a IO read request, the microcontroller answer it with theright value. For this reason, a hardware change is needed for the PS/2 adapter, internal version, to work correctly with the newer firmware versions.&#xD;&#xA; - A little issue with Ctrl-Alt-Del not working correctly on powerup has been fixed.&#xD;&#xA;&#xD;&#xA;Features present in the firmware version (v1.2):&#xD;&#xA;&#xD;&#xA; - All alphanumeric keys are mapped to the Spectrum, as well as symbol keys and their shifter forms.&#xD;&#xA; - Shifted alphabetic keys give the upper case version, as expected. Shifted numbers give the corresponding symbol.&#xD;&#xA; - Current keyboard mapping is for the spanish standard 101/102-keys layout keyboard.&#xD;&#xA; - Cursor block maps to the Spectrum cursor keys (i.e. &quot;down&quot; key is mapped to CAPS SHIF+6)&#xD;&#xA; - ESC is mapped to the BREAK Spectrum key (CAPS SHIFT+SPACE)&#xD;&#xA; - Caps Lock key is mapped to CAPS SHIFT + 2&#xD;&#xA; - AltGr key maps to CAPS SHIFT + 9&#xD;&#xA; - The F2 key (which is used mainly to edit the current filename in Windows Explorer and some other applications) maps to the EDIT key (CAPS SHIFT + 1).&#xD;&#xA; - The Tab key maps to the EXTMODE key (CAPS SHIFT + SYMBOL SHIFT).&#xD;&#xA; - The Backspace key is mapped to DELETE key (CAPS SHIFT + 0).&#xD;&#xA; - Left Control key is mapped to CAPS SHIFT, and right Control key, to SYMBOL SHIFT.&#xD;&#xA; - The separate numeric block behaves as if NumLock were always on (in fact, it is).&#xD;&#xA; - The ScrollLock key toggles the cursor key mapping between normal use (editing mode) and Sinclair joystick mode. The later is signaled with ScrollLock led on. In Sinclair joystick mode, cursor keys are mapped to the same keys used by the Sinclair port 2 joystick (6,7,8, and 9). Trigger (0 key) is mapped to both Control keys (recalling the standard MAME layout for controls).&#xD;&#xA; - If the reset pin is connected from the keyboard adapter PCB to the Spectrum, everytime the user presses Crtl-Alt-Del, a low pulse is sent to the reset pin at the Z80, hence enabling the user to reset the machine with the classic three-finger-salute.&#xD;&#xA; - The adapter has a bult-in mechanism for helping the user to diagnose a malfunction. Upon booting, if Alt+F12 is pressed, a series of keys are &quot;typed-in&quot; automatically. Assuming the K-mode, the sequence typed is:&#xD;&#xA;&#xD;&#xA;    &lt;code&gt;REM 12345qwertasdfgZXCV67890yuiophjkl*,.&lt;/code&gt;&#xD;&#xA;&#xD;&#xA; - There's another, more sophisticated, built-in test, designed to test the compatibility of a specific keyboard. Some of them doesn't allow more than a number of keys being pressed at the same time, or even more than one. This is very important, for example if you want to use the Sinclair joystick mode feature and want to press UP+RIGHT for instance. The test is entered by pressing Alt+F1. Prior to do this, it's better to reset the Spectrum. &#xD;&#xA;&#xD;&#xA;Starting with firmware version 1.1, there is a macro feature, which can be considered in beta state. The user can record up to 6 macros of 512 key strokes each one (a key depressed and released counts as two key strokes).&#xD;&#xA;&#xD;&#xA; - F3 enters macro recording. After F3, the user has to press the F-key he wants to assign to the macro. Then, CapsLock led goes on, signaling that a macro is being recorded.&#xD;&#xA; - From this moment, the user can type anything he wants. If he reaches the keystroke limit, the recording is automatically ended.&#xD;&#xA; - To stop a macro recording, press F4. CapsLock led goes off.&#xD;&#xA; - To play the macro, simply press the F-key assigned to it. Caps Lock led goes on to signal macro play. A macro cannot be stopped unless Ctrl-Alt-Del is pressed. If the user resets the Spectrum using the lateral switch, macro playing won't stop.&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/wPHIU.jpg&#xD;&#xA;  [2]: http://i.stack.imgur.com/v24rI.jpg&#xD;&#xA;  [3]: http://i.stack.imgur.com/lCWnh.png" />
  <row Id="333" PostHistoryTypeId="2" PostId="134" RevisionGUID="61029f75-0120-4a1e-8b89-594e65d0e4f8" CreationDate="2016-04-20T18:12:33.007" UserId="37" Text="My Commodore 64 is running quite slow and my friends want it to be faster thus overclocking it. But no ones knows exactly how to do that. With our current &quot;modern&quot; stuff, nothing seems to help my retro computer get any faster.&#xD;&#xA;&#xD;&#xA;How can I get some more juice (overclock) my Commordore 64?" />
  <row Id="334" PostHistoryTypeId="1" PostId="134" RevisionGUID="61029f75-0120-4a1e-8b89-594e65d0e4f8" CreationDate="2016-04-20T18:12:33.007" UserId="37" Text="How can I overclock my Commodore 64" />
  <row Id="335" PostHistoryTypeId="3" PostId="134" RevisionGUID="61029f75-0120-4a1e-8b89-594e65d0e4f8" CreationDate="2016-04-20T18:12:33.007" UserId="37" Text="&lt;commodore-64&gt;" />
  <row Id="336" PostHistoryTypeId="4" PostId="124" RevisionGUID="bca45acf-3480-4d69-b34f-d9f94ab10e99" CreationDate="2016-04-20T18:20:27.300" UserId="55" Comment="edited title" Text="GameBoy Color games does not save any more" />
  <row Id="337" PostHistoryTypeId="7" PostId="124" RevisionGUID="13ea61f1-4902-42e4-a245-9557a5c10822" CreationDate="2016-04-20T18:20:41.973" UserId="55" Comment="Rollback to [fd0666b1-e312-49b8-80c6-5878990bdb5d]" Text="GameBoy Color games do not save any more" />
  <row Id="338" PostHistoryTypeId="5" PostId="134" RevisionGUID="7dabd9f0-58d0-407b-8242-38f7e8190739" CreationDate="2016-04-20T18:29:49.453" UserId="92" Comment="Fixed a little typo and amended the grammar slightly." Text="My Commodore 64 is running quite slow and my friends want it to be faster thus overclocking it. But no ones knows exactly how to do that. With our current &quot;modern&quot; stuff, nothing seems to help my retro computer get any faster.&#xD;&#xA;&#xD;&#xA;How can I get some more juice out of (overclock) my Commodore 64?" />
  <row Id="339" PostHistoryTypeId="24" PostId="134" RevisionGUID="7dabd9f0-58d0-407b-8242-38f7e8190739" CreationDate="2016-04-20T18:29:49.453" Comment="Proposed by 92 approved by 37 edit id of 54" />
  <row Id="340" PostHistoryTypeId="2" PostId="135" RevisionGUID="fdab492d-a0ff-47ab-9bc7-f9bf2aececb7" CreationDate="2016-04-20T18:34:59.633" UserId="75" Text="You need the [Sharp CE-139T serial cable][1] (included in the Sharp CE-490W and CE-491W packages) or equivalent. But this cable is hard to find.&#xD;&#xA;&#xD;&#xA;A similar cable is the CE-136T (included in the CE-390 package) which is not quite so hard to find but it only works in DOS because it requires exact timing. Maybe you can rig something up with a Raspberry Pi or Arduino to transfer the data to Windows.&#xD;&#xA;&#xD;&#xA;Or get the [Sharp CE-50P printer &amp; cassette port][2] and print out your programs, then scan them in; or attach a digital recorder to the cassette interface and save your programs to uncompressed .wav. This assumes the EL-9000 can export programs through the serial port. I couldn't find the manual online. Maybe you could scan it in and post it to [Archive.org][3]?&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.imslsoft.com/xlinkwin.htm#Cables&#xD;&#xA;  [2]: http://sharppocketcomputers.com/index.htm#printers&#xD;&#xA;  [3]: https://archive.org/details/manuals" />
  <row Id="348" PostHistoryTypeId="2" PostId="138" RevisionGUID="f73c9ddc-4a8a-46de-baa2-7d649c5bcb9a" CreationDate="2016-04-20T20:21:53.813" UserId="70" Text="The basic principle behind overclocking is that if you speed up a clock, everything that runs from that clock will go faster.  But there are some parts of your computer that you don't want to speed up, and NTSC (or PAL) video output is one of them.&#xD;&#xA;&#xD;&#xA;In order for C64 output to be displayed correctly on an NTSC/PAL monitor, it needs to be sent to the monitor at a very specific rate (the rate at which your computer sends needs to match the rate your monitor expects to receive).  Speeding it up or slowing it down will make it difficult or impossible for your monitor to maintain sync.&#xD;&#xA;&#xD;&#xA;This leads to a problem on the C64, because the same clock is used to drive both the CPU and the VIC video chip.  The end result is you can't speed up the CPU clock without also speeding up the VIC clock, and speeding up the VIC clock will affect your display.  So for practical purposes overclocking isn't really an option.&#xD;&#xA;&#xD;&#xA;What is an option is to use a faster coprocessor, a completely separate processor that can access the same memory.  Such a processor would need to include a circuit that separates the internal CPU clock from the memory access clock, so that the CPU can go faster without affecting memory access time (which needs to stay the same to avoid colliding with VIC chip memory accesses).&#xD;&#xA;&#xD;&#xA;Modern PCs are much more suited to overclocking because busses are designed to allow components running at different speeds to work together, via sets of 'request' and 'ready' lines.  It's expected in such busses that faster devices will need to wait for slower ones.  Overclocking is then simply a matter of taking hardware that runs at 'less different' speeds, and making it run at 'more different' speeds instead.  Since modern designs already make allowances for different speed devices to work together, this typically works fine.&#xD;&#xA;&#xD;&#xA;The C64 memory bus is designed to have only 2 participants, the CPU and the VIC chip and they must both run at exactly the same speed because the 'bus protocol' is very simply 'take turns'.  There are no allowances or features in the design to allow one to run faster than the other.  This reduced the cost to manufacture the computer, but also made it harder to mod." />
  <row Id="349" PostHistoryTypeId="6" PostId="134" RevisionGUID="d42bcd82-4996-43c7-a77e-7c5d927c1094" CreationDate="2016-04-20T20:24:06.123" UserId="132" Comment="Added 'Overclocking' tag" Text="&lt;commodore-64&gt;&lt;overclocking&gt;" />
  <row Id="350" PostHistoryTypeId="24" PostId="134" RevisionGUID="d42bcd82-4996-43c7-a77e-7c5d927c1094" CreationDate="2016-04-20T20:24:06.123" Comment="Proposed by 132 approved by 37 edit id of 55" />
  <row Id="353" PostHistoryTypeId="2" PostId="139" RevisionGUID="742b6a2a-0beb-4127-bcc9-f39df8db6945" CreationDate="2016-04-20T20:44:33.450" UserId="72" Text="The Star was indeed the first commercially available. However, it wasn't something average people could even aspire to buying. The Lisa, while insanely overpriced, was technically available for everyday people to buy, and was certainly available for business users. The Star was very much a corporate beast at best." />
  <row Id="355" PostHistoryTypeId="2" PostId="140" RevisionGUID="d2def042-3c60-4308-9f12-01ad3610136e" CreationDate="2016-04-20T20:53:10.183" UserId="72" Text="There are also services that offer transfer of files from older media (just Google &quot;retro floppy&quot; and you'll find some, such as [RetroFloppy][1].&#xD;&#xA;&#xD;&#xA;There's also the [Device Side Data FC5025 USB controller][2] for IBM PC style 5.25&quot; floppy drives. It adapts these drives to allow their use over USB, but also allows them to read a ton of different disk formats, including Apple DOS 3.2 and DOS 3.3, ProDOS, Atari 810, Commodore 1541, Kaypro CP/M, MS-DOS, Tandy CoCo Disk BASIC, and TI-99/4A.&#xD;&#xA;&#xD;&#xA;The folks I know that have tried it were quite satisfied. I have one which I've not yet had time to try it for myself. The one drawback is that on many or most 5.25&quot; drives, it cannot read the back side of disks where each side was treated like a one-sided disk, unless there are index holes for both sides.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.retrofloppy.com/&#xD;&#xA;  [2]: http://www.deviceside.com/fc5025.html" />
  <row Id="359" PostHistoryTypeId="2" PostId="141" RevisionGUID="1d6a1430-a933-4829-8314-08e1bd9a5284" CreationDate="2016-04-20T20:59:57.080" UserId="72" Text="At least on old computer cards (you know, that go into slots, with edges basically the same as cartridges for classic game systems), I always used a standard pencil eraser to gently clean the contacts. A few gentle scrubs with a pencil's built-in eraser (gives you lots of control), done while being careful to keep the debris from falling down into the cartridge, may be enough to do the job.&#xD;&#xA;&#xD;&#xA;Just don't do it **too** often; it can eventually wear away the gold and damage the connector. But if you only do it once in a very long while, it should be fine." />
  <row Id="360" PostHistoryTypeId="2" PostId="142" RevisionGUID="36b76df6-60e1-42b6-9daf-7b446f1a60fb" CreationDate="2016-04-20T21:03:57.070" UserId="65" Text="I found my Game Boy Advance in a box a few days ago, and I'm already playing good ol' mario games. The problem is that I usually don't have time to finish the whole level at the same time (or well, I might want to savescum).&#xD;&#xA;&#xD;&#xA;Is there way to save (and load) the game state somehow, by using external parts or not?" />
  <row Id="361" PostHistoryTypeId="1" PostId="142" RevisionGUID="36b76df6-60e1-42b6-9daf-7b446f1a60fb" CreationDate="2016-04-20T21:03:57.070" UserId="65" Text="Is there way to save the save state?" />
  <row Id="362" PostHistoryTypeId="3" PostId="142" RevisionGUID="36b76df6-60e1-42b6-9daf-7b446f1a60fb" CreationDate="2016-04-20T21:03:57.070" UserId="65" Text="&lt;game-boy-advance&gt;" />
  <row Id="363" PostHistoryTypeId="5" PostId="134" RevisionGUID="029a97f6-9a97-42df-8604-8e09ae886de3" CreationDate="2016-04-20T21:20:14.460" UserId="37" Comment="added 144 characters in body" Text="My Commodore 64 is running quite slow and my friends want it to be faster thus overclocking it. But no ones knows exactly how to do that. With our current &quot;modern&quot; stuff, nothing seems to help my retro computer get any faster. Naturally I suggested changing the crystal that controls the timing, of course I was greeted with a series of complaints of ruining the device.&#xD;&#xA;&#xD;&#xA;How can I get some more juice out of (overclock) my Commodore 64?" />
  <row Id="364" PostHistoryTypeId="2" PostId="143" RevisionGUID="9ce66869-3079-48de-8c9f-2b59e2f95cdc" CreationDate="2016-04-20T21:29:46.320" UserId="56" Text="Apple II computers initially used audio cassette tapes for storage.  How was the data stored?  What was the maximum bit rate?" />
  <row Id="365" PostHistoryTypeId="1" PostId="143" RevisionGUID="9ce66869-3079-48de-8c9f-2b59e2f95cdc" CreationDate="2016-04-20T21:29:46.320" UserId="56" Text="What format is used for Apple II cassette tapes?" />
  <row Id="366" PostHistoryTypeId="3" PostId="143" RevisionGUID="9ce66869-3079-48de-8c9f-2b59e2f95cdc" CreationDate="2016-04-20T21:29:46.320" UserId="56" Text="&lt;apple-ii&gt;&lt;cassette-tape&gt;" />
  <row Id="367" PostHistoryTypeId="2" PostId="144" RevisionGUID="9e5a9cb6-ec51-4a2b-8e63-9d453af665c1" CreationDate="2016-04-20T21:29:46.320" UserId="56" Text="The Apple II recorded data as a frequency-modulated sine wave.  A standard consumer cassette deck could be connected to the dedicated cassette port on the Apple ][, ][+, and //e.  The //c, ///, and IIgs did not have this port.&#xD;&#xA;&#xD;&#xA;A tape could hold one or more chunks of data, each of which had the following structure:&#xD;&#xA;&#xD;&#xA; 1. Entry tone: 10.6 seconds of 770Hz (8192 cycles at 1300 usec/cycle).  This let the human operator know that the start of data had been found.&#xD;&#xA; 2. Tape-in edge: 1/2 cycle at 400 usec/cycle, followed by 1/2 cycle at 500 usec/cycle.  This &quot;short zero&quot; indicated the transition between header and data.&#xD;&#xA; 3. Data: one cycle per bit, using 500 usec/cycle for `0` and 1000 usec/cycle for `1`.&#xD;&#xA;&#xD;&#xA;There is no &quot;end of data&quot; indication, so it's up to the reader to specify the length of data.  The last byte of data is followed by an XOR checksum, initialized to $FF, that can be used to check for success.&#xD;&#xA;&#xD;&#xA;For machine-language programs, the length is specified on the monitor command line, e.g. `800.1FFFR` would read $1800 (6144) bytes.  For BASIC programs and data, the length is included in an initial header section:&#xD;&#xA;&#xD;&#xA; - Integer BASIC programs have a two-byte (little-endian) length.&#xD;&#xA; - Applesoft BASIC has a two-byte length, followed by a &quot;run&quot; flag byte.&#xD;&#xA; - Applesoft shape tables (loaded with `SHLOAD`) have a two-byte length.&#xD;&#xA; - Applesoft arrays (loaded with `RECALL`) have a three-byte header.&#xD;&#xA;&#xD;&#xA;Note the header section is a full data area, complete with 10.6-second lead-in.&#xD;&#xA;&#xD;&#xA;The storage density varies from 2000bps for a file full of `0` bits to 1000bps for a file full of `1` bits.  Assuming an equal distribution of bits, you can expect to transfer about 187 bytes/second (ignoring the header).&#xD;&#xA;&#xD;&#xA;An annotated 6502 assembly listing, as well as C++ code for deciphering cassette data in WAV files, can be found [here][1].  The code in the system monitor that reads and writes data is less then 200 bytes long.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://github.com/fadden/ciderpress/blob/master/app/CassetteDialog.cpp" />
  <row Id="368" PostHistoryTypeId="6" PostId="113" RevisionGUID="ed3ae556-28be-4c87-8e2e-6ad65b3ef7fa" CreationDate="2016-04-20T21:44:54.543" UserId="55" Comment="edited tags" Text="&lt;amiga&gt;&lt;workbench1.3&gt;&lt;amigashell&gt;&lt;amiga-500&gt;" />
  <row Id="369" PostHistoryTypeId="2" PostId="145" RevisionGUID="81d1660d-6360-4644-87db-94e25e7f9164" CreationDate="2016-04-20T21:48:22.227" UserId="56" Text="On the 6502 CPU, this instruction:&#xD;&#xA;&#xD;&#xA;    LDA $0380,Y&#xD;&#xA;&#xD;&#xA;takes either 3 or 4 cycles, depending on whether the indexing crosses a page boundary.  But this instruction:&#xD;&#xA;&#xD;&#xA;    STA $0380,Y&#xD;&#xA;&#xD;&#xA;takes 5 cycles regardless of page boundaries.  Why is one fixed and the other variable?&#xD;&#xA;" />
  <row Id="370" PostHistoryTypeId="1" PostId="145" RevisionGUID="81d1660d-6360-4644-87db-94e25e7f9164" CreationDate="2016-04-20T21:48:22.227" UserId="56" Text="Why does 6502 indexed LDA take an extra cycle at page boundaries?" />
  <row Id="371" PostHistoryTypeId="3" PostId="145" RevisionGUID="81d1660d-6360-4644-87db-94e25e7f9164" CreationDate="2016-04-20T21:48:22.227" UserId="56" Text="&lt;6502&gt;" />
  <row Id="372" PostHistoryTypeId="2" PostId="146" RevisionGUID="3ae33e41-1878-4519-a764-9f374334191b" CreationDate="2016-04-20T21:48:22.227" UserId="56" Text="The 6502 had 16-bit addressing but only an 8-bit adder.  For an indexed load or store, the index register had to be added to the base address in two steps.  As an optimization, the 6502 will load from memory as soon as the first part of the add is complete.  If the add didn't cause a carry out, the loaded value is kept.  If it did cause a carry, the value is fetched again from the correct address, requiring an extra cycle.&#xD;&#xA;&#xD;&#xA;For a write operation, speculatively storing data at the wrong address would be problematic, so the write is held until the address calculation is complete.&#xD;&#xA;&#xD;&#xA;As noted in the [&quot;bugs &amp; quirks&quot; section][1] of the wikipedia 6502 page, this behavior could cause unexpected effects if used on a memory-mapped I/O area.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://en.wikipedia.org/wiki/MOS_Technology_6502#Bugs_and_quirks" />
  <row Id="373" PostHistoryTypeId="2" PostId="147" RevisionGUID="e5f7c272-053d-4c9d-a153-a91bc0952429" CreationDate="2016-04-20T22:01:51.170" UserId="-1" Text="" />
  <row Id="374" PostHistoryTypeId="2" PostId="148" RevisionGUID="6b8209d7-1842-4c17-accf-99a1478812b5" CreationDate="2016-04-20T22:01:51.170" UserId="-1" Text="" />
  <row Id="375" PostHistoryTypeId="2" PostId="149" RevisionGUID="a52b7cdd-fec8-4a75-acfa-e592fd9e28c6" CreationDate="2016-04-20T22:06:23.933" UserId="56" Text="I have a pair of connectors that mate with each other.  One is labeled BUS, the other TAG.  What are they for?&#xD;&#xA;&#xD;&#xA;[![bus-tag connectors][1]][1]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/IOPYl.jpg" />
  <row Id="376" PostHistoryTypeId="1" PostId="149" RevisionGUID="a52b7cdd-fec8-4a75-acfa-e592fd9e28c6" CreationDate="2016-04-20T22:06:23.933" UserId="56" Text="What are these bus/tag connectors for?" />
  <row Id="377" PostHistoryTypeId="3" PostId="149" RevisionGUID="a52b7cdd-fec8-4a75-acfa-e592fd9e28c6" CreationDate="2016-04-20T22:06:23.933" UserId="56" Text="&lt;connector&gt;" />
  <row Id="378" PostHistoryTypeId="2" PostId="150" RevisionGUID="2e661694-181f-4162-920c-de5a1408181f" CreationDate="2016-04-20T22:14:51.847" UserId="29" Text="Color Computer machines initially used audio cassette tapes for storage. How was the data stored? What was the maximum bit rate?" />
  <row Id="379" PostHistoryTypeId="1" PostId="150" RevisionGUID="2e661694-181f-4162-920c-de5a1408181f" CreationDate="2016-04-20T22:14:51.847" UserId="29" Text="What format is used for CoCo cassette tapes?" />
  <row Id="380" PostHistoryTypeId="3" PostId="150" RevisionGUID="2e661694-181f-4162-920c-de5a1408181f" CreationDate="2016-04-20T22:14:51.847" UserId="29" Text="&lt;color-computer&gt;&lt;cassette-tape&gt;" />
  <row Id="381" PostHistoryTypeId="5" PostId="69" RevisionGUID="d9247e2b-796c-42f5-ba7a-c6174f58f7c3" CreationDate="2016-04-20T22:49:52.150" UserId="92" Comment="Clarified that I'm referring to Lores pixels." Text="On a PAL Amiga, a full line sweep translates to about 454 virtual Lores (Low Resolution) pixels. (64 µs duration of a horizontal line, 7.093790 MHz pixel clock =~ 140.968 ns per pixel: 64 µs / 140.968 ns =~ 454).&#xD;&#xA;&#xD;&#xA;I say virtual pixels because not all of those pixels are actually usable as there is the horizontal sync period of about 4 µs and the back porch of about 8 µs, leaving about 52 µs or about 369 pixels. In practice, the number of used pixels was even lower (so it would fit into the visible non-distorted area of the CRT) - usually 320 pixels in Low Resolution.&#xD;&#xA;&#xD;&#xA;Therefore, the number of pixel-times where nothing is displayed is about 134. Copper lists allowed positioning (waiting) horizontally with 4 pixel granularity and a copper MOVE instruction took 8 pixels to complete. 134 / 8 are a little more than 16. So you can update about 14 to 16 color registers each line outside of the display data fetch when using copper lists.&#xD;&#xA;&#xD;&#xA;* See here for a detailed analysis of PAL video timings: http://martin.hinner.info/vga/pal.html&#xD;&#xA;* How the copper timing is performed: http://coppershade.org/articles/AMIGA/Agnus/Copper:_Exact_WAIT_Timing/&#xD;&#xA;&#xD;&#xA;So assuming we use 5 bitplanes (32 colors), we could use 16 colors for the background and prepare a copper list that changes those 16 colors (or most of them) each line, providing for a very colorful setting. The copper list could be prepared once when switching to a different scene and then not changed anymore while the scene is active, or it could be prepared once per frame during the vertical blanking area.&#xD;&#xA;&#xD;&#xA;We could then use the remaining 16 colors (which remain static) for blitting the animated character onto the background.&#xD;&#xA;&#xD;&#xA;Update:&#xD;&#xA;&#xD;&#xA;I checked the game for what it actually does and it pretty much matches:&#xD;&#xA;&#xD;&#xA;It loads `BPLCON0` with `$6200`, which means 6 bitplanes without HAM mode, i. e. EHB (Extra HalfBrite) mode (64 colors with 32 freely controllable palette entries and the remaining 32 colors roughly half as bright as the first 32), as you originally suggested.&#xD;&#xA;&#xD;&#xA;Apart from that it uses the technique I outlined above: In the Copper list it does a `WAIT $xxE1FFFC` for each raster line and then changes a couple of colors (about 2 to 8 per line) out of the first 16 (leaving index 0 alone - as a consequence it also affects color indices 33 to 47 of the EHB image) and doesn't touch color indices 16 to 31 (consequentially, indices 48 to 63 of the EHB image also remain static)." />
  <row Id="382" PostHistoryTypeId="2" PostId="151" RevisionGUID="4b3d1f02-cb3b-4c9f-9b49-3fea1ee4b624" CreationDate="2016-04-20T23:08:30.637" UserId="141" Text="While the Original Chip Set (OCS) and Enhanced Chip Set (ECS) Amiga computers had the 32 x 2 colour EHB (Extra Half-Brite) and 4096 colour HAM (Hold And Mofify) screen modes, where these ever used outside paint programs, for instance in games?&#xD;&#xA;&#xD;&#xA;If so, was there any interactive animation/movement with these screen modes?" />
  <row Id="383" PostHistoryTypeId="1" PostId="151" RevisionGUID="4b3d1f02-cb3b-4c9f-9b49-3fea1ee4b624" CreationDate="2016-04-20T23:08:30.637" UserId="141" Text="Did any Amiga 500 games or programs (apart from paint programs) use more than 32 colours?" />
  <row Id="384" PostHistoryTypeId="3" PostId="151" RevisionGUID="4b3d1f02-cb3b-4c9f-9b49-3fea1ee4b624" CreationDate="2016-04-20T23:08:30.637" UserId="141" Text="&lt;amiga&gt;&lt;graphics&gt;&lt;display&gt;" />
  <row Id="386" PostHistoryTypeId="5" PostId="125" RevisionGUID="f266f9d6-14e8-4a5b-a91e-84fcb30c830f" CreationDate="2016-04-20T23:32:14.157" UserId="56" Comment="Replace &quot;the previous&quot; with reference to author, as order is not fixed" Text="In addition to the Community Wiki answer:&#xD;&#xA;&#xD;&#xA;This routine with entries CHRGET and CHRGOT is not only part of the interpreter loop, it used in every statement and function which has to &quot;parse&quot; further data from the BASIC text (program), e.g. for parameters.&#xD;&#xA;On some occasions the pointer TXTPTR will be stacked, typically while executing a DEFFN'd function.&#xD;&#xA;&#xD;&#xA;Especially on older versions of CBM BASIC (which PET uses) this routine is the place to extent (patch) the interpreter for additional commands (only with newer BASIC versions hooks where introduced to do it in a nicer way).&#xD;&#xA;&#xD;&#xA;Regarding the placement of the routine in zero page: Even it uses self-modifying code, the TXTPTR refers the LDA parameter, I don't think the speed issue was the cause for this. Maybe they wanted to keep the Y register untouched. Comparing to BASIC 7.0 on a C128 this routine is moved out of page 0 and contains additional bank switching stuff. On the other hand you may count on having Y=0 after a call to this routine which may be valuable, too." />
  <row Id="387" PostHistoryTypeId="24" PostId="125" RevisionGUID="f266f9d6-14e8-4a5b-a91e-84fcb30c830f" CreationDate="2016-04-20T23:32:14.157" Comment="Proposed by 56 approved by 47 edit id of 58" />
  <row Id="388" PostHistoryTypeId="5" PostId="64" RevisionGUID="203feabe-eee1-4c78-a2ef-8cee4aef8906" CreationDate="2016-04-20T23:32:20.783" UserId="125" Comment="formatting for clarity" Text="My Compaq Presario CDS 633 outputs color in Windows 3.1, but not in DOS.&#xD;&#xA;&#xD;&#xA;How can I get color in DOS?&#xD;&#xA;&#xD;&#xA;I have tried the `MODE` setting, but it did not change anything.  `ANSI.SYS` also has a `LOADHIGH` line in `CONFIG.SYS`." />
  <row Id="389" PostHistoryTypeId="24" PostId="64" RevisionGUID="203feabe-eee1-4c78-a2ef-8cee4aef8906" CreationDate="2016-04-20T23:32:20.783" Comment="Proposed by 125 approved by 47 edit id of 47" />
  <row Id="390" PostHistoryTypeId="5" PostId="132" RevisionGUID="ec62397a-7952-4df7-9476-9c211eb3b2a8" CreationDate="2016-04-20T23:32:32.283" UserId="37" Comment="added 69 characters in body" Text="For questions about the components of retro devices (computers, etc.)" />
  <row Id="391" PostHistoryTypeId="24" PostId="132" RevisionGUID="ec62397a-7952-4df7-9476-9c211eb3b2a8" CreationDate="2016-04-20T23:32:32.283" Comment="Proposed by 37 approved by 47 edit id of 53" />
  <row Id="392" PostHistoryTypeId="5" PostId="94" RevisionGUID="165b74a7-0437-4cc6-aa7c-0fe191aaa26b" CreationDate="2016-04-20T23:33:10.163" UserId="56" Comment="6502 was not designed by Motorola; mention appropriateness of 65C02." Text="Questions relating to the 6502 series of processors, including hardware and assembly language questions." />
  <row Id="393" PostHistoryTypeId="24" PostId="94" RevisionGUID="165b74a7-0437-4cc6-aa7c-0fe191aaa26b" CreationDate="2016-04-20T23:33:10.163" Comment="Proposed by 56 approved by 47 edit id of 51" />
  <row Id="394" PostHistoryTypeId="5" PostId="130" RevisionGUID="40f6ca3b-d311-47e7-b656-1333496bc72b" CreationDate="2016-04-20T23:33:38.273" UserId="37" Comment="added 59 characters in body" Text="For questions about the usage and maintenance of Game Boys " />
  <row Id="395" PostHistoryTypeId="24" PostId="130" RevisionGUID="40f6ca3b-d311-47e7-b656-1333496bc72b" CreationDate="2016-04-20T23:33:38.273" Comment="Proposed by 37 approved by 47 edit id of 52" />
  <row Id="396" PostHistoryTypeId="5" PostId="118" RevisionGUID="fd64f90d-89d8-4851-81e0-fdb476b8056a" CreationDate="2016-04-20T23:33:48.523" UserId="89" Comment="Insert image inline - the image is the real answer!" Text="There was, at one time, a custom tool for this job called the &quot;Mac Cracker&quot; and Apple provided their own to dealers and authorized repair shops. &#xD;&#xA;&#xD;&#xA;![Mac Cracker](http://www.tcocd.de/Pictures/Micro/Apple/mac_tool1_large.jpg)&#xD;&#xA;&#xD;&#xA;In essence, what you need is a long handled Torx T15 driver and a spudger or similar tool to pry the halves of the case apart without damaging the plastic. There are other examples of &quot;case crackers&quot; that do the same thing, applying even pressure to force apart tower cases.&#xD;&#xA;&#xD;&#xA;http://www.pcmag.com/encyclopedia/term/39316/case-cracker&#xD;&#xA;&#xD;&#xA;Using a flat screwdriver to loosen the case is possible, but not advised. The small area over which the force is applied tends to crack or scar the case. You can often see signs of this kind of distress on used Macs. Best to use one the aforementioned tools, or just a couple of good whacks and gravity." />
  <row Id="397" PostHistoryTypeId="24" PostId="118" RevisionGUID="fd64f90d-89d8-4851-81e0-fdb476b8056a" CreationDate="2016-04-20T23:33:48.523" Comment="Proposed by 89 approved by 47 edit id of 59" />
  <row Id="398" PostHistoryTypeId="5" PostId="93" RevisionGUID="c230e69a-58a2-4a30-bf6b-b288b2873d79" CreationDate="2016-04-20T23:33:56.777" UserId="56" Comment="6502 was not designed by Motorola; mention appropriateness of 65C02." Text="This tag may be used for the 6502 and close derivatives, such as the 65C02.&#xD;&#xA;" />
  <row Id="399" PostHistoryTypeId="24" PostId="93" RevisionGUID="c230e69a-58a2-4a30-bf6b-b288b2873d79" CreationDate="2016-04-20T23:33:56.777" Comment="Proposed by 56 approved by 47 edit id of 50" />
  <row Id="400" PostHistoryTypeId="5" PostId="120" RevisionGUID="9b338afc-5b86-4c8f-b7d6-eeb500f29c36" CreationDate="2016-04-20T23:34:05.463" UserId="13" Comment="added 105 characters in body" Text="For questions about the different versions and products of the SNES (Super Nintendo Entertainment System)" />
  <row Id="401" PostHistoryTypeId="24" PostId="120" RevisionGUID="9b338afc-5b86-4c8f-b7d6-eeb500f29c36" CreationDate="2016-04-20T23:34:05.463" Comment="Proposed by 13 approved by 47 edit id of 43" />
  <row Id="402" PostHistoryTypeId="5" PostId="122" RevisionGUID="250380ab-ed81-4ad1-95ee-2db2bb24592a" CreationDate="2016-04-20T23:34:09.150" UserId="13" Comment="added 76 characters in body" Text="For questions about the different versions and products released by Nintendo" />
  <row Id="403" PostHistoryTypeId="24" PostId="122" RevisionGUID="250380ab-ed81-4ad1-95ee-2db2bb24592a" CreationDate="2016-04-20T23:34:09.150" Comment="Proposed by 13 approved by 47 edit id of 45" />
  <row Id="404" PostHistoryTypeId="5" PostId="121" RevisionGUID="6c9e05ca-7385-431b-aab1-28dc58bfb5b7" CreationDate="2016-04-20T23:34:13.260" UserId="13" Comment="added 52 characters in body" Text="Related tags:&#xD;&#xA;[tag:nes]&#xD;&#xA;[tag:snes]&#xD;&#xA;[tag:game-boy]" />
  <row Id="405" PostHistoryTypeId="24" PostId="121" RevisionGUID="6c9e05ca-7385-431b-aab1-28dc58bfb5b7" CreationDate="2016-04-20T23:34:13.260" Comment="Proposed by 13 approved by 47 edit id of 44" />
  <row Id="406" PostHistoryTypeId="5" PostId="148" RevisionGUID="4db09fe3-7d68-46de-ba6d-7fa6d3c66c28" CreationDate="2016-04-20T23:34:17.903" UserId="89" Comment="added 96 characters in body" Text="Questions relating to methods, techniques and tools for cleaning and maintaining retro hardware." />
  <row Id="407" PostHistoryTypeId="24" PostId="148" RevisionGUID="4db09fe3-7d68-46de-ba6d-7fa6d3c66c28" CreationDate="2016-04-20T23:34:17.903" Comment="Proposed by 89 approved by 47 edit id of 57" />
  <row Id="408" PostHistoryTypeId="5" PostId="40" RevisionGUID="57a10437-24c3-4752-a45f-18ddf1f9ff34" CreationDate="2016-04-20T23:34:35.467" UserId="56" Comment="Updated guidance to discourage use, added full explanation with refs elsewhere" Text="This tag is suited for general questions about Apple Computer and its products.  In many cases, such questions would not be appropriate for this site.&#xD;&#xA;&#xD;&#xA;Please use tags that are specific to the products, e.g.:&#xD;&#xA;&#xD;&#xA; - [apple-ii][1] for general Apple II topics&#xD;&#xA; - [apple-iigs][2] for subjects specific to the Apple IIgs&#xD;&#xA; - [apple-lisa][3] for the Apple Lisa&#xD;&#xA; - [macintosh][4] for the Apple Macintosh [should be apple-macintosh]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://retrocomputing.stackexchange.com/questions/tagged/apple-ii&#xD;&#xA;  [2]: http://retrocomputing.stackexchange.com/questions/tagged/apple-iigs&#xD;&#xA;  [3]: http://retrocomputing.stackexchange.com/questions/tagged/apple-lisa&#xD;&#xA;  [4]: http://retrocomputing.stackexchange.com/questions/tagged/macintosh" />
  <row Id="409" PostHistoryTypeId="24" PostId="40" RevisionGUID="57a10437-24c3-4752-a45f-18ddf1f9ff34" CreationDate="2016-04-20T23:34:35.467" Comment="Proposed by 56 approved by 47 edit id of 48" />
  <row Id="414" PostHistoryTypeId="2" PostId="152" RevisionGUID="dc6a69d0-c2a5-46e4-a47b-d929b2b37482" CreationDate="2016-04-21T00:36:01.803" UserId="56" Text="The first two Apple II models (the \]\[ and \]\[+) were unable to display lower case on the text screen.  Some 3rd parties made lower-case adapters that replaced the character ROM (e.g. [Dan Paymar's popular device][1]).  The device from Lazer Systems (a/k/a Lazer MicroSystems) was called the &quot;Lower Case Plus&quot;, [pictured here][2].  One of the interesting features was that you could use an EPROM programmer to replace the font with one of your own design.  You could also add on a &quot;Character Set Plus&quot; to have additional ROM fonts.&#xD;&#xA;&#xD;&#xA;Lazer Systems had another product called the &quot;Graphics Plus&quot;, which allowed the font to be updated with software.  The idea was that you could use text characters as graphics tiles and create games that ran much faster than similar code that used the hi-res screen (the text screen being 1/8th the size).&#xD;&#xA;&#xD;&#xA;How did font selection and updating work?&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.applefritter.com/content/dan-paymar-lowercase-adaptor-interface&#xD;&#xA;  [2]: http://www.computerhistory.org/collections/catalog/102645984" />
  <row Id="415" PostHistoryTypeId="1" PostId="152" RevisionGUID="dc6a69d0-c2a5-46e4-a47b-d929b2b37482" CreationDate="2016-04-21T00:36:01.803" UserId="56" Text="How did the Lazer Systems Graphics Plus board work?" />
  <row Id="416" PostHistoryTypeId="3" PostId="152" RevisionGUID="dc6a69d0-c2a5-46e4-a47b-d929b2b37482" CreationDate="2016-04-21T00:36:01.803" UserId="56" Text="&lt;apple-ii&gt;" />
  <row Id="417" PostHistoryTypeId="2" PostId="153" RevisionGUID="e97cbec5-ea93-4e0b-94ab-fa710f0ceea7" CreationDate="2016-04-21T03:45:38.690" UserId="6" Text="Most of this info comes from the Color Computer 3 Service Manual (26-3334), except for the actual frequencies used on the cassette:&#xD;&#xA;&#xD;&#xA;On the tape, [frequency shift keying is used][1], with a zero bit encoded by a single 1200 Hz sine wave, and a one bit encoded by a single 2400 Hz sine wave. (Yes, this means some bytes play faster than others.) The service manual claims this results in 1500 baud, but obviously this will vary depending on the actual data being stored.&#xD;&#xA;&#xD;&#xA;The service manual follows by describing the actual data format in section 5.10:&#xD;&#xA;&#xD;&#xA;Each file saved on tape consists of six discrete items:&#xD;&#xA;&#xD;&#xA; 1. A leader, 128 bytes of 55H&#xD;&#xA; 2. A Namefile block, containing the file name&#xD;&#xA; 3. Approximately 0.5 seconds of blank space with no audio, which is meant to give the CoCo enough time to process the Namefile block&#xD;&#xA; 4. Another leader, 128 bytes of 55H&#xD;&#xA; 5. One or more data blocks&#xD;&#xA; 6. An end of file block&#xD;&#xA;&#xD;&#xA;Data blocks, Namefile blocks and end of file blocks have a common format:&#xD;&#xA;&#xD;&#xA; * Leader byte 55H&#xD;&#xA; * Sync byte 3CH&#xD;&#xA; * A block type byte: 00H = Namefile block, 01H = data block, FFH = end of file block&#xD;&#xA; * Block length byte&#xD;&#xA; * Data (up to 255 bytes)&#xD;&#xA; * Checksum: the sum of all data bytes plus block type and block length bytes&#xD;&#xA; * Trailer byte 55H&#xD;&#xA;&#xD;&#xA;The data in the Namefile block is 15 bytes long, and consists of:&#xD;&#xA;&#xD;&#xA; * Eight bytes for the file name&#xD;&#xA; * A file type byte: 00H = BASIC program, 01H = data, 02H = Machine language program&#xD;&#xA; * An ASCII flag: 00H = ASCII, FFH = binary&#xD;&#xA; * A gap flag: 01H = continuous, FFH = gaps&#xD;&#xA; * For machine language programs, the start address (two bytes)&#xD;&#xA; * For machine language programs, the load address (two bytes)&#xD;&#xA;&#xD;&#xA;The end of file block is a block with zero length.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://caltronik.pagesperso-orange.fr/Pawel/TRS-80/pc_files/cas_rest/index.html" />
  <row Id="420" PostHistoryTypeId="2" PostId="154" RevisionGUID="e07f2cee-5257-4c28-93a4-3d4c85354292" CreationDate="2016-04-21T04:43:14.777" UserId="202" Text="All you need is a long reach Torx T15 to get at the screws and a large bull dog clip (1&quot;-2&quot;) to crack the case open. Nothing else.&#xD;&#xA;&#xD;&#xA;Top tip: once you have extricated the Torx screws, replace them with Philips/crosshead ( or Allen bolts), to make life simpler for you in the future, as long reach Torx screw drivers are *generally* harder to find than other types." />
  <row Id="421" PostHistoryTypeId="5" PostId="98" RevisionGUID="d80add19-5637-452d-8dc4-8dc60369bbd6" CreationDate="2016-04-21T04:45:31.217" UserId="129" Comment="added 370 characters in body" Text="Although only 16 different colors were allowed on c64 (more exactly, in the VIC-II), which came from a fixed palette, the video output created analogous tv signal.&#xD;&#xA;&#xD;&#xA;Which means, somewhere in the final, D/A conversion phase of the vic signal generation, a palette should have existed, which defined the different rgb signal levels, indexed by the 4bit color code.&#xD;&#xA;&#xD;&#xA;What is known from it? How many analogous signal levels had it?&#xD;&#xA;&#xD;&#xA;(Btw, in this 16-color palette, there were 5 greyscale colors. Thus, the number of analogous signal levels should have been at least 5.)&#xD;&#xA;&#xD;&#xA;*Extension, reacting @Mark's answer:* &#xD;&#xA;&#xD;&#xA;Ok, the TV output had a YIQ. But, somewhere in the VIC II, there should have been something with a color index 0-15 as input, and with an analogous YIQ as output. I suspected it was some hardwired palette table and a D/A converter, but you say it wasn't. What was it then? How did the 4 color bit -&gt; 3 YIQ signal level work?" />
  <row Id="422" PostHistoryTypeId="2" PostId="155" RevisionGUID="3e15d714-bded-4bd7-ad5e-9e90e3929134" CreationDate="2016-04-21T05:20:17.223" UserId="-1" Text="" />
  <row Id="423" PostHistoryTypeId="2" PostId="156" RevisionGUID="32d43be4-0199-428a-a1e5-97fe796300aa" CreationDate="2016-04-21T05:20:17.223" UserId="-1" Text="" />
  <row Id="424" PostHistoryTypeId="2" PostId="157" RevisionGUID="da239684-3e29-4329-9fad-52c08860594a" CreationDate="2016-04-21T06:58:11.687" UserId="105" Text="My guess is that your VGA monitor is reporting itself as a mono monitor to the VGA card. This may be caused by the monitor being too modern for your Compaq: The VGA card expects the monitor to report its capabilities using three pins from the VGA connector, but modern monitors use I2C to report EDID information on those pins. If the impedance at some of these pins is too low or too high, they may be read as N/C or GND.&#xD;&#xA;&#xD;&#xA;Quoting http://pinouts.ru/Video/Vga15_pinout.shtml&#xD;&#xA;&#xD;&#xA;    ID pins set-up&#xD;&#xA;    &#xD;&#xA;    4    11   12&#xD;&#xA;    ID2  ID0  ID1&#xD;&#xA;    &#xD;&#xA;    n/c  n/c  n/c   no monitor&#xD;&#xA;    n/c  n/c  GND   Mono monitor which does not support 1024x768&#xD;&#xA;    n/c  GND  n/c   Color monitor which does not support 1024x768&#xD;&#xA;    GND  GND  n/c   Color monitor which supports 1024x768&#xD;&#xA;    &#xD;&#xA;    GND means connected to ground&#xD;&#xA;    n/c means that the pin is not connected anywhere&#xD;&#xA;&#xD;&#xA;If this is happening, the VGA BIOS will reprogram the internal palette to show gray shades instead of colors. To find out if this is so, you can test this:&#xD;&#xA;&#xD;&#xA;Without starting Windows (that is, in &quot;pure&quot; DOS mode), execute debug&#xD;&#xA;&#xD;&#xA;    C:\&gt;debug&#xD;&#xA;&#xD;&#xA;And enter these commands at the `debug` command prompt (a dash):&#xD;&#xA;&#xD;&#xA;    -o 3c7,0&#xD;&#xA;&#xD;&#xA;This is to select DAC palette registers for read. Now, repeat the following command three times to get the R,G and B information for each palette entry.&#xD;&#xA;&#xD;&#xA;    -i 3c9&#xD;&#xA;&#xD;&#xA;After entering the i command, debug will return the byte at that I/O port address, as in this example.&#xD;&#xA;&#xD;&#xA;    -i 3c9&#xD;&#xA;    00&#xD;&#xA;    -i 3c9&#xD;&#xA;    00&#xD;&#xA;    -i 3c9&#xD;&#xA;    00&#xD;&#xA;&#xD;&#xA;My first palette entry is therefore RGB(0,0,0). Do it a second time&#xD;&#xA;&#xD;&#xA;    -i 3c9&#xD;&#xA;    00&#xD;&#xA;    -i 3c9&#xD;&#xA;    00&#xD;&#xA;    -i 3c9&#xD;&#xA;    2A&#xD;&#xA;&#xD;&#xA;My second palette entry is RGB(0,0,2A), which gives me a dark blue.&#xD;&#xA;&#xD;&#xA;If you continue doing this, you will get the RGB values associated to each palette entry. A VGA card programmed with a grayscale palette will show identical values in R,G and B for each non-black color. For example, the second palette entry may show like this in a B/W setup:&#xD;&#xA;&#xD;&#xA;    -i 3c9&#xD;&#xA;    05&#xD;&#xA;    -i 3c9&#xD;&#xA;    05&#xD;&#xA;    -i 3c9&#xD;&#xA;    05&#xD;&#xA;&#xD;&#xA;Which is roughly the grayscale shade equivalent to the original dark blue color.&#xD;&#xA;&#xD;&#xA;To quit debug, just enter `q` at the debug command prompt.&#xD;&#xA;&#xD;&#xA;If with this test you conclude that your monitor is reporting itself as a B/W monitor to your VGA, a solution would be to take a VGA extension cable and wire it so pins 4 and 11 at the VGA card side go to GND, and pin 12 is left unconnected. On the VGA monitor side, these pins may be unconnected." />
  <row Id="425" PostHistoryTypeId="2" PostId="158" RevisionGUID="19986a8c-c4bd-422e-8c65-ce6740f8aee9" CreationDate="2016-04-21T07:05:56.643" UserId="105" Text="For your reference, this is the datapath I inferred after reading Chris book. It's the ULA datapath I've used in the ZX-UNO clone. Coloured blocks will help you differentiate what parts are from the original ULA, Timex additions, and ULAplus additions.&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/IDFHP.png" />
  <row Id="426" PostHistoryTypeId="5" PostId="153" RevisionGUID="759d5582-b9dd-4382-8e32-8bc8955c451b" CreationDate="2016-04-21T08:21:17.290" UserId="6" Comment="added 315 characters in body" Text="Most of this info comes from the Color Computer 3 Service Manual (26-3334), except for the actual frequencies used on the cassette:&#xD;&#xA;&#xD;&#xA;On the tape, [frequency shift keying is used][1], with a zero bit encoded by a single 1200 Hz sine wave, and a one bit encoded by a single 2400 Hz sine wave. (Yes, this means some bytes play faster than others.) The service manual claims this results in 1500 baud, but obviously this will vary depending on the actual data being stored.&#xD;&#xA;&#xD;&#xA;The service manual follows by describing the actual data format in section 5.10:&#xD;&#xA;&#xD;&#xA;Each file saved on tape consists of six discrete items:&#xD;&#xA;&#xD;&#xA; 1. A leader, 128 bytes of 55H&#xD;&#xA; 2. A Namefile block, containing the file name&#xD;&#xA; 3. Approximately 0.5 seconds of blank space with no audio, which is meant to give the CoCo enough time to process the Namefile block&#xD;&#xA; 4. Another leader, 128 bytes of 55H&#xD;&#xA; 5. One or more data blocks&#xD;&#xA; 6. An end of file block&#xD;&#xA;&#xD;&#xA;Data blocks, Namefile blocks and end of file blocks have a common format:&#xD;&#xA;&#xD;&#xA; * Leader byte 55H&#xD;&#xA; * Sync byte 3CH&#xD;&#xA; * A block type byte: 00H = Namefile block, 01H = data block, FFH = end of file block&#xD;&#xA; * Block length byte&#xD;&#xA; * Data (up to 255 bytes)&#xD;&#xA; * Checksum: the sum of all data bytes plus block type and block length bytes&#xD;&#xA; * Trailer byte 55H&#xD;&#xA;&#xD;&#xA;The data in the Namefile block is 15 bytes long, and consists of:&#xD;&#xA;&#xD;&#xA; * Eight bytes for the file name&#xD;&#xA; * A file type byte: 00H = BASIC program, 01H = data, 02H = Machine language program&#xD;&#xA; * An ASCII flag: 00H = ASCII, FFH = binary&#xD;&#xA; * A gap flag: 01H = continuous, FFH = gaps&#xD;&#xA; * For machine language programs, the start address (two bytes)&#xD;&#xA; * For machine language programs, the load address (two bytes)&#xD;&#xA;&#xD;&#xA;The end of file block is a block with zero length.&#xD;&#xA;&#xD;&#xA;The original [Color Computer Technical Reference Manual][2] (26-3193) has more detail on the hardware implementation of the cassette interface, if you find this necessary.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://caltronik.pagesperso-orange.fr/Pawel/TRS-80/pc_files/cas_rest/index.html&#xD;&#xA;  [2]: http://www.colorcomputerarchive.com/coco/Documents/Manuals/Hardware/Color%20Computer%20Technical%20Reference%20Manual%20(Tandy).pdf" />
  <row Id="427" PostHistoryTypeId="2" PostId="159" RevisionGUID="58d26253-9769-468c-b5c8-5d6550cedb89" CreationDate="2016-04-21T08:25:15.243" UserId="74" Text="There were some cassette copying programs for 8-bit Atari, that boasted saving the games in a way that would load it at up to 1800baud - versus the standard 600baud, which was a significant improvement, and without requiring hardware modifications of the cassette recorder.&#xD;&#xA;&#xD;&#xA;How did they work? And why wasn't that the standard used everywhere?&#xD;&#xA;&#xD;&#xA;(IIRC, the program &quot;Warp Copy&quot; was an example of this.)" />
  <row Id="428" PostHistoryTypeId="1" PostId="159" RevisionGUID="58d26253-9769-468c-b5c8-5d6550cedb89" CreationDate="2016-04-21T08:25:15.243" UserId="74" Text="How did Atari casette &quot;turbo without hardware mods&quot; work?" />
  <row Id="429" PostHistoryTypeId="3" PostId="159" RevisionGUID="58d26253-9769-468c-b5c8-5d6550cedb89" CreationDate="2016-04-21T08:25:15.243" UserId="74" Text="&lt;software&gt;&lt;atari&gt;&lt;utilities&gt;" />
  <row Id="430" PostHistoryTypeId="2" PostId="160" RevisionGUID="11ed851a-ee0e-41cf-8618-e9cc4759e37e" CreationDate="2016-04-21T08:32:54.420" UserId="146" Text="&lt;sup&gt;Just wondering how history questions will fare here. They could be a good addition to our scope.&lt;/sup&gt;&#xD;&#xA;&#xD;&#xA;Pretty much exactly as the title says. Some of the earliest computers were based on valve systems or mechanical arrangements. What was he earliest computer that was not based on either of these systems?&#xD;&#xA;&#xD;&#xA;I'm assuming this means a digital electronic computer, but I may be wrong if there's an earlier type!" />
  <row Id="431" PostHistoryTypeId="1" PostId="160" RevisionGUID="11ed851a-ee0e-41cf-8618-e9cc4759e37e" CreationDate="2016-04-21T08:32:54.420" UserId="146" Text="What was the earliest non-valve, non-mechanical computer?" />
  <row Id="432" PostHistoryTypeId="3" PostId="160" RevisionGUID="11ed851a-ee0e-41cf-8618-e9cc4759e37e" CreationDate="2016-04-21T08:32:54.420" UserId="146" Text="&lt;history&gt;" />
  <row Id="433" PostHistoryTypeId="2" PostId="161" RevisionGUID="88b38b1b-4fbd-4ca3-84c1-53037a7cde2c" CreationDate="2016-04-21T08:41:28.443" UserId="74" Text="Some small utilities, tools etc for Atari were distributed as BASIC programs that would consist of just one line, that looked something like this:&#xD;&#xA;&#xD;&#xA;    10 A=USR(ADR(&quot;p$PHHLéúÿÿÇEéúÿÿ@éüÿÿ2A$éòùÿÿE°U´è§øÿÿøÿÆûÿÿé`&quot;))&#xD;&#xA;&#xD;&#xA;(except with far more semigraphics and inverse video characters).&#xD;&#xA;&#xD;&#xA;Essentially, the machine language program was encoded as a string (Atari could display all 256 characters of ATASCII even if typing some of them required some hoop-jumping), the string was wrapped into ADR (returning the address of the string) and USR (jumping to the address given).&#xD;&#xA;&#xD;&#xA;I can't quite imagine anyone converting the binary generated by the assembler into ATASCII by hand, especially if the program was longer. There had to be some utility to do this - emit a fragment of memory as string, wrap it into the commands, save as BASIC program. Is it obtainable somehow?" />
  <row Id="434" PostHistoryTypeId="1" PostId="161" RevisionGUID="88b38b1b-4fbd-4ca3-84c1-53037a7cde2c" CreationDate="2016-04-21T08:41:28.443" UserId="74" Text="How does one convert Atari assembly to A=USR(ADR(&quot;[garble]&quot;)) style BASIC wrapper?" />
  <row Id="435" PostHistoryTypeId="3" PostId="161" RevisionGUID="88b38b1b-4fbd-4ca3-84c1-53037a7cde2c" CreationDate="2016-04-21T08:41:28.443" UserId="74" Text="&lt;software&gt;&lt;atari&gt;" />
  <row Id="436" PostHistoryTypeId="2" PostId="162" RevisionGUID="55eb9156-4a37-45a9-a114-50e2a66cf156" CreationDate="2016-04-21T08:53:39.513" UserId="74" Text="8-bit Atari Basic had three different formats of storing programs on tape.&#xD;&#xA;&#xD;&#xA;* `CLOAD`/`CSAVE`&#xD;&#xA;* `LOAD &quot;C:&quot;`/`SAVE &quot;C:&quot;`&#xD;&#xA;* `ENTER &quot;C:&quot;`/`LIST &quot;C:&quot;`&#xD;&#xA;&#xD;&#xA;I understand the specifics of the last one - it behaved as if the contents of the file were typed from keyboard; with some rather simple hack you could save something else than the program in memory; a common one was appending `RUN` at the end of saved program making it autorun upon loading, as the command was executed as soon as the program was loaded.&#xD;&#xA;&#xD;&#xA;I understand `LOAD` could take other handlers, like `D:` for disk. I've long and fruitfully used it with `T:` for tape in Turbo mode provided by cartridge.&#xD;&#xA;&#xD;&#xA;But I completely fail to see the point behind `CLOAD`. Did it provide anything `LOAD C:` didn't? The two save methods were incompatible, you couldn't perform `CLOAD` on what you saved with `SAVE C:` so it wasn't just syntactic sugar. What was its purpose and difference &quot;behind the scenes&quot;? Saving typing &quot;C:&quot; seems pointless?" />
  <row Id="437" PostHistoryTypeId="1" PostId="162" RevisionGUID="55eb9156-4a37-45a9-a114-50e2a66cf156" CreationDate="2016-04-21T08:53:39.513" UserId="74" Text="What was the difference between CLOAD and LOAD &quot;C:&quot;?" />
  <row Id="438" PostHistoryTypeId="3" PostId="162" RevisionGUID="55eb9156-4a37-45a9-a114-50e2a66cf156" CreationDate="2016-04-21T08:53:39.513" UserId="74" Text="&lt;atari&gt;&lt;atari-basic&gt;" />
  <row Id="439" PostHistoryTypeId="2" PostId="163" RevisionGUID="c05d1c86-36b7-4166-b55f-3be75d19627e" CreationDate="2016-04-21T09:00:51.097" UserId="204" Text="Many OCS/ECS Amiga games use more than 32 colours. &#xD;&#xA;&#xD;&#xA;There are some cases of games using Extra Half Bright (EHB) mode like Universe (see this thread for more info on that game: http://retrocomputing.stackexchange.com/questions/44/how-to-obtain-256-arbitrary-colors-with-limitation-of-64-per-line-in-amiga-ecs).&#xD;&#xA;&#xD;&#xA;However, the most usual way of achieving more than 32 colours in a frame is using Copper tricks. The Copper is a coprocessor which runs in sync with the video beam, and can modify some of the custom chips registers. The programs executed by the Copper are made of 3 different instructions (wait, move, skip). Such programs are called copperlists. You can easily build a copperlist which waits for certain video beam positions and changes some colour palette registers. There are lots of well known games using this technique: Pang, Lionheart, Agony, etc.&#xD;&#xA;&#xD;&#xA;Of course, you can animate graphic objects (BOBs or sprites) using any of this techniques." />
  <row Id="440" PostHistoryTypeId="2" PostId="164" RevisionGUID="063d87d8-580c-43a3-998a-3972a92fa331" CreationDate="2016-04-21T09:04:32.953" UserId="46" Text="I guess (is that allowed as an answer?) that these are bus terminating resistors. High speed signals are usually passed along impedance matched transmission lines, the termination resistor mostly removes any reflections from an unused port." />
  <row Id="441" PostHistoryTypeId="2" PostId="165" RevisionGUID="bd69a5ac-1345-4fc9-a03d-bcb3a43d3c32" CreationDate="2016-04-21T09:07:30.157" UserId="6" Text="Since vacuum tube computers are considered fully electronic, and electromechanical computers are evolutionarily a step backward from that, I'll remove them from consideration.&#xD;&#xA;&#xD;&#xA;This requires a computer based on the transistor, which was invented in 1947, and still forms the core of every modern CPU, though today they number in the billions.&#xD;&#xA;&#xD;&#xA;The first computer to use transistors at all was an experimental [Transistor Computer][1] built at the University of Manchester in 1953, with a second version built in 1955. But this computer still had a few tubes left in it. This line of computers never got a proper name.&#xD;&#xA;&#xD;&#xA;The first fully transistorized computer, then, was the [Harwell CADET][2], built by the UK's Atomic Energy Research Establishment; it first ran in 1955 but was only in use for four years before being put out to pasture. It ran numerical analysis jobs for nuclear physicists.&#xD;&#xA;&#xD;&#xA;At about the same time in 1955 IBM announced [the 608 computer][3], but its claim to being the first is dubious as it does not appear to have actually been on the market until 1957.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://en.wikipedia.org/wiki/Manchester_computers#Transistor_Computer&#xD;&#xA;  [2]: https://en.wikipedia.org/wiki/Harwell_CADET&#xD;&#xA;  [3]: http://www-03.ibm.com/ibm/history/exhibits/vintage/vintage_4506VV2214.html" />
  <row Id="442" PostHistoryTypeId="5" PostId="98" RevisionGUID="99ea4d05-5fa2-4f2b-96ef-5b72ed4d0f73" CreationDate="2016-04-21T11:11:54.213" UserId="46" Comment="Corrected grammar to reflect original intended meaning (I guess)" Text="Although only 16 different colors were allowed on c64 (more exactly, in the VIC-II), which came from a fixed palette, the video output created an analogoue tv signal.&#xD;&#xA;&#xD;&#xA;Which means, somewhere in the final, D/A conversion phase of the vic signal generation, a palette should have existed, which defined the different rgb signal levels, indexed by the 4bit color code.&#xD;&#xA;&#xD;&#xA;What is known from it? How many analogoue signal levels did it have?&#xD;&#xA;&#xD;&#xA;(Btw, in this 16-color palette, there were 5 greyscale colors. Thus, the number of analogoue signal levels should have been at least 5.)&#xD;&#xA;&#xD;&#xA;*Extension, reacting @Mark's answer:* &#xD;&#xA;&#xD;&#xA;Ok, the TV output had a YIQ. But, somewhere in the VIC II, there should have been something with a color index 0-15 as input, and with an analogoue YIQ as output. I suspected it was some hardwired palette table and a D/A converter, but you say it wasn't. What was it then? How did the 4 color bit -&gt; 3 YIQ signal level work?" />
  <row Id="443" PostHistoryTypeId="4" PostId="98" RevisionGUID="99ea4d05-5fa2-4f2b-96ef-5b72ed4d0f73" CreationDate="2016-04-21T11:11:54.213" UserId="46" Comment="Corrected grammar to reflect original intended meaning (I guess)" Text="How many analogoue rgb signal level did the VIC-II have?" />
  <row Id="444" PostHistoryTypeId="24" PostId="98" RevisionGUID="99ea4d05-5fa2-4f2b-96ef-5b72ed4d0f73" CreationDate="2016-04-21T11:11:54.213" Comment="Proposed by 46 approved by 129 edit id of 63" />
  <row Id="448" PostHistoryTypeId="2" PostId="166" RevisionGUID="faae7eaf-d6cb-4ef8-a586-0e0a5ee32955" CreationDate="2016-04-21T12:48:53.067" UserId="128" Text="I used to have an old Toshiba T2000SX laptop, but some day its HDD died. I found a newer laptop HDD that fit in and I could format it to appear to have a small enough capacity to get detected by the laptop.&#xD;&#xA;&#xD;&#xA;However, I could not boot from this disk, although reading and writing to it worked like a charm. Installing DOS and even Win 3.11 went well, I just had to always boot from a boot floppy disk that then loaded the system on the HDD.&#xD;&#xA;&#xD;&#xA;When I tried to boot directly from the HDD, the screen filled with rows of `02` sequences that then started to continuously move to the left (if I remember correctly) as soon as the screen was full. No reactions any more, need to hard-reset.&#xD;&#xA;&#xD;&#xA;So I guessed Toshiba has built some kind of protection into the chipset that prevents booting from non-Toshiba HDDs. I continued occasionally using it by booting from a floppy, but when the floppy drive later died as well, I abandoned the entire laptop.&#xD;&#xA;&#xD;&#xA;Out of pure curiosity, was this &quot;error `02`&quot; really a protection against foreign HDDs or would it have had a different cause? Were such protection mechanisms common back in this laptop's time?" />
  <row Id="449" PostHistoryTypeId="1" PostId="166" RevisionGUID="faae7eaf-d6cb-4ef8-a586-0e0a5ee32955" CreationDate="2016-04-21T12:48:53.067" UserId="128" Text="Toshiba T2000SX can't boot from non-original HDD - &quot;02&quot; all over the screen" />
  <row Id="450" PostHistoryTypeId="3" PostId="166" RevisionGUID="faae7eaf-d6cb-4ef8-a586-0e0a5ee32955" CreationDate="2016-04-21T12:48:53.067" UserId="128" Text="&lt;hard-disk&gt;&lt;boot&gt;&lt;toshiba&gt;" />
  <row Id="451" PostHistoryTypeId="2" PostId="167" RevisionGUID="f1c8e340-d541-4031-a4b1-876eb8e22daa" CreationDate="2016-04-21T12:53:43.313" UserId="168" Text="What is the most effective way to clean cases, keyboards, old calculators, etc. without harming or discoloring plastic finishes or printing/paint?" />
  <row Id="452" PostHistoryTypeId="1" PostId="167" RevisionGUID="f1c8e340-d541-4031-a4b1-876eb8e22daa" CreationDate="2016-04-21T12:53:43.313" UserId="168" Text="How should I clean my computers and parts?" />
  <row Id="453" PostHistoryTypeId="3" PostId="167" RevisionGUID="f1c8e340-d541-4031-a4b1-876eb8e22daa" CreationDate="2016-04-21T12:53:43.313" UserId="168" Text="&lt;maintenance&gt;" />
  <row Id="454" PostHistoryTypeId="2" PostId="168" RevisionGUID="58fc257b-1308-4fd4-9a2e-f85348a27e71" CreationDate="2016-04-21T12:58:14.197" UserId="168" Text="*Why* do plastic cases of old computers turn yellow? Is this yellowing a problem that has been solved in modern plastics?" />
  <row Id="455" PostHistoryTypeId="1" PostId="168" RevisionGUID="58fc257b-1308-4fd4-9a2e-f85348a27e71" CreationDate="2016-04-21T12:58:14.197" UserId="168" Text="Why do they turn yellow?" />
  <row Id="456" PostHistoryTypeId="3" PostId="168" RevisionGUID="58fc257b-1308-4fd4-9a2e-f85348a27e71" CreationDate="2016-04-21T12:58:14.197" UserId="168" Text="&lt;maintenance&gt;" />
  <row Id="457" PostHistoryTypeId="4" PostId="168" RevisionGUID="214d5961-eaa2-4d7f-848f-6eaae76fc2f2" CreationDate="2016-04-21T13:07:17.607" UserId="47" Comment="edited title" Text="Why do older computer cases turn yellow?" />
  <row Id="458" PostHistoryTypeId="4" PostId="167" RevisionGUID="11b59a5d-7aee-422e-8b0d-bddb53a58f5a" CreationDate="2016-04-21T13:08:08.517" UserId="47" Comment="edited title" Text="How should I clean the plastic exterior of my computers and parts?" />
  <row Id="459" PostHistoryTypeId="2" PostId="169" RevisionGUID="5be73f1e-fbac-48f0-a2b7-dae31c6f191e" CreationDate="2016-04-21T13:10:51.250" UserId="138" Text="Use [methylated spirit][1] (alcohol) and a soft cloth. The spirit evaporates quickly and doesn't leave stains.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://en.wikipedia.org/wiki/Denatured_alcohol" />
  <row Id="460" PostHistoryTypeId="2" PostId="170" RevisionGUID="c1468983-6d67-48b6-b18a-b44deebf676d" CreationDate="2016-04-21T13:18:17.193" UserId="107" Text="Water and a soft cloth goes a long way. Rubbing alcohol is useful for more stubborn stains, and you can't beat a tooth brush or similar to get into cracks and seams.&#xD;&#xA;&#xD;&#xA;With hardware that's particularly grubby and where the electronics can be completely removed I've washed the parts in the kitchen sink using dish washing liquid. It's never caused any problems to the plastics I've cleaned this way.&#xD;&#xA;&#xD;&#xA;If the dirt turns out to be discolouration (yellowing) then you *may* want to look into retr0bright, but it seems that the jury is still out with respect to it's long term effects and some people are happy with the 'aged' look." />
  <row Id="461" PostHistoryTypeId="2" PostId="171" RevisionGUID="559b8d29-92c1-41ae-9fa6-714ee2e22d68" CreationDate="2016-04-21T13:34:50.207" UserId="152" Text="I recently got a Apple [Power Macintosh 6100](https://en.wikipedia.org/wiki/Power_Macintosh_6100) for free. It powers up and seems to work, so I want to try it out and see what it's like. Unfortunately, the important ports and connectors are &quot;non-standard&quot;, which means I can't directly hook up the things I have:&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;I'd like to connect a standard monitor (With VGA, S-Video, or something else which have), as well as a keyboard and mouse (I have some PS/2 keyboards an mice lying around). There seem to be adapters for [HDI-45](https://en.wikipedia.org/wiki/HDI-45_connector) to VGA, but I want to do this without buying any additional parts (i.e. for free). I'm comfortable with soldering and making things, as well as electronics in general.&#xD;&#xA;&#xD;&#xA;---&#xD;&#xA;Is there a way to connect a more &quot;Standard&quot; display, keyboard, and mouse to this computer ?, and, if so, how do I do this ?&#xD;&#xA;&#xD;&#xA;Is there anything else I should be aware of ?&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/XUuy5.jpg" />
  <row Id="462" PostHistoryTypeId="1" PostId="171" RevisionGUID="559b8d29-92c1-41ae-9fa6-714ee2e22d68" CreationDate="2016-04-21T13:34:50.207" UserId="152" Text="How do I connect a modern display, keyboard, and mouse to a Power Macintosh 6100?" />
  <row Id="463" PostHistoryTypeId="3" PostId="171" RevisionGUID="559b8d29-92c1-41ae-9fa6-714ee2e22d68" CreationDate="2016-04-21T13:34:50.207" UserId="152" Text="&lt;hardware&gt;&lt;display&gt;&lt;power-macintosh&gt;" />
  <row Id="464" PostHistoryTypeId="2" PostId="172" RevisionGUID="d3a8e0b6-e72b-48c8-aaa6-e2cfbde87f5f" CreationDate="2016-04-21T14:13:08.660" UserId="29" Text="The Color Computer has an expansion port. What is the pin out? What are the kinds of devices that can be used with it? How was the Multi-Pak involved?" />
  <row Id="465" PostHistoryTypeId="1" PostId="172" RevisionGUID="d3a8e0b6-e72b-48c8-aaa6-e2cfbde87f5f" CreationDate="2016-04-21T14:13:08.660" UserId="29" Text="Expansion port on the Color Computer" />
  <row Id="466" PostHistoryTypeId="3" PostId="172" RevisionGUID="d3a8e0b6-e72b-48c8-aaa6-e2cfbde87f5f" CreationDate="2016-04-21T14:13:08.660" UserId="29" Text="&lt;color-computer&gt;" />
  <row Id="467" PostHistoryTypeId="2" PostId="173" RevisionGUID="ad3332ef-40c7-46aa-9e30-8c8619b002ad" CreationDate="2016-04-21T14:14:27.963" UserId="173" Text="Assuming the yellowing isn't caused by nicotine, if you're a smoker, usually it's because of UV light interacting with flame retardants (usually bromine) in the plastic of the device's case. UV exposure can be from sun or fluorescent lights - the yellowing plastic isn't picky about the UV source.&#xD;&#xA;&#xD;&#xA;I'm not aware of it being solved in modern plastics." />
  <row Id="468" PostHistoryTypeId="2" PostId="174" RevisionGUID="f3fadd16-a99e-4567-ac37-1a4ea7f09dbd" CreationDate="2016-04-21T14:29:50.037" UserId="173" Text="The basic improvements over the 6809: - 2 more 8bit accumulators; additional 8 &amp; 16 bit registers - native and 6809 emulation modes - fewer execution cycles in native mode - improved instruction set - error trapping (illegal instruction &amp; divide by zero) - roughly 10% speed increase in emulation mode/40% in native mode (both application dependant) - variants include 3Mhz parts. &#xD;&#xA;&#xD;&#xA;Much more detailed information can be found in a memo written by Hirotsugu Kakugawa [link](http://fms.komkon.org/comp/CPUs/6309.txt).&#xD;&#xA;&#xD;&#xA;Below are excepts from the link (this is NOT my writing, I'm reposting existing information):&#xD;&#xA;&#xD;&#xA;The CPU 6309 by HITACHI has secret features which is not written in&#xD;&#xA;its manual.  The purpose of this memo is to introduce them.  &#xD;&#xA;The features was originally reported in a magazine, &#xD;&#xA;Oh!FM (1988 Apr.), which was written in Japanese.  I did not tried all&#xD;&#xA;of the features reported in the article, but I report the features as&#xD;&#xA;far as I know. &#xD;&#xA;&#xD;&#xA;HITACHI says in the manual of 6309 that 6309 is compatible with 6809,&#xD;&#xA;but some OS-9 hackers found that it has secret features.&#xD;&#xA;&#xD;&#xA;It has following features:&#xD;&#xA; 1. More registers (additional two 8 bit accumulators, 8 bit&#xD;&#xA;     register, and a 16 bit register), &#xD;&#xA; 2. Two modes (6809 emulation mode and native mode),&#xD;&#xA; 3. Reduced execution cycles in native mode,&#xD;&#xA; 4. More instructions (16 bit x 16 bit multiplication, 32 bit / 16 bit&#xD;&#xA;    division, inter-registers operation, block transfer, bit&#xD;&#xA;    manipulating operation which is compatible with 6801 has, etc)&#xD;&#xA; 5. Error trap by illegal instruction, zero division.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;The 6309 has some additional registers that 6809 does not.  &#xD;&#xA;&#xD;&#xA;  1. The E register, the F register &#xD;&#xA;     These are 8 bit accumulators.  Like the D register is a pair of &#xD;&#xA;     the A register and the B register, these two registers can be&#xD;&#xA;     used as a 16 bit accumulator. The pair of the E and the F&#xD;&#xA;     registers is called the W register.&#xD;&#xA;     In addition to that, pair of two 16 bit registers, the D register&#xD;&#xA;     and the W register, can be used as a 32 bit accumulator called the&#xD;&#xA;     Q register.&#xD;&#xA;&#xD;&#xA;  2. The V register&#xD;&#xA;     This a 16 bit register can be used only by TFR, inter-register&#xD;&#xA;     operation, etc.  But even if the chip is reseted, contents of&#xD;&#xA;     this register does not change.  Some people  may use this&#xD;&#xA;     register to keep constant value (V for value).&#xD;&#xA;&#xD;&#xA;  3. The MD register&#xD;&#xA;     This is a 8 bit register to keep the mode and status of the chip.&#xD;&#xA;     The meaning of each bit is as follow.&#xD;&#xA;&#xD;&#xA;     Read value&#xD;&#xA;        bit 7  ---  1 is set if zero division happen.&#xD;&#xA;        bit 6  ---  1 is set if illegal instruction is fetched.&#xD;&#xA;&#xD;&#xA;     Write value &#xD;&#xA;        bit 1  ---  The mode for FIRQ interrupt.&#xD;&#xA;                    0 -&gt; the the action for FIRQ is the same as that&#xD;&#xA;                         of 6809.&#xD;&#xA;                    1 -&gt; the the action for FIRQ is the same as IRQ.&#xD;&#xA;        bit 0  ---  The execution mode of 6309.&#xD;&#xA;                    0 -&gt; the emulation mode.&#xD;&#xA;                    1 -&gt; the native mode.&#xD;&#xA;&#xD;&#xA;     (When the chip is reseted, all bits are 0.) &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;The 6309 has two modes, emulation mode and native mode, as described&#xD;&#xA;in the previous section.  When the chip is reseted, the initial mode&#xD;&#xA;of 6309 is the emulation mode. &#xD;&#xA;&#xD;&#xA;When the 6309 is in the emulation mode, the chip emulates the action&#xD;&#xA;of 6809.  But we can use extended registers and extended operations in&#xD;&#xA;this mode.  The 6309 executes instructions in the same cycles as 6809&#xD;&#xA;does.  &#xD;&#xA; &#xD;&#xA;When the 6309 is in the native mode, it executes instructions in&#xD;&#xA;less cycles. And when the chip is interrupted (IRQ, for example), &#xD;&#xA;it pushes extended registers (PC, U, Y, X, DP, W, D, CC, in this&#xD;&#xA;order).  If you want to use the 6309, you must rewrite interrupt&#xD;&#xA;handling routine (for example, the entry of system call of OS9).&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;NEW INSTRUCTIONS&#xD;&#xA;&#xD;&#xA;The Register Addressing Mode&#xD;&#xA;&#xD;&#xA;To specify registers in TFR and EXG, the 6809 uses bit pattern of 4 bits. &#xD;&#xA;New registers of the 6309 are specified by bit patterns in TFR and EXG&#xD;&#xA;operations. In addition to that, the bit pattern is also used in&#xD;&#xA;instructions of inter-register operations.  We call this bit pattern&#xD;&#xA;used to specify register &quot;register addressing mode&quot;.&#xD;&#xA;&#xD;&#xA;Bit patterns for new registres are as follows:&#xD;&#xA;&#xD;&#xA;    W  -&gt;  0110,&#xD;&#xA;    V  -&gt;  0111,&#xD;&#xA;    E  -&gt;  1110,&#xD;&#xA;    F  -&gt;  1111.&#xD;&#xA;&#xD;&#xA;NOTE: even if the 6309 is in a emulation mode, the action for TFR of 6309 &#xD;&#xA;is different from that of the 6809 if new register is specified in&#xD;&#xA;operand.  Some hackers found this fact and they guessed that the 6309&#xD;&#xA;has secret registers. At last, they found many features.&#xD;&#xA;&#xD;&#xA;Inter-Register Operations&#xD;&#xA;Operations of 6809 are operations between register and immediate value&#xD;&#xA;or between register and memory.  Therefore, we had to store value of &#xD;&#xA;register on memory if opetation between two registers is necessary.&#xD;&#xA;  But the 6309 has inter-register operation. Following operations are &#xD;&#xA;provided:&#xD;&#xA;    ADDR r0,r1  (ADD of two registers),&#xD;&#xA;    ADCR r0,r1  (ADC of two registers),&#xD;&#xA;    SUBR r0,r1  (SUB of two registers),&#xD;&#xA;    SBCR r0,r1  (SBC of two registers),&#xD;&#xA;    ANDR r0,r1  (AND of two registers),&#xD;&#xA;    ORR  r0,r1  (OR of two registers),&#xD;&#xA;    EORR r0,r1  (EOR of two registers),&#xD;&#xA;    CMPR r0,r1  (CMP of two registers).&#xD;&#xA;The register addressing mode is used to specify two registers.&#xD;&#xA;(I do not remember exactrlly but the result is stored in r0, the&#xD;&#xA;register of the first operand. Please try and find the behavior of&#xD;&#xA;these instructions.)&#xD;&#xA;&#xD;&#xA;Block Transfer&#xD;&#xA;Block transfer instructions are provided such as Z80 has.&#xD;&#xA;The TFM instruction requires source address and destination address &#xD;&#xA;and block size as its argument.  One or two 16 bit registers (X/Y/U/S)&#xD;&#xA;are used to specify source and destination addresses. Block size to be &#xD;&#xA;transfered is specified by the W register. &#xD;&#xA;Four style is provided:&#xD;&#xA;    TFR r0+,r1+  (transfered in address is increasing order),&#xD;&#xA;    TFR r0-,r1-  (transfered in address is decreasing order),&#xD;&#xA;    TFR r0+,r1   (poured into the same address, I/O port for instance),&#xD;&#xA;    TFR r0,r1+   (read from the same address, I/O port for instance).&#xD;&#xA;I tried this instructions but I do not remember exactly.&#xD;&#xA;Operand registers are pointers of source/destination addresses (,maybe).&#xD;&#xA;Please try and find the behavior of these instructions.&#xD;&#xA;&#xD;&#xA;Multiplication And Division&#xD;&#xA;The 6309 has MULD instruction which performs a 16bit x 16bit multipli-&#xD;&#xA;cation. We can use various addressing modes (immediate, direct, indexed,&#xD;&#xA;extend)  The result is stored in the Q register.&#xD;&#xA;  &#xD;&#xA;Division instructions are also provided.  The 6309 has two division&#xD;&#xA;instructions: 16bit / 8bit, 32bit / 16bit divisions. &#xD;&#xA;Various addressing modes (immediate, direct, indexed, extend) can be &#xD;&#xA;used.  &#xD;&#xA;(Note:I forget where its result is stored.  I tried these instructions. &#xD;&#xA;I remember that modulo is also computed. The quotient and the modulo &#xD;&#xA;are stored D and W resp., maybe. I'm not sure, sorry.)&#xD;&#xA;&#xD;&#xA;Bit Manipulation / Bit Transfer&#xD;&#xA;The 6309 provides AIM, OIM, EIM, TIM instructions which are compatible &#xD;&#xA;with instructions of the Hitachi 6301 CPU.  Read the manual of the 6301&#xD;&#xA;to understand thses instructions.&#xD;&#xA;&#xD;&#xA;Instructions called BAND, BOR, BEOR, BIAND, BIOR, BIEOR, LDBT, STBT&#xD;&#xA;are provided.  Behavior of thses instructions is that a logical&#xD;&#xA;operation is performed for n-th bit of a data in a memory (only direct&#xD;&#xA;mode is allowed) and m-th bit of a register, then the result is stored &#xD;&#xA;in the register. The format of the object is :&#xD;&#xA;   $11, x, (post byte), (operand).&#xD;&#xA;The say that the post byte takes strange format.  I do not understand&#xD;&#xA;these instructions. Sorry, please try.  &#xD;&#xA;&#xD;&#xA;To change modes ofthe 6309, we have to set the 0th bit of the MD&#xD;&#xA;register.  To do this, the LDMD instruction is provided:&#xD;&#xA;    LDMD #n     (where #n is a immediate n bit data)&#xD;&#xA;When trap is caused, it is necessary to examine the reason of the &#xD;&#xA;trap. The BITMD instruction can be used for this purpose:&#xD;&#xA;    BITMD #n    (where #n is a immediate n bit data)&#xD;&#xA;The contents of the MD register and #n is ANDed, and changes the CC &#xD;&#xA;register (,maybe, I do not remember exactly).&#xD;&#xA;Once this instruction is executed, the 6th and the 7th bit of the &#xD;&#xA;MD register is CLEARED.  Therefore, we can't examine the MD register.&#xD;&#xA;&#xD;&#xA;Pushing and poping the W registers on/from stack:&#xD;&#xA;    PSHSW     (Push the W register on the system stack),&#xD;&#xA;    PULSW     (Pop the W register from the system stack),&#xD;&#xA;    PSHUW     (Push the W register on the user stack),&#xD;&#xA;    PULUW     (Pop the W register from the user stack).&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;" />
  <row Id="469" PostHistoryTypeId="2" PostId="175" RevisionGUID="64f71737-c7de-4218-bd82-eb991c1aceca" CreationDate="2016-04-21T14:34:39.903" UserId="105" Text="Maybe the most difficult task is to find a plug for the Apple AudioVision connector. Here is its pinout, taken from http://pinouts.ru/Video/audiovision_pinout.shtml , in case you find a suitable connector and want to do the wiring by yourself.&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;    1	Analog audio ground&#xD;&#xA;    2	Audio input shield&#xD;&#xA;    3	Left channel audio input&#xD;&#xA;    4	Right channel audio input&#xD;&#xA;    5	Left channel audio output&#xD;&#xA;    6	Right channel audio output&#xD;&#xA;    7	Reserved&#xD;&#xA;    8	Monitor ID sense line 1&#xD;&#xA;    9	Monitor ID sense line 2&#xD;&#xA;    10	Green ground (shield)&#xD;&#xA;    11	Green video output (75 )&#xD;&#xA;    12	Video input power ground&#xD;&#xA;    13	Power for camera +5 V&#xD;&#xA;    14	Reserved&#xD;&#xA;    15	Reserved&#xD;&#xA;    16	Reserved&#xD;&#xA;    17	Reserved&#xD;&#xA;    18	Monitor ID sense line 3&#xD;&#xA;    19	S-video input shield&#xD;&#xA;    20	S-video input luminance (Y)&#xD;&#xA;    21	S-video input chroma (C)&#xD;&#xA;    22	Reserved&#xD;&#xA;    24	Reserved&#xD;&#xA;    25	Reserved&#xD;&#xA;    26	Red ground (shield)&#xD;&#xA;    27	Red video output (75 )&#xD;&#xA;    28	I2C data signal&#xD;&#xA;    29	I2C clock signal&#xD;&#xA;    30	Reserved&#xD;&#xA;    31	Monitor ID&#xD;&#xA;    32	Monitor ID&#xD;&#xA;    33	Vertical sync signal&#xD;&#xA;    34	Composite sync signal&#xD;&#xA;    35	ADB power +5 V&#xD;&#xA;    36	ADB ground&#xD;&#xA;    37	ADB data&#xD;&#xA;    38	Keyboard switch&#xD;&#xA;    39	Reserved&#xD;&#xA;    40	Reserved&#xD;&#xA;    41	Monitor ID&#xD;&#xA;    42	Horizontal sync signal&#xD;&#xA;    43	Video sync ground&#xD;&#xA;    44	Blue ground (shield)&#xD;&#xA;    45	Blue video output (75 )&#xD;&#xA;&#xD;&#xA;There seems to be some adapters that can adapt the Audiovision connector (aka HDI45) to DB15 standard Apple VGA connector, like this (taken from an eBay auction):&#xD;&#xA;&#xD;&#xA;[![enter image description here][2]][2]&#xD;&#xA;&#xD;&#xA;[![enter image description here][3]][3]&#xD;&#xA;&#xD;&#xA;[![enter image description here][4]][4]&#xD;&#xA;&#xD;&#xA;If you want to do it yourself, just take signals from pins 27,26 (red output and red grund), 11,10 (green output and ground), 45,44 (blue output and ground), 42 (HSYNC), 33 (VSYNC), and 43 (SYNC ground) and wire them accordingly to a VGA DE-D15 connector.&#xD;&#xA;&#xD;&#xA;For keyboard and mouse support, you will need some sort of adapter, as the connectors, protocols and signal levels are not the same.&#xD;&#xA;&#xD;&#xA;You may want to visit kdblabel ( www.kdblabel.org ) as they have tons of info about different protocol and signalling conventions. Hopefully, ADB is among them and you will be able to use a PIC or something similar to perform the conversion.&#xD;&#xA;&#xD;&#xA;For mouse support, the people at GeeThree ( http://www.geethree.com/adb/index.html ) have a PS/2 to ADB mouse adapter&#xD;&#xA;&#xD;&#xA;[![enter image description here][5]][5]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/CVp8z.gif&#xD;&#xA;  [2]: http://i.stack.imgur.com/mfjeU.jpg&#xD;&#xA;  [3]: http://i.stack.imgur.com/Jvqda.jpg&#xD;&#xA;  [4]: http://i.stack.imgur.com/i2rRM.jpg&#xD;&#xA;  [5]: http://i.stack.imgur.com/7M1WU.jpg" />
  <row Id="471" PostHistoryTypeId="2" PostId="176" RevisionGUID="32487a03-f2a5-4e12-9220-60717db4bd00" CreationDate="2016-04-21T14:46:37.943" UserId="37" Text="In this [article][1], it states:&#xD;&#xA;&#xD;&#xA;&gt; In nearly every case it’s flame retardants. Although plastics can yellow in the absence of flame retardant chemicals, the chemicals accelerate the process when exposed to heat, oxygen, and ultraviolet rays.&#xD;&#xA;&#xD;&#xA;The process of the plastic reacting with the heat, oxygen, and UV rays makes the plastic yellow. Flame retardants (very common in old computers) will only speed up the yellowing process. It could be any UV light, not just the ones from the Sun. Heat made from the device itself plus some poor choices can also make your plastic a nice yellow:&#xD;&#xA;&#xD;&#xA;&gt; The plastics used in early Super Nintendo units, however, had a terrible flame retardant mixture that yellowed as a result of the oxidation caused by the heat of the machine itself (let alone any heat in the environment).&#xD;&#xA;&#xD;&#xA;Using new formulas, the process can be slowed down, but not necessarily stopped completely. You can always try to remove the stains though, chemically or physically:&#xD;&#xA;&#xD;&#xA;&gt; Some people use ultra fine sandpaper or melamine sponges to sand away the very surface of the plastic and remove the yellowing. This works for very light yellowing and plastic types where the yellowing hasn’t penetrated very deeply into the plastic. Unfortunately it only works by removing the actual yellowed plastic...&#xD;&#xA;&#xD;&#xA;&gt; The other method, chemical removal, relies on using bleaches to attack the yellowed molecules in the plastic and restore the color. This method is best for very old and very yellowed plastic as it gets right into the structure of the plastic and does a very thorough job.&#xD;&#xA; &#xD;&#xA;   [1]:http://www.howtogeek.com/196687/ask-htg-why-do-old-computers-and-game-consoles-turn-yellow/" />
  <row Id="472" PostHistoryTypeId="2" PostId="177" RevisionGUID="cfc919be-3e20-44d3-b675-6cdb523006fc" CreationDate="2016-04-21T14:48:52.243" UserId="175" Text="ADB keyboards and mice are readily available on [eBay](http://www.ebay.com/sch/i.html?_sacat=0&amp;_nkw=macintosh+keyboard&amp;_frs=1) for as little as $10. Apple used ADB from 1987-1999 for Macs and the Apple IIgs so there are a lot of devices around. The monitor adapter from Apple AudioVision to VGA is harder to get and I defer to @mcleod_ideafix." />
  <row Id="473" PostHistoryTypeId="2" PostId="178" RevisionGUID="54f3df5a-2851-458a-a579-321aaf8fa842" CreationDate="2016-04-21T14:54:42.000" UserId="173" Text="There are two variations of the cartridge port on the Color Computer lines. The attached image shows the pin out of the CoCo 2 &amp; 3.&#xD;&#xA;&#xD;&#xA;[![CoCo 3 cartridge port][1]][1]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/cihZ6.png&#xD;&#xA;&#xD;&#xA;The CoCo 1 cartridge port is slightly different, in that it offers -12 volts DC on pin 1 and +12 volts DC on pin 2. The CoCo 2 &amp; 3 do not produce 12 volts DC. Due to this, several devices listed below, i.e.: X-Pad, cannot be used on a CoCo 2 or 3 without a Multipak Interface, which does produce the 12 volts DC required. &#xD;&#xA;&#xD;&#xA;The Multipak Interface (MPI) was a device used for bus expansion on the Color Computers. It offered four slots for cartridge devices; either hardware or software selectable. Tandy made three basic models of the MPI, while other manufactures made their own versions as well. Below is a partial list:&#xD;&#xA;&#xD;&#xA;A-Bus (Alpha Products)&#xD;&#xA;BT-1000/2000 (Basic Technology)&#xD;&#xA;CC-Bus (PBJ Inc)&#xD;&#xA;CX-P1 Color Computer Expansion Interface (General Automation)    cocoman3&#xD;&#xA;Slotpak III (Chris Hawks/Howard Medical)&#xD;&#xA;XPort (Orion Technologies)&#xD;&#xA;Computize Y-Box&#xD;&#xA;Spectrum Switcher&#xD;&#xA;Owl-Ware Super I/O&#xD;&#xA;Tandy Multipak (26-3024)&#xD;&#xA;Tandy Multipak (26-3124)&#xD;&#xA;Tandy Multipak (26-3214A)&#xD;&#xA;&#xD;&#xA;(Only the 26-3124A was ready to be used with a CoCo 3 due to the change in the CoCo 3's addressing. The other two models had to have a fairly simple mod done)&#xD;&#xA;&#xD;&#xA;The Solution (Frank Hogg Labs)&#xD;&#xA;USER-80C (J-NOR Industries)&#xD;&#xA;Y-Cable&#xD;&#xA;XPANDR1 CoCo Expander Card (Robotic Microsystems)&#xD;&#xA;XPANDR2 CoCo Expander Card (Robotic Microsystems)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Other type of devices are able to be used as well - MIDI devices; graphics tablets such as the Koala Pad and Radio Shack X-Pad; numerous types of disk storage, both floppy and hard.&#xD;&#xA;&#xD;&#xA;For a mostly complete list of the devices and pictures of most of them, as well as other hardware devices for the Color Computer lines, this [link](http://tandycoco.com/hardware) provides much more information." />
  <row Id="476" PostHistoryTypeId="5" PostId="178" RevisionGUID="0e3e4199-9baa-42ba-8166-ee863871d532" CreationDate="2016-04-21T15:04:24.333" UserId="29" Comment="The Koala pad was a joystick port device." Text="There are two variations of the cartridge port on the Color Computer lines. The attached image shows the pin out of the CoCo 2 &amp; 3.&#xD;&#xA;&#xD;&#xA;[![CoCo 3 cartridge port][1]][1]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/cihZ6.png&#xD;&#xA;&#xD;&#xA;The CoCo 1 cartridge port is slightly different, in that it offers -12 volts DC on pin 1 and +12 volts DC on pin 2. The CoCo 2 &amp; 3 do not produce 12 volts DC. Due to this, several devices listed below, i.e.: X-Pad, cannot be used on a CoCo 2 or 3 without a Multipak Interface, which does produce the 12 volts DC required. &#xD;&#xA;&#xD;&#xA;The Multipak Interface (MPI) was a device used for bus expansion on the Color Computers. It offered four slots for cartridge devices; either hardware or software selectable. Tandy made three basic models of the MPI, while other manufactures made their own versions as well. Below is a partial list:&#xD;&#xA;&#xD;&#xA;A-Bus (Alpha Products)&#xD;&#xA;BT-1000/2000 (Basic Technology)&#xD;&#xA;CC-Bus (PBJ Inc)&#xD;&#xA;CX-P1 Color Computer Expansion Interface (General Automation)    cocoman3&#xD;&#xA;Slotpak III (Chris Hawks/Howard Medical)&#xD;&#xA;XPort (Orion Technologies)&#xD;&#xA;Computize Y-Box&#xD;&#xA;Spectrum Switcher&#xD;&#xA;Owl-Ware Super I/O&#xD;&#xA;Tandy Multipak (26-3024)&#xD;&#xA;Tandy Multipak (26-3124)&#xD;&#xA;Tandy Multipak (26-3214A)&#xD;&#xA;&#xD;&#xA;(Only the 26-3124A was ready to be used with a CoCo 3 due to the change in the CoCo 3's addressing. The other two models had to have a fairly simple mod done)&#xD;&#xA;&#xD;&#xA;The Solution (Frank Hogg Labs)&#xD;&#xA;USER-80C (J-NOR Industries)&#xD;&#xA;Y-Cable&#xD;&#xA;XPANDR1 CoCo Expander Card (Robotic Microsystems)&#xD;&#xA;XPANDR2 CoCo Expander Card (Robotic Microsystems)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Other type of devices are able to be used as well - MIDI devices; graphics tablets such as Radio Shack X-Pad; numerous types of disk storage, both floppy and hard.&#xD;&#xA;&#xD;&#xA;For a mostly complete list of the devices and pictures of most of them, as well as other hardware devices for the Color Computer lines, this [link](http://tandycoco.com/hardware) provides much more information." />
  <row Id="477" PostHistoryTypeId="24" PostId="178" RevisionGUID="0e3e4199-9baa-42ba-8166-ee863871d532" CreationDate="2016-04-21T15:04:24.333" Comment="Proposed by 29 approved by -1 edit id of 64" />
  <row Id="478" PostHistoryTypeId="5" PostId="178" RevisionGUID="4b9c0d1a-b7ed-46bf-abfb-e2d317b02888" CreationDate="2016-04-21T15:04:24.333" UserId="173" Comment="The Koala pad was a joystick port device." Text="There are two variations of the cartridge port on the Color Computer lines. The attached image shows the pin out of the CoCo 2 &amp; 3.&#xD;&#xA;&#xD;&#xA;[![CoCo 3 cartridge port][1]][1]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/cihZ6.png&#xD;&#xA;&#xD;&#xA;The CoCo 1 cartridge port is slightly different, in that it offers -12 volts DC on pin 1 and +12 volts DC on pin 2. The CoCo 2 &amp; 3 do not produce 12 volts DC. Due to this, several devices listed below, i.e.: X-Pad, cannot be used on a CoCo 2 or 3 without a Multipak Interface, which does produce the 12 volts DC required. &#xD;&#xA;&#xD;&#xA;The Multipak Interface (MPI) was a device used for bus expansion on the Color Computers. It offered four slots for cartridge devices; either hardware or software selectable. Tandy made three basic models of the MPI, while other manufactures made their own versions as well. Below is a partial list:&#xD;&#xA;&#xD;&#xA;- A-Bus (Alpha Products)&#xD;&#xA;- BT-1000/2000 (Basic Technology)&#xD;&#xA;- CC-Bus (PBJ Inc)&#xD;&#xA;- CX-P1 Color Computer Expansion Interface (General Automation)    cocoman3&#xD;&#xA;- Slotpak III (Chris Hawks/Howard Medical)&#xD;&#xA;- XPort (Orion Technologies)&#xD;&#xA;- Computize Y-Box&#xD;&#xA;- Spectrum Switcher&#xD;&#xA;- Owl-Ware Super I/O&#xD;&#xA;- Tandy Multipak (26-3024)&#xD;&#xA;- Tandy Multipak (26-3124)&#xD;&#xA;- Tandy Multipak (26-3214A)&#xD;&#xA;&#xD;&#xA;(Only the 26-3124A was ready to be used with a CoCo 3 due to the change in the CoCo 3's addressing. The other two models had to have a fairly simple mod done)&#xD;&#xA;&#xD;&#xA;- The Solution (Frank Hogg Labs)&#xD;&#xA;- USER-80C (J-NOR Industries)&#xD;&#xA;- Y-Cable&#xD;&#xA;- XPANDR1 CoCo Expander Card (Robotic Microsystems)&#xD;&#xA;- XPANDR2 CoCo Expander Card (Robotic Microsystems)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Other type of devices are able to be used as well - MIDI devices; graphics tablets such as Radio Shack X-Pad; numerous types of disk storage, both floppy and hard.&#xD;&#xA;&#xD;&#xA;For a mostly complete list of the devices and pictures of most of them, as well as other hardware devices for the Color Computer lines, this [link](http://tandycoco.com/hardware) provides much more information." />
  <row Id="479" PostHistoryTypeId="2" PostId="180" RevisionGUID="7f8a6462-37fe-40b6-b2c8-5f33d72de504" CreationDate="2016-04-21T15:14:22.083" UserId="-1" Text="" />
  <row Id="480" PostHistoryTypeId="2" PostId="181" RevisionGUID="3fb91304-aef3-4cc2-bc0a-40b8d4359845" CreationDate="2016-04-21T15:14:22.083" UserId="-1" Text="" />
  <row Id="481" PostHistoryTypeId="2" PostId="182" RevisionGUID="572c8e80-b910-413c-8e2d-999198d33bdc" CreationDate="2016-04-21T15:15:00.007" UserId="-1" Text="" />
  <row Id="482" PostHistoryTypeId="2" PostId="183" RevisionGUID="035bdb44-ac29-4b44-b8d3-198d2632ae94" CreationDate="2016-04-21T15:15:00.007" UserId="-1" Text="" />
  <row Id="483" PostHistoryTypeId="2" PostId="184" RevisionGUID="c5eec7b3-3eff-4825-acd2-4d463c131d59" CreationDate="2016-04-21T15:38:04.390" UserId="26" Text="I've seen a lot of 9V power supplies available, but the crucial thing is that it needs to be centre negative. Sometimes you see units specifically mentioning the Spectrum on ebay, but a useful tip is that 9V centre negative is often still used to drive audio equipment, for example electric guitar effects. I would probably search for one of those power supplies intended to drive a number of electric guitar effects." />
  <row Id="484" PostHistoryTypeId="2" PostId="185" RevisionGUID="9b06b5e3-25e9-482f-99c9-470cc588505f" CreationDate="2016-04-21T15:44:08.597" UserId="173" Text="Coming from the TRS-80/TandyColor Computer lines, I had always heard of how slow some other systems disk storage were, regarding data transfer rates, etc... The CoCo lines disk storage was pretty fast - I never had any complaints other than the hurdles we had to jump thru to access double sides drives (either use flippies or modify the DOS).&#xD;&#xA;&#xD;&#xA;I've got an Atari 800 system now with a 1050 disk drive, and am waiting to find some disk software to test the system (the 800 works great). Can some explain the reasons why the data transfer rates were so slow? I have heard that in many cases, the cassette was faster - is this true? &#xD;&#xA;&#xD;&#xA;I've also heard and read about mods to the Atari drives to address this issue. Are any still available today? Are the SIO adapters available today prone to the same issues?" />
  <row Id="485" PostHistoryTypeId="1" PostId="185" RevisionGUID="9b06b5e3-25e9-482f-99c9-470cc588505f" CreationDate="2016-04-21T15:44:08.597" UserId="173" Text="Differences in disk storage between systems" />
  <row Id="486" PostHistoryTypeId="3" PostId="185" RevisionGUID="9b06b5e3-25e9-482f-99c9-470cc588505f" CreationDate="2016-04-21T15:44:08.597" UserId="173" Text="&lt;atari&gt;&lt;color-computer&gt;" />
  <row Id="487" PostHistoryTypeId="2" PostId="186" RevisionGUID="48f6eea1-9dce-45cb-a4af-2067acc9430f" CreationDate="2016-04-21T15:45:21.357" UserId="-1" Text="" />
  <row Id="488" PostHistoryTypeId="2" PostId="187" RevisionGUID="534d4efc-a8f8-4013-93da-0e7b93ff4e69" CreationDate="2016-04-21T15:45:21.357" UserId="-1" Text="" />
  <row Id="489" PostHistoryTypeId="2" PostId="188" RevisionGUID="4cc8b808-34db-4a20-bb7c-6ef0edd361a0" CreationDate="2016-04-21T15:51:46.097" UserId="173" Text="The Hitachi 6309E CPU is a direct replacement for the 6809E in the CoCo. What are the options to upgrade to this processor?" />
  <row Id="490" PostHistoryTypeId="1" PostId="188" RevisionGUID="4cc8b808-34db-4a20-bb7c-6ef0edd361a0" CreationDate="2016-04-21T15:51:46.097" UserId="173" Text="What are the options for installing a 6309 in a TRS-80/Tandy Color Computer" />
  <row Id="491" PostHistoryTypeId="3" PostId="188" RevisionGUID="4cc8b808-34db-4a20-bb7c-6ef0edd361a0" CreationDate="2016-04-21T15:51:46.097" UserId="173" Text="&lt;color-computer&gt;" />
  <row Id="492" PostHistoryTypeId="4" PostId="159" RevisionGUID="c938cf3c-0282-4f8c-95bd-91d78126da35" CreationDate="2016-04-21T15:53:45.467" UserId="56" Comment="Fix spelling in title; add tag" Text="How did Atari cassette &quot;turbo without hardware mods&quot; work?" />
  <row Id="493" PostHistoryTypeId="6" PostId="159" RevisionGUID="c938cf3c-0282-4f8c-95bd-91d78126da35" CreationDate="2016-04-21T15:53:45.467" UserId="56" Comment="Fix spelling in title; add tag" Text="&lt;atari&gt;&lt;software&gt;&lt;cassette-tape&gt;&lt;utilities&gt;" />
  <row Id="494" PostHistoryTypeId="24" PostId="159" RevisionGUID="c938cf3c-0282-4f8c-95bd-91d78126da35" CreationDate="2016-04-21T15:53:45.467" Comment="Proposed by 56 approved by 74 edit id of 69" />
  <row Id="495" PostHistoryTypeId="2" PostId="189" RevisionGUID="039f701a-dfe5-42bc-8a33-a6573e6223a7" CreationDate="2016-04-21T16:00:23.223" UserId="173" Text="Your first option is to remove the 6809 from the CoCo. Some CoCo 1 and 2 models, all you have to do is remove the CPU from a socket and put a new one in. Other CoCo 1 and 2 models, and all CoCo 3 models have the CPU soldered directly to the PCB. You can use either destructive or non-destructive means to remove the existing CPU; that choice is up to you.&#xD;&#xA;&#xD;&#xA;- Destructive means clipping the legs of the CPU, removing the chip, then desoldering the legs and removing them&#xD;&#xA;- Non-destructive means using a desoldering tool with a vacuum attachment, or other means, to remove the solder from the legs of the chip and PC board Sometimes this turns destructive, YMMV.&#xD;&#xA;&#xD;&#xA;Once the chip is out, you have three options:&#xD;&#xA;&#xD;&#xA;- Option one: Solder the new CPU directly in place in the CoCo&#xD;&#xA;&#xD;&#xA;- Option two: Solder a socket in place in the CoCo&#xD;&#xA;&#xD;&#xA;- Option 3: You can stack a 6309 on top of your computer’s existing 6809. Here’s how…&#xD;&#xA;&#xD;&#xA;Cut pin 39 (TSC) of the 6809, leaving a small piece sticking out of the&#xD;&#xA;processor so you can solder to it.&#xD;&#xA;&#xD;&#xA;Take a 40 pin IC socket. Cut off pins 5, 6, 33, 36, and 38. Bend out pin 39&#xD;&#xA;so you can solder to it.&#xD;&#xA;&#xD;&#xA;Stack the 40-pin IC socket on top of the 6809. Solder all of the&#xD;&#xA;corresponding pins together. DO NOT solder the pins 39 together.&#xD;&#xA;&#xD;&#xA;Now you have two additional options:&#xD;&#xA;&#xD;&#xA;1) Solder a wire from 6809 pin 39 to +5V, and another wire from socket pin 39&#xD;&#xA;to ground.&#xD;&#xA;&#xD;&#xA;2) Solder a 4.7K resistor between each pin 39 and +5V. Then take a SPDT&#xD;&#xA;switch, connect the common contact to ground, and connect each end to a&#xD;&#xA;separate pin 39.&#xD;&#xA;&#xD;&#xA;In either case, finish up by plugging the 6309 into the socket. If you picked&#xD;&#xA;option 1, you now have a 6309 system. If you picked option 2, your system is&#xD;&#xA;now switchable between the 6809 and the 6309 (before power-up – not while&#xD;&#xA;running!)." />
  <row Id="496" PostHistoryTypeId="2" PostId="190" RevisionGUID="0b45418a-4deb-4e96-9ee9-e26f7e94e1d7" CreationDate="2016-04-21T16:03:51.070" UserId="29" Text="If your lucky enough to have a socketed Microprocessor from the factory, the process is removing the old chip and installing the new chip.&#xD;&#xA;&#xD;&#xA;You do have to make sure your new 6309 is the E version, E for external clock. You also have to make sure your new part can handle the 1.8 mHz clock speed for a CoCo 3, or 0.89 mHz clock speed of the CoCo 1 and 2.&#xD;&#xA;&#xD;&#xA;If your CoCo does not already have a socket, you must carefully de-solder the microprocessor and install one." />
  <row Id="497" PostHistoryTypeId="2" PostId="191" RevisionGUID="957d0f59-e252-46d1-ab15-803a133b654f" CreationDate="2016-04-21T16:30:10.760" UserId="12" Text="Water. **Only** water and _maybe_ a little mild soap.&#xD;&#xA;&#xD;&#xA;I cannot recommend rubbing alcohol for plastic parts, as it can whiten some plastics and it can remove paint off other parts.&#xD;&#xA;&#xD;&#xA;For keyboards, use contact cleaner as [discussed in my answer for how to  clean system cartridges][1].&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://retrocomputing.stackexchange.com/a/7/12" />
  <row Id="498" PostHistoryTypeId="2" PostId="192" RevisionGUID="b2e7a049-fa60-4960-bdaf-47dfe973365e" CreationDate="2016-04-21T16:47:08.310" UserId="12" Text="Error 0x02 is &quot;Bad Address Mark&quot; (Don't ask me what this _actually_ means!)&#xD;&#xA;&#xD;&#xA;I don't think Toshiba specifically forbid third-party drives, but it probably expects very specific IDE drives of specific geometry. According to the internet, there are three specific Conner drives this model could ship with.&#xD;&#xA;&#xD;&#xA;I assume you accessed the SETUP and made sure that the hard disk capacity was set properly?&#xD;&#xA;&#xD;&#xA;This sounds like the BIOS can't find the location to start booting because the drive geometry is unexpected." />
  <row Id="499" PostHistoryTypeId="2" PostId="193" RevisionGUID="1cd9ed8e-eefb-4f81-8ce4-99e8320aa0d5" CreationDate="2016-04-21T17:28:04.520" UserId="75" Text="&gt; Degradation may be initiated or accelerated by [numerous factors][1]&#xD;&#xA;&gt; including ultra-violet light, visible light, ozone, pollutants,&#xD;&#xA;&gt; manufacturing additives, oxygen, heat, or by carton storage without&#xD;&#xA;&gt; protective liners.&#xD;&#xA;&#xD;&#xA;As mentioned in other answers, one of those &quot;manufacturing additives&quot; is flame retardants.&#xD;&#xA;&#xD;&#xA;Also, make sure the storage room is well ventilated, especially if it's in a [basement][2].&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://web.archive.org/web/20150114095242/http://www.fishercontainer.com/yellowing-clear-plastic-film.html&#xD;&#xA;  [2]: https://www.reddit.com/r/retrobattlestations/comments/4b42tf/the_worst_yellowing_ive_ever_seen_in_my_life_is/d15zavg" />
  <row Id="501" PostHistoryTypeId="2" PostId="194" RevisionGUID="0c9321ea-8abd-4206-8f0e-46e16195a10c" CreationDate="2016-04-21T17:37:32.423" UserId="152" Text="A bit of a trivia question: What is the oldest hardware capable of running a modern Linux-based operating system ?&#xD;&#xA;&#xD;&#xA;By this I mean being capable of running a fairly recent Linux kernel, in some form. I've found out that the [Amiga 1200](https://en.wikipedia.org/wiki/Amiga_1200), launched in 1992 can run [Debian (video)](https://www.youtube.com/watch?v=9DDoclvOAcA), but are there any older computers capable of this ?" />
  <row Id="502" PostHistoryTypeId="1" PostId="194" RevisionGUID="0c9321ea-8abd-4206-8f0e-46e16195a10c" CreationDate="2016-04-21T17:37:32.423" UserId="152" Text="What is the oldest computer capable of running a modern version of Linux?" />
  <row Id="503" PostHistoryTypeId="3" PostId="194" RevisionGUID="0c9321ea-8abd-4206-8f0e-46e16195a10c" CreationDate="2016-04-21T17:37:32.423" UserId="152" Text="&lt;history&gt;&lt;linux&gt;" />
  <row Id="504" PostHistoryTypeId="2" PostId="195" RevisionGUID="f91d348d-f296-4060-b593-3c71e485813b" CreationDate="2016-04-21T17:48:16.213" UserId="65" Text="I was chatting with our neighbor and after some looong talking, I found out that he has a Commodore 64. I'd love to test it, however I'm not sure how to power it.&#xD;&#xA;&#xD;&#xA;How can I power a C64?" />
  <row Id="505" PostHistoryTypeId="1" PostId="195" RevisionGUID="f91d348d-f296-4060-b593-3c71e485813b" CreationDate="2016-04-21T17:48:16.213" UserId="65" Text="How can I power a C64?" />
  <row Id="506" PostHistoryTypeId="3" PostId="195" RevisionGUID="f91d348d-f296-4060-b593-3c71e485813b" CreationDate="2016-04-21T17:48:16.213" UserId="65" Text="&lt;commodore-64&gt;" />
  <row Id="507" PostHistoryTypeId="2" PostId="196" RevisionGUID="87c26d1b-a27c-494b-9a56-c7faebb8bad0" CreationDate="2016-04-21T18:04:45.100" UserId="92" Text="EHB&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;For example, a game that uses EHB (Extra HalfBrite) mode during the game action (i. e. ingame) is _Pinball Dreams_. In my example run of the _Beat Box_ table I can find the following in the copper list:&#xD;&#xA;&#xD;&#xA;    $00D6EA WAIT $4211FFFE&#xD;&#xA;    $00D6EE MOVE #$6200,BPLCON0&#xD;&#xA;&#xD;&#xA;I. e. it waits for raster line $42 (66) and uses BPLCON0 to set the number of bitplanes to 6 without the HAM bit set, which means EHB mode.&#xD;&#xA;&#xD;&#xA;_Canon Fodder_ uses EHB for some of its still pictures. I'm not sure if it uses it ingame, but I consider it unlikely.&#xD;&#xA;&#xD;&#xA;A newer game, _Nemac IV_, presents you with a screen mode selection at the beginning, offering EHB mode as an option. It can then render its ingame 3D graphics to an EHB mode display. However, it requires a machine more powerful than a stock Amiga 500, for instance.&#xD;&#xA;&#xD;&#xA;HAM&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;The way HAM (Hold And Modify) mode works makes it unsuitable for ingame animation in most cases. I'm unaware of a game that uses it for its game action, however, that doesn't necessarily mean that none exists.&#xD;&#xA;&#xD;&#xA;_Fury of the Furries_ uses HAM for its still images, for example the title image and the images that are displayed before entering a new world (each consisting of a set of levels).&#xD;&#xA;&#xD;&#xA;The reason why it is unfeasible to use HAM for animated action is that you will either have to tolerate so-called color bleeding to the right of pixels or you will need to employ sophisticated algorithms to counteract the color bleeding, which timing constraints may forbid or which are just not worth it to come up with.&#xD;&#xA;&#xD;&#xA;In HAM mode you usually use 6 bitplanes (you can also use it with 5 bitplanes, but there's not much point to that). That's 64 possible values per pixel. Values 0 to 15 select a full RGB color from the 16 color palette, the same way other normal screen modes would. However, value sets 16 to 31, 32 to 47 and 48 to 63, respectively, each just change one of the color components relative to the color of the previous pixel. The other two color components remain unchanged from the previous pixel.&#xD;&#xA;&#xD;&#xA;Say you set the color to palette entry 8 in column 100. Say also that this palette entry is $0333, i. e. a very dark gray. So the pixel in column 100 will appear gray.&#xD;&#xA;&#xD;&#xA; 1. Then, lacking a matching color in the palette, you modify the red component in column 101 to $6. The resulting pixel in column 101 will now have a color equivalent to $0633, which is a dark red unsaturated red.&#xD;&#xA; 2. Next, again lacking a matching color in the palette, you modify the green component in column 102 to $7. The resulting pixel in column 102 will now have a color equivalent to $0673, which is a brownish color.&#xD;&#xA; 3. Finally, lacking a matching color in the palette once more, you modify the blue component in column 103 to $6. The resulting pixel in column 103 will now have a color equivalent to $0676, which is a dark gray with a very slight shimmer of green.&#xD;&#xA;&#xD;&#xA;So far so good, but say you now want to blit an animated character onto the bitmap. Say the rightmost pixel of that character ends up in column 100 and it is a bright white, palette value $0FFF. What this means is that the white will bleed into the next 2 pixels:&#xD;&#xA;&#xD;&#xA; 1. Due to modifying just the red component, the visible color in column 101 will be $06FF, a bright cyan.&#xD;&#xA; 2. Due to modifying just the green component, the visible color in column 102 will be $067F, a bright blue.&#xD;&#xA; 3. Only in column 103 will you have modified all three color components and the apparent pixel color will be the same $0676 as the original one before blitting.&#xD;&#xA;&#xD;&#xA;Depending on how many and which color components you consecutively modify, the color bleeding can affect more or less pixels and depending on how different the colors are to the originally intended colors, the artifacts can be more or less visible.&#xD;&#xA;&#xD;&#xA;To counteract the bleeding, you would have to design a routine that figures out which pixels to the right of a blit to adjust and which pixel values are the optimal ones that let the apparent pixel colors match the original ones as closely as possible.&#xD;&#xA;" />
  <row Id="508" PostHistoryTypeId="2" PostId="197" RevisionGUID="af107234-a298-4d13-abc8-2c29214b9c3f" CreationDate="2016-04-21T18:04:51.710" UserId="173" Text="Regarding the Atari 800...&#xD;&#xA;&#xD;&#xA;What's the difference between the 6502A and the 'Sally'? Is it simply a revision, or do the changes improve performance?" />
  <row Id="509" PostHistoryTypeId="1" PostId="197" RevisionGUID="af107234-a298-4d13-abc8-2c29214b9c3f" CreationDate="2016-04-21T18:04:51.710" UserId="173" Text="Atari 800 CPU - 6502 vs. Sally" />
  <row Id="510" PostHistoryTypeId="3" PostId="197" RevisionGUID="af107234-a298-4d13-abc8-2c29214b9c3f" CreationDate="2016-04-21T18:04:51.710" UserId="173" Text="&lt;atari&gt;" />
  <row Id="511" PostHistoryTypeId="5" PostId="196" RevisionGUID="f40d3733-f8bf-4e6d-8da7-31106d0d5b3c" CreationDate="2016-04-21T18:11:08.167" UserId="92" Comment="Fixed typo in game title." Text="EHB&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;For example, a game that uses EHB (Extra HalfBrite) mode during the game action (i. e. ingame) is _Pinball Dreams_. In my example run of the _Beat Box_ table I can find the following in the copper list:&#xD;&#xA;&#xD;&#xA;    $00D6EA WAIT $4211FFFE&#xD;&#xA;    $00D6EE MOVE #$6200,BPLCON0&#xD;&#xA;&#xD;&#xA;I. e. it waits for raster line $42 (66) and uses BPLCON0 to set the number of bitplanes to 6 without the HAM bit set, which means EHB mode.&#xD;&#xA;&#xD;&#xA;_Cannon Fodder_ uses EHB for some of its still pictures. I'm not sure if it uses it ingame, but I consider it unlikely.&#xD;&#xA;&#xD;&#xA;A newer game, _Nemac IV_, presents you with a screen mode selection at the beginning, offering EHB mode as an option. It can then render its ingame 3D graphics to an EHB mode display. However, it requires a machine more powerful than a stock Amiga 500, for instance.&#xD;&#xA;&#xD;&#xA;HAM&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;The way HAM (Hold And Modify) mode works makes it unsuitable for ingame animation in most cases. I'm unaware of a game that uses it for its game action, however, that doesn't necessarily mean that none exists.&#xD;&#xA;&#xD;&#xA;_Fury of the Furries_ uses HAM for its still images, for example the title image and the images that are displayed before entering a new world (each consisting of a set of levels).&#xD;&#xA;&#xD;&#xA;The reason why it is unfeasible to use HAM for animated action is that you will either have to tolerate so-called color bleeding to the right of pixels or you will need to employ sophisticated algorithms to counteract the color bleeding, which timing constraints may forbid or which are just not worth it to come up with.&#xD;&#xA;&#xD;&#xA;In HAM mode you usually use 6 bitplanes (you can also use it with 5 bitplanes, but there's not much point to that). That's 64 possible values per pixel. Values 0 to 15 select a full RGB color from the 16 color palette, the same way other normal screen modes would. However, value sets 16 to 31, 32 to 47 and 48 to 63, respectively, each just change one of the color components relative to the color of the previous pixel. The other two color components remain unchanged from the previous pixel.&#xD;&#xA;&#xD;&#xA;Say you set the color to palette entry 8 in column 100. Say also that this palette entry is $0333, i. e. a very dark gray. So the pixel in column 100 will appear gray.&#xD;&#xA;&#xD;&#xA; 1. Then, lacking a matching color in the palette, you modify the red component in column 101 to $6. The resulting pixel in column 101 will now have a color equivalent to $0633, which is a dark red unsaturated red.&#xD;&#xA; 2. Next, again lacking a matching color in the palette, you modify the green component in column 102 to $7. The resulting pixel in column 102 will now have a color equivalent to $0673, which is a brownish color.&#xD;&#xA; 3. Finally, lacking a matching color in the palette once more, you modify the blue component in column 103 to $6. The resulting pixel in column 103 will now have a color equivalent to $0676, which is a dark gray with a very slight shimmer of green.&#xD;&#xA;&#xD;&#xA;So far so good, but say you now want to blit an animated character onto the bitmap. Say the rightmost pixel of that character ends up in column 100 and it is a bright white, palette value $0FFF. What this means is that the white will bleed into the next 2 pixels:&#xD;&#xA;&#xD;&#xA; 1. Due to modifying just the red component, the visible color in column 101 will be $06FF, a bright cyan.&#xD;&#xA; 2. Due to modifying just the green component, the visible color in column 102 will be $067F, a bright blue.&#xD;&#xA; 3. Only in column 103 will you have modified all three color components and the apparent pixel color will be the same $0676 as the original one before blitting.&#xD;&#xA;&#xD;&#xA;Depending on how many and which color components you consecutively modify, the color bleeding can affect more or less pixels and depending on how different the colors are to the originally intended colors, the artifacts can be more or less visible.&#xD;&#xA;&#xD;&#xA;To counteract the bleeding, you would have to design a routine that figures out which pixels to the right of a blit to adjust and which pixel values are the optimal ones that let the apparent pixel colors match the original ones as closely as possible.&#xD;&#xA;" />
  <row Id="512" PostHistoryTypeId="5" PostId="125" RevisionGUID="21bd647e-f819-4e3e-9d15-145eb5019b54" CreationDate="2016-04-21T18:11:35.523" UserId="115" Comment="formatting" Text="In addition to the Community Wiki answer:&#xD;&#xA;&#xD;&#xA;This routine with entries `CHRGET` and `CHRGOT` is not only part of the interpreter loop, it used in every statement and function which has to &quot;parse&quot; further data from the BASIC text (program), e.g. for parameters.&#xD;&#xA;On some occasions the pointer `TXTPTR` will be stacked, typically while executing a `DEFFN`'d function.&#xD;&#xA;&#xD;&#xA;Especially on older versions of CBM BASIC (which PET uses) this routine is the place to extent (patch) the interpreter for additional commands (only with newer BASIC versions hooks where introduced to do it in a nicer way).&#xD;&#xA;&#xD;&#xA;Regarding the placement of the routine in zero page: Even it uses self-modifying code, the `TXTPTR` refers the LDA parameter, I don't think the speed issue was the cause for this. Maybe they wanted to keep the Y register untouched. Comparing to BASIC 7.0 on a C128 this routine is moved out of page 0 and contains additional bank switching stuff. On the other hand you may count on having Y=0 after a call to this routine which may be valuable, too." />
  <row Id="513" PostHistoryTypeId="24" PostId="125" RevisionGUID="21bd647e-f819-4e3e-9d15-145eb5019b54" CreationDate="2016-04-21T18:11:35.523" Comment="Proposed by 115 approved by 56, 181 edit id of 60" />
  <row Id="514" PostHistoryTypeId="5" PostId="145" RevisionGUID="d7337122-ffc9-43eb-8107-82fa01ad1956" CreationDate="2016-04-21T18:38:23.810" UserId="56" Comment="Fix cycle count" Text="On the 6502 CPU, this instruction:&#xD;&#xA;&#xD;&#xA;    LDA $0380,Y&#xD;&#xA;&#xD;&#xA;takes either 4 or 5 cycles, depending on whether the indexing crosses a page boundary.  But this instruction:&#xD;&#xA;&#xD;&#xA;    STA $0380,Y&#xD;&#xA;&#xD;&#xA;takes 5 cycles regardless of page boundaries.  Why is one fixed and the other variable?&#xD;&#xA;" />
  <row Id="515" PostHistoryTypeId="5" PostId="196" RevisionGUID="3ec4528b-717c-41b6-a1d8-783070e1117f" CreationDate="2016-04-21T18:55:44.573" UserId="92" Comment="Add which pixel values modify which color components." Text="EHB&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;For example, a game that uses EHB (Extra HalfBrite) mode during the game action (i. e. ingame) is _Pinball Dreams_. In my example run of the _Beat Box_ table I can find the following in the copper list:&#xD;&#xA;&#xD;&#xA;    $00D6EA WAIT $4211FFFE&#xD;&#xA;    $00D6EE MOVE #$6200,BPLCON0&#xD;&#xA;&#xD;&#xA;I. e. it waits for raster line $42 (66) and uses BPLCON0 to set the number of bitplanes to 6 without the HAM bit set, which means EHB mode.&#xD;&#xA;&#xD;&#xA;_Cannon Fodder_ uses EHB for some of its still pictures. I'm not sure if it uses it ingame, but I consider it unlikely.&#xD;&#xA;&#xD;&#xA;A newer game, _Nemac IV_, presents you with a screen mode selection at the beginning, offering EHB mode as an option. It can then render its ingame 3D graphics to an EHB mode display. However, it requires a machine more powerful than a stock Amiga 500.&#xD;&#xA;&#xD;&#xA;HAM&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;The way HAM (Hold And Modify) mode works makes it unsuitable for ingame animation in most cases. I'm unaware of a game that uses it for its game action, however, that doesn't necessarily mean that none exists.&#xD;&#xA;&#xD;&#xA;_Fury of the Furries_ uses HAM for its still images, for example the title image and the images that are displayed before entering a new world (each consisting of a set of levels).&#xD;&#xA;&#xD;&#xA;The reason why it is unfeasible to use HAM for animated action is that you will either have to tolerate so-called color bleeding to the right of pixels or you will need to employ sophisticated algorithms to counteract the color bleeding, which timing constraints may forbid or which are just not worth it to come up with.&#xD;&#xA;&#xD;&#xA;In HAM mode you usually use 6 bitplanes (you can also use it with 5 bitplanes, but there's not much point to that). That's 64 possible values per pixel. Values 0 to 15 select a full RGB color from the 16 color palette, the same way other normal screen modes would. However, value sets 16 to 31 (modify blue component), 32 to 47 (modify red component) and 48 to 63 (modify green component), respectively, each just change one of the color components relative to the color of the previous pixel. The other two color components remain unchanged from the previous pixel.&#xD;&#xA;&#xD;&#xA;Say you set the color to palette entry 8 in column 100. Say also that this palette entry is $0333, i. e. a very dark gray. So the pixel in column 100 will appear gray.&#xD;&#xA;&#xD;&#xA; 1. Then, lacking a matching color in the palette, you modify the red component in column 101 to $6 (using a pixel value of $26 = 38). The resulting pixel in column 101 will now have a color equivalent to $0633, which is a dark red unsaturated red.&#xD;&#xA; 2. Next, again lacking a matching color in the palette, you modify the green component in column 102 to $7 (using a pixel value of $37 = 55). The resulting pixel in column 102 will now have a color equivalent to $0673, which is a brownish color.&#xD;&#xA; 3. Finally, lacking a matching color in the palette once more, you modify the blue component in column 103 to $6 (using a pixel value of $16 = 22). The resulting pixel in column 103 will now have a color equivalent to $0676, which is a dark gray with a very slight shimmer of green.&#xD;&#xA;&#xD;&#xA;So far so good, but say you now want to blit an animated character onto the bitmap. Say the rightmost pixel of that character ends up in column 100 and it is a bright white, palette value $0FFF. What this means is that the white will bleed into the next 2 pixels:&#xD;&#xA;&#xD;&#xA; 1. Due to modifying just the red component, the visible color in column 101 will be $06FF, a bright cyan.&#xD;&#xA; 2. Due to modifying just the green component, the visible color in column 102 will be $067F, a bright blue.&#xD;&#xA; 3. Only in column 103 will you have modified all three color components and the apparent pixel color will be the same $0676 as the original one before blitting.&#xD;&#xA;&#xD;&#xA;Depending on how many and which color components you consecutively modify, the color bleeding can affect more or less pixels and depending on how different the colors are to the originally intended colors, the artifacts can be more or less visible.&#xD;&#xA;&#xD;&#xA;To counteract the bleeding, you would have to design a routine that figures out which pixels to the right of a blit to adjust and which pixel values are the optimal ones that let the apparent pixel colors match the original ones as closely as possible. You won't get completely rid of the artifacts, but they might now be unnoticeable unless you take a closer look.&#xD;&#xA;" />
  <row Id="516" PostHistoryTypeId="2" PostId="198" RevisionGUID="83a5dc4a-fb40-4177-b84b-99c701a2296f" CreationDate="2016-04-21T19:03:33.810" UserId="181" Text="To get a faster operation there are several &quot;extensions&quot; around, which are either connected to the extension slot or replacing the CPU on its socket working like a co-processor. CMD's SuperCPU, Flash 8, one project from the &quot;c't Magazin&quot; (a german one). They have all in common using a WDC 65C816 CPU, a 16 bit expanded version of a 65C02. With some luck a program or game runs even on such a plain 6502 (without any dirty 6510 opcodes) and can handle the faster timing. In hard cases you can switch back to the 6510-only mode.&#xD;&#xA;The above mentioned problem with VIC and IO access is solved differently. However, they have to slow down the clock for access the &quot;lower&quot; address space (VIC accessed RAM). Some optimization with making this window smaller and using a pipeling method or caching is often implemented to minimize slow down phases. The 16-bit CPU with 8 to 20 MHz is running on its own memory with fast access. ROM/Eprom is usually copied into a shadow RAM area simulating a ROM.&#xD;&#xA;&#xD;&#xA;There are some other extension, based on FPGA architecture, replacing the whole C64 on an extension card (Turbo Cameleon 64) allowing to speed up the stuff into a 10 MHz region. Here you have all illegal opcode, too. The compatibility to existing software is much better.&#xD;&#xA;" />
  <row Id="517" PostHistoryTypeId="2" PostId="199" RevisionGUID="a3a69826-faee-4e67-a0d9-3c048dcf472c" CreationDate="2016-04-21T19:53:10.600" UserId="4" Text="The Commodore 64 requires a power supply that provides both 9V AC and 5V DC.&#xD;&#xA;&#xD;&#xA;If you're interested in building your own, the power supply has a male circular 7 pin DIN connector.  Pins 1-3 are ground (pin 2 is the 5V ground), pin 4 is either unconnected or +5V, depending on the version, pin 5 is +5V, and pins 6 and 7 are 9VAC. ([source][1])&#xD;&#xA;&#xD;&#xA;  [1]: http://www.allpinouts.org/index.php/Commodore_C64_Power_Supply" />
  <row Id="518" PostHistoryTypeId="5" PostId="196" RevisionGUID="530df331-f094-4309-96c5-31d3da6a6b4a" CreationDate="2016-04-21T19:57:58.443" UserId="92" Comment="Added images to demonstrate HAM color bleeding." Text="EHB&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;For example, a game that uses EHB (Extra HalfBrite) mode during the game action (i. e. ingame) is _Pinball Dreams_. In my example run of the _Beat Box_ table I can find the following in the copper list:&#xD;&#xA;&#xD;&#xA;    $00D6EA WAIT $4211FFFE&#xD;&#xA;    $00D6EE MOVE #$6200,BPLCON0&#xD;&#xA;&#xD;&#xA;I. e. it waits for raster line $42 (66) and uses BPLCON0 to set the number of bitplanes to 6 without the HAM bit set, which means EHB mode.&#xD;&#xA;&#xD;&#xA;_Cannon Fodder_ uses EHB for some of its still pictures. I'm not sure if it uses it ingame, but I consider it unlikely.&#xD;&#xA;&#xD;&#xA;A newer game, _Nemac IV_, presents you with a screen mode selection at the beginning, offering EHB mode as an option. It can then render its ingame 3D graphics to an EHB mode display. However, it requires a machine more powerful than a stock Amiga 500.&#xD;&#xA;&#xD;&#xA;HAM&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;The way HAM (Hold And Modify) mode works makes it unsuitable for ingame animation in most cases. I'm unaware of a game that uses it for its game action, however, that doesn't necessarily mean that none exists.&#xD;&#xA;&#xD;&#xA;_Fury of the Furries_ uses HAM for its still images, for example the title image and the images that are displayed before entering a new world (each consisting of a set of levels).&#xD;&#xA;&#xD;&#xA;The reason why it is unfeasible to use HAM for animated action is that you will either have to tolerate so-called color bleeding to the right of pixels or you will need to employ sophisticated algorithms to counteract the color bleeding, which timing constraints may forbid or which are just not worth it to come up with.&#xD;&#xA;&#xD;&#xA;In HAM mode you usually use 6 bitplanes (you can also use it with 5 bitplanes, but there's not much point to that). That's 64 possible values per pixel. Values 0 to 15 select a full RGB color from the 16 color palette, the same way other normal screen modes would. However, value sets 16 to 31 (modify blue component), 32 to 47 (modify red component) and 48 to 63 (modify green component), respectively, each just change one of the color components relative to the color of the previous pixel. The other two color components remain unchanged from the previous pixel.&#xD;&#xA;&#xD;&#xA;Say you set the color to palette entry 8 in column 100. Say also that this palette entry is $0333, i. e. a very dark gray. So the pixel in column 100 will appear gray.&#xD;&#xA;&#xD;&#xA; 1. Then, lacking a matching color in the palette, you modify the red component in column 101 to $6 (using a pixel value of $26 = 38). The resulting pixel in column 101 will now have a color equivalent to $0633, which is a dark unsaturated red.&#xD;&#xA;&#xD;&#xA; 2. Next, again lacking a matching color in the palette, you modify the green component in column 102 to $7 (using a pixel value of $37 = 55). The resulting pixel in column 102 will now have a color equivalent to $0673, which is a brown-greenish color.&#xD;&#xA;&#xD;&#xA; 3. Finally, lacking a matching color in the palette once more, you modify the blue component in column 103 to $6 (using a pixel value of $16 = 22). The resulting pixel in column 103 will now have a color equivalent to $0676, which is a dark gray with a very slight shimmer of green.&#xD;&#xA;&#xD;&#xA; [![HAM pixels before blitting][1]][1]  &#xD;&#xA; *note that each differently colored square represents 1 pixel*&#xD;&#xA;&#xD;&#xA;So far so good, but say you now want to blit an animated character onto the bitmap. Say the rightmost pixel of that character ends up in column 100 and it is a bright white, palette value $0FFF. What this means is that the white will bleed into the next 2 pixels:&#xD;&#xA;&#xD;&#xA; 1. Due to modifying just the red component, the visible color in column 101 will be $06FF, a bright cyan.&#xD;&#xA;&#xD;&#xA; 2. Due to modifying just the green component, the visible color in column 102 will be $067F, a bright blue.&#xD;&#xA;&#xD;&#xA; 3. Only in column 103 will you have modified all three color components and the apparent pixel color will be the same $0676 as the original one before blitting.&#xD;&#xA;&#xD;&#xA; [![HAM pixels after blitting][2]][2]  &#xD;&#xA; *note that each differently colored square represents 1 pixel*&#xD;&#xA;&#xD;&#xA;Depending on how many and which color components you consecutively modify, the color bleeding can affect more or less pixels and depending on how different the colors are to the originally intended colors, the artifacts can be more or less visible.&#xD;&#xA;&#xD;&#xA;To counteract the bleeding, you would have to design a routine that figures out which pixels to the right of a blit to adjust and which pixel values are the optimal ones that let the apparent pixel colors match the original ones as closely as possible. You won't get completely rid of the artifacts, but they might now be unnoticeable unless you take a closer look.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/xGlsK.png&#xD;&#xA;  [2]: http://i.stack.imgur.com/Gkw26.png" />
  <row Id="519" PostHistoryTypeId="2" PostId="200" RevisionGUID="eaa2bbab-226f-4da9-a552-489b03b7ebde" CreationDate="2016-04-21T20:08:37.133" UserId="4" Text="If you're looking to run a modern-*ish* version of Linux, the oldest hardware is likely a [Intel 80386][1] from 1986, probably with some memory upgrades -- 640k isn't enough for everybody.  Note that [support for the 386 was dropped][2] with the 3.8 kernel, so you'll need 3.7 or older.  3.7 is new enough to run most current software, particularly the sort that you'd want to run on such a slow machine.&#xD;&#xA;&#xD;&#xA;  [1]: https://en.wikipedia.org/wiki/Intel_80386&#xD;&#xA;  [2]: https://lwn.net/Articles/528893/" />
  <row Id="521" PostHistoryTypeId="2" PostId="201" RevisionGUID="a8cfc184-ca4d-4f9d-9c0c-d5a514e28821" CreationDate="2016-04-21T20:13:51.913" UserId="64" Text="Do not use an original Commodore 64 power supply, especially if it has not been tested.  They're prone to fail, and when they do, they'll take the C64 with it.  People have developed hardware that go between the Commodore 64 and power supply and can protect the C64 from power supply failure.&#xD;&#xA;&#xD;&#xA;The Commodore 128 power supply was better, but the connector is different so the cable will need modifications or an adapter.&#xD;&#xA;&#xD;&#xA;If you find two wall-wart power supplies that provide the required currents, you can solder them to the current DIN connector." />
  <row Id="522" PostHistoryTypeId="5" PostId="196" RevisionGUID="cda1646e-9f1d-4f61-9ba8-ff2194eeca1c" CreationDate="2016-04-21T20:14:40.513" UserId="92" Comment="Improve post blit HAM pixels image." Text="EHB&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;For example, a game that uses EHB (Extra HalfBrite) mode during the game action (i. e. ingame) is _Pinball Dreams_. In my example run of the _Beat Box_ table I can find the following in the copper list:&#xD;&#xA;&#xD;&#xA;    $00D6EA WAIT $4211FFFE&#xD;&#xA;    $00D6EE MOVE #$6200,BPLCON0&#xD;&#xA;&#xD;&#xA;I. e. it waits for raster line $42 (66) and uses BPLCON0 to set the number of bitplanes to 6 without the HAM bit set, which means EHB mode.&#xD;&#xA;&#xD;&#xA;_Cannon Fodder_ uses EHB for some of its still pictures. I'm not sure if it uses it ingame, but I consider it unlikely.&#xD;&#xA;&#xD;&#xA;A newer game, _Nemac IV_, presents you with a screen mode selection at the beginning, offering EHB mode as an option. It can then render its ingame 3D graphics to an EHB mode display. However, it requires a machine more powerful than a stock Amiga 500.&#xD;&#xA;&#xD;&#xA;HAM&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;The way HAM (Hold And Modify) mode works makes it unsuitable for ingame animation in most cases. I'm unaware of a game that uses it for its game action, however, that doesn't necessarily mean that none exists.&#xD;&#xA;&#xD;&#xA;_Fury of the Furries_ uses HAM for its still images, for example the title image and the images that are displayed before entering a new world (each consisting of a set of levels).&#xD;&#xA;&#xD;&#xA;The reason why it is unfeasible to use HAM for animated action is that you will either have to tolerate so-called color bleeding to the right of pixels or you will need to employ sophisticated algorithms to counteract the color bleeding, which timing constraints may forbid or which are just not worth it to come up with.&#xD;&#xA;&#xD;&#xA;In HAM mode you usually use 6 bitplanes (you can also use it with 5 bitplanes, but there's not much point to that). That's 64 possible values per pixel. Values 0 to 15 select a full RGB color from the 16 color palette, the same way other normal screen modes would. However, value sets 16 to 31 (modify blue component), 32 to 47 (modify red component) and 48 to 63 (modify green component), respectively, each just change one of the color components relative to the color of the previous pixel. The other two color components remain unchanged from the previous pixel.&#xD;&#xA;&#xD;&#xA;Say you set the color to palette entry 8 in column 100. Say also that this palette entry is $0333, i. e. a very dark gray. So the pixel in column 100 will appear gray.&#xD;&#xA;&#xD;&#xA; 1. Then, lacking a matching color in the palette, you modify the red component in column 101 to $6 (using a pixel value of $26 = 38). The resulting pixel in column 101 will now have a color equivalent to $0633, which is a dark unsaturated red.&#xD;&#xA;&#xD;&#xA; 2. Next, again lacking a matching color in the palette, you modify the green component in column 102 to $7 (using a pixel value of $37 = 55). The resulting pixel in column 102 will now have a color equivalent to $0673, which is a brown-greenish color.&#xD;&#xA;&#xD;&#xA; 3. Finally, lacking a matching color in the palette once more, you modify the blue component in column 103 to $6 (using a pixel value of $16 = 22). The resulting pixel in column 103 will now have a color equivalent to $0676, which is a dark gray with a very slight shimmer of green.&#xD;&#xA;&#xD;&#xA; [![HAM pixels before blitting][1]][1]  &#xD;&#xA; *note that each differently colored square represents 1 pixel*&#xD;&#xA;&#xD;&#xA;So far so good, but say you now want to blit an animated character onto the bitmap. Say the rightmost pixel of that character ends up in column 100 and it is a bright white, palette value $0FFF. What this means is that the white will bleed into the next 2 pixels:&#xD;&#xA;&#xD;&#xA; 1. Due to modifying just the red component, the visible color in column 101 will be $06FF, a bright cyan.&#xD;&#xA;&#xD;&#xA; 2. Due to modifying just the green component, the visible color in column 102 will be $067F, a bright blue.&#xD;&#xA;&#xD;&#xA; 3. Only in column 103 will you have modified all three color components and the apparent pixel color will be the same $0676 as the original one before blitting.&#xD;&#xA;&#xD;&#xA; [![HAM pixels after blitting][2]][2]  &#xD;&#xA; *note that each differently colored square represents 1 pixel*&#xD;&#xA;&#xD;&#xA;Depending on how many and which color components you consecutively modify, the color bleeding can affect more or less pixels and depending on how different the colors are to the originally intended colors, the artifacts can be more or less visible.&#xD;&#xA;&#xD;&#xA;To counteract the bleeding, you would have to design a routine that figures out which pixels to the right of a blit to adjust and which pixel values are the optimal ones that let the apparent pixel colors match the original ones as closely as possible. You won't get completely rid of the artifacts, but they might now be unnoticeable unless you take a closer look.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/xGlsK.png&#xD;&#xA;  [2]: http://i.stack.imgur.com/OTbAq.png&#xD;&#xA;" />
  <row Id="523" PostHistoryTypeId="5" PostId="103" RevisionGUID="aad3f697-dbd7-4c15-89c8-5e4eb35ff633" CreationDate="2016-04-21T20:26:25.313" UserId="4" Comment="Expanded" Text="&quot;Output levels&quot; are a feature of digital-to-analog converters, particularly of the sort used with computer monitors with distinct red/green/blue signal channels.&#xD;&#xA;&#xD;&#xA;The VIC-II doesn't do this, so it's not really meaningful to say it had output levels.  Instead, it creates a broadcast television signal directly (either [PAL][1] or [NTSC][2]), with each color mapped to a distinct luminance/chrominance (YIQ) combination (as noted in [the Wikipedia article][3], they had complete freedom in selecting these combinations).  The presence of five shades of grey just means that five of those combinations had an I and Q of 0.&#xD;&#xA;&#xD;&#xA;  [1]: https://en.wikipedia.org/wiki/PAL&#xD;&#xA;  [2]: https://en.wikipedia.org/wiki/NTSC&#xD;&#xA;  [3]: https://en.wikipedia.org/wiki/MOS_Technology_VIC-II#Colors" />
  <row Id="524" PostHistoryTypeId="2" PostId="202" RevisionGUID="db315110-fdbc-4fbe-8725-bb7850acaa5c" CreationDate="2016-04-21T20:28:23.050" UserId="173" Text="Accoridng to this article [link](http://www.zdnet.com/article/good-bye-386-linux-to-drop-support-for-i386-chips-with-next-major-release/) Linux variants dropped support for the i386 processors in version 3.8. However, Distro Watch [link](https://distrowatch.com/search.php?architecture=i386) still has quite a few distros that support the i386 architecture. Some of them include:&#xD;&#xA;&#xD;&#xA;- Mint&#xD;&#xA;- Debian&#xD;&#xA;- Zorin &#xD;&#xA;&#xD;&#xA;And many others, I'm sure YMMV. I've not installed Linux on anything older than an original AMD Athlon. I've got an Athlon 2600+ running Bodhi, and it's a tad sluggish. Not like trying to run Windows 7 on it, but, still not overly responsive. I wouldn't want to run it on anything older than the Athlon." />
  <row Id="525" PostHistoryTypeId="2" PostId="203" RevisionGUID="cb810481-46ad-4660-acbe-e9c1133a88ce" CreationDate="2016-04-21T20:56:46.847" UserId="87" Text="Would [ELKS](http://elks.sourceforge.net) count as modern Linux? It can be run on even older hardware (original IBM PC)." />
  <row Id="526" PostHistoryTypeId="5" PostId="64" RevisionGUID="c6520c64-9be0-4db1-87fe-5d526b9aabe0" CreationDate="2016-04-21T20:57:45.253" UserId="103" Comment="added link to files" Text="My Compaq Presario CDS 633 outputs color in Windows 3.1, but not in DOS.&#xD;&#xA;&#xD;&#xA;How can I get color in DOS?&#xD;&#xA;&#xD;&#xA;I have tried the `MODE` setting, but it did not change anything.  `ANSI.SYS` also has a `LOADHIGH` line in `CONFIG.SYS`.  Files of potential relevance are here: http://www.jacobspctuneup.tk/SE/RetroComputing/" />
  <row Id="527" PostHistoryTypeId="5" PostId="64" RevisionGUID="b7217a5f-5f74-44e7-bec3-e2a4bb974a20" CreationDate="2016-04-21T21:50:52.853" UserId="103" Comment="added info" Text="My Compaq Presario CDS 633 outputs color in Windows 3.1, but not in DOS.&#xD;&#xA;&#xD;&#xA;How can I get color in DOS?&#xD;&#xA;&#xD;&#xA;I have tried the `MODE` setting, but it did not change anything.  `ANSI.SYS` also has a `LOADHIGH` line in `CONFIG.SYS`.  Files of potential relevance are here: http://www.jacobspctuneup.tk/SE/RetroComputing/&#xD;&#xA;&#xD;&#xA;A few notes:&#xD;&#xA;&#xD;&#xA;  - The computer was a floor model, and the monitor was bought with the computer.&#xD;&#xA;&#xD;&#xA;  - On the monitor connector, pins 9,12, and 15 are missing, and pin 11 is bent to the pin 12 position.&#xD;&#xA;&#xD;&#xA;  - There is no hole for pin 9 on the VGA connector on the computer." />
  <row Id="528" PostHistoryTypeId="2" PostId="204" RevisionGUID="b2ddedc2-1d08-404b-8514-80c4e10b1940" CreationDate="2016-04-22T00:20:15.120" UserId="56" Text="Older Macintoshes and the Apple IIgs used a custom character set for documents and filenames.  Each character was held in an 8-bit byte, using 0x00-0x7F for ASCII, and 0x80-0xFF for various symbols and Latin alphabet characters.&#xD;&#xA;&#xD;&#xA;How does this map to Unicode?&#xD;&#xA;" />
  <row Id="529" PostHistoryTypeId="1" PostId="204" RevisionGUID="b2ddedc2-1d08-404b-8514-80c4e10b1940" CreationDate="2016-04-22T00:20:15.120" UserId="56" Text="How do I interpret the old Mac character set?" />
  <row Id="530" PostHistoryTypeId="3" PostId="204" RevisionGUID="b2ddedc2-1d08-404b-8514-80c4e10b1940" CreationDate="2016-04-22T00:20:15.120" UserId="56" Text="&lt;apple-iigs&gt;&lt;apple-macintosh&gt;&lt;unicode&gt;" />
  <row Id="531" PostHistoryTypeId="2" PostId="205" RevisionGUID="53b2183c-098f-425c-96f9-d1149dbf1a7c" CreationDate="2016-04-22T00:20:15.120" UserId="56" Text="The character set is known as &quot;Mac OS Roman&quot;.  The official mapping from Mac OS Roman to Unicode can be found on [unicode.org][1].&#xD;&#xA;&#xD;&#xA;While the character set is similar to Windows-1252 and ISO-8859-1, having many characters in common, it's not a direct match for either.&#xD;&#xA;&#xD;&#xA;All of the characters are in the Basic Multilingual Plane (BMP).  It's worth noting, however, that the character at 0xF0 (&quot;Apple Logo&quot;) maps to code point 0xF8FF, which is in the BMP Private Use Area (informally, the Corporate Use Area).  This code point is used in [a variety of ways][2], so the glyph that appears may not be what you expect (and will often be the &quot;no glyph&quot; glyph).&#xD;&#xA;&#xD;&#xA;A conversion table formatted as an array in C can be found [here][3].&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.unicode.org/Public/MAPPINGS/VENDORS/APPLE/ROMAN.TXT&#xD;&#xA;  [2]: https://en.wikipedia.org/wiki/Private_Use_Areas#U.2BF8FF&#xD;&#xA;  [3]: https://github.com/fadden/nulib2/blob/master/nufxlib/Charset.c" />
  <row Id="532" PostHistoryTypeId="2" PostId="206" RevisionGUID="e551b419-8ad7-4392-8303-b6d6a9ea688e" CreationDate="2016-04-22T00:20:48.793" UserId="75" Text="On the Amiga 500, 500+, 600, and 1200, what size screws were used to hold the chassis together? Is it the same size screw for all, different screws per machine, different screws front and rear, or were all the holes designed to work with more than one size screw depending on what the factory happened to have in stock?" />
  <row Id="533" PostHistoryTypeId="1" PostId="206" RevisionGUID="e551b419-8ad7-4392-8303-b6d6a9ea688e" CreationDate="2016-04-22T00:20:48.793" UserId="75" Text="What size screws were used in the Amiga desktop cases?" />
  <row Id="534" PostHistoryTypeId="3" PostId="206" RevisionGUID="e551b419-8ad7-4392-8303-b6d6a9ea688e" CreationDate="2016-04-22T00:20:48.793" UserId="75" Text="&lt;amiga&gt;&lt;restoration&gt;&lt;chassis&gt;&lt;screw&gt;&lt;case&gt;" />
  <row Id="535" PostHistoryTypeId="6" PostId="89" RevisionGUID="dfcece00-bdb4-403d-992f-acfa39391231" CreationDate="2016-04-22T00:25:43.793" UserId="56" Comment="Edit tags" Text="&lt;hardware&gt;&lt;apple-macintosh&gt;" />
  <row Id="536" PostHistoryTypeId="6" PostId="31" RevisionGUID="e23edad3-4462-4dd7-b797-6d68ee2fd295" CreationDate="2016-04-22T00:26:10.917" UserId="56" Comment="Edit tags" Text="&lt;apple-ii&gt;&lt;data-transfer&gt;" />
  <row Id="537" PostHistoryTypeId="2" PostId="207" RevisionGUID="86be652e-7b39-4af5-ae47-e3b6373e7f55" CreationDate="2016-04-22T01:40:19.473" UserId="221" Text="I have an old 8bit Atari at my dad's house which would be fun to play with. &#xD;&#xA;&#xD;&#xA;It has a keyboard, computer and screen, turn it on, and program BASIC. &#xD;&#xA;&#xD;&#xA;But I'll possibly want to load the code from a modern computer. The reason being, saving/load from the original Atari floppy disks is going to be unreliable and slow. &#xD;&#xA;&#xD;&#xA;I could retype out the code each time I want to run it, but again that's going to be slow and annoying. &#xD;&#xA;&#xD;&#xA;What would ideally work, is to have some kind of keyboard interface that will simulate typing into the Atari. ie. it plugs in to the Atari, like a normal keyboard, and will type out all the code I have written in a modern computer. &#xD;&#xA;&#xD;&#xA;Do such interfaces exists? If not, how plausible is it modify an original keyboard to allow this?" />
  <row Id="538" PostHistoryTypeId="1" PostId="207" RevisionGUID="86be652e-7b39-4af5-ae47-e3b6373e7f55" CreationDate="2016-04-22T01:40:19.473" UserId="221" Text="How can I interface with an old Atari from a modern computer?" />
  <row Id="539" PostHistoryTypeId="3" PostId="207" RevisionGUID="86be652e-7b39-4af5-ae47-e3b6373e7f55" CreationDate="2016-04-22T01:40:19.473" UserId="221" Text="&lt;atari&gt;&lt;keyboards&gt;&lt;atari-basic&gt;" />
  <row Id="541" PostHistoryTypeId="2" PostId="208" RevisionGUID="af852592-8ce5-4648-a949-194635f0d973" CreationDate="2016-04-22T04:36:30.210" UserId="4" Text="I'm currently using the absolutely ancient &quot;Fusion&quot; emulator to emulate a 68k Macintosh (specifically, a Quadra 700), but it only runs under MS-DOS, so I'm using a VirtualBox VM to emulate that.  I'd like to eliminate one layer of emulation.&#xD;&#xA;&#xD;&#xA;Features that I'm looking for:&#xD;&#xA;&#xD;&#xA; * Emulate a 68040-series Mac&#xD;&#xA; * Runs under Linux&#xD;&#xA; * Some way to transfer files to/from the host OS (shared folders, emulated network drive, FUSE filesystem module, whatever)&#xD;&#xA;&#xD;&#xA;Nice to have:&#xD;&#xA;&#xD;&#xA; * Support for Fusion hard-drive images&#xD;&#xA; * Virtual CD-ROM drive supporting ISO images&#xD;&#xA; * CD-ROM passthrough to access an actual CD-ROM drive&#xD;&#xA; * Support for Ethernet networking&#xD;&#xA;&#xD;&#xA;It doesn't matter if it requires a ROM image or has a re-written ROM: I've got dumps from the aforementioned Quadra and a Performa 630 that I can use if needed." />
  <row Id="542" PostHistoryTypeId="1" PostId="208" RevisionGUID="af852592-8ce5-4648-a949-194635f0d973" CreationDate="2016-04-22T04:36:30.210" UserId="4" Text="Linux 68k Macintosh emulator" />
  <row Id="543" PostHistoryTypeId="3" PostId="208" RevisionGUID="af852592-8ce5-4648-a949-194635f0d973" CreationDate="2016-04-22T04:36:30.210" UserId="4" Text="&lt;macintosh&gt;&lt;emulator&gt;&lt;software-recommendation&gt;" />
  <row Id="544" PostHistoryTypeId="2" PostId="209" RevisionGUID="c0cf92ab-85c4-462d-8801-5fa038c492e8" CreationDate="2016-04-22T05:38:46.963" UserId="89" Text="From a more practical point of view, the program to convert between different character sets is called `iconv`. It can be used on the command line from the OS X (Mac) terminal, as well as in most Linux distributions. The most popular implementation is [GNU libiconv](http://www.gnu.org/software/libiconv/), providing support for hundreds of different encodings, including MacRoman and the other Mac encodings (see below). It can be used like so:&#xD;&#xA;&#xD;&#xA;    iconv -f macroman -t utf-8 infile outfile&#xD;&#xA;&#xD;&#xA;iconv can also convert to many specialty and legacy encodings, so it's a worthwhile element of your retrocomputing toolkit. Most programming languages provide similar functionality through an `iconv()` function of some sort (e.g. [php](http://php.net/manual/en/function.iconv.php), C).&#xD;&#xA;&#xD;&#xA;Also thought I'd add - MacRoman isn't the only Mac encoding, there was one for each region:&#xD;&#xA;&#xD;&#xA;    MAC MACINTOSH MACROMAN CSMACINTOSH&#xD;&#xA;    MACCENTRALEUROPE&#xD;&#xA;    MACICELAND&#xD;&#xA;    MACCROATIAN&#xD;&#xA;    MACROMANIA&#xD;&#xA;    MACCYRILLIC&#xD;&#xA;    MACUKRAINE&#xD;&#xA;    MACGREEK&#xD;&#xA;    MACTURKISH&#xD;&#xA;    MACHEBREW&#xD;&#xA;    MACARABIC&#xD;&#xA;    MACTHAI&#xD;&#xA;&#xD;&#xA;However, from an English-speaking perspective, MacRoman is the only one commonly encountered nowadays." />
  <row Id="545" PostHistoryTypeId="2" PostId="210" RevisionGUID="1ecff23c-9202-418e-a0bf-992b7b916b2e" CreationDate="2016-04-22T08:18:31.073" UserId="145" Text="If you're willing to spend some money, there are some nice options using the Atari's SIO port (the big trapezoidal plug on the side). &#xD;&#xA;&#xD;&#xA;Maybe the most flexible option is the SIO2PC adaptor, which lets you connect your Atari to a PC via serial or USB connection. This lets you do things like access a directory on your Mac or PC directly from the Atari, and even configure printers so that you can print from your Atari! I haven't actually tried this device myself, but many people swear by it. There are a variety of options to choose from at http://www.atarimax.com/sio2pc/documentation/index.html&#xD;&#xA;&#xD;&#xA;The option that I'm using is SIO2SD, which is basically an SD-card adaptor for the Atari. You just plug this into your Atari, and it sort of pretends to be a disk drive. The Atari boots up into a sort of disk image picker program installed on the SD card, and from there you can pick any of the disk images you put on there to boot from. You can also do things like create empty disk images that you can use from the Atari as if they were actual disks. That way you can do the things you're talking about, using BASIC or anything else and saving your work on these &quot;disks&quot;. This device works well for me since I am using my Atari solely for gaming, set up in the living room connected to a big new TV (living the dream!). With this device, I don't have to bother with having another computer connected. http://www.lotharek.pl/product.php?pid=23&#xD;&#xA;&#xD;&#xA;Both of these are actually available from a variety of sellers, as they all seem to be pretty much open source hardware that &quot;anyone&quot; could make. I've provided links to what I believe to be the most popular sources for these (I bought my SIO2SD from lotharek and have been very pleased with everything about it so far)." />
  <row Id="549" PostHistoryTypeId="2" PostId="212" RevisionGUID="43a6f309-1efc-4546-b4b4-ddbc1e1c331b" CreationDate="2016-04-22T09:20:43.900" UserId="133" Text="What format is the (Timex) Sinclair ZX Spectrum SCREEN$/.SCR file and how is the fore/background and attribute data encoded within this format?" />
  <row Id="550" PostHistoryTypeId="1" PostId="212" RevisionGUID="43a6f309-1efc-4546-b4b4-ddbc1e1c331b" CreationDate="2016-04-22T09:20:43.900" UserId="133" Text="What format is the (Timex) Sinclair ZX Spectrum SCREEN$/.SCR file" />
  <row Id="551" PostHistoryTypeId="3" PostId="212" RevisionGUID="43a6f309-1efc-4546-b4b4-ddbc1e1c331b" CreationDate="2016-04-22T09:20:43.900" UserId="133" Text="&lt;zx-spectrum&gt;&lt;file-format&gt;&lt;screen&gt;" />
  <row Id="552" PostHistoryTypeId="2" PostId="213" RevisionGUID="c6d71223-a221-48fb-861b-52214df2a53b" CreationDate="2016-04-22T09:21:45.603" UserId="-1" Text="" />
  <row Id="553" PostHistoryTypeId="2" PostId="214" RevisionGUID="cedeebb0-7508-4a63-9875-3e1801f5ddba" CreationDate="2016-04-22T09:21:45.603" UserId="-1" Text="" />
  <row Id="554" PostHistoryTypeId="2" PostId="215" RevisionGUID="96d563cd-1561-4604-989f-1f271946589a" CreationDate="2016-04-22T09:26:38.663" UserId="79" Text="[Basilisk II](http://basilisk.cebix.net/) works well on Linux (it's even [packaged for Debian](https://tracker.debian.org/basilisk2)) and provides most of the features you're looking for. I know I've used the following:&#xD;&#xA;&#xD;&#xA;* 68040 emulation;&#xD;&#xA;* host filesystem access inside the emulator;&#xD;&#xA;* pass-through networking.&#xD;&#xA;&#xD;&#xA;I believe it also supports pass-through CD-ROM access, and possibly ISO-image-based CD-ROM emulation." />
  <row Id="555" PostHistoryTypeId="2" PostId="216" RevisionGUID="48a3a647-81ff-4157-8a1b-896d522bb32a" CreationDate="2016-04-22T10:08:05.103" UserId="202" Text="[SheepShaver][1] and [BasiliskII][2] both work on Linux and should support your requirements.&#xD;&#xA;&#xD;&#xA;I actually answered [Quadra 650 emulation related question][3], although it *was* for Windows, on SuperUser, and have just spent the last hour trying to find/recover it, after the OP who asked the question has subsequently deleted the question.  I have reproduced the question and answer below - hopefully it could be useful, in case any stumbling blocks are encountered.&#xD;&#xA;&#xD;&#xA;------&#xD;&#xA;&#xD;&#xA;##Question&#xD;&#xA;&#xD;&#xA;BasiliskII and SheepShaver can't open quadra650.rom&#xD;&#xA;&#xD;&#xA;I was thinking I could run Mac OS 7.5.5 on vMac with color but no it won't work with color only OS can run. I thought it would work if I use BasiliskII but when I assemble the ROM, `SDL.dll` and the other stuff, I got an error about the ROM: &quot;Cannot open ROM file.&quot; The same thing happened with SheepShaver.&#xD;&#xA;&#xD;&#xA;This is very huge problem and I don't know how I can fix it. On forums it said `quadra650.rom` will work but I tried and nothing special, I got the same error. I opened both BasiliskII and SheepShaver and I took a screenshot for you guys to know tell me what's going on?&#xD;&#xA;&#xD;&#xA;[![enter image description here][4]][4]&#xD;&#xA;&#xD;&#xA;I got the disk image from youtube - [Tour of Mac OS 7.5.5 with color + games (with download links)][5]. Read the description for `.dsk` file.&#xD;&#xA;&#xD;&#xA;##Answer&#xD;&#xA;&#xD;&#xA;Tackling Basilisk II and SheepShaver in turn...&#xD;&#xA;&#xD;&#xA;##Basilisk II&#xD;&#xA;&#xD;&#xA;I've managed to reproduce your error, using a [Quadra 650 ROM file][1] from a tutorial on [RedundantRobot][6].&#xD;&#xA;&#xD;&#xA;The issue is that you need to specify to the emulator *where* the ROM file is located. Just dropping it in the same directory is not sufficient.&#xD;&#xA;&#xD;&#xA;From the [BASILISK II readme][7], the `rom` preference is defined below:&#xD;&#xA;&#xD;&#xA;&gt; rom &lt;ROM file path&gt;&#xD;&#xA;&gt; &#xD;&#xA;&gt;   This item specifies the file name of the Mac ROM file to be used by &#xD;&#xA;&gt; Basilisk II. If no &quot;rom&quot; line is given, the ROM file has to be named  &quot;ROM&quot; and put in the same directory as the Basilisk II executable.&#xD;&#xA;&#xD;&#xA;So the easiest option, without requiring you to modify the preferences file, in the Basilisk II directory, rename the ROM file, from `quadra650.rom` to just `ROM`.&#xD;&#xA;&#xD;&#xA;![Rename file to ROM][8]&#xD;&#xA;&#xD;&#xA;Or, you could edit the preferences file, by opening the file, `BasiliskII_prefs`, in notepad (as here is no GUI preferences dialogue) and add&#xD;&#xA;&#xD;&#xA;    rom C:\&lt;your path&gt;\quadra650.ROM&#xD;&#xA;&#xD;&#xA;for example,&#xD;&#xA;&#xD;&#xA;    rom C:\Users\davinci\Basilisk\BasiliskII_20-02-2015\quadra650.ROM&#xD;&#xA;&#xD;&#xA;If your disk is specified corectly then the virtual mac should now boot.&#xD;&#xA;&#xD;&#xA;![Booted MacOS][9]&#xD;&#xA;&#xD;&#xA;Otherwise, you would end up with this (and you may need to use Task Manager to end the Basilisk II *process* as the window may refuse to close and kill the application):&#xD;&#xA;&#xD;&#xA;![No disk defined][10]&#xD;&#xA;&#xD;&#xA;This is because the same path issue occurs with the disk image, and you may need to specify the path to the disk image in the preferences file. Again from the [BASILISK II readme][7], the `disk` preference is defined: &#xD;&#xA;&#xD;&#xA;&gt; disk &lt;volume description&gt;&#xD;&#xA;&gt; &#xD;&#xA;&gt;   This item describes one MacOS volume to be mounted by Basilisk II.  &#xD;&#xA;&gt; There can be multiple &quot;disk&quot; lines in the preferences file. Basilisk&#xD;&#xA;&gt; II   can handle hardfiles (byte-per-byte images of HFS volumes in a&#xD;&#xA;&gt; file on   the host system), HFS partitions on hard disks etc., and&#xD;&#xA;&gt; MacOS-partitioned   disks (it can only access the first partition,&#xD;&#xA;&gt; though). The &quot;volume   description&quot; is either the pathname of a&#xD;&#xA;&gt; hardfile or a platform-dependant   description of an HFS partition or&#xD;&#xA;&gt; drive. If the volume description is   prefixed by an asterisk (&quot;*&quot;),&#xD;&#xA;&gt; the volume is write protected for MacOS.&#xD;&#xA;&gt; &#xD;&#xA;&gt;   Basilisk II can also handle some types of Mac &quot;disk image&quot; files&#xD;&#xA;&gt; directly,   as long as they are uncompressed and unencoded.&#xD;&#xA;&gt; &#xD;&#xA;&gt;   BeOS:&#xD;&#xA;&gt;     To specify an HFS partition, simply specify its path (e.g.&#xD;&#xA;&gt;     &quot;/dev/disk/scsi/0/1/0/0_3&quot;). If you don't specify any volumes, Basilisk II&#xD;&#xA;&gt;     will search for and use all available HFS partitions.&#xD;&#xA;&gt; &#xD;&#xA;&gt;   Unix:&#xD;&#xA;&gt;     To specify an HFS partition, simply specify its path (e.g. &quot;/dev/sda5&quot;).&#xD;&#xA;&gt;     If you want to access a MacOS-partitioned hard disk or removable volume&#xD;&#xA;&gt;     (Jaz, Zip etc.) and your operating system doesn't understand MacOS&#xD;&#xA;&gt;     partition tables, you can specify the block device name (e.g. &quot;/dev/sda&quot;)&#xD;&#xA;&gt;     to access the first HFS partition on the device. Under Linux, if you&#xD;&#xA;&gt;     don't specify any volumes, Basilisk II will search /etc/fstab for&#xD;&#xA;&gt;     unmounted HFS partitions and use these.&#xD;&#xA;&gt; &#xD;&#xA;&gt;   AmigaOS:&#xD;&#xA;&gt;     Partitions/drives are specified in the following format:&#xD;&#xA;&gt;       /dev/&lt;device name&gt;/&lt;unit&gt;/&lt;open flags&gt;/&lt;start block&gt;/&lt;size&gt;/&lt;block size&gt;&#xD;&#xA;&gt;     &quot;start block&quot; and &quot;size&quot; are given in blocks, &quot;block size&quot; is given in&#xD;&#xA;&gt;     bytes.&#xD;&#xA;&gt; &#xD;&#xA;&gt;   **Windows:&#xD;&#xA;&gt;     To define a logical volume (Windows NT only), specify its path (e.g. &quot;c:\&quot;).&#xD;&#xA;&gt;     To define a physical volume (NT and 9x), additionally give the &quot;physical&quot;&#xD;&#xA;&gt;     keyword (E.g. &quot;physical c:\&quot;). For safety reasons, volumes are mounted as&#xD;&#xA;&gt;     read-only. This is due to the bugs in PC Exchange. If you don't specify&#xD;&#xA;&gt;     any volume, the files *.hfv and *.dsk are searched from the current&#xD;&#xA;&gt;     directory. Note that in this case, Basilisk II tries to boot from the first&#xD;&#xA;&gt;     volume file found, which is random and may not be what you want.**&#xD;&#xA;&#xD;&#xA;So add the line &#xD;&#xA;&#xD;&#xA;    disk C:\&lt;path&gt;\boot.dsk&#xD;&#xA;&#xD;&#xA;for example,&#xD;&#xA;&#xD;&#xA;    disk C:\Users\davinci\Basilisk\BasiliskII_20-02-2015\boot.dsk&#xD;&#xA;&#xD;&#xA;to the preferences file, where `path` is your path to the Basilisk directory, and rename the `System 7.5.5 Boot.dsk` file to just `boot.dsk`&#xD;&#xA;&#xD;&#xA;![Rename disk image file][11]&#xD;&#xA;&#xD;&#xA;The renaming of the file to something simpler is not be *strictly* necessary but removing the spaces reduces the chance of the file not being recognised or found. The following line ***does*** work though, as Basilisk II handles the spaces in filenames without an issue:&#xD;&#xA;&#xD;&#xA;    disk C:\Users\davinci\Basilisk\BasiliskII_20-02-2015\System 7.5.5 Boot.dsk &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;##SheepShaver&#xD;&#xA;&#xD;&#xA;I've managed to reproduce your error, using a [New World PPC ROM file][12] from a tutorial on [RedundantRobot][6]. If you attempt to use the Quadra 650 ROM file, that you used for Basilisk II, then you will get the following error:&#xD;&#xA;&#xD;&#xA;![Wrong ROM file - Quadra 650 ROM is incompatible][13]&#xD;&#xA;&#xD;&#xA;Copying in the correct New World PPC ROM file is not sufficient, as you will get the following error:&#xD;&#xA;&#xD;&#xA;![newworld86.rom file needs to be renamed to ROM][14]&#xD;&#xA;&#xD;&#xA;If you rename the file to just `ROM`, again without any file extension, then SheepShaver will run, as desired.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://sheepshaver.cebix.net/&#xD;&#xA;  [2]: http://basilisk.cebix.net/&#xD;&#xA;  [3]: http://superuser.com/questions/936506/basiliskii-and-sheepshaver-cant-open-quadra650-rom/936536#936536&#xD;&#xA;  [4]: http://i.stack.imgur.com/LYScS.png&#xD;&#xA;  [5]: https://www.youtube.com/watch?v=0Qqplm9-PQo&#xD;&#xA;  [6]: http://www.redundantrobot.com/sheepshaver-tutorial/&#xD;&#xA;  [7]: http://basilisk.cebix.net/README&#xD;&#xA;  [8]: http://i.stack.imgur.com/rP3kq.png&#xD;&#xA;  [9]: http://i.stack.imgur.com/VrpKw.png&#xD;&#xA;  [10]: http://i.stack.imgur.com/fk6yp.png&#xD;&#xA;  [11]: http://i.stack.imgur.com/M2a5Y.png&#xD;&#xA;  [12]: http://www.redundantrobot.com/macemulator/newworld86.rom.zip&#xD;&#xA;  [13]: http://i.stack.imgur.com/OvZwB.png&#xD;&#xA;  [14]: http://i.stack.imgur.com/2lcir.png" />
  <row Id="556" PostHistoryTypeId="2" PostId="217" RevisionGUID="fd8ec645-bfff-47d3-88a9-ea3f5fea978f" CreationDate="2016-04-22T10:12:00.513" UserId="105" Text="For a standard screen, compatible with ZX Spectrum, a SCREEN$ file is 6912 bytes. It's just a dump of the screen memory.&#xD;&#xA;&#xD;&#xA;The first 6144 bytes store the screen bitmap: 256x192 pixels, 1 bit per pixel (opn or off). The layout is not linear.&#xD;&#xA;&#xD;&#xA;- The screen bitmap is divided horizontally into three thirds: each one is 2048 bytes and store 8 text rows of 32 column each one (each character cell has 8 scans of 8 pixels each one).&#xD;&#xA;- For each third, the first scan of each character cell is stored, left to right, top to bottom. Then, the second scan, then the third, until the last one, the eighth. After this, a new third is stored in the same fashion.&#xD;&#xA;- Each byte stored has 8 pixels: the MSb belongs to the leftmost pixel as shown on the screen.&#xD;&#xA;&#xD;&#xA;Following the bitmap region, the remaining 768 bytes store the attributes. There is 1 byte of attribute for each character cell. Stored left to right, top to bottom. Bits 2-0 store the foreground colour, or &quot;ink&quot; colour (colour assigned to off pixels). Bits 5-3 store the background colour or &quot;paper&quot; colour (colour assigned to on pixels). Bit 6 is bright. If setted, both paper and ink colours are lighter. Bit 7 is flash. If setted, the paper and ink colour swap every 640 ms to give a kind of flashing character.&#xD;&#xA;&#xD;&#xA;To have a clue of how bitmap and attribute are stored, you can type this little BASIC program that will shows you the arrangement of pixels on the screen, by dumping part of the ROM to the screen (which will show up as random pixels and colours):&#xD;&#xA;&#xD;&#xA;    10 FOR n=0 TO 6911: POKE 16384+n,PEEK n: NEXT n&#xD;&#xA;&#xD;&#xA;For each paper or ink colour, the arrangement of the three bits encode a RGB value in this order: G R B. So, colour 6 (binary 110) is green + red = yellow. The complete table is this:&#xD;&#xA;0: black, 1: blue, 2: red, 3:magenta, 4: green, 5:cyan, 6:yellow, 7: white&#xD;&#xA;&#xD;&#xA;With bright setted, all these colours except black are intensified. This gives a total of 15 different colours.&#xD;&#xA;&#xD;&#xA;The Timex 2048/2068 computers add two more screen modes, called HiColour and HiRes.&#xD;&#xA;&#xD;&#xA;HiColour mode is entered by setting bit 1 of port $FF. It differs a little from the standard mode, explained above. HiColour mode uses an attribute region which is not 768 bytes, but 6144 bytes: the same size of the bitmap region. The attribute region does not start following the bitmap region, but there is a gap of 1280 bytes between the end of the bitmap region and the start of the attribute region. The screen size is 12288 bytes, not including the gap.&#xD;&#xA;&#xD;&#xA;The layout of this attribute region is the same as the bitmap region (3 thirds, the first scan is stored, then the second, etc). There is now 1 byte of atribute for each scan of 8 pixels. The content of the attribute is the same as in the standard mode.&#xD;&#xA;&#xD;&#xA;On tape, some programs use two different blocks to load the bitmap region, then the attribute region (as they are not contiguous). Some others use a single block containing both regions along with 1280 byte gap between them.&#xD;&#xA;&#xD;&#xA;The following program will show you the arrangement in this mode. It won't work on a regular Sinclair Spectrum, but in a Timex TC2048/2068.&#xD;&#xA;&#xD;&#xA;    10 OUT 255,2: FOR n=0 TO 6144: POKE 16384+n,PEEK n:POKE 24576+n,PEEK n: NEXT n&#xD;&#xA;&#xD;&#xA;HiRes is entered by setting bit 3 of port $FF. This mode shows a screen of 512x192 pixels, using two different bitmap regions. One region is the same as in the standard and HiColour mode, and the second one is located in the same place as the attribute region of the HiColour mode.&#xD;&#xA;&#xD;&#xA;For each scan of 16 pixels, the left most 8 pixels are stored in the first bitmap region, and the rightmost 8 pixels are stored in the second bitmap region.&#xD;&#xA;&#xD;&#xA;Each bitmap region is arranged the same way as the other screen modes.&#xD;&#xA;&#xD;&#xA;The foreground, background and border colour is setted separately on bits 5-3 of port $FF. These three bits store the ink colour which will be applied to all &quot;on&quot; pixels. The 1-complement of this value will be used for both paper and border colours. In HiRes mode, the bright bit is always setted and there is no flash.&#xD;&#xA;&#xD;&#xA;The following program will show you how the HiRes mode is arranged:&#xD;&#xA;&#xD;&#xA;    10 OUT 255,4: FOR n=0 TO 6144: POKE 16384+n,PEEK n:POKE 24576+n,PEEK n: NEXT n&#xD;&#xA;&#xD;&#xA;On tape, HiRes SCREEN$ are stored the same way as HiColour SCREEN$. I haven't seen that the global ink colour is stored too, so a separate BASIC program must provide it, along with the mode change command." />
  <row Id="557" PostHistoryTypeId="2" PostId="218" RevisionGUID="d7e58b29-d767-4ea8-9ac3-e3719df2e5d7" CreationDate="2016-04-22T10:13:27.270" UserId="133" Text="The SCR file format is effectively a raw data dump of the video memory area on the standard ZX Spectrum 48/128k. &#xD;&#xA;&#xD;&#xA;As such, the data is divided into three 2,048 byte sections, each of which describes the pixel data for a third of the screen, from top to bottom. This is then followed by 768 bytes of attribute data information - resulting in a total of 6,912 bytes.&#xD;&#xA;&#xD;&#xA;#Background#&#xD;&#xA;For those unfamiliar with the Spectrum's video architecture, on the standard Spectrums, the 256x192 display is treated as 768 8x8 pixel blocks, with each block being capable of displaying two colours. (i.e.: Each block is effectively a bitmap and associated ink and background colour combination.) By using this approach, it's possible to display the fill 256x192 resolution of screen using only 6,912 bytes.&#xD;&#xA;&#xD;&#xA;Additionally, the Spectrum palette consists of both normal and &quot;bright&quot; colours, with each block capable of being set as bright. (i.e.: You can't mix normal and bright colours within a single 8x8 pixel block.) The blocks can also be set to flash, but perhaps the less said about that the better.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;In more detail:&#xD;&#xA;&#xD;&#xA;#Screen thirds#&#xD;&#xA;Each of the screen thirds describes a slice of the screen - the first third being horizontal lines 0 thru 63, the second being 64 thru 127 and finally 128 thru 192, hence describing the 192 horizontal lines of the Spectrum's 256x192 display.&#xD;&#xA;&#xD;&#xA;However, rather than simply describe each row in a linear fashion (i.e.: 0 thru 63, then 64 thru 127, etc.), due to the nature of the Spectrum, the data within each third instead describes a full horizontal line across each of the 8x8 blocks in turn (i.e: horizontal line 0, 8, 16, etc.) before moving onto the next line in the row of blocks (i.e.: line 1, 9, etc.) &#xD;&#xA;&#xD;&#xA;This will make *way* more sense if you've ever seen a ZX Spectrum loading screen data.&#xD;&#xA;&#xD;&#xA;In more detail, each of the 64 lines within each third is structured into a series of 32 byte blocks as follows, each block being a line of screen data.&#xD;&#xA;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;  0 ..  31 - 256 bits of data for horizontal line 0&#xD;&#xA; 32 ..  63 - 256 bits of data for horizontal line 8&#xD;&#xA; 64 ..  95 - 256 bits of data for horizontal line 16&#xD;&#xA; 96 .. 127 - 256 bits of data for horizontal line 24&#xD;&#xA;128 .. 159 - 256 bits of data for horizontal line 32&#xD;&#xA;160 .. 191 - 256 bits of data for horizontal line 40&#xD;&#xA;192 .. 223 - 256 bits of data for horizontal line 48&#xD;&#xA;224 .. 255 - 256 bits of data for horizontal line 56&#xD;&#xA;&lt;/pre&gt;&#xD;&#xA;&#xD;&#xA;This is then followed by...&#xD;&#xA;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;  0 ..  31 - 256 bits of data for horizontal line 1&#xD;&#xA; 32 ..  63 - 256 bits of data for horizontal line 9&#xD;&#xA; 64 ..  95 - 256 bits of data for horizontal line 17&#xD;&#xA; 96 .. 127 - 256 bits of data for horizontal line 25&#xD;&#xA;128 .. 159 - 256 bits of data for horizontal line 33&#xD;&#xA;160 .. 191 - 256 bits of data for horizontal line 41&#xD;&#xA;192 .. 223 - 256 bits of data for horizontal line 49&#xD;&#xA;224 .. 255 - 256 bits of data for horizontal line 57&#xD;&#xA;&lt;/pre&gt;&#xD;&#xA;&#xD;&#xA;...&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;#Attribute data#&#xD;&#xA;Once each of the thirds has been completed, this is followed by the attribute data, which is simply another array of bytes detailing the ink and paper colours as well as whether or not bright or flash is set.&#xD;&#xA;&#xD;&#xA;Each of these bytes is constructed as follows:&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;0,1,2 - Ink colour&#xD;&#xA;3,4,5 - Paper colour &#xD;&#xA;6 - Whether or not the colours are bright or standard&#xD;&#xA;7 - Whether or not the block should flash&#xD;&#xA;&lt;/pre&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;For more information see [Claus Jahn's ZX Spectrum page](http://www.zx-modules.de/fileformats/scrformat.html)" />
  <row Id="558" PostHistoryTypeId="5" PostId="216" RevisionGUID="3eae62e0-77c2-44f7-8a5c-f85b7007daf5" CreationDate="2016-04-22T10:13:43.093" UserId="202" Comment="Added specifications" Text="[SheepShaver][1] and [BasiliskII][2] both work on Linux and should support your requirements.&#xD;&#xA;&#xD;&#xA;To quote the specifications of each emulator respectively:&#xD;&#xA;&#xD;&#xA;&gt; **Some of SheepShaver's features**&#xD;&#xA;&gt; &#xD;&#xA;&gt;  - Runs MacOS 7.5.2 thru 9.0.4. MacOS X as a guest is not supported.&#xD;&#xA;&gt;  - Color video display&#xD;&#xA;&gt;  - CD quality sound output&#xD;&#xA;&gt;  - Access to floppy disks, CD-ROMs and HFS(+) partitions on hard disks&#xD;&#xA;&gt;  - Easy file exchange with the host OS via a &quot;Host Directory Tree&quot; icon on the Mac desktop&#xD;&#xA;&gt;  - Internet and LAN networking via Ethernet&#xD;&#xA;&gt;  - Serial drivers&#xD;&#xA;&gt;  - SCSI Manager (old-style) emulation&#xD;&#xA;&#xD;&#xA;and&#xD;&#xA;&#xD;&#xA;&gt; **Some features of Basilisk II**&#xD;&#xA;&gt; &#xD;&#xA;&gt;  - Emulates either a Mac Classic (which runs MacOS 0.x thru 7.5) or a Mac II series machine (which runs MacOS 7.x, 8.0 and 8.1), depending&#xD;&#xA;&gt; on the ROM being used&#xD;&#xA;&gt;  - Color video display&#xD;&#xA;&gt;  - CD quality sound output&#xD;&#xA;&gt;  - Floppy disk driver (only 1.44MB disks supported)&#xD;&#xA;&gt;  - Driver for HFS partitions and hardfiles&#xD;&#xA;&gt;  - CD-ROM driver with basic audio functions&#xD;&#xA;&gt;  - Easy file exchange with the host OS via a &quot;Host Directory Tree&quot; icon on the Mac desktop&#xD;&#xA;&gt;  - Ethernet driver&#xD;&#xA;&gt;  - Serial drivers&#xD;&#xA;&gt;  - SCSI Manager (old-style) emulation&#xD;&#xA;&gt;  - Emulates extended ADB keyboard and 3-button mouse&#xD;&#xA;&gt;  - Uses UAE 68k emulation or (under AmigaOS and NetBSD/m68k) real 68k processor&#xD;&#xA;&#xD;&#xA;I actually answered [Quadra 650 emulation related question][3], although it *was* for Windows, on SuperUser, and have just spent the last hour trying to find/recover it, after the OP who asked the question has subsequently deleted the question.  I have reproduced the question and answer below - hopefully it could be useful, in case any stumbling blocks are encountered.&#xD;&#xA;&#xD;&#xA;------&#xD;&#xA;&#xD;&#xA;##Question&#xD;&#xA;&#xD;&#xA;BasiliskII and SheepShaver can't open quadra650.rom&#xD;&#xA;&#xD;&#xA;I was thinking I could run Mac OS 7.5.5 on vMac with color but no it won't work with color only OS can run. I thought it would work if I use BasiliskII but when I assemble the ROM, `SDL.dll` and the other stuff, I got an error about the ROM: &quot;Cannot open ROM file.&quot; The same thing happened with SheepShaver.&#xD;&#xA;&#xD;&#xA;This is very huge problem and I don't know how I can fix it. On forums it said `quadra650.rom` will work but I tried and nothing special, I got the same error. I opened both BasiliskII and SheepShaver and I took a screenshot for you guys to know tell me what's going on?&#xD;&#xA;&#xD;&#xA;[![enter image description here][4]][4]&#xD;&#xA;&#xD;&#xA;I got the disk image from youtube - [Tour of Mac OS 7.5.5 with color + games (with download links)][5]. Read the description for `.dsk` file.&#xD;&#xA;&#xD;&#xA;##Answer&#xD;&#xA;&#xD;&#xA;Tackling Basilisk II and SheepShaver in turn...&#xD;&#xA;&#xD;&#xA;##Basilisk II&#xD;&#xA;&#xD;&#xA;I've managed to reproduce your error, using a [Quadra 650 ROM file][1] from a tutorial on [RedundantRobot][6].&#xD;&#xA;&#xD;&#xA;The issue is that you need to specify to the emulator *where* the ROM file is located. Just dropping it in the same directory is not sufficient.&#xD;&#xA;&#xD;&#xA;From the [BASILISK II readme][7], the `rom` preference is defined below:&#xD;&#xA;&#xD;&#xA;&gt; rom &lt;ROM file path&gt;&#xD;&#xA;&gt; &#xD;&#xA;&gt;   This item specifies the file name of the Mac ROM file to be used by &#xD;&#xA;&gt; Basilisk II. If no &quot;rom&quot; line is given, the ROM file has to be named  &quot;ROM&quot; and put in the same directory as the Basilisk II executable.&#xD;&#xA;&#xD;&#xA;So the easiest option, without requiring you to modify the preferences file, in the Basilisk II directory, rename the ROM file, from `quadra650.rom` to just `ROM`.&#xD;&#xA;&#xD;&#xA;![Rename file to ROM][8]&#xD;&#xA;&#xD;&#xA;Or, you could edit the preferences file, by opening the file, `BasiliskII_prefs`, in notepad (as here is no GUI preferences dialogue) and add&#xD;&#xA;&#xD;&#xA;    rom C:\&lt;your path&gt;\quadra650.ROM&#xD;&#xA;&#xD;&#xA;for example,&#xD;&#xA;&#xD;&#xA;    rom C:\Users\davinci\Basilisk\BasiliskII_20-02-2015\quadra650.ROM&#xD;&#xA;&#xD;&#xA;If your disk is specified corectly then the virtual mac should now boot.&#xD;&#xA;&#xD;&#xA;![Booted MacOS][9]&#xD;&#xA;&#xD;&#xA;Otherwise, you would end up with this (and you may need to use Task Manager to end the Basilisk II *process* as the window may refuse to close and kill the application):&#xD;&#xA;&#xD;&#xA;![No disk defined][10]&#xD;&#xA;&#xD;&#xA;This is because the same path issue occurs with the disk image, and you may need to specify the path to the disk image in the preferences file. Again from the [BASILISK II readme][7], the `disk` preference is defined: &#xD;&#xA;&#xD;&#xA;&gt; disk &lt;volume description&gt;&#xD;&#xA;&gt; &#xD;&#xA;&gt;   This item describes one MacOS volume to be mounted by Basilisk II.  &#xD;&#xA;&gt; There can be multiple &quot;disk&quot; lines in the preferences file. Basilisk&#xD;&#xA;&gt; II   can handle hardfiles (byte-per-byte images of HFS volumes in a&#xD;&#xA;&gt; file on   the host system), HFS partitions on hard disks etc., and&#xD;&#xA;&gt; MacOS-partitioned   disks (it can only access the first partition,&#xD;&#xA;&gt; though). The &quot;volume   description&quot; is either the pathname of a&#xD;&#xA;&gt; hardfile or a platform-dependant   description of an HFS partition or&#xD;&#xA;&gt; drive. If the volume description is   prefixed by an asterisk (&quot;*&quot;),&#xD;&#xA;&gt; the volume is write protected for MacOS.&#xD;&#xA;&gt; &#xD;&#xA;&gt;   Basilisk II can also handle some types of Mac &quot;disk image&quot; files&#xD;&#xA;&gt; directly,   as long as they are uncompressed and unencoded.&#xD;&#xA;&gt; &#xD;&#xA;&gt;   BeOS:&#xD;&#xA;&gt;     To specify an HFS partition, simply specify its path (e.g.&#xD;&#xA;&gt;     &quot;/dev/disk/scsi/0/1/0/0_3&quot;). If you don't specify any volumes, Basilisk II&#xD;&#xA;&gt;     will search for and use all available HFS partitions.&#xD;&#xA;&gt; &#xD;&#xA;&gt;   Unix:&#xD;&#xA;&gt;     To specify an HFS partition, simply specify its path (e.g. &quot;/dev/sda5&quot;).&#xD;&#xA;&gt;     If you want to access a MacOS-partitioned hard disk or removable volume&#xD;&#xA;&gt;     (Jaz, Zip etc.) and your operating system doesn't understand MacOS&#xD;&#xA;&gt;     partition tables, you can specify the block device name (e.g. &quot;/dev/sda&quot;)&#xD;&#xA;&gt;     to access the first HFS partition on the device. Under Linux, if you&#xD;&#xA;&gt;     don't specify any volumes, Basilisk II will search /etc/fstab for&#xD;&#xA;&gt;     unmounted HFS partitions and use these.&#xD;&#xA;&gt; &#xD;&#xA;&gt;   AmigaOS:&#xD;&#xA;&gt;     Partitions/drives are specified in the following format:&#xD;&#xA;&gt;       /dev/&lt;device name&gt;/&lt;unit&gt;/&lt;open flags&gt;/&lt;start block&gt;/&lt;size&gt;/&lt;block size&gt;&#xD;&#xA;&gt;     &quot;start block&quot; and &quot;size&quot; are given in blocks, &quot;block size&quot; is given in&#xD;&#xA;&gt;     bytes.&#xD;&#xA;&gt; &#xD;&#xA;&gt;   **Windows:&#xD;&#xA;&gt;     To define a logical volume (Windows NT only), specify its path (e.g. &quot;c:\&quot;).&#xD;&#xA;&gt;     To define a physical volume (NT and 9x), additionally give the &quot;physical&quot;&#xD;&#xA;&gt;     keyword (E.g. &quot;physical c:\&quot;). For safety reasons, volumes are mounted as&#xD;&#xA;&gt;     read-only. This is due to the bugs in PC Exchange. If you don't specify&#xD;&#xA;&gt;     any volume, the files *.hfv and *.dsk are searched from the current&#xD;&#xA;&gt;     directory. Note that in this case, Basilisk II tries to boot from the first&#xD;&#xA;&gt;     volume file found, which is random and may not be what you want.**&#xD;&#xA;&#xD;&#xA;So add the line &#xD;&#xA;&#xD;&#xA;    disk C:\&lt;path&gt;\boot.dsk&#xD;&#xA;&#xD;&#xA;for example,&#xD;&#xA;&#xD;&#xA;    disk C:\Users\davinci\Basilisk\BasiliskII_20-02-2015\boot.dsk&#xD;&#xA;&#xD;&#xA;to the preferences file, where `path` is your path to the Basilisk directory, and rename the `System 7.5.5 Boot.dsk` file to just `boot.dsk`&#xD;&#xA;&#xD;&#xA;![Rename disk image file][11]&#xD;&#xA;&#xD;&#xA;The renaming of the file to something simpler is not be *strictly* necessary but removing the spaces reduces the chance of the file not being recognised or found. The following line ***does*** work though, as Basilisk II handles the spaces in filenames without an issue:&#xD;&#xA;&#xD;&#xA;    disk C:\Users\davinci\Basilisk\BasiliskII_20-02-2015\System 7.5.5 Boot.dsk &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;##SheepShaver&#xD;&#xA;&#xD;&#xA;I've managed to reproduce your error, using a [New World PPC ROM file][12] from a tutorial on [RedundantRobot][6]. If you attempt to use the Quadra 650 ROM file, that you used for Basilisk II, then you will get the following error:&#xD;&#xA;&#xD;&#xA;![Wrong ROM file - Quadra 650 ROM is incompatible][13]&#xD;&#xA;&#xD;&#xA;Copying in the correct New World PPC ROM file is not sufficient, as you will get the following error:&#xD;&#xA;&#xD;&#xA;![newworld86.rom file needs to be renamed to ROM][14]&#xD;&#xA;&#xD;&#xA;If you rename the file to just `ROM`, again without any file extension, then SheepShaver will run, as desired.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://sheepshaver.cebix.net/&#xD;&#xA;  [2]: http://basilisk.cebix.net/&#xD;&#xA;  [3]: http://superuser.com/questions/936506/basiliskii-and-sheepshaver-cant-open-quadra650-rom/936536#936536&#xD;&#xA;  [4]: http://i.stack.imgur.com/LYScS.png&#xD;&#xA;  [5]: https://www.youtube.com/watch?v=0Qqplm9-PQo&#xD;&#xA;  [6]: http://www.redundantrobot.com/sheepshaver-tutorial/&#xD;&#xA;  [7]: http://basilisk.cebix.net/README&#xD;&#xA;  [8]: http://i.stack.imgur.com/rP3kq.png&#xD;&#xA;  [9]: http://i.stack.imgur.com/VrpKw.png&#xD;&#xA;  [10]: http://i.stack.imgur.com/fk6yp.png&#xD;&#xA;  [11]: http://i.stack.imgur.com/M2a5Y.png&#xD;&#xA;  [12]: http://www.redundantrobot.com/macemulator/newworld86.rom.zip&#xD;&#xA;  [13]: http://i.stack.imgur.com/OvZwB.png&#xD;&#xA;  [14]: http://i.stack.imgur.com/2lcir.png" />
  <row Id="559" PostHistoryTypeId="5" PostId="217" RevisionGUID="e8d34c46-7db4-40c4-8d0b-65905f72d8e5" CreationDate="2016-04-22T10:18:00.860" UserId="105" Comment="edited body" Text="For a standard screen, compatible with ZX Spectrum, a SCREEN$ file is 6912 bytes. It's just a dump of the screen memory.&#xD;&#xA;&#xD;&#xA;The first 6144 bytes store the screen bitmap: 256x192 pixels, 1 bit per pixel (opn or off). The layout is not linear.&#xD;&#xA;&#xD;&#xA;- The screen bitmap is divided horizontally into three thirds: each one is 2048 bytes and store 8 text rows of 32 column each one (each character cell has 8 scans of 8 pixels each one).&#xD;&#xA;- For each third, the first scan of each character cell is stored, left to right, top to bottom. Then, the second scan, then the third, until the last one, the eighth. After this, a new third is stored in the same fashion.&#xD;&#xA;- Each byte stored has 8 pixels: the MSb belongs to the leftmost pixel as shown on the screen.&#xD;&#xA;&#xD;&#xA;Following the bitmap region, the remaining 768 bytes store the attributes. There is 1 byte of attribute for each character cell. Stored left to right, top to bottom. Bits 2-0 store the foreground colour, or &quot;ink&quot; colour (colour assigned to off pixels). Bits 5-3 store the background colour or &quot;paper&quot; colour (colour assigned to on pixels). Bit 6 is bright. If setted, both paper and ink colours are lighter. Bit 7 is flash. If setted, the paper and ink colour swap every 640 ms to give a kind of flashing character.&#xD;&#xA;&#xD;&#xA;To have a clue of how bitmap and attribute are stored, you can type this little BASIC program that will shows you the arrangement of pixels on the screen, by dumping part of the ROM to the screen (which will show up as random pixels and colours):&#xD;&#xA;&#xD;&#xA;    10 FOR n=0 TO 6911: POKE 16384+n,PEEK n: NEXT n&#xD;&#xA;&#xD;&#xA;For each paper or ink colour, the arrangement of the three bits encode a RGB value in this order: G R B. So, colour 6 (binary 110) is green + red = yellow. The complete table is this:&#xD;&#xA;0: black, 1: blue, 2: red, 3:magenta, 4: green, 5:cyan, 6:yellow, 7: white&#xD;&#xA;&#xD;&#xA;With bright setted, all these colours except black are intensified. This gives a total of 15 different colours.&#xD;&#xA;&#xD;&#xA;The Timex 2048/2068 computers add two more screen modes, called HiColour and HiRes.&#xD;&#xA;&#xD;&#xA;HiColour mode is entered by setting bit 1 of port $FF. It differs a little from the standard mode, explained above. HiColour mode uses an attribute region which is not 768 bytes, but 6144 bytes: the same size of the bitmap region. The attribute region does not start following the bitmap region, but there is a gap of 1280 bytes between the end of the bitmap region and the start of the attribute region. The screen size is 12288 bytes, not including the gap.&#xD;&#xA;&#xD;&#xA;The layout of this attribute region is the same as the bitmap region (3 thirds, the first scan is stored, then the second, etc). There is now 1 byte of atribute for each scan of 8 pixels. The content of the attribute is the same as in the standard mode.&#xD;&#xA;&#xD;&#xA;On tape, some programs use two different blocks to load the bitmap region, then the attribute region (as they are not contiguous). Some others use a single block containing both regions along with 1280 byte gap between them.&#xD;&#xA;&#xD;&#xA;The following program will show you the arrangement in this mode. It won't work on a regular Sinclair Spectrum, but in a Timex TC2048/2068.&#xD;&#xA;&#xD;&#xA;    10 OUT 255,2: FOR n=0 TO 6143: POKE 16384+n,PEEK n:POKE 24576+n,PEEK n: NEXT n&#xD;&#xA;&#xD;&#xA;HiRes is entered by setting bit 3 of port $FF. This mode shows a screen of 512x192 pixels, using two different bitmap regions. One region is the same as in the standard and HiColour mode, and the second one is located in the same place as the attribute region of the HiColour mode.&#xD;&#xA;&#xD;&#xA;For each scan of 16 pixels, the left most 8 pixels are stored in the first bitmap region, and the rightmost 8 pixels are stored in the second bitmap region.&#xD;&#xA;&#xD;&#xA;Each bitmap region is arranged the same way as the other screen modes.&#xD;&#xA;&#xD;&#xA;The foreground, background and border colour is setted separately on bits 5-3 of port $FF. These three bits store the ink colour which will be applied to all &quot;on&quot; pixels. The 1-complement of this value will be used for both paper and border colours. In HiRes mode, the bright bit is always setted and there is no flash.&#xD;&#xA;&#xD;&#xA;The following program will show you how the HiRes mode is arranged:&#xD;&#xA;&#xD;&#xA;    10 OUT 255,4: FOR n=0 TO 6143: POKE 16384+n,PEEK n:POKE 24576+n,PEEK n: NEXT n&#xD;&#xA;&#xD;&#xA;On tape, HiRes SCREEN$ are stored the same way as HiColour SCREEN$. I haven't seen that the global ink colour is stored too, so a separate BASIC program must provide it, along with the mode change command." />
  <row Id="560" PostHistoryTypeId="5" PostId="217" RevisionGUID="31711be7-ee3c-41fa-bbfb-698e8f32cba6" CreationDate="2016-04-22T10:26:47.770" UserId="105" Comment="added 11 characters in body" Text="For a standard screen, compatible with ZX Spectrum, a SCREEN$ file is 6912 bytes. It's just a dump of the screen memory.&#xD;&#xA;&#xD;&#xA;The first 6144 bytes store the screen bitmap: 256x192 pixels, 1 bit per pixel (opn or off). The layout is not linear.&#xD;&#xA;&#xD;&#xA;- The screen bitmap is divided horizontally into three thirds: each one is 2048 bytes and store 8 text rows of 32 column each one (each character cell has 8 scans of 8 pixels each one).&#xD;&#xA;- For each third, the first scan of each character cell is stored, left to right, top to bottom. Then, the second scan, then the third, until the last one, the eighth. After this, a new third is stored in the same fashion.&#xD;&#xA;- Each byte stored has 8 pixels: the MSb belongs to the leftmost pixel as shown on the screen.&#xD;&#xA;&#xD;&#xA;Following the bitmap region, the remaining 768 bytes store the attributes. There is 1 byte of attribute for each character cell. Stored left to right, top to bottom. Bits 2-0 store the foreground colour, or &quot;ink&quot; colour (colour assigned to &quot;on&quot; pixels). Bits 5-3 store the background colour or &quot;paper&quot; colour (colour assigned to &quot;off&quot; pixels). Bit 6 is bright. If setted, both paper and ink colours are lighter. Bit 7 is flash. If setted, the paper and ink colour swap every 640 ms to give a kind of flashing character.&#xD;&#xA;&#xD;&#xA;To have a clue of how bitmap and attribute are stored, you can type this little BASIC program that will shows you the arrangement of pixels on the screen, by dumping part of the ROM to the screen (which will show up as random pixels and colours):&#xD;&#xA;&#xD;&#xA;    10 FOR n=0 TO 6911: POKE 16384+n,PEEK n: NEXT n&#xD;&#xA;&#xD;&#xA;For each paper or ink colour, the arrangement of the three bits encode a RGB value in this order: G R B. So, colour 6 (binary 110) is green + red = yellow. The complete table is this:&#xD;&#xA;0: black, 1: blue, 2: red, 3:magenta, 4: green, 5:cyan, 6:yellow, 7: white&#xD;&#xA;&#xD;&#xA;With bright setted, all these colours except black are intensified. This gives a total of 15 different colours.&#xD;&#xA;&#xD;&#xA;The Timex 2048/2068 computers add two more screen modes, called HiColour and HiRes.&#xD;&#xA;&#xD;&#xA;HiColour mode is entered by setting bit 1 of port $FF. It differs a little from the standard mode, explained above. HiColour mode uses an attribute region which is not 768 bytes, but 6144 bytes in size, the same as the bitmap region. The attribute region does not start following the bitmap region, but there is a gap of 1280 bytes between the end of the bitmap and the start of the attribute region. The total screen size is 12288 bytes, not including this gap.&#xD;&#xA;&#xD;&#xA;The layout of this attribute region is the same as the bitmap region (3 thirds, the first scan is stored, then the second, etc). There is now 1 byte of atribute for each scan of 8 pixels. The format of the attribute byte is the same as in the standard mode.&#xD;&#xA;&#xD;&#xA;On tape, some programs use two different blocks to load the bitmap region, then the attribute region (as they are not contiguous). Some others use a single block containing both regions along with 1280 byte gap between them.&#xD;&#xA;&#xD;&#xA;The following program will show you the arrangement in this mode. It won't work on a regular Sinclair Spectrum, but in a Timex TC2048/2068.&#xD;&#xA;&#xD;&#xA;    10 OUT 255,2: FOR n=0 TO 6143: POKE 16384+n,PEEK n:POKE 24576+n,PEEK n: NEXT n&#xD;&#xA;&#xD;&#xA;HiRes is entered by setting bit 3 of port $FF. This mode shows a screen of 512x192 pixels, using two different bitmap regions. One region is the same as in the standard and HiColour mode, and the second one is located in the same place as the attribute region of the HiColour mode.&#xD;&#xA;&#xD;&#xA;For each scan of 16 pixels, the left most 8 pixels are stored in the first bitmap region, and the rightmost 8 pixels are stored in the second bitmap region.&#xD;&#xA;&#xD;&#xA;Each bitmap region is arranged the same way as the other screen modes.&#xD;&#xA;&#xD;&#xA;The foreground, background and border colour is setted separately on bits 5-3 of port $FF. These three bits store the ink colour which will be applied to all &quot;on&quot; pixels. The 1-complement of this value will be used for both paper and border colours. In HiRes mode, the bright bit is always setted and there is no flash.&#xD;&#xA;&#xD;&#xA;The following program will show you how the HiRes mode is arranged:&#xD;&#xA;&#xD;&#xA;    10 OUT 255,4: FOR n=0 TO 6143: POKE 16384+n,PEEK n:POKE 24576+n,PEEK n: NEXT n&#xD;&#xA;&#xD;&#xA;On tape, HiRes SCREEN$ are stored the same way as HiColour SCREEN$. I haven't seen that the global ink colour is stored too, so a separate BASIC program must provide it, along with the mode change command." />
  <row Id="561" PostHistoryTypeId="6" PostId="212" RevisionGUID="f15e4a5e-2dec-4e50-a5d4-e125b96abd57" CreationDate="2016-04-22T10:56:44.363" UserId="133" Comment="edited tags" Text="&lt;zx-spectrum&gt;&lt;file-format&gt;" />
  <row Id="562" PostHistoryTypeId="5" PostId="217" RevisionGUID="2e5c2e13-5161-4206-9e25-186cec8c7850" CreationDate="2016-04-22T11:27:50.700" UserId="105" Comment="added 130 characters in body" Text="For a standard screen, compatible with ZX Spectrum, a SCREEN$ file is 6912 bytes. It's just a dump of the screen memory.&#xD;&#xA;&#xD;&#xA;The first 6144 bytes store the screen bitmap: 256x192 pixels, 1 bit per pixel (opn or off). The layout is not linear.&#xD;&#xA;&#xD;&#xA;- The screen bitmap is divided horizontally into three thirds: each one is 2048 bytes and store 8 text rows of 32 column each one (each character cell has 8 scans of 8 pixels each one).&#xD;&#xA;- For each third, the first scan of each character cell is stored, left to right, top to bottom. Then, the second scan, then the third, until the last one, the eighth. After this, a new third is stored in the same fashion.&#xD;&#xA;- Each byte stored has 8 pixels: the MSb belongs to the leftmost pixel as shown on the screen.&#xD;&#xA;&#xD;&#xA;Following the bitmap region, the remaining 768 bytes store the attributes. There is 1 byte of attribute for each character cell. Stored left to right, top to bottom. Bits 2-0 store the foreground colour, or &quot;ink&quot; colour (colour assigned to &quot;on&quot; pixels). Bits 5-3 store the background colour or &quot;paper&quot; colour (colour assigned to &quot;off&quot; pixels). Bit 6 is bright. If setted, both paper and ink colours are lighter. Bit 7 is flash. If setted, the paper and ink colour swap every 640 ms to give a kind of flashing character.&#xD;&#xA;&#xD;&#xA;To have a clue of how bitmap and attribute are stored, you can type this little BASIC program that will shows you the arrangement of pixels on the screen, by dumping part of the ROM to the screen (which will show up as random pixels and colours):&#xD;&#xA;&#xD;&#xA;    10 FOR n=0 TO 6911: POKE 16384+n,PEEK n: NEXT n&#xD;&#xA;&#xD;&#xA;A similar program gives this result:&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;For each paper or ink colour, the arrangement of the three bits encode a RGB value in this order: G R B. So, colour 6 (binary 110) is green + red = yellow. The complete table is this:&#xD;&#xA;0: black, 1: blue, 2: red, 3:magenta, 4: green, 5:cyan, 6:yellow, 7: white&#xD;&#xA;&#xD;&#xA;With bright setted, all these colours except black are intensified. This gives a total of 15 different colours.&#xD;&#xA;&#xD;&#xA;The Timex 2048/2068 computers add two more screen modes, called HiColour and HiRes.&#xD;&#xA;&#xD;&#xA;HiColour mode is entered by setting bit 1 of port $FF. It differs a little from the standard mode, explained above. HiColour mode uses an attribute region which is not 768 bytes, but 6144 bytes in size, the same as the bitmap region. The attribute region does not start following the bitmap region, but there is a gap of 1280 bytes between the end of the bitmap and the start of the attribute region. The total screen size is 12288 bytes, not including this gap.&#xD;&#xA;&#xD;&#xA;The layout of this attribute region is the same as the bitmap region (3 thirds, the first scan is stored, then the second, etc). There is now 1 byte of atribute for each scan of 8 pixels. The format of the attribute byte is the same as in the standard mode.&#xD;&#xA;&#xD;&#xA;On tape, some programs use two different blocks to load the bitmap region, then the attribute region (as they are not contiguous). Some others use a single block containing both regions along with 1280 byte gap between them.&#xD;&#xA;&#xD;&#xA;The following program will show you the arrangement in this mode. It won't work on a regular Sinclair Spectrum, but in a Timex TC2048/2068.&#xD;&#xA;&#xD;&#xA;    10 OUT 255,2: FOR n=0 TO 6143: POKE 16384+n,PEEK n:POKE 24576+n,PEEK n: NEXT n&#xD;&#xA;&#xD;&#xA;HiRes is entered by setting bit 3 of port $FF. This mode shows a screen of 512x192 pixels, using two different bitmap regions. One region is the same as in the standard and HiColour mode, and the second one is located in the same place as the attribute region of the HiColour mode.&#xD;&#xA;&#xD;&#xA;For each scan of 16 pixels, the left most 8 pixels are stored in the first bitmap region, and the rightmost 8 pixels are stored in the second bitmap region.&#xD;&#xA;&#xD;&#xA;Each bitmap region is arranged the same way as the other screen modes.&#xD;&#xA;&#xD;&#xA;The foreground, background and border colour is setted separately on bits 5-3 of port $FF. These three bits store the ink colour which will be applied to all &quot;on&quot; pixels. The 1-complement of this value will be used for both paper and border colours. In HiRes mode, the bright bit is always setted and there is no flash.&#xD;&#xA;&#xD;&#xA;The following program will show you how the HiRes mode is arranged:&#xD;&#xA;&#xD;&#xA;    10 OUT 255,4: FOR n=0 TO 6143: POKE 16384+n,PEEK n:POKE 24576+n,PEEK n: NEXT n&#xD;&#xA;&#xD;&#xA;On tape, HiRes SCREEN$ are stored the same way as HiColour SCREEN$. I haven't seen that the global ink colour is stored too, so a separate BASIC program must provide it, along with the mode change command.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/IMijd.gif" />
  <row Id="565" PostHistoryTypeId="5" PostId="216" RevisionGUID="9268afe9-6dab-4cab-92eb-4eb168a496dc" CreationDate="2016-04-22T12:34:14.863" UserId="202" Comment="Updated answer" Text="As Steven rightly points out in his [comment][1], SheepShaver only emulates PPC, and so it is not a valid suggestion for your 68K-based question. From [SheepShaver's home page][2]&#xD;&#xA;&#xD;&#xA;&gt;  However, you still need a copy of MacOS and a PowerMac ROM image to use SheepShaver. &#xD;&#xA;&#xD;&#xA;If you attempt to use a 68K based ROM, with SheepShaver, then you should get the error:&#xD;&#xA;&#xD;&#xA;    Invalid ROM file size. SheepShaver requires a 4MB PCI PowerMac ROM.&#xD;&#xA;&#xD;&#xA;as shown in one of the dialogs in the screenshots below.&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;&#xD;&#xA;[SheepShaver][2] and [BasiliskII][3] both work on Linux and should support your requirements.&#xD;&#xA;&#xD;&#xA;To quote the specifications of each emulator respectively:&#xD;&#xA;&#xD;&#xA;&gt; **Some of SheepShaver's features**&#xD;&#xA;&gt; &#xD;&#xA;&gt;  - Runs MacOS 7.5.2 thru 9.0.4. MacOS X as a guest is not supported.&#xD;&#xA;&gt;  - Color video display&#xD;&#xA;&gt;  - CD quality sound output&#xD;&#xA;&gt;  - Access to floppy disks, CD-ROMs and HFS(+) partitions on hard disks&#xD;&#xA;&gt;  - Easy file exchange with the host OS via a &quot;Host Directory Tree&quot; icon on the Mac desktop&#xD;&#xA;&gt;  - Internet and LAN networking via Ethernet&#xD;&#xA;&gt;  - Serial drivers&#xD;&#xA;&gt;  - SCSI Manager (old-style) emulation&#xD;&#xA;&#xD;&#xA;and&#xD;&#xA;&#xD;&#xA;&gt; **Some features of Basilisk II**&#xD;&#xA;&gt; &#xD;&#xA;&gt;  - Emulates either a Mac Classic (which runs MacOS 0.x thru 7.5) or a Mac II series machine (which runs MacOS 7.x, 8.0 and 8.1), depending&#xD;&#xA;&gt; on the ROM being used&#xD;&#xA;&gt;  - Color video display&#xD;&#xA;&gt;  - CD quality sound output&#xD;&#xA;&gt;  - Floppy disk driver (only 1.44MB disks supported)&#xD;&#xA;&gt;  - Driver for HFS partitions and hardfiles&#xD;&#xA;&gt;  - CD-ROM driver with basic audio functions&#xD;&#xA;&gt;  - Easy file exchange with the host OS via a &quot;Host Directory Tree&quot; icon on the Mac desktop&#xD;&#xA;&gt;  - Ethernet driver&#xD;&#xA;&gt;  - Serial drivers&#xD;&#xA;&gt;  - SCSI Manager (old-style) emulation&#xD;&#xA;&gt;  - Emulates extended ADB keyboard and 3-button mouse&#xD;&#xA;&gt;  - Uses UAE 68k emulation or (under AmigaOS and NetBSD/m68k) real 68k processor&#xD;&#xA;&#xD;&#xA;I actually answered [Quadra 650 emulation related question][4], although it *was* for Windows, on SuperUser, and have just spent the last hour trying to find/recover it, after the OP who asked the question has subsequently deleted the question.  I have reproduced the question and answer below - hopefully it could be useful, in case any stumbling blocks are encountered.&#xD;&#xA;&#xD;&#xA;------&#xD;&#xA;&#xD;&#xA;##Question&#xD;&#xA;&#xD;&#xA;BasiliskII and SheepShaver can't open quadra650.rom&#xD;&#xA;&#xD;&#xA;I was thinking I could run Mac OS 7.5.5 on vMac with color but no it won't work with color only OS can run. I thought it would work if I use BasiliskII but when I assemble the ROM, `SDL.dll` and the other stuff, I got an error about the ROM: &quot;Cannot open ROM file.&quot; The same thing happened with SheepShaver.&#xD;&#xA;&#xD;&#xA;This is very huge problem and I don't know how I can fix it. On forums it said `quadra650.rom` will work but I tried and nothing special, I got the same error. I opened both BasiliskII and SheepShaver and I took a screenshot for you guys to know tell me what's going on?&#xD;&#xA;&#xD;&#xA;[![enter image description here][5]][5]&#xD;&#xA;&#xD;&#xA;I got the disk image from youtube - [Tour of Mac OS 7.5.5 with color + games (with download links)][6]. Read the description for `.dsk` file.&#xD;&#xA;&#xD;&#xA;##Answer&#xD;&#xA;&#xD;&#xA;Tackling Basilisk II and SheepShaver in turn...&#xD;&#xA;&#xD;&#xA;##Basilisk II&#xD;&#xA;&#xD;&#xA;I've managed to reproduce your error, using a [Quadra 650 ROM file][2] from a tutorial on [RedundantRobot][7].&#xD;&#xA;&#xD;&#xA;The issue is that you need to specify to the emulator *where* the ROM file is located. Just dropping it in the same directory is not sufficient.&#xD;&#xA;&#xD;&#xA;From the [BASILISK II readme][8], the `rom` preference is defined below:&#xD;&#xA;&#xD;&#xA;&gt; rom &lt;ROM file path&gt;&#xD;&#xA;&gt; &#xD;&#xA;&gt;   This item specifies the file name of the Mac ROM file to be used by &#xD;&#xA;&gt; Basilisk II. If no &quot;rom&quot; line is given, the ROM file has to be named  &quot;ROM&quot; and put in the same directory as the Basilisk II executable.&#xD;&#xA;&#xD;&#xA;So the easiest option, without requiring you to modify the preferences file, in the Basilisk II directory, rename the ROM file, from `quadra650.rom` to just `ROM`.&#xD;&#xA;&#xD;&#xA;![Rename file to ROM][9]&#xD;&#xA;&#xD;&#xA;Or, you could edit the preferences file, by opening the file, `BasiliskII_prefs`, in notepad (as here is no GUI preferences dialogue) and add&#xD;&#xA;&#xD;&#xA;    rom C:\&lt;your path&gt;\quadra650.ROM&#xD;&#xA;&#xD;&#xA;for example,&#xD;&#xA;&#xD;&#xA;    rom C:\Users\davinci\Basilisk\BasiliskII_20-02-2015\quadra650.ROM&#xD;&#xA;&#xD;&#xA;If your disk is specified corectly then the virtual mac should now boot.&#xD;&#xA;&#xD;&#xA;![Booted MacOS][10]&#xD;&#xA;&#xD;&#xA;Otherwise, you would end up with this (and you may need to use Task Manager to end the Basilisk II *process* as the window may refuse to close and kill the application):&#xD;&#xA;&#xD;&#xA;![No disk defined][11]&#xD;&#xA;&#xD;&#xA;This is because the same path issue occurs with the disk image, and you may need to specify the path to the disk image in the preferences file. Again from the [BASILISK II readme][8], the `disk` preference is defined: &#xD;&#xA;&#xD;&#xA;&gt; disk &lt;volume description&gt;&#xD;&#xA;&gt; &#xD;&#xA;&gt;   This item describes one MacOS volume to be mounted by Basilisk II.  &#xD;&#xA;&gt; There can be multiple &quot;disk&quot; lines in the preferences file. Basilisk&#xD;&#xA;&gt; II   can handle hardfiles (byte-per-byte images of HFS volumes in a&#xD;&#xA;&gt; file on   the host system), HFS partitions on hard disks etc., and&#xD;&#xA;&gt; MacOS-partitioned   disks (it can only access the first partition,&#xD;&#xA;&gt; though). The &quot;volume   description&quot; is either the pathname of a&#xD;&#xA;&gt; hardfile or a platform-dependant   description of an HFS partition or&#xD;&#xA;&gt; drive. If the volume description is   prefixed by an asterisk (&quot;*&quot;),&#xD;&#xA;&gt; the volume is write protected for MacOS.&#xD;&#xA;&gt; &#xD;&#xA;&gt;   Basilisk II can also handle some types of Mac &quot;disk image&quot; files&#xD;&#xA;&gt; directly,   as long as they are uncompressed and unencoded.&#xD;&#xA;&gt; &#xD;&#xA;&gt;   BeOS:&#xD;&#xA;&gt;     To specify an HFS partition, simply specify its path (e.g.&#xD;&#xA;&gt;     &quot;/dev/disk/scsi/0/1/0/0_3&quot;). If you don't specify any volumes, Basilisk II&#xD;&#xA;&gt;     will search for and use all available HFS partitions.&#xD;&#xA;&gt; &#xD;&#xA;&gt;   Unix:&#xD;&#xA;&gt;     To specify an HFS partition, simply specify its path (e.g. &quot;/dev/sda5&quot;).&#xD;&#xA;&gt;     If you want to access a MacOS-partitioned hard disk or removable volume&#xD;&#xA;&gt;     (Jaz, Zip etc.) and your operating system doesn't understand MacOS&#xD;&#xA;&gt;     partition tables, you can specify the block device name (e.g. &quot;/dev/sda&quot;)&#xD;&#xA;&gt;     to access the first HFS partition on the device. Under Linux, if you&#xD;&#xA;&gt;     don't specify any volumes, Basilisk II will search /etc/fstab for&#xD;&#xA;&gt;     unmounted HFS partitions and use these.&#xD;&#xA;&gt; &#xD;&#xA;&gt;   AmigaOS:&#xD;&#xA;&gt;     Partitions/drives are specified in the following format:&#xD;&#xA;&gt;       /dev/&lt;device name&gt;/&lt;unit&gt;/&lt;open flags&gt;/&lt;start block&gt;/&lt;size&gt;/&lt;block size&gt;&#xD;&#xA;&gt;     &quot;start block&quot; and &quot;size&quot; are given in blocks, &quot;block size&quot; is given in&#xD;&#xA;&gt;     bytes.&#xD;&#xA;&gt; &#xD;&#xA;&gt;   **Windows:&#xD;&#xA;&gt;     To define a logical volume (Windows NT only), specify its path (e.g. &quot;c:\&quot;).&#xD;&#xA;&gt;     To define a physical volume (NT and 9x), additionally give the &quot;physical&quot;&#xD;&#xA;&gt;     keyword (E.g. &quot;physical c:\&quot;). For safety reasons, volumes are mounted as&#xD;&#xA;&gt;     read-only. This is due to the bugs in PC Exchange. If you don't specify&#xD;&#xA;&gt;     any volume, the files *.hfv and *.dsk are searched from the current&#xD;&#xA;&gt;     directory. Note that in this case, Basilisk II tries to boot from the first&#xD;&#xA;&gt;     volume file found, which is random and may not be what you want.**&#xD;&#xA;&#xD;&#xA;So add the line &#xD;&#xA;&#xD;&#xA;    disk C:\&lt;path&gt;\boot.dsk&#xD;&#xA;&#xD;&#xA;for example,&#xD;&#xA;&#xD;&#xA;    disk C:\Users\davinci\Basilisk\BasiliskII_20-02-2015\boot.dsk&#xD;&#xA;&#xD;&#xA;to the preferences file, where `path` is your path to the Basilisk directory, and rename the `System 7.5.5 Boot.dsk` file to just `boot.dsk`&#xD;&#xA;&#xD;&#xA;![Rename disk image file][12]&#xD;&#xA;&#xD;&#xA;The renaming of the file to something simpler is not be *strictly* necessary but removing the spaces reduces the chance of the file not being recognised or found. The following line ***does*** work though, as Basilisk II handles the spaces in filenames without an issue:&#xD;&#xA;&#xD;&#xA;    disk C:\Users\davinci\Basilisk\BasiliskII_20-02-2015\System 7.5.5 Boot.dsk &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;##SheepShaver&#xD;&#xA;&#xD;&#xA;I've managed to reproduce your error, using a [New World PPC ROM file][13] from a tutorial on [RedundantRobot][7]. If you attempt to use the Quadra 650 ROM file, that you used for Basilisk II, then you will get the following error:&#xD;&#xA;&#xD;&#xA;![Wrong ROM file - Quadra 650 ROM is incompatible][14]&#xD;&#xA;&#xD;&#xA;Copying in the correct New World PPC ROM file is not sufficient, as you will get the following error:&#xD;&#xA;&#xD;&#xA;![newworld86.rom file needs to be renamed to ROM][15]&#xD;&#xA;&#xD;&#xA;If you rename the file to just `ROM`, again without any file extension, then SheepShaver will run, as desired.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://retrocomputing.stackexchange.com/questions/208/linux-68k-macintosh-emulator#comment-200&#xD;&#xA;  [2]: http://sheepshaver.cebix.net/&#xD;&#xA;  [3]: http://basilisk.cebix.net/&#xD;&#xA;  [4]: http://superuser.com/questions/936506/basiliskii-and-sheepshaver-cant-open-quadra650-rom/936536#936536&#xD;&#xA;  [5]: http://i.stack.imgur.com/LYScS.png&#xD;&#xA;  [6]: https://www.youtube.com/watch?v=0Qqplm9-PQo&#xD;&#xA;  [7]: http://www.redundantrobot.com/sheepshaver-tutorial/&#xD;&#xA;  [8]: http://basilisk.cebix.net/README&#xD;&#xA;  [9]: http://i.stack.imgur.com/rP3kq.png&#xD;&#xA;  [10]: http://i.stack.imgur.com/VrpKw.png&#xD;&#xA;  [11]: http://i.stack.imgur.com/fk6yp.png&#xD;&#xA;  [12]: http://i.stack.imgur.com/M2a5Y.png&#xD;&#xA;  [13]: http://www.redundantrobot.com/macemulator/newworld86.rom.zip&#xD;&#xA;  [14]: http://i.stack.imgur.com/OvZwB.png&#xD;&#xA;  [15]: http://i.stack.imgur.com/2lcir.png" />
  <row Id="567" PostHistoryTypeId="2" PostId="219" RevisionGUID="19e376ea-0eba-4c5e-be94-87700edc966a" CreationDate="2016-04-22T14:10:31.367" UserId="128" Text="It's been a while, but I've read in a system programming book that you could switch your Intel 80286 CPU from the normal **real mode** to a more powerful **protected mode**. I clearly remember that they said it was impossible to switch back though, unless you fully restarted the computer.&#xD;&#xA;&#xD;&#xA;Why was this (made?) impossible? Was it a bug, intention by the DOS developers or a hardware restriction of the CPU?" />
  <row Id="568" PostHistoryTypeId="1" PostId="219" RevisionGUID="19e376ea-0eba-4c5e-be94-87700edc966a" CreationDate="2016-04-22T14:10:31.367" UserId="128" Text="80286 can switch from real mode to protected mode - but why not back?" />
  <row Id="569" PostHistoryTypeId="3" PostId="219" RevisionGUID="19e376ea-0eba-4c5e-be94-87700edc966a" CreationDate="2016-04-22T14:10:31.367" UserId="128" Text="&lt;cpu&gt;&lt;real-mode&gt;&lt;protected-mode&gt;&lt;80286&gt;&lt;intel&gt;" />
  <row Id="570" PostHistoryTypeId="2" PostId="220" RevisionGUID="64f7dfe5-4ad5-461b-8c9c-dc40206e529f" CreationDate="2016-04-22T14:51:00.257" UserId="105" Text="My guess is that it was merely a design decission based upon the assumption that once a protected mode OS is started, there is no need to go back. Most microprocessors at that time already booted in its most priviledge mode and had at least two levels of protection. The 80286 had to boot in real mode to keep compatibility with DOS and they I think they thought DOS would reduce itself to just a minimal procedure to boot the main OS.&#xD;&#xA;&#xD;&#xA;It seems that Intel engineers didn't realize that DOS was going to live for about ten years after launching the 286, and software engineers alonog with motherboard manufacturers would figure out a way to switch the CPU back to real mode in order to call DOS services from a PM program (who decided that the keyboard controller is a good place to put a register with a bit to reset the CPU and another one to enable CPU addresses beyond 1MB?)&#xD;&#xA;&#xD;&#xA;By the time the 80386 was produced, they added the feature to switch the CPU back to real mode, and the dirty trick used with the 80286 -to reset it with a magic number at a certain memory location so the BIOS could read it and jump to some predefined code to resume operation- was not needed any more." />
  <row Id="571" PostHistoryTypeId="2" PostId="221" RevisionGUID="5a317a07-fa2c-43c5-a996-147cd4b293eb" CreationDate="2016-04-22T15:44:43.560" UserId="-1" Text="" />
  <row Id="572" PostHistoryTypeId="2" PostId="222" RevisionGUID="ee399002-b3ea-4eeb-a7bc-f65b69d80770" CreationDate="2016-04-22T15:44:43.560" UserId="-1" Text="" />
  <row Id="573" PostHistoryTypeId="2" PostId="223" RevisionGUID="5e2ea091-48b5-47a2-b37e-aa8fb7a09194" CreationDate="2016-04-22T16:03:07.723" UserId="225" Text="  I am self studying about compilers, and get hands on very good textbooks about the subject. I am thinking in develop a compiler using the almighty **llvm infrastructure** to cross compile to old computers, initially MSX ones.&#xD;&#xA;  The thing is, i can't get an impression on how much benefit one could get on using this approach, over what is already on old compilers. &#xD;&#xA;&#xD;&#xA;Obviously, the possibility to reuse code over different platforms is one, if a common compiler is to be developed, but the idea is getting the most of such processors, using modern optimization.&#xD;&#xA;&#xD;&#xA;  I understand that some obviously don't apply, like scheduling, but there is a lot of things that are done before code generation, and will be beneficial to every backend. The question i make is, how much can be expected, compared to what is already on legacy compilers, and to modern ones too (sdcc and others). Also, how much this kind of effort could be beneficial to ease multi platform development (Uzix and the like) considering the severe restrictions on those platforms?" />
  <row Id="574" PostHistoryTypeId="1" PostId="223" RevisionGUID="5e2ea091-48b5-47a2-b37e-aa8fb7a09194" CreationDate="2016-04-22T16:03:07.723" UserId="225" Text="How much benefit should be expected on using modern compiler techniques on old processors?" />
  <row Id="575" PostHistoryTypeId="3" PostId="223" RevisionGUID="5e2ea091-48b5-47a2-b37e-aa8fb7a09194" CreationDate="2016-04-22T16:03:07.723" UserId="225" Text="&lt;msx&gt;&lt;compilers&gt;&lt;assembly&gt;" />
  <row Id="576" PostHistoryTypeId="5" PostId="216" RevisionGUID="c6a21c13-d7e5-405e-8659-69861feed2dc" CreationDate="2016-04-22T16:19:15.990" UserId="202" Comment="Added edit that shaver doesn't support 68k" Text="As Steven rightly points out in his [comment][1], SheepShaver only emulates PPC, and so it is not a valid suggestion for your 68K-based question. From [SheepShaver's home page][2]&#xD;&#xA;&#xD;&#xA;&gt;  However, you still need a copy of MacOS and a PowerMac ROM image to use SheepShaver. &#xD;&#xA;&#xD;&#xA;If you attempt to use a 68K based ROM, with SheepShaver, then you should get the error:&#xD;&#xA;&#xD;&#xA;    Invalid ROM file size. SheepShaver requires a 4MB PCI PowerMac ROM.&#xD;&#xA;&#xD;&#xA;as shown in one of the dialogs in the screenshots below.&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;&#xD;&#xA;[SheepShaver][2] and [BasiliskII][3] both work on Linux and should support your requirements.&#xD;&#xA;&#xD;&#xA;To quote the specifications of each emulator respectively:&#xD;&#xA;&#xD;&#xA;&gt; **Some of SheepShaver's features**&#xD;&#xA;&gt; &#xD;&#xA;&gt;  - Runs MacOS 7.5.2 thru 9.0.4. MacOS X as a guest is not supported.&#xD;&#xA;&gt;  - Color video display&#xD;&#xA;&gt;  - CD quality sound output&#xD;&#xA;&gt;  - Access to floppy disks, CD-ROMs and HFS(+) partitions on hard disks&#xD;&#xA;&gt;  - Easy file exchange with the host OS via a &quot;Host Directory Tree&quot; icon on the Mac desktop&#xD;&#xA;&gt;  - Internet and LAN networking via Ethernet&#xD;&#xA;&gt;  - Serial drivers&#xD;&#xA;&gt;  - SCSI Manager (old-style) emulation&#xD;&#xA;&#xD;&#xA;and&#xD;&#xA;&#xD;&#xA;&gt; **Some features of Basilisk II**&#xD;&#xA;&gt; &#xD;&#xA;&gt;  - Emulates either a Mac Classic (which runs MacOS 0.x thru 7.5) or a Mac II series machine (which runs MacOS 7.x, 8.0 and 8.1), depending&#xD;&#xA;&gt; on the ROM being used&#xD;&#xA;&gt;  - Color video display&#xD;&#xA;&gt;  - CD quality sound output&#xD;&#xA;&gt;  - Floppy disk driver (only 1.44MB disks supported)&#xD;&#xA;&gt;  - Driver for HFS partitions and hardfiles&#xD;&#xA;&gt;  - CD-ROM driver with basic audio functions&#xD;&#xA;&gt;  - Easy file exchange with the host OS via a &quot;Host Directory Tree&quot; icon on the Mac desktop&#xD;&#xA;&gt;  - Ethernet driver&#xD;&#xA;&gt;  - Serial drivers&#xD;&#xA;&gt;  - SCSI Manager (old-style) emulation&#xD;&#xA;&gt;  - Emulates extended ADB keyboard and 3-button mouse&#xD;&#xA;&gt;  - Uses UAE 68k emulation or (under AmigaOS and NetBSD/m68k) real 68k processor&#xD;&#xA;&#xD;&#xA;I actually answered [Quadra 650 emulation related question][4], although it *was* for Windows, on SuperUser, and have just spent the last hour trying to find/recover it, after the OP who asked the question has subsequently deleted the question.  I have reproduced the question and answer below - hopefully it could be useful, in case any stumbling blocks are encountered.&#xD;&#xA;&#xD;&#xA;------&#xD;&#xA;&#xD;&#xA;##Question&#xD;&#xA;&#xD;&#xA;BasiliskII and SheepShaver can't open quadra650.rom&#xD;&#xA;&#xD;&#xA;I was thinking I could run Mac OS 7.5.5 on vMac with color but no it won't work with color only OS can run. I thought it would work if I use BasiliskII but when I assemble the ROM, `SDL.dll` and the other stuff, I got an error about the ROM: &quot;Cannot open ROM file.&quot; The same thing happened with SheepShaver.&#xD;&#xA;&#xD;&#xA;This is very huge problem and I don't know how I can fix it. On forums it said `quadra650.rom` will work but I tried and nothing special, I got the same error. I opened both BasiliskII and SheepShaver and I took a screenshot for you guys to know tell me what's going on?&#xD;&#xA;&#xD;&#xA;[![enter image description here][5]][5]&#xD;&#xA;&#xD;&#xA;I got the disk image from youtube - [Tour of Mac OS 7.5.5 with color + games (with download links)][6]. Read the description for `.dsk` file.&#xD;&#xA;&#xD;&#xA;##Answer&#xD;&#xA;&#xD;&#xA;Tackling Basilisk II and SheepShaver in turn...&#xD;&#xA;&#xD;&#xA;##Basilisk II&#xD;&#xA;&#xD;&#xA;I've managed to reproduce your error, using a [Quadra 650 ROM file][2] from a tutorial on [RedundantRobot][7].&#xD;&#xA;&#xD;&#xA;The issue is that you need to specify to the emulator *where* the ROM file is located. Just dropping it in the same directory is not sufficient.&#xD;&#xA;&#xD;&#xA;From the [BASILISK II readme][8], the `rom` preference is defined below:&#xD;&#xA;&#xD;&#xA;&gt; rom &lt;ROM file path&gt;&#xD;&#xA;&gt; &#xD;&#xA;&gt;   This item specifies the file name of the Mac ROM file to be used by &#xD;&#xA;&gt; Basilisk II. If no &quot;rom&quot; line is given, the ROM file has to be named  &quot;ROM&quot; and put in the same directory as the Basilisk II executable.&#xD;&#xA;&#xD;&#xA;So the easiest option, without requiring you to modify the preferences file, in the Basilisk II directory, rename the ROM file, from `quadra650.rom` to just `ROM`.&#xD;&#xA;&#xD;&#xA;![Rename file to ROM][9]&#xD;&#xA;&#xD;&#xA;Or, you could edit the preferences file, by opening the file, `BasiliskII_prefs`, in notepad (as here is no GUI preferences dialogue) and add&#xD;&#xA;&#xD;&#xA;    rom C:\&lt;your path&gt;\quadra650.ROM&#xD;&#xA;&#xD;&#xA;for example,&#xD;&#xA;&#xD;&#xA;    rom C:\Users\davinci\Basilisk\BasiliskII_20-02-2015\quadra650.ROM&#xD;&#xA;&#xD;&#xA;If your disk is specified corectly then the virtual mac should now boot.&#xD;&#xA;&#xD;&#xA;![Booted MacOS][10]&#xD;&#xA;&#xD;&#xA;Otherwise, you would end up with this (and you may need to use Task Manager to end the Basilisk II *process* as the window may refuse to close and kill the application):&#xD;&#xA;&#xD;&#xA;![No disk defined][11]&#xD;&#xA;&#xD;&#xA;This is because the same path issue occurs with the disk image, and you may need to specify the path to the disk image in the preferences file. Again from the [BASILISK II readme][8], the `disk` preference is defined: &#xD;&#xA;&#xD;&#xA;&gt; disk &lt;volume description&gt;&#xD;&#xA;&gt; &#xD;&#xA;&gt;   This item describes one MacOS volume to be mounted by Basilisk II.  &#xD;&#xA;&gt; There can be multiple &quot;disk&quot; lines in the preferences file. Basilisk&#xD;&#xA;&gt; II   can handle hardfiles (byte-per-byte images of HFS volumes in a&#xD;&#xA;&gt; file on   the host system), HFS partitions on hard disks etc., and&#xD;&#xA;&gt; MacOS-partitioned   disks (it can only access the first partition,&#xD;&#xA;&gt; though). The &quot;volume   description&quot; is either the pathname of a&#xD;&#xA;&gt; hardfile or a platform-dependant   description of an HFS partition or&#xD;&#xA;&gt; drive. If the volume description is   prefixed by an asterisk (&quot;*&quot;),&#xD;&#xA;&gt; the volume is write protected for MacOS.&#xD;&#xA;&gt; &#xD;&#xA;&gt;   Basilisk II can also handle some types of Mac &quot;disk image&quot; files&#xD;&#xA;&gt; directly,   as long as they are uncompressed and unencoded.&#xD;&#xA;&gt; &#xD;&#xA;&gt;   BeOS:&#xD;&#xA;&gt;     To specify an HFS partition, simply specify its path (e.g.&#xD;&#xA;&gt;     &quot;/dev/disk/scsi/0/1/0/0_3&quot;). If you don't specify any volumes, Basilisk II&#xD;&#xA;&gt;     will search for and use all available HFS partitions.&#xD;&#xA;&gt; &#xD;&#xA;&gt;   Unix:&#xD;&#xA;&gt;     To specify an HFS partition, simply specify its path (e.g. &quot;/dev/sda5&quot;).&#xD;&#xA;&gt;     If you want to access a MacOS-partitioned hard disk or removable volume&#xD;&#xA;&gt;     (Jaz, Zip etc.) and your operating system doesn't understand MacOS&#xD;&#xA;&gt;     partition tables, you can specify the block device name (e.g. &quot;/dev/sda&quot;)&#xD;&#xA;&gt;     to access the first HFS partition on the device. Under Linux, if you&#xD;&#xA;&gt;     don't specify any volumes, Basilisk II will search /etc/fstab for&#xD;&#xA;&gt;     unmounted HFS partitions and use these.&#xD;&#xA;&gt; &#xD;&#xA;&gt;   AmigaOS:&#xD;&#xA;&gt;     Partitions/drives are specified in the following format:&#xD;&#xA;&gt;       /dev/&lt;device name&gt;/&lt;unit&gt;/&lt;open flags&gt;/&lt;start block&gt;/&lt;size&gt;/&lt;block size&gt;&#xD;&#xA;&gt;     &quot;start block&quot; and &quot;size&quot; are given in blocks, &quot;block size&quot; is given in&#xD;&#xA;&gt;     bytes.&#xD;&#xA;&gt; &#xD;&#xA;&gt;   **Windows:&#xD;&#xA;&gt;     To define a logical volume (Windows NT only), specify its path (e.g. &quot;c:\&quot;).&#xD;&#xA;&gt;     To define a physical volume (NT and 9x), additionally give the &quot;physical&quot;&#xD;&#xA;&gt;     keyword (E.g. &quot;physical c:\&quot;). For safety reasons, volumes are mounted as&#xD;&#xA;&gt;     read-only. This is due to the bugs in PC Exchange. If you don't specify&#xD;&#xA;&gt;     any volume, the files *.hfv and *.dsk are searched from the current&#xD;&#xA;&gt;     directory. Note that in this case, Basilisk II tries to boot from the first&#xD;&#xA;&gt;     volume file found, which is random and may not be what you want.**&#xD;&#xA;&#xD;&#xA;So add the line &#xD;&#xA;&#xD;&#xA;    disk C:\&lt;path&gt;\boot.dsk&#xD;&#xA;&#xD;&#xA;for example,&#xD;&#xA;&#xD;&#xA;    disk C:\Users\davinci\Basilisk\BasiliskII_20-02-2015\boot.dsk&#xD;&#xA;&#xD;&#xA;to the preferences file, where `path` is your path to the Basilisk directory, and rename the `System 7.5.5 Boot.dsk` file to just `boot.dsk`&#xD;&#xA;&#xD;&#xA;![Rename disk image file][12]&#xD;&#xA;&#xD;&#xA;The renaming of the file to something simpler is not be *strictly* necessary but removing the spaces reduces the chance of the file not being recognised or found. The following line ***does*** work though, as Basilisk II handles the spaces in filenames without an issue:&#xD;&#xA;&#xD;&#xA;    disk C:\Users\davinci\Basilisk\BasiliskII_20-02-2015\System 7.5.5 Boot.dsk &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;##SheepShaver&#xD;&#xA;&#xD;&#xA;I've managed to reproduce your error, using a [New World PPC ROM file][13] from a tutorial on [RedundantRobot][7]. [**Edit: This is because SheepShaver does not support 68K Mac emulation**]. If you attempt to use the Quadra 650 ROM file, that you used for Basilisk II, then you will get the following error:&#xD;&#xA;&#xD;&#xA;![Wrong ROM file - Quadra 650 ROM is incompatible][14]&#xD;&#xA;&#xD;&#xA;Copying in the correct New World PPC ROM file is not sufficient, as you will get the following error:&#xD;&#xA;&#xD;&#xA;![newworld86.rom file needs to be renamed to ROM][15]&#xD;&#xA;&#xD;&#xA;If you rename the file to just `ROM`, again without any file extension, then SheepShaver will run, as desired.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://retrocomputing.stackexchange.com/questions/208/linux-68k-macintosh-emulator#comment-200&#xD;&#xA;  [2]: http://sheepshaver.cebix.net/&#xD;&#xA;  [3]: http://basilisk.cebix.net/&#xD;&#xA;  [4]: http://superuser.com/questions/936506/basiliskii-and-sheepshaver-cant-open-quadra650-rom/936536#936536&#xD;&#xA;  [5]: http://i.stack.imgur.com/LYScS.png&#xD;&#xA;  [6]: https://www.youtube.com/watch?v=0Qqplm9-PQo&#xD;&#xA;  [7]: http://www.redundantrobot.com/sheepshaver-tutorial/&#xD;&#xA;  [8]: http://basilisk.cebix.net/README&#xD;&#xA;  [9]: http://i.stack.imgur.com/rP3kq.png&#xD;&#xA;  [10]: http://i.stack.imgur.com/VrpKw.png&#xD;&#xA;  [11]: http://i.stack.imgur.com/fk6yp.png&#xD;&#xA;  [12]: http://i.stack.imgur.com/M2a5Y.png&#xD;&#xA;  [13]: http://www.redundantrobot.com/macemulator/newworld86.rom.zip&#xD;&#xA;  [14]: http://i.stack.imgur.com/OvZwB.png&#xD;&#xA;  [15]: http://i.stack.imgur.com/2lcir.png" />
  <row Id="577" PostHistoryTypeId="2" PostId="224" RevisionGUID="6b6a319f-23b9-4733-a8bf-4af45c537477" CreationDate="2016-04-22T16:31:37.183" UserId="105" Text="&gt; i can't get an impression on how much benefit one could get on using&#xD;&#xA;&gt; this approach, over what is already on old compilers.&#xD;&#xA;&#xD;&#xA;If that were true, then old games would be developed using those old compilers, instead of hand-coded assembly. Old compilers were, mostly, very naive in terms of code optimization due to they being executing in the very same system they are producing code for, thus suffering from severe lack of precious RAM that would be needed to implement more sophisticated optimization techniques." />
  <row Id="579" PostHistoryTypeId="6" PostId="208" RevisionGUID="3943d8bf-df6a-452b-ad08-c4bd8c334a1e" CreationDate="2016-04-22T17:17:13.777" UserId="56" Comment="Tag standardizationizing" Text="&lt;apple-macintosh&gt;&lt;emulator&gt;&lt;software-recommendation&gt;" />
  <row Id="580" PostHistoryTypeId="2" PostId="225" RevisionGUID="a6e26fab-6a57-4db5-87d7-bd2dbd6e657e" CreationDate="2016-04-22T17:20:27.963" UserId="-1" Text="" />
  <row Id="581" PostHistoryTypeId="2" PostId="226" RevisionGUID="83c4a760-e9dd-43f9-bec5-819653309a01" CreationDate="2016-04-22T17:20:27.963" UserId="-1" Text="" />
  <row Id="582" PostHistoryTypeId="5" PostId="223" RevisionGUID="884c8dd2-aa4d-4ef5-a674-00b0953fa3f9" CreationDate="2016-04-22T18:26:48.113" UserId="225" Comment="added 134 characters in body; edited tags; edited title" Text="  I am self studying about compilers, and get hands on very good textbooks about the subject. I am thinking in develop a compiler using the almighty **llvm infrastructure** to cross compile to old computers, initially MSX ones.&#xD;&#xA;  The thing is, i can't get an impression on how much benefit one could get on using this approach, over what is already on old compilers. &#xD;&#xA;&#xD;&#xA;Obviously, the possibility to reuse code over different platforms is one, if a common compiler is to be developed, but the idea is getting the most of such processors, using modern optimization.&#xD;&#xA;&#xD;&#xA;  I understand that some obviously don't apply, like scheduling, but there is a lot of things that are done before code generation, and will be beneficial to every backend. The question i make is, how beneficial it will be to deliver such tool, compared to what is already on legacy compilers, and to modern ones too (sdcc and others). Also, how much this kind of effort could be beneficial to ease multi platform development (Uzix and the like) considering the severe restrictions on those platforms?&#xD;&#xA;&#xD;&#xA;**EDIT:** I changed the subject of the question to reflect only MSX, to adjust the scope that was too broad." />
  <row Id="583" PostHistoryTypeId="4" PostId="223" RevisionGUID="884c8dd2-aa4d-4ef5-a674-00b0953fa3f9" CreationDate="2016-04-22T18:26:48.113" UserId="225" Comment="added 134 characters in body; edited tags; edited title" Text="How much benefit should be expected on a more advanced compiler for z80/r800 based computers?" />
  <row Id="584" PostHistoryTypeId="6" PostId="223" RevisionGUID="884c8dd2-aa4d-4ef5-a674-00b0953fa3f9" CreationDate="2016-04-22T18:26:48.113" UserId="225" Comment="added 134 characters in body; edited tags; edited title" Text="&lt;msx&gt;&lt;compilers&gt;&lt;assembly&gt;&lt;z80&gt;&lt;r800&gt;" />
  <row Id="587" PostHistoryTypeId="2" PostId="228" RevisionGUID="76cff897-ccff-4236-81a7-08272e6922a4" CreationDate="2016-04-22T20:48:35.057" UserId="56" Text="The answer to [this question][1] discussed a technique on the Apple IIgs for copying memory onto itself.  The motivation for the technique was to maximize use of &quot;fast&quot; (2.8MHz) RAM over &quot;slow&quot; (1MHz) RAM shared with the display hardware.  Writes to the &quot;fast&quot; memory were shadow-written to &quot;slow&quot; graphics memory.&#xD;&#xA;&#xD;&#xA;I vaguely remember someone at the 1993 KansasFest using an oscilloscope to demonstrate that inserting `NOP` (no operation) instructions would make things *faster*.  I've found a couple of references ([article1][2], [article2][3]) that indicate a `NOP` should be placed between every 13 `PEI` instructions.  This seems to have something to do with bus timing -- alignment would not make a difference here.&#xD;&#xA;&#xD;&#xA;How does adding delays improve efficiency?&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://retrocomputing.stackexchange.com/questions/52/how-do-i-use-shadowed-memory-to-render-super-hi-res-quickly&#xD;&#xA;  [2]: https://groups.google.com/forum/#!msg/comp.sys.apple2/ebhNKGH53qg/x0QlJH83t5QJ&#xD;&#xA;  [3]: https://groups.google.com/forum/#!msg/comp.sys.apple2/SMQqh7mbJCI/UlfJWXBLuzMJ" />
  <row Id="588" PostHistoryTypeId="1" PostId="228" RevisionGUID="76cff897-ccff-4236-81a7-08272e6922a4" CreationDate="2016-04-22T20:48:35.057" UserId="56" Text="Inserting NOPs to improve IIgs shadow copy performance" />
  <row Id="589" PostHistoryTypeId="3" PostId="228" RevisionGUID="76cff897-ccff-4236-81a7-08272e6922a4" CreationDate="2016-04-22T20:48:35.057" UserId="56" Text="&lt;graphics&gt;&lt;apple-iigs&gt;" />
  <row Id="590" PostHistoryTypeId="2" PostId="229" RevisionGUID="c07b5536-f788-4094-b3a1-57362f7f08aa" CreationDate="2016-04-22T22:03:24.260" UserId="4" Text="Places where LLVM will provide no benefit, and may reduce performance:&#xD;&#xA;&#xD;&#xA;* The Z80 has no CPU cache, accessing memory directly instead.  Any optimizations based around increasing cache efficiency (eg. aligning sequentially-accessed data to fit in a single cache line, or re-ordering instructions to group common execution paths together) will have, at best, no effect.&#xD;&#xA;* The Z80 is a strictly in-order CPU with just a single execution unit.  Optimizations such as instruction re-ordering to permit out-of-order or parallel execution will have no effect.&#xD;&#xA;* The Z80 has a shallow-to-nonexistent pipeline and no speculative execution.  Optimizations based around branch prediction or preventing pipeline stalls will have no effect.&#xD;&#xA;* The Z80 is often paired with a small amount of RAM.  Many optimizations (such as loop unrolling or function inlining) make the program larger, and can't be used if the program would no longer fit in RAM.&#xD;&#xA;&#xD;&#xA;Places where LLVM will shine:&#xD;&#xA;&#xD;&#xA;* Anything based on abstract analysis of the code, such as constant folding or common-subexpression elimination.  Many of these techniques were developed long after the original Z80 compilers.&#xD;&#xA;* Register allocation: The Z80 has approximately 17 registers (depending on how you count), with complex rules about how you can use them.  LLVM's design can draw on 30-40 years of research in this area that older compilers can't.&#xD;&#xA;&#xD;&#xA;The improvement in abstract-analysis techniques in the past 40 years is huge.  Even in the absence of hardware-specific optimizations, I'd expect LLVM-generated code to be much faster than that from older compilers, and competitive with all but the best hand-optimized assembly." />
  <row Id="591" PostHistoryTypeId="2" PostId="230" RevisionGUID="dbbb73f4-a395-468c-a7fd-dfc98ce209fa" CreationDate="2016-04-22T22:04:26.960" UserId="72" Text="Fast Screen Refresh With PEI Slamming&#xD;&#xA;=====================================&#xD;&#xA;(Or: Dirty Tricks With the Direct Page)&#xD;&#xA;---------------------------------------&#xD;&#xA;&#xD;&#xA;__Author:__   Eric Shepherd  &#xD;&#xA;__Web:__      [http://www.sheppyware.net/](http://www.sheppyware.net/)  &#xD;&#xA;__Blog:__     [http://www.bitstampede.com/](http://www.bitstampede.com/)  &#xD;&#xA;__Twitter:__  [http://twitter.com/sheppy](http://twitter.com/sheppy)&#xD;&#xA;&#xD;&#xA;*This article is based on my KansasFest 2004 presentation &quot;Code Secrets of Wolf 3D.&quot;*&#xD;&#xA;&#xD;&#xA;###Introduction&#xD;&#xA;&#xD;&#xA;Drawing super high-resolution (SHR) graphics on the Apple IIgs is slow. Unfortunately, the SHR screen's memory in bank $E1 is located in &quot;slow RAM&quot; — that is, memory controlled by the Mega II chip which emulates 1 MHz 8-bit Apple IIs. Access to this memory is gated to that 1 MHz speed instead of the 2.8 MHz of the rest of memory. This has plagued Apple IIgs graphics developers since the beginning.&#xD;&#xA;&#xD;&#xA;Fortunately, a number of hardware quirks of the Apple IIgs can be used in tandem to help ease the pain:&#xD;&#xA;&#xD;&#xA;* Shadowing allows bank $01 to be shadowed into bank $E1; that means that whatever is written into bank $01 is automatically mirrored into bank $E1 without slowing you down.&#xD;&#xA;&#xD;&#xA;* You can use the main/auxmem toggle softswitches ($C003 and $C005) to use bank $01 instead of bank $00 for the direct page and stack.&#xD;&#xA;&#xD;&#xA;* The stack and direct page can both be moved around within the bank they're located in by changing the values of the stack pointer and direct register.&#xD;&#xA;&#xD;&#xA;Let's see how this works!&#xD;&#xA;&#xD;&#xA;###Shadowing&#xD;&#xA;&#xD;&#xA;You probably know that the Apple IIgs has a single super high-resolution graphics buffer, located in bank $E1 from $2000-$9FFF. This SHR buffer consists of the pixel data, a set of scanline control bytes (SCBs) which describe the mode of each row of pixels (including which palette to use and whether they're using 320 or 640 mode), and 16 palettes.&#xD;&#xA;&#xD;&#xA;That memory is slow. It's designed to support the 8-bit emulation of the Mega II chip, so writes into it are slowed down to 1 MHz whether you like it or not. There is a workaround, however. The clever people that designed the Apple IIgs included a technology called **shadowing**; this is the ability to have the hardware mirror writes to bank $01 into bank $E1. The writes into bank $01 execute at the computer's regular 2.8 MHz speed, which is obviously much better.&#xD;&#xA;&#xD;&#xA;Shadowing is controlled by bit 3 in the `SHADOW` softswitch at $E0/C035. When 0, shadowing is enabled. When 1, it's disabled.&#xD;&#xA;&#xD;&#xA;So the first step is to allocate the bank $01 SHR buffer. It has to be located at $01/2000-$01/9FFF or it won't work, for obvious reasons — shadowing mirrors writes to the same address in bank $E1.&#xD;&#xA;&#xD;&#xA;Make sure you own the bank $01 SHR buffer! Either use `NewHandle` to allocate it (be sure to set the flag that allows it to allocate special memory, since all of bank $01 is special) or, for GS/OS applications, set the auxtype bit which tells GS/OS to use shadowing so that GS/OS allocates it for you.&#xD;&#xA;&#xD;&#xA;Bytes already located in the bank $01 SHR buffer, however, do not get copied over automatically. You have to write any bytes you want to be copied after shadowing is turned on. That means you either need to track exactly what's changed and redraw those bytes, or redraw the all or most of the frame every refresh cycle. Which you do is up to you (and likely depends on how much you expect to change each refresh).&#xD;&#xA;&#xD;&#xA;You could of course use your typical `LDA`/`STA` loops or similar to do the refresh, but there's a much, much faster way.&#xD;&#xA;&#xD;&#xA;###Stacking the deck: Direct page tricks&#xD;&#xA;&#xD;&#xA;On the 6502 and 65C02, the zero page and stack are fixed in memory; the zero page is always located at $0000-$00FF, and the stack is always in $0100-$01FF. The 65816 changes all that. The direct page (previously known as the zero page) can be moved to any location in bank $00 by changing the value in the Direct register. This can be done using instructions such as `TCD` (Transfer aCcumulator to Direct register), like this:&#xD;&#xA;&#xD;&#xA;	            lda #$2000&#xD;&#xA;	            tcd                   ; Set the direct page to $2000&#xD;&#xA;&#xD;&#xA;Similarly, the 65816 allows you to move the stack by expanding the stack pointer register, previously an 8-bit offset from $0100, to be a 16-bit pointer within bank $00. You use instructions such as `TCS` (Transfer aCcumulator to Stack pointer) to move the stack.&#xD;&#xA;&#xD;&#xA;The nice thing about stack and direct page operations is that you can use instructions which use fewer cycles to access them. In fact, it gets even better, as we'll see shortly.&#xD;&#xA;&#xD;&#xA;But how does this help us? The shadow SHR buffer is in bank $01, and the direct page and stack are trapped in bank $00. Right?&#xD;&#xA;&#xD;&#xA;Not so fast!&#xD;&#xA;&#xD;&#xA;The Apple IIgs was designed to be able to emulate an enhanced 8-bit Apple II; that is, an Apple II with at least 128K of memory. Because 8-bit Apple IIs can't access more than 64K directly, a mechanism called bank switching allowed you to select which 64K bank of memory you wanted to use by swapping them into the same 64K address space. This was done by using softswitches to toggle between main and &quot;auxiliary&quot; memory, often called &quot;auxmem.&quot;&#xD;&#xA;&#xD;&#xA;There is a set of softswitches for selecting whether you wish to read from auxmem or main memory, and write to auxmem or main memory:&#xD;&#xA;&#xD;&#xA;	$E0C002     equ RDMAINRAM         ; Read from main memory&#xD;&#xA;	$E0C003     equ RDCARDRAM         ; Read from auxiliary memory&#xD;&#xA;	$E0C004     equ WRMAINRAM         ; Write to main memory&#xD;&#xA;	$E0C005     equ WRCARDRAM         ; Write to auxiliary memory&#xD;&#xA;&#xD;&#xA;The Apple IIgs emulates this mechanism by using bank $00 as main memory and bank $01 as auxmem; writing to `RDCARDRAM` and `WRCARDRAM` causes bank $01 to take bank $00's place, so that any accesses to bank $00 actually access bank $01.  Now things get interesting: by selecting auxiliary memory in this way, accesses to the stack and direct page actually access bank $01, which is where our SHR buffer is!&#xD;&#xA;&#xD;&#xA;Now we have a way to use higher-performance direct page and stack instructions to read and write the SHR buffer.&#xD;&#xA;&#xD;&#xA;Now we need to figure out the best way to use them.&#xD;&#xA;&#xD;&#xA;###Putting it together&#xD;&#xA;&#xD;&#xA;The first thing you need to do is turn off shadowing. You don't want writes to the SHR buffer in bank $01 to be duplicated to bank $E1 until you're ready.&#xD;&#xA;&#xD;&#xA;	          sep #$20&#xD;&#xA;	          lda &gt;SHADOW             ; Get the current shadow register&#xD;&#xA;	          ora #$08                ; Turn on the &quot;stop SHR shadowing&quot; bit&#xD;&#xA;	          sta &gt;SHADOW             ; Save the updated value&#xD;&#xA;	          rep #$20&#xD;&#xA;&#xD;&#xA;This code ensures shadowing is disabled while not changing the values of any of the other bits in the `SHADOW` register (there are bits for controlling shadowing of various parts of bank $00; all we care about is the SHR buffer, though).&#xD;&#xA;&#xD;&#xA;Now you should draw your graphics into the SHR buffer in bank $01, starting at $2000. You can either redraw the whole thing or, preferably, update just the areas that need to change. This doesn't affect what's on the screen, so it can be done in pieces or in strange ways that would look weird if immediately reflected on the screen. However you like.&#xD;&#xA;&#xD;&#xA;This is the point where you decide when it's time to update the display. Maybe you do it immediately every time a screen update routine finishes running. Maybe you wait until the vertical scan has passed the first scan line you plan to refresh. Either way, the process is roughly the same. Wolfenstein 3D just draws, without worrying about the vertical scan, because it cares more about speed than about possible tearing effects caused by vertical refresh collisions.&#xD;&#xA;&#xD;&#xA;When the time comes to refresh the display, the first step is to turn shadowing back on so that writes to the bank $01 SHR buffer are mirrored to bank $E1:&#xD;&#xA;&#xD;&#xA;	          sep #$20&#xD;&#xA;	          lda &gt;SHADOW             ; Get the current shadow register&#xD;&#xA;	          and #$F7                ; Turn off the &quot;stop SHR shadowing&quot; bit&#xD;&#xA;	          sta &gt;SHADOW             ; Save the updated value&#xD;&#xA;	          rep #$20&#xD;&#xA;&#xD;&#xA;Now shadowing of the SHR buffer has been enabled. Our job now is to take the contents of the bank $01 buffer — at least the parts of it which have changed — and draw them right on top of themselves to update the bank $E1 buffer.&#xD;&#xA;&#xD;&#xA;Think about it for a moment. The contents of the bank $01 buffer are only shadowed to bank $E1 when changed, but it contains the image we want to display already. So we just need to read the changed data and write it right back on top of itself to mirror it to the displayed screen. It sounds a little crazy, but only until you think about it a bit.&#xD;&#xA;&#xD;&#xA;Since we're going to be fiddling with the stack and direct registers, we need to save those so we can restore them later. We also need to disable interrupts:&#xD;&#xA;&#xD;&#xA;	          sei                     ; Disable interrupts&#xD;&#xA;	          tdc                     ; Copy direct register to accumulator&#xD;&#xA;	          sta savedDP             ; Save it locally&#xD;&#xA;	          tsc                     ; Copy stack pointer to accumulator&#xD;&#xA;	          sta savedStack          ; Save that too&#xD;&#xA;&#xD;&#xA;Why did we disable interrupts? Because if bank $01 is occupying the space normally used by bank $00 when an interrupt fires, the interrupt handler will almost certainly blow up.&#xD;&#xA;&#xD;&#xA;Imagine this scenario: AppleTalk is enabled, and the AppleTalk interrupt fires, causing AppleTalk code to get control of the system briefly. It restores its stack and direct page pointers so it can access the data it expects to access, but because bank $01 is now occupying the space normally taken by bank $00, it gets the wrong data (and writes over other programs' data), and things rapidly fall apart.&#xD;&#xA;&#xD;&#xA;Now we complete the preparations by swapping bank $01 to replace bank $00:&#xD;&#xA;&#xD;&#xA;	          sep #$20&#xD;&#xA;	          sta &gt;WRCARDRAM          ; Writes to bank $00 go to bank $01&#xD;&#xA;	          sta &gt;RDCARDRAM          ; Reads from bank $00 to go bank $01&#xD;&#xA;	          rep #$20&#xD;&#xA;&#xD;&#xA;From now on, all accesses to bank $00 actually access bank $01. We're going to use stack and direct page instructions exclusively, for maximum performance.&#xD;&#xA;&#xD;&#xA;It's time to start drawing. We're going to draw the entire screen each frame for this example. It's what Wolf 3D does, because it's pretty typical for most or all of the screen to change, or at least enough of it that trying to update only parts of it wasn't worth the effort. But you might find ways to do better.&#xD;&#xA;&#xD;&#xA;The first step is to set the Direct register to point to $2000, the first byte of the SHR buffer:&#xD;&#xA;&#xD;&#xA;	          lda #$2000&#xD;&#xA;	          tcd&#xD;&#xA;&#xD;&#xA;Now we can use direct page instructions (which typically use one cycle less than their absolute equivalents) to access the first page (256 bytes) of the buffer. That alone sounds like a win, and it is, but we can do better.&#xD;&#xA;&#xD;&#xA;The next step is to point the stack pointer at $20FF, which is the last byte in the first page of the SHR buffer:&#xD;&#xA;&#xD;&#xA;	          clc&#xD;&#xA;	          adc #$00FF&#xD;&#xA;	          tcs&#xD;&#xA;&#xD;&#xA;This takes the $2000 already in the accumulator, adds $FF, and stores the result ($20FF) into the stack pointer. We calculate the value because we'll be looping back up here later.&#xD;&#xA;&#xD;&#xA;Now it's time to copy a page of screen data on top of itself, so that that page of data is shadowed to the main SHR buffer in bank $E1. By default, you think that you'll need a loop of reading a word, then writing a word, over and over. But it turns out that with our direct page and stack configured the way we have them, there's a way to combine reading and writing into a single instruction!&#xD;&#xA;&#xD;&#xA;The `PEI` (Push Effective Indirect) instruction isn't used as often as it should be. It fetches a word from the direct page and pushes it onto the stack in one smooth operation.&#xD;&#xA;&#xD;&#xA;So consider this: our stack now starts at $20FF and works backward toward $2000 with each push. The direct page starts at $2000 and extends up to $20FF. That means they overlap, occupying exactly the same memory. So `PEI` can be used to copy a value on top of itself in this space, if we use it just right. Here's how:&#xD;&#xA;&#xD;&#xA;	          pei $FE&#xD;&#xA;&#xD;&#xA;This one instruction takes the value located at offset $FE on the direct page (that is, at $01/20FE-20FF) and pushes it onto the stack. Since the stack pointer is at $20FF, the result is that the value is written on top of itself, using a two-byte, 6-cycle operation to refresh two bytes of the screen.&#xD;&#xA;&#xD;&#xA;So all we need to do to copy the entire page over is to have a series of 128 `PEI`s in a row. We do this instead of using a loop because a loop just adds overhead, and every cycle counts when you're doing this — especially since interrupts are disabled, and we can only leave them disabled for so long. This code looks like this:&#xD;&#xA;&#xD;&#xA;	          pei $FE&#xD;&#xA;	          pei $FC&#xD;&#xA;	          pei $FA&#xD;&#xA;	          pei $F8&#xD;&#xA;	          ...&#xD;&#xA;	          pei $06&#xD;&#xA;	          pei $04&#xD;&#xA;	          pei $02&#xD;&#xA;	          pei $00&#xD;&#xA;&#xD;&#xA;Once you've finished copying the page, update the Direct register and Stack pointer (to $2100 and $21FF) and do it over and over, adding $0100 to each register every time a page finishes copying.&#xD;&#xA;&#xD;&#xA;There's one trick: you need to periodically switch bank $00 back into place and re-enable interrupts so that MIDISynth, GS/OS, and other users of interrupts have an opportunity to be serviced. The operating system cannot keep functioning properly if you don't allow it to periodically handle interrupts, and music and sound effects will not play correctly if their interrupts aren't processed.&#xD;&#xA;&#xD;&#xA;Also, AppleTalk networks will be disconnected if interrupts are disabled for more than 104.167µsec — another reason to be careful with how long you leave interrupts disabled.&#xD;&#xA;&#xD;&#xA;Wolfenstein 3D re-enables interrupts after every seventh page is copied), like this:&#xD;&#xA;&#xD;&#xA;	          sep #$20&#xD;&#xA;	          sta &gt;RDMAINRAM          ; Read from bank $00&#xD;&#xA;	          sta &gt;WRMAINRAM          ; Write to bank $00&#xD;&#xA;	          rep #$20&#xD;&#xA;	          lda entryStack          ; Retrieve the original stack pointer&#xD;&#xA;	          tcs                     ; Then restore the stack to there&#xD;&#xA;	          lda entryDP             ; Then do the same thing for the direct page&#xD;&#xA;	          tcd&#xD;&#xA;	          cli                     ; Enable interrupts&#xD;&#xA;&#xD;&#xA;As soon as that `CLI` (CLear Interrupt disable) instruction is executed, any pending interrupts are processed before our code continues to execute. That means we can immediately disable interrupts again and restore our work environment to continue to copy the screen:&#xD;&#xA;&#xD;&#xA;	          sei                     ; Disable interrupts&#xD;&#xA;	          sep #$20&#xD;&#xA;	          sta &gt;RDCARDRAM          ; Read from bank $01&#xD;&#xA;	          sta &gt;WRCARDRAM          ; Write to bank $01&#xD;&#xA;	          rep #$20&#xD;&#xA;&#xD;&#xA;Now all you have to do is restore the stack and direct page to where you left off and pick up where you left off. Keep going until you reach $9D00 (or $A000 if you need to update the palettes and SCBs). You can of course also stop sooner if you only need to update certain rows.&#xD;&#xA;&#xD;&#xA;This technique takes some getting used to, and has a lot of ways you can mess it up (by failing to toggle a softswitch at the right point, usually, or by imbalance between the stack and direct page locations you're using). But once you get it down, it's among the fastest, if not the very fastest, ways to blit to the Apple IIgs screen using a back buffer.&#xD;&#xA;&#xD;&#xA;**Written:**        April 21, 2016  &#xD;&#xA;**Last updated:**   April 22, 2016	" />
  <row Id="592" PostHistoryTypeId="5" PostId="230" RevisionGUID="26bf4fd3-39bc-4e40-bd06-b9c5979428ff" CreationDate="2016-04-22T22:15:09.963" UserId="72" Comment="remove inadvertently left-in authorship lines from source article" Text="Fast Screen Refresh With PEI Slamming&#xD;&#xA;=====================================&#xD;&#xA;(Or: Dirty Tricks With the Direct Page)&#xD;&#xA;---------------------------------------&#xD;&#xA;&#xD;&#xA;*This article is based on my KansasFest 2004 presentation &quot;Code Secrets of Wolf 3D.&quot;*&#xD;&#xA;&#xD;&#xA;###Introduction&#xD;&#xA;&#xD;&#xA;Drawing super high-resolution (SHR) graphics on the Apple IIgs is slow. Unfortunately, the SHR screen's memory in bank $E1 is located in &quot;slow RAM&quot; — that is, memory controlled by the Mega II chip which emulates 1 MHz 8-bit Apple IIs. Access to this memory is gated to that 1 MHz speed instead of the 2.8 MHz of the rest of memory. This has plagued Apple IIgs graphics developers since the beginning.&#xD;&#xA;&#xD;&#xA;Fortunately, a number of hardware quirks of the Apple IIgs can be used in tandem to help ease the pain:&#xD;&#xA;&#xD;&#xA;* Shadowing allows bank $01 to be shadowed into bank $E1; that means that whatever is written into bank $01 is automatically mirrored into bank $E1 without slowing you down.&#xD;&#xA;&#xD;&#xA;* You can use the main/auxmem toggle softswitches ($C003 and $C005) to use bank $01 instead of bank $00 for the direct page and stack.&#xD;&#xA;&#xD;&#xA;* The stack and direct page can both be moved around within the bank they're located in by changing the values of the stack pointer and direct register.&#xD;&#xA;&#xD;&#xA;Let's see how this works!&#xD;&#xA;&#xD;&#xA;###Shadowing&#xD;&#xA;&#xD;&#xA;You probably know that the Apple IIgs has a single super high-resolution graphics buffer, located in bank $E1 from $2000-$9FFF. This SHR buffer consists of the pixel data, a set of scanline control bytes (SCBs) which describe the mode of each row of pixels (including which palette to use and whether they're using 320 or 640 mode), and 16 palettes.&#xD;&#xA;&#xD;&#xA;That memory is slow. It's designed to support the 8-bit emulation of the Mega II chip, so writes into it are slowed down to 1 MHz whether you like it or not. There is a workaround, however. The clever people that designed the Apple IIgs included a technology called **shadowing**; this is the ability to have the hardware mirror writes to bank $01 into bank $E1. The writes into bank $01 execute at the computer's regular 2.8 MHz speed, which is obviously much better.&#xD;&#xA;&#xD;&#xA;Shadowing is controlled by bit 3 in the `SHADOW` softswitch at $E0/C035. When 0, shadowing is enabled. When 1, it's disabled.&#xD;&#xA;&#xD;&#xA;So the first step is to allocate the bank $01 SHR buffer. It has to be located at $01/2000-$01/9FFF or it won't work, for obvious reasons — shadowing mirrors writes to the same address in bank $E1.&#xD;&#xA;&#xD;&#xA;Make sure you own the bank $01 SHR buffer! Either use `NewHandle` to allocate it (be sure to set the flag that allows it to allocate special memory, since all of bank $01 is special) or, for GS/OS applications, set the auxtype bit which tells GS/OS to use shadowing so that GS/OS allocates it for you.&#xD;&#xA;&#xD;&#xA;Bytes already located in the bank $01 SHR buffer, however, do not get copied over automatically. You have to write any bytes you want to be copied after shadowing is turned on. That means you either need to track exactly what's changed and redraw those bytes, or redraw the all or most of the frame every refresh cycle. Which you do is up to you (and likely depends on how much you expect to change each refresh).&#xD;&#xA;&#xD;&#xA;You could of course use your typical `LDA`/`STA` loops or similar to do the refresh, but there's a much, much faster way.&#xD;&#xA;&#xD;&#xA;###Stacking the deck: Direct page tricks&#xD;&#xA;&#xD;&#xA;On the 6502 and 65C02, the zero page and stack are fixed in memory; the zero page is always located at $0000-$00FF, and the stack is always in $0100-$01FF. The 65816 changes all that. The direct page (previously known as the zero page) can be moved to any location in bank $00 by changing the value in the Direct register. This can be done using instructions such as `TCD` (Transfer aCcumulator to Direct register), like this:&#xD;&#xA;&#xD;&#xA;	            lda #$2000&#xD;&#xA;	            tcd                   ; Set the direct page to $2000&#xD;&#xA;&#xD;&#xA;Similarly, the 65816 allows you to move the stack by expanding the stack pointer register, previously an 8-bit offset from $0100, to be a 16-bit pointer within bank $00. You use instructions such as `TCS` (Transfer aCcumulator to Stack pointer) to move the stack.&#xD;&#xA;&#xD;&#xA;The nice thing about stack and direct page operations is that you can use instructions which use fewer cycles to access them. In fact, it gets even better, as we'll see shortly.&#xD;&#xA;&#xD;&#xA;But how does this help us? The shadow SHR buffer is in bank $01, and the direct page and stack are trapped in bank $00. Right?&#xD;&#xA;&#xD;&#xA;Not so fast!&#xD;&#xA;&#xD;&#xA;The Apple IIgs was designed to be able to emulate an enhanced 8-bit Apple II; that is, an Apple II with at least 128K of memory. Because 8-bit Apple IIs can't access more than 64K directly, a mechanism called bank switching allowed you to select which 64K bank of memory you wanted to use by swapping them into the same 64K address space. This was done by using softswitches to toggle between main and &quot;auxiliary&quot; memory, often called &quot;auxmem.&quot;&#xD;&#xA;&#xD;&#xA;There is a set of softswitches for selecting whether you wish to read from auxmem or main memory, and write to auxmem or main memory:&#xD;&#xA;&#xD;&#xA;	$E0C002     equ RDMAINRAM         ; Read from main memory&#xD;&#xA;	$E0C003     equ RDCARDRAM         ; Read from auxiliary memory&#xD;&#xA;	$E0C004     equ WRMAINRAM         ; Write to main memory&#xD;&#xA;	$E0C005     equ WRCARDRAM         ; Write to auxiliary memory&#xD;&#xA;&#xD;&#xA;The Apple IIgs emulates this mechanism by using bank $00 as main memory and bank $01 as auxmem; writing to `RDCARDRAM` and `WRCARDRAM` causes bank $01 to take bank $00's place, so that any accesses to bank $00 actually access bank $01.  Now things get interesting: by selecting auxiliary memory in this way, accesses to the stack and direct page actually access bank $01, which is where our SHR buffer is!&#xD;&#xA;&#xD;&#xA;Now we have a way to use higher-performance direct page and stack instructions to read and write the SHR buffer.&#xD;&#xA;&#xD;&#xA;Now we need to figure out the best way to use them.&#xD;&#xA;&#xD;&#xA;###Putting it together&#xD;&#xA;&#xD;&#xA;The first thing you need to do is turn off shadowing. You don't want writes to the SHR buffer in bank $01 to be duplicated to bank $E1 until you're ready.&#xD;&#xA;&#xD;&#xA;	          sep #$20&#xD;&#xA;	          lda &gt;SHADOW             ; Get the current shadow register&#xD;&#xA;	          ora #$08                ; Turn on the &quot;stop SHR shadowing&quot; bit&#xD;&#xA;	          sta &gt;SHADOW             ; Save the updated value&#xD;&#xA;	          rep #$20&#xD;&#xA;&#xD;&#xA;This code ensures shadowing is disabled while not changing the values of any of the other bits in the `SHADOW` register (there are bits for controlling shadowing of various parts of bank $00; all we care about is the SHR buffer, though).&#xD;&#xA;&#xD;&#xA;Now you should draw your graphics into the SHR buffer in bank $01, starting at $2000. You can either redraw the whole thing or, preferably, update just the areas that need to change. This doesn't affect what's on the screen, so it can be done in pieces or in strange ways that would look weird if immediately reflected on the screen. However you like.&#xD;&#xA;&#xD;&#xA;This is the point where you decide when it's time to update the display. Maybe you do it immediately every time a screen update routine finishes running. Maybe you wait until the vertical scan has passed the first scan line you plan to refresh. Either way, the process is roughly the same. Wolfenstein 3D just draws, without worrying about the vertical scan, because it cares more about speed than about possible tearing effects caused by vertical refresh collisions.&#xD;&#xA;&#xD;&#xA;When the time comes to refresh the display, the first step is to turn shadowing back on so that writes to the bank $01 SHR buffer are mirrored to bank $E1:&#xD;&#xA;&#xD;&#xA;	          sep #$20&#xD;&#xA;	          lda &gt;SHADOW             ; Get the current shadow register&#xD;&#xA;	          and #$F7                ; Turn off the &quot;stop SHR shadowing&quot; bit&#xD;&#xA;	          sta &gt;SHADOW             ; Save the updated value&#xD;&#xA;	          rep #$20&#xD;&#xA;&#xD;&#xA;Now shadowing of the SHR buffer has been enabled. Our job now is to take the contents of the bank $01 buffer — at least the parts of it which have changed — and draw them right on top of themselves to update the bank $E1 buffer.&#xD;&#xA;&#xD;&#xA;Think about it for a moment. The contents of the bank $01 buffer are only shadowed to bank $E1 when changed, but it contains the image we want to display already. So we just need to read the changed data and write it right back on top of itself to mirror it to the displayed screen. It sounds a little crazy, but only until you think about it a bit.&#xD;&#xA;&#xD;&#xA;Since we're going to be fiddling with the stack and direct registers, we need to save those so we can restore them later. We also need to disable interrupts:&#xD;&#xA;&#xD;&#xA;	          sei                     ; Disable interrupts&#xD;&#xA;	          tdc                     ; Copy direct register to accumulator&#xD;&#xA;	          sta savedDP             ; Save it locally&#xD;&#xA;	          tsc                     ; Copy stack pointer to accumulator&#xD;&#xA;	          sta savedStack          ; Save that too&#xD;&#xA;&#xD;&#xA;Why did we disable interrupts? Because if bank $01 is occupying the space normally used by bank $00 when an interrupt fires, the interrupt handler will almost certainly blow up.&#xD;&#xA;&#xD;&#xA;Imagine this scenario: AppleTalk is enabled, and the AppleTalk interrupt fires, causing AppleTalk code to get control of the system briefly. It restores its stack and direct page pointers so it can access the data it expects to access, but because bank $01 is now occupying the space normally taken by bank $00, it gets the wrong data (and writes over other programs' data), and things rapidly fall apart.&#xD;&#xA;&#xD;&#xA;Now we complete the preparations by swapping bank $01 to replace bank $00:&#xD;&#xA;&#xD;&#xA;	          sep #$20&#xD;&#xA;	          sta &gt;WRCARDRAM          ; Writes to bank $00 go to bank $01&#xD;&#xA;	          sta &gt;RDCARDRAM          ; Reads from bank $00 to go bank $01&#xD;&#xA;	          rep #$20&#xD;&#xA;&#xD;&#xA;From now on, all accesses to bank $00 actually access bank $01. We're going to use stack and direct page instructions exclusively, for maximum performance.&#xD;&#xA;&#xD;&#xA;It's time to start drawing. We're going to draw the entire screen each frame for this example. It's what Wolf 3D does, because it's pretty typical for most or all of the screen to change, or at least enough of it that trying to update only parts of it wasn't worth the effort. But you might find ways to do better.&#xD;&#xA;&#xD;&#xA;The first step is to set the Direct register to point to $2000, the first byte of the SHR buffer:&#xD;&#xA;&#xD;&#xA;	          lda #$2000&#xD;&#xA;	          tcd&#xD;&#xA;&#xD;&#xA;Now we can use direct page instructions (which typically use one cycle less than their absolute equivalents) to access the first page (256 bytes) of the buffer. That alone sounds like a win, and it is, but we can do better.&#xD;&#xA;&#xD;&#xA;The next step is to point the stack pointer at $20FF, which is the last byte in the first page of the SHR buffer:&#xD;&#xA;&#xD;&#xA;	          clc&#xD;&#xA;	          adc #$00FF&#xD;&#xA;	          tcs&#xD;&#xA;&#xD;&#xA;This takes the $2000 already in the accumulator, adds $FF, and stores the result ($20FF) into the stack pointer. We calculate the value because we'll be looping back up here later.&#xD;&#xA;&#xD;&#xA;Now it's time to copy a page of screen data on top of itself, so that that page of data is shadowed to the main SHR buffer in bank $E1. By default, you think that you'll need a loop of reading a word, then writing a word, over and over. But it turns out that with our direct page and stack configured the way we have them, there's a way to combine reading and writing into a single instruction!&#xD;&#xA;&#xD;&#xA;The `PEI` (Push Effective Indirect) instruction isn't used as often as it should be. It fetches a word from the direct page and pushes it onto the stack in one smooth operation.&#xD;&#xA;&#xD;&#xA;So consider this: our stack now starts at $20FF and works backward toward $2000 with each push. The direct page starts at $2000 and extends up to $20FF. That means they overlap, occupying exactly the same memory. So `PEI` can be used to copy a value on top of itself in this space, if we use it just right. Here's how:&#xD;&#xA;&#xD;&#xA;	          pei $FE&#xD;&#xA;&#xD;&#xA;This one instruction takes the value located at offset $FE on the direct page (that is, at $01/20FE-20FF) and pushes it onto the stack. Since the stack pointer is at $20FF, the result is that the value is written on top of itself, using a two-byte, 6-cycle operation to refresh two bytes of the screen.&#xD;&#xA;&#xD;&#xA;So all we need to do to copy the entire page over is to have a series of 128 `PEI`s in a row. We do this instead of using a loop because a loop just adds overhead, and every cycle counts when you're doing this — especially since interrupts are disabled, and we can only leave them disabled for so long. This code looks like this:&#xD;&#xA;&#xD;&#xA;	          pei $FE&#xD;&#xA;	          pei $FC&#xD;&#xA;	          pei $FA&#xD;&#xA;	          pei $F8&#xD;&#xA;	          ...&#xD;&#xA;	          pei $06&#xD;&#xA;	          pei $04&#xD;&#xA;	          pei $02&#xD;&#xA;	          pei $00&#xD;&#xA;&#xD;&#xA;Once you've finished copying the page, update the Direct register and Stack pointer (to $2100 and $21FF) and do it over and over, adding $0100 to each register every time a page finishes copying.&#xD;&#xA;&#xD;&#xA;There are two tricks.&#xD;&#xA;&#xD;&#xA;**Trick 1: Periodically enable interrupts**&#xD;&#xA;&#xD;&#xA;First, you need to periodically switch bank $00 back into place and re-enable interrupts so that MIDISynth, GS/OS, and other users of interrupts have an opportunity to be serviced. The operating system cannot keep functioning properly if you don't allow it to periodically handle interrupts, and music and sound effects will not play correctly if their interrupts aren't processed.&#xD;&#xA;&#xD;&#xA;Also, AppleTalk networks will be disconnected if interrupts are disabled for more than 104.167µsec — another reason to be careful with how long you leave interrupts disabled.&#xD;&#xA;&#xD;&#xA;Wolfenstein 3D re-enables interrupts after every seventh page is copied), like this:&#xD;&#xA;&#xD;&#xA;	          sep #$20&#xD;&#xA;	          sta &gt;RDMAINRAM          ; Read from bank $00&#xD;&#xA;	          sta &gt;WRMAINRAM          ; Write to bank $00&#xD;&#xA;	          rep #$20&#xD;&#xA;	          lda entryStack          ; Retrieve the original stack pointer&#xD;&#xA;	          tcs                     ; Then restore the stack to there&#xD;&#xA;	          lda entryDP             ; Then do the same thing for the direct page&#xD;&#xA;	          tcd&#xD;&#xA;	          cli                     ; Enable interrupts&#xD;&#xA;&#xD;&#xA;As soon as that `CLI` (CLear Interrupt disable) instruction is executed, any pending interrupts are processed before our code continues to execute. That means we can immediately disable interrupts again and restore our work environment to continue to copy the screen:&#xD;&#xA;&#xD;&#xA;	          sei                     ; Disable interrupts&#xD;&#xA;	          sep #$20&#xD;&#xA;	          sta &gt;RDCARDRAM          ; Read from bank $01&#xD;&#xA;	          sta &gt;WRCARDRAM          ; Write to bank $01&#xD;&#xA;	          rep #$20&#xD;&#xA;&#xD;&#xA;Now all you have to do is restore the stack and direct page to where you left off and pick up where you left off. Keep going until you reach $9D00 (or $A000 if you need to update the palettes and SCBs). You can of course also stop sooner if you only need to update certain rows.&#xD;&#xA;&#xD;&#xA;**Trick 2: Insert NOPs**&#xD;&#xA;&#xD;&#xA;Due to the intricacies of how the 65816's cycle timing works, you can actually improve the performance of your PEI-slamming code by inserting a `NOP` instruction after each 8th `PEI`. _There are some sources that say to put it after every 13th `PEI`. It's unclear which is correct; Wolfenstein 3D does it every 8th one, however._&#xD;&#xA;&#xD;&#xA;##Conclusion&#xD;&#xA;&#xD;&#xA;This technique takes some getting used to, and has a lot of ways you can mess it up (by failing to toggle a softswitch at the right point, usually, or by imbalance between the stack and direct page locations you're using). But once you get it down, it's among the fastest, if not the very fastest, ways to blit to the Apple IIgs screen using a back buffer.&#xD;&#xA;&#xD;&#xA;**Written:**        April 21, 2016  &#xD;&#xA;**Last updated:**   April 22, 2016	" />
  <row Id="593" PostHistoryTypeId="6" PostId="228" RevisionGUID="18e6b393-c868-4ea0-afad-74ce5ba3bec9" CreationDate="2016-04-22T22:37:28.507" UserId="56" Comment="Edit tags" Text="&lt;graphics&gt;&lt;apple-iigs&gt;&lt;65816&gt;" />
  <row Id="594" PostHistoryTypeId="2" PostId="231" RevisionGUID="d101c986-9f56-4da0-b682-db7302940c87" CreationDate="2016-04-22T22:41:34.210" UserId="-1" Text="" />
  <row Id="595" PostHistoryTypeId="2" PostId="232" RevisionGUID="64ca3b13-a997-472d-a19e-6b57eadb55fc" CreationDate="2016-04-22T22:41:34.210" UserId="-1" Text="" />
  <row Id="596" PostHistoryTypeId="4" PostId="98" RevisionGUID="efcc40e9-05f1-46ad-9a50-92ea84fbbcf5" CreationDate="2016-04-22T22:52:37.800" UserId="12" Comment="Fixed up title" Text="How many analogue RGB signal levels did the VIC-II have?" />
  <row Id="597" PostHistoryTypeId="24" PostId="98" RevisionGUID="efcc40e9-05f1-46ad-9a50-92ea84fbbcf5" CreationDate="2016-04-22T22:52:37.800" Comment="Proposed by 12 approved by 56, 37 edit id of 70" />
  <row Id="598" PostHistoryTypeId="2" PostId="233" RevisionGUID="7db6e752-2ff0-4a8b-a022-bc6089b8cb44" CreationDate="2016-04-23T00:21:46.880" UserId="75" Text="It seems the 6502C &quot;Sally&quot; [added][1] a HALT pin to allow Atari to [remove four support chips][2] and thereby build cost-reduced versions of the Atari 400 and 800.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://sleepingelephant.com/ipw-web/bulletin/bb/viewtopic.php?t=4215#p51042&#xD;&#xA;  [2]: https://en.wikipedia.org/wiki/Atari_8-bit_family#Liz" />
  <row Id="603" PostHistoryTypeId="2" PostId="234" RevisionGUID="90f369f8-699f-4317-b02c-2a6ee906a98e" CreationDate="2016-04-23T09:19:18.660" UserId="141" Text="The capacity in Amiga Old File System format (OFS, OS version 1.x) was 840KB, with the Fast File System (&quot;FFS&quot; (!)) introduced for OS 2.x onwards able to store 880KB. The PC format stored 720KB on the same density disks.&#xD;&#xA;&#xD;&#xA;Amigas had the same 3.5&quot; disks and disk drives as PCs with Dual Density (DD) disk drives (or at least the same capability with respect to physical data density; see this post for more details).&#xD;&#xA;&#xD;&#xA;I think the capacity increase from OFS to FFS came from taking 24 bytes per 512 byte sector into use for data storage instead of redundancy/CRC/future use. I am guessing the difference between PC and Amiga formats is similarly down to differing amounts of disk space for housekeeping/error redundancy.&#xD;&#xA;&#xD;&#xA;(For example, PC drives were notably faster at listing directories, except when compared to the Directory Cache mode introduced for the Amiga (D)OS 3.x, which gave comparable listing speed at some storage cost.)&#xD;&#xA;&#xD;&#xA;Does anyone know in more detail what the differences are?" />
  <row Id="604" PostHistoryTypeId="1" PostId="234" RevisionGUID="90f369f8-699f-4317-b02c-2a6ee906a98e" CreationDate="2016-04-23T09:19:18.660" UserId="141" Text="What were the differences in floppy disk formats between Amiga and IBM/PC compatible computers?" />
  <row Id="605" PostHistoryTypeId="3" PostId="234" RevisionGUID="90f369f8-699f-4317-b02c-2a6ee906a98e" CreationDate="2016-04-23T09:19:18.660" UserId="141" Text="&lt;amiga&gt;&lt;floppy-disk&gt;&lt;file-format&gt;" />
  <row Id="606" PostHistoryTypeId="2" PostId="235" RevisionGUID="c806ef47-36d2-42b2-8ffc-a745afb5497b" CreationDate="2016-04-23T09:22:02.327" UserId="234" Text="regular user of the MSX-C compiler here. MSX-C is a rebranded version of the LSI-C 80 compiler bundled with an MSX-specific library. It comes with the same limitations and benefits:&#xD;&#xA;&#xD;&#xA;- PRO: When calling functions, MSX-C passes arguments on the CPU registers instead of the stack (as SDCC or Hitech-C do). This results in a big performance improvement in programs that do a lot of function calling.&#xD;&#xA;&#xD;&#xA;- CON: The compiler doesn't do any memory switching during the compile process. This means that you run out of memory quickly when developing complex programs. This forces the developer to split the program in smaller units and compile/link per parts.&#xD;&#xA;&#xD;&#xA;- CON: MSX-C only understands K&amp;R C. SDCC and Hitech-C support more modern dialects of C.&#xD;&#xA;&#xD;&#xA;- PRO: MSX-C runs natively on the MSX. There's no need to waste time compiling under Linux/Windows and moving the binary to the MSX.&#xD;&#xA;&#xD;&#xA;In my opinion, just writing a compiler for MSX able to use the memory mapper would be a huge improvement. Running out of memory is the biggest annoyance I've found so far." />
  <row Id="607" PostHistoryTypeId="2" PostId="236" RevisionGUID="d4b7abc0-9cf8-4e4a-9236-4ea83c675002" CreationDate="2016-04-23T09:28:49.910" UserId="234" Text="As has been mentioned already, the most common reason is flame retardants.&#xD;&#xA;&#xD;&#xA;I've found that the easiest way to restore the original color is hydrogen peroxyde + UV light (either from the Sun or from an UV lamp).&#xD;&#xA;&#xD;&#xA;Some time ago I restored an MSX turbo R and documented the process, including whitening the case and keyboard. [Here's the link][1].&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.lavandeira.net/2015/05/restoration-and-whitening-of-a-panasonic-fs-a1st/" />
  <row Id="608" PostHistoryTypeId="2" PostId="237" RevisionGUID="07d65f93-a2ef-414e-a5a2-ea34fd86facd" CreationDate="2016-04-23T10:00:05.657" UserId="143" Text="During a recent move I lost the monitor for my Amstrad cpc-646. &#xD;&#xA;&#xD;&#xA;Is it possible to adapt the output of this to work on a modern monitor or on television set." />
  <row Id="609" PostHistoryTypeId="1" PostId="237" RevisionGUID="07d65f93-a2ef-414e-a5a2-ea34fd86facd" CreationDate="2016-04-23T10:00:05.657" UserId="143" Text="Is it possible to use an Amstrad cpc646 with a modern monitor or TV" />
  <row Id="610" PostHistoryTypeId="3" PostId="237" RevisionGUID="07d65f93-a2ef-414e-a5a2-ea34fd86facd" CreationDate="2016-04-23T10:00:05.657" UserId="143" Text="&lt;cpc&gt;&lt;cpc646&gt;" />
  <row Id="611" PostHistoryTypeId="5" PostId="154" RevisionGUID="30133780-e142-44ab-b01a-5e2152d4b843" CreationDate="2016-04-23T10:33:22.587" UserId="202" Comment="Added photo and explanation" Text="All you need is a long reach Torx T15 to get at the screws and a large bull dog clip (1&quot;-2&quot;) to crack the case open. Nothing else.&#xD;&#xA;&#xD;&#xA;The bulldog clip is the cheapest, and best approximation to the &quot;pull apart tool&quot; to which you are referring:&#xD;&#xA;&#xD;&#xA;[![Bulldog clip][1]][1]&#xD;&#xA;&#xD;&#xA;IIRC, the clip, when closed, is placed in the mid point of the grove (where the front and back parts of the case meet) at the top of the SE/30, and then you slowly open the bulldog clip, to crack the case open. This is obviously done once the screws have been removed. The area to which I am referring is shown below:&#xD;&#xA;&#xD;&#xA;[![Where to place the case cracker][2]][2]&#xD;&#xA;&#xD;&#xA;Top tip: once you have extricated the Torx screws, replace them with Philips/crosshead ( or Allen bolts), to make life simpler for you in the future, as long reach Torx screw drivers are *generally* harder to find than other types.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/i4cXJ.jpg&#xD;&#xA;  [2]: http://i.stack.imgur.com/rsIKT.jpg" />
  <row Id="612" PostHistoryTypeId="2" PostId="238" RevisionGUID="446e647a-ea62-4b6a-a261-6d129bfc6e27" CreationDate="2016-04-23T11:19:15.820" UserId="92" Text="The Amiga disk format stores 512 bytes per sector, 11 sectors per track (a track is one side of a cylinder), double sided (i. e. 2 track per cylinder) with 80 cylinders per disk, which makes 80 * 2 * 11 * 512 = 901120 bytes = 901.12 kB = 880 KiB.&#xD;&#xA;&#xD;&#xA;The IBM-PC format also stores 512 bytes per sector, but only 9 sectors per track (on a Double Density (DD) disk, as opposed to a High Density (HD) disk), also double sided, also 80 cylinders per disk, which yields 80 * 2 * 9 * 512 = 737280 bytes = 737.28 kB = 720 KiB.&#xD;&#xA;&#xD;&#xA;You are right that the Amiga OFS format also stores housekeeping on each data block (a block that is used for the contents of the file, as opposed to a block that is used for the file metadata or directory data), so only 488 bytes of each 512 byte block can be used for actual file data, while the Amiga FFS (Fast Filesystem) format uses all 512 bytes of a data block for data and doesn't store redundant housekeeping data there, that's why you can stuff some more data onto FFS disks than on OFS disks.&#xD;&#xA;&#xD;&#xA;The speed difference when reading a directory likely comes from the vastly different way each filesystem (Amiga OFS/FFS vs. DOS FAT12) stores directory information on the disk:&#xD;&#xA;&#xD;&#xA;DOS FAT12 groups several file metadata structures (that include filename, protection bits, change date, first cluster, etc.) into one block while Amiga OFS/FFS has one file metadata block per file (OFS/FFS directory blocks just store a pointer to the first file metadata block and a hash table for quickly finding a file/subdirectory if you access it directly by filename). That means to list a directory and the names of its contained items, you have to load fewer blocks from a FAT12 formatted disk than from an OFS/FFS disk.&#xD;&#xA;" />
  <row Id="613" PostHistoryTypeId="5" PostId="238" RevisionGUID="d4695484-5ba4-4ed8-84af-014ac08fc007" CreationDate="2016-04-23T11:26:04.563" UserId="92" Comment="Fix another type and clarify that MS-DOS is meant." Text="The Amiga disk format stores 512 bytes per sector, 11 sectors per track (a track is one side of a cylinder), double sided (i. e. 2 tracks per cylinder) with 80 cylinders per disk, which makes 80 * 2 * 11 * 512 = 901120 bytes = 901.12 kB = 880 KiB.&#xD;&#xA;&#xD;&#xA;The IBM-PC format also stores 512 bytes per sector, but only 9 sectors per track (on a Double Density (DD) disk, as opposed to a High Density (HD) disk), also double sided, also 80 cylinders per disk, which yields 80 * 2 * 9 * 512 = 737280 bytes = 737.28 kB = 720 KiB.&#xD;&#xA;&#xD;&#xA;You are right that the Amiga OFS format also stores housekeeping on each data block (a block that is used for the contents of the file, as opposed to a block that is used for the file metadata or directory data), so only 488 bytes of each 512 byte block can be used for actual file data, while the Amiga FFS (Fast Filesystem) format uses all 512 bytes of a data block for data and doesn't store redundant housekeeping data there, that's why you can stuff some more data onto FFS disks than on OFS disks.&#xD;&#xA;&#xD;&#xA;The speed difference when reading a directory likely comes from the vastly different way each filesystem (Amiga OFS/FFS vs. MS-DOS FAT12) stores directory information on the disk:&#xD;&#xA;&#xD;&#xA;MS-DOS FAT12 groups several file metadata structures (that include filename, protection bits, change date, first cluster, etc.) into one block while Amiga OFS/FFS has one file metadata block per file (OFS/FFS directory blocks just store a pointer to the first file metadata block and a hash table for quickly finding a file/subdirectory if you access it directly by filename). That means to list a directory and the names of its contained items, you have to load fewer blocks from a FAT12 formatted disk than from an OFS/FFS disk.&#xD;&#xA;" />
  <row Id="614" PostHistoryTypeId="5" PostId="238" RevisionGUID="9df64636-a155-4e0e-a28e-1357483f8e97" CreationDate="2016-04-23T11:45:33.853" UserId="92" Comment="Some more sentence fixes. Also clarify under which circumstances OFS and FFS disks store the same amount." Text="The Amiga disk format stores 512 bytes per sector, 11 sectors per track (a track is one side of a cylinder), double sided (i. e. 2 tracks per cylinder) with 80 cylinders per disk, which makes 80 * 2 * 11 * 512 = 901120 bytes = 901.12 kB = 880 KiB.&#xD;&#xA;&#xD;&#xA;The IBM-PC format also stores 512 bytes per sector, but only 9 sectors per track (on a Double Density (DD) disk, as opposed to a High Density (HD) disk), also double sided, also 80 cylinders per disk, which yields 80 * 2 * 9 * 512 = 737280 bytes = 737.28 kB = 720 KiB.&#xD;&#xA;&#xD;&#xA;You are right that the Amiga OFS format also stores housekeeping information on each data block (a block that is used for the contents of the file, as opposed to a block that is used for the file metadata or directory data), so only 488 bytes of each 512 byte block can be used for actual file data, while the Amiga FFS (Fast Filesystem) format uses all 512 bytes of a data block for file data and doesn't store redundant housekeeping information there, that's why you can in general put some more data onto FFS disks than on OFS disks (unless no file on the disk is larger than 488 bytes or your disk content consists only of directories and subdirectories, in which case you can store the same amount).&#xD;&#xA;&#xD;&#xA;The speed difference when reading a directory likely comes from the vastly different way each filesystem (Amiga OFS/FFS vs. MS-DOS FAT12) stores directory information on the disk:&#xD;&#xA;&#xD;&#xA;MS-DOS FAT12 groups several file metadata structures (that include filename, protection bits, change date, first cluster, etc.) into one block while Amiga OFS/FFS has one file metadata block per file (OFS/FFS directory blocks just store a pointer to the first file metadata block and a hash table for quickly finding a file/subdirectory if you access it directly by filename). That means to list a directory and the names of its contained items, you have to load fewer blocks from a FAT12 formatted disk than from an OFS/FFS disk.&#xD;&#xA;" />
  <row Id="615" PostHistoryTypeId="5" PostId="238" RevisionGUID="ccdef4ff-8fee-4f34-a968-2d64e3d8e215" CreationDate="2016-04-23T11:54:07.437" UserId="92" Comment="Explain why the sum of the file sizes is smaller that the raw block data size." Text="The Amiga disk format stores 512 bytes per sector, 11 sectors per track (a track is one side of a cylinder), double sided (i. e. 2 tracks per cylinder) with 80 cylinders per disk, which makes 80 * 2 * 11 * 512 = 901120 bytes = 901.12 kB = 880 KiB raw block data.&#xD;&#xA;&#xD;&#xA;The IBM-PC format also stores 512 bytes per sector, but only 9 sectors per track (on a Double Density (DD) disk, as opposed to a High Density (HD) disk), also double sided, also 80 cylinders per disk, which yields 80 * 2 * 9 * 512 = 737280 bytes = 737.28 kB = 720 KiB raw block data.&#xD;&#xA;&#xD;&#xA;Neither of those formats is able to achieve that nominal amount when you sum the sizes of the files stored on disk. The more obvious reason is that you always need to store metadata such as filenames, dates, subdirectories, etc. as well. The other reason is that on those filesystems file data always occupies a multiple of some unit (a block on Amiga OFS/FFS and a cluster - consisting of multiple blocks - on MS-DOS FAT12) and if the file size doesn't exactly equal that multiple, some bytes of the last block or cluster are wasted where no useful data is stored.&#xD;&#xA;&#xD;&#xA;You are right that the Amiga OFS format also stores housekeeping information on each data block (a block that is used for the contents of the file, as opposed to a block that is used for the file metadata or directory data), so only 488 bytes of each 512 byte block can be used for actual file data, while the Amiga FFS (Fast Filesystem) format uses all 512 bytes of a data block for file data and doesn't store redundant housekeeping information there, that's why you can in general put some more data onto FFS disks than on OFS disks (unless no file on the disk is larger than 488 bytes or your disk content consists only of directories and subdirectories, in which case you can store the same amount).&#xD;&#xA;&#xD;&#xA;The speed difference when reading a directory likely comes from the vastly different way each filesystem (Amiga OFS/FFS vs. MS-DOS FAT12) stores directory information on the disk:&#xD;&#xA;&#xD;&#xA;MS-DOS FAT12 groups several file metadata structures (that include filename, protection bits, change date, first cluster, etc.) into one block while Amiga OFS/FFS has one file metadata block per file (OFS/FFS directory blocks just store a pointer to the first file metadata block and a hash table for quickly finding a file/subdirectory if you access it directly by filename). That means to list a directory and the names of its contained items, you have to load fewer blocks from a FAT12 formatted disk than from an OFS/FFS disk.&#xD;&#xA;" />
  <row Id="616" PostHistoryTypeId="2" PostId="239" RevisionGUID="3407474f-5294-461e-bcef-8d2b684ed47c" CreationDate="2016-04-23T13:49:15.370" UserId="115" Text="Are there any automated test suites for MOS 6520, 6522 and 6526 chips? I am looking for test suites aimed at making sure datasheet-based independent reimplementations of the above chips (e.g. FPGAs) work exactly as the real chips." />
  <row Id="617" PostHistoryTypeId="1" PostId="239" RevisionGUID="3407474f-5294-461e-bcef-8d2b684ed47c" CreationDate="2016-04-23T13:49:15.370" UserId="115" Text="Comprehensive test suites for MOS 6520 PIA / 6522 VIA / 6526 CIA" />
  <row Id="618" PostHistoryTypeId="3" PostId="239" RevisionGUID="3407474f-5294-461e-bcef-8d2b684ed47c" CreationDate="2016-04-23T13:49:15.370" UserId="115" Text="&lt;mos-6520&gt;&lt;mos-6522&gt;&lt;mos-6526&gt;&lt;testing&gt;" />
  <row Id="619" PostHistoryTypeId="2" PostId="240" RevisionGUID="04b47a45-04dc-4a6b-8e1a-9fe8b4d5c88e" CreationDate="2016-04-23T13:54:08.787" UserId="-1" Text="" />
  <row Id="620" PostHistoryTypeId="2" PostId="241" RevisionGUID="5a1ddac1-9c85-4a06-bae2-08b62953a772" CreationDate="2016-04-23T13:54:08.787" UserId="-1" Text="" />
  <row Id="621" PostHistoryTypeId="2" PostId="242" RevisionGUID="7550b9c2-5361-4315-bafc-25ed26f9b21b" CreationDate="2016-04-23T13:55:45.890" UserId="-1" Text="" />
  <row Id="622" PostHistoryTypeId="2" PostId="243" RevisionGUID="05dc6c9b-3eea-45fb-949d-5644172e44b0" CreationDate="2016-04-23T13:55:45.890" UserId="-1" Text="" />
  <row Id="623" PostHistoryTypeId="2" PostId="244" RevisionGUID="65f58aae-8d75-4ef9-b046-a6374c84d272" CreationDate="2016-04-23T13:56:54.317" UserId="-1" Text="" />
  <row Id="624" PostHistoryTypeId="2" PostId="245" RevisionGUID="8fcb0453-e0f2-4684-bf18-1c87670f95aa" CreationDate="2016-04-23T13:56:54.317" UserId="-1" Text="" />
  <row Id="625" PostHistoryTypeId="6" PostId="197" RevisionGUID="a858b525-7412-4adc-b138-a9dc9452aee7" CreationDate="2016-04-23T14:47:24.590" UserId="56" Comment="Use tag for specific computer rather than company" Text="&lt;atari-800&gt;" />
  <row Id="626" PostHistoryTypeId="5" PostId="220" RevisionGUID="240353db-bb4c-4a9c-b1e2-ce85dfac3555" CreationDate="2016-04-23T14:53:08.257" UserId="128" Comment="spelling..." Text="My guess is that it was merely a design decision based upon the assumption that once a protected mode OS is started, there is no need to go back. Most microprocessors at that time already booted in its most privileged mode and had at least two levels of protection. The 80286 had to boot in real mode to keep compatibility with DOS and I think they thought DOS would reduce itself to just a minimal procedure to boot the main OS.&#xD;&#xA;&#xD;&#xA;It seems that Intel engineers didn't realize that DOS was going to live for about ten years after launching the 286, and software engineers along with motherboard manufacturers would figure out a way to switch the CPU back to real mode in order to call DOS services from a PM program (who decided that the keyboard controller is a good place to put a register with a bit to reset the CPU and another one to enable CPU addresses beyond 1MB?)&#xD;&#xA;&#xD;&#xA;By the time the 80386 was produced, they added the feature to switch the CPU back to real mode, and the dirty trick used with the 80286 -to reset it with a magic number at a certain memory location so the BIOS could read it and jump to some predefined code to resume operation- was not needed any more." />
  <row Id="627" PostHistoryTypeId="24" PostId="220" RevisionGUID="240353db-bb4c-4a9c-b1e2-ce85dfac3555" CreationDate="2016-04-23T14:53:08.257" Comment="Proposed by 128 approved by 56, 105 edit id of 79" />
  <row Id="628" PostHistoryTypeId="2" PostId="246" RevisionGUID="9cdb157c-e229-487d-a70e-fb6d2d8c7615" CreationDate="2016-04-23T15:15:45.033" UserId="105" Text="Yes, it is possible. There are a number of ways:&#xD;&#xA;&#xD;&#xA;- If your TV has a SCART connector, you need a cable adapter from DIN 6 to SCART, wired like this (the audio is taken from the audio out using a standard stereo 3.5'' jack):&#xD;&#xA;&#xD;&#xA;(taken from CPCwiki)&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;- If your TV does not have SCART, but composite video input, you must&#xD;&#xA;&#xD;&#xA;  - Either use a RGB to CVBS adapter (using for example an AD724 chip), or&#xD;&#xA;&#xD;&#xA;  - if you don't mind having a B&amp;W signal, you can make an easier adapter by taking pin 6 (LUMA) to the CVBS input.&#xD;&#xA;&#xD;&#xA;For the first solution, we did a small batch of a little PCB that holds an AD724 and associated components to get a cheap RGB to CVBS/S-Video adapter. This is the schematic:&#xD;&#xA;&#xD;&#xA;[![enter image description here][2]][2]&#xD;&#xA;&#xD;&#xA;And this is the board, almost finished:&#xD;&#xA;&#xD;&#xA;[![enter image description here][3]][3]&#xD;&#xA;&#xD;&#xA;- If your TV has an HDMI input, then the solution is to wire a cable adapter as first explained, and then use a SCART-to-HDMI upscaler.&#xD;&#xA;&#xD;&#xA;[![enter image description here][4]][4]&#xD;&#xA;&#xD;&#xA;- For a VGA monitor, use a RGB-to-VGA converter. They are very common and used in custom arcade cabinets.&#xD;&#xA;&#xD;&#xA;[![enter image description here][5]][5]&#xD;&#xA;&#xD;&#xA;I have one of these, and this is how my CPC6128 looks in a TFT monitor :) (it looks darker but that is because of the short exposure of my camera)&#xD;&#xA;&#xD;&#xA;[![enter image description here][6]][6]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/FaXY9.gif&#xD;&#xA;  [2]: http://i.stack.imgur.com/Vtn92.png&#xD;&#xA;  [3]: http://i.stack.imgur.com/Djk8E.jpg&#xD;&#xA;  [4]: http://i.stack.imgur.com/GVuhF.jpg&#xD;&#xA;  [5]: http://i.stack.imgur.com/eB1Ap.jpg&#xD;&#xA;  [6]: http://i.stack.imgur.com/INEZD.jpg" />
  <row Id="629" PostHistoryTypeId="2" PostId="247" RevisionGUID="5a49841c-f970-41d1-b8bb-800db736de84" CreationDate="2016-04-23T15:51:32.547" UserId="-1" Text="" />
  <row Id="630" PostHistoryTypeId="2" PostId="248" RevisionGUID="680c3bd6-9a75-4297-aa0f-6d6c2d7f94ed" CreationDate="2016-04-23T15:51:32.547" UserId="-1" Text="" />
  <row Id="633" PostHistoryTypeId="5" PostId="225" RevisionGUID="7147f3f3-80fe-4ec4-b207-6da93e7eb391" CreationDate="2016-04-23T16:37:10.323" UserId="56" Comment="added 254 characters in body" Text="This tag covers the entire Macintosh product line, from 1984 on.  Only the older models are appropriate subjects for the retrocomputing site.&#xD;&#xA;&#xD;&#xA;As a simple guideline, Macs based on 68K or PPC CPUs are appropriate, while x86-based Macs probably aren't.&#xD;&#xA;" />
  <row Id="634" PostHistoryTypeId="24" PostId="225" RevisionGUID="7147f3f3-80fe-4ec4-b207-6da93e7eb391" CreationDate="2016-04-23T16:37:10.323" Comment="Proposed by 56 approved by 47 edit id of 74" />
  <row Id="635" PostHistoryTypeId="5" PostId="187" RevisionGUID="18b82722-19bd-4dd0-87b7-52c613d6a586" CreationDate="2016-04-23T16:37:36.730" UserId="56" Comment="added 84 characters in body" Text="Questions about connectors, particularly those used to connect computer peripherals." />
  <row Id="636" PostHistoryTypeId="24" PostId="187" RevisionGUID="18b82722-19bd-4dd0-87b7-52c613d6a586" CreationDate="2016-04-23T16:37:36.730" Comment="Proposed by 56 approved by 47 edit id of 68" />
  <row Id="637" PostHistoryTypeId="5" PostId="245" RevisionGUID="6d17e290-24db-45b4-b297-3abc26d238e2" CreationDate="2016-04-23T16:38:10.060" UserId="115" Comment="added 154 characters in body" Text="Questions about the MOS 6526 CIA (Compelx Interface Adapter) chip, used in e.g. the Commodore 64 home computer and the Commodore 1570/1571 floppy drives. " />
  <row Id="638" PostHistoryTypeId="24" PostId="245" RevisionGUID="6d17e290-24db-45b4-b297-3abc26d238e2" CreationDate="2016-04-23T16:38:10.060" Comment="Proposed by 115 approved by 47 edit id of 82" />
  <row Id="639" PostHistoryTypeId="5" PostId="221" RevisionGUID="33f0276a-68d7-45e5-9c83-844c95887e1f" CreationDate="2016-04-23T16:39:11.613" UserId="56" Comment="added 481 characters in body" Text="Use this tag for retro-computing questions related to graphics.  This can be about the way hardware worked, or about software techniques unique to older computers.&#xD;&#xA;&#xD;&#xA;Examples include display peripherals, like video overlay cards, and usage of quirky graphics modes, such as &quot;hold and modify&quot; or &quot;fill mode&quot;.&#xD;&#xA;&#xD;&#xA;Note that questions of the form &quot;what's the best way to...&quot; are generally discouraged on stackexchange sites, so questions should be concrete rather than hypothetical.&#xD;&#xA;" />
  <row Id="640" PostHistoryTypeId="24" PostId="221" RevisionGUID="33f0276a-68d7-45e5-9c83-844c95887e1f" CreationDate="2016-04-23T16:39:11.613" Comment="Proposed by 56 approved by -1 edit id of 72" />
  <row Id="641" PostHistoryTypeId="5" PostId="221" RevisionGUID="cf7caf8a-4782-4ca3-8693-509d28046d71" CreationDate="2016-04-23T16:39:11.613" UserId="47" Comment="deleted material beyond tag usage for an excerpt" Text="Use this tag for retro-computing questions related to graphics.  This can be about the way hardware worked, or about software techniques unique to older computers.&#xD;&#xA;&#xD;&#xA;" />
  <row Id="642" PostHistoryTypeId="5" PostId="226" RevisionGUID="d106f470-8991-4031-a844-a44a1fb1cbe2" CreationDate="2016-04-23T16:39:20.817" UserId="56" Comment="added 54 characters in body" Text="Discussions about Apple's Macintosh line of computers." />
  <row Id="643" PostHistoryTypeId="24" PostId="226" RevisionGUID="d106f470-8991-4031-a844-a44a1fb1cbe2" CreationDate="2016-04-23T16:39:20.817" Comment="Proposed by 56 approved by 47 edit id of 75" />
  <row Id="644" PostHistoryTypeId="5" PostId="231" RevisionGUID="818154f1-4fec-4df9-b085-2045947b0096" CreationDate="2016-04-23T16:39:34.663" UserId="56" Comment="added 202 characters in body" Text="The W65C816S, commonly referred to simply as the 65816, was developed by Western Design Center in 1983.  It's an enhanced version of the 65C02, featuring 16-bit registers and 24-bit memory addressing.&#xD;&#xA;" />
  <row Id="645" PostHistoryTypeId="24" PostId="231" RevisionGUID="818154f1-4fec-4df9-b085-2045947b0096" CreationDate="2016-04-23T16:39:34.663" Comment="Proposed by 56 approved by 47 edit id of 76" />
  <row Id="646" PostHistoryTypeId="5" PostId="243" RevisionGUID="81408a80-0a72-4ceb-bf94-3b3cccf5e263" CreationDate="2016-04-23T16:39:38.943" UserId="115" Comment="added 133 characters in body" Text="Questions about the MOS 6522 VIA (Versatile Interface Adapter) chip, used in e.g. the Commodore PET and the BBC Micro home computers." />
  <row Id="647" PostHistoryTypeId="24" PostId="243" RevisionGUID="81408a80-0a72-4ceb-bf94-3b3cccf5e263" CreationDate="2016-04-23T16:39:38.943" Comment="Proposed by 115 approved by 47 edit id of 81" />
  <row Id="648" PostHistoryTypeId="5" PostId="181" RevisionGUID="37592b4e-9fc3-4ead-8b91-a0c704d662b3" CreationDate="2016-04-23T16:39:45.117" UserId="37" Comment="added 46 characters in body" Text="For questions about the pasts of retro devices" />
  <row Id="649" PostHistoryTypeId="24" PostId="181" RevisionGUID="37592b4e-9fc3-4ead-8b91-a0c704d662b3" CreationDate="2016-04-23T16:39:45.117" Comment="Proposed by 37 approved by 47 edit id of 65" />
  <row Id="650" PostHistoryTypeId="5" PostId="50" RevisionGUID="84c8148b-a1cd-4570-b58e-4b0dc370b14c" CreationDate="2016-04-23T16:39:54.507" UserId="4" Comment="added 131 characters in body" Text="For questions about the Apple II series of personal computers, and related software and hardware.  For questions about Apple hardware in general, use [tag:apple]; for questions about the IIGS in particular, use [tag:apple-iigs]." />
  <row Id="651" PostHistoryTypeId="24" PostId="50" RevisionGUID="84c8148b-a1cd-4570-b58e-4b0dc370b14c" CreationDate="2016-04-23T16:39:54.507" Comment="Proposed by 4 approved by 47 edit id of 78" />
  <row Id="652" PostHistoryTypeId="5" PostId="241" RevisionGUID="cc385953-2454-4327-8a9a-a038353489d9" CreationDate="2016-04-23T16:40:00.493" UserId="115" Comment="added 114 characters in body" Text="Questions about the MOS 6520 PIA (Peripheral Interface Adapter) chip, used in e.g. the Commodore PET home computer" />
  <row Id="653" PostHistoryTypeId="24" PostId="241" RevisionGUID="cc385953-2454-4327-8a9a-a038353489d9" CreationDate="2016-04-23T16:40:00.493" Comment="Proposed by 115 approved by 47 edit id of 80" />
  <row Id="654" PostHistoryTypeId="5" PostId="156" RevisionGUID="88c201f0-10ef-4c65-bc17-2f350f116c54" CreationDate="2016-04-23T16:40:04.663" UserId="56" Comment="added 69 characters in body" Text="Discussion of audio cassette tape, as used for computer data storage." />
  <row Id="655" PostHistoryTypeId="24" PostId="156" RevisionGUID="88c201f0-10ef-4c65-bc17-2f350f116c54" CreationDate="2016-04-23T16:40:04.663" Comment="Proposed by 56 approved by 47 edit id of 62" />
  <row Id="656" PostHistoryTypeId="5" PostId="214" RevisionGUID="2bdbdc83-a59b-48aa-9234-4856274a39f3" CreationDate="2016-04-23T16:40:10.180" UserId="133" Comment="added 50 characters in body" Text="Information on how data is encoded within files.&#xD;&#xA;" />
  <row Id="657" PostHistoryTypeId="24" PostId="214" RevisionGUID="2bdbdc83-a59b-48aa-9234-4856274a39f3" CreationDate="2016-04-23T16:40:10.180" Comment="Proposed by 133 approved by 47 edit id of 71" />
  <row Id="658" PostHistoryTypeId="5" PostId="155" RevisionGUID="bd94280c-15b6-4c29-867e-fcb396c8e082" CreationDate="2016-04-23T16:40:13.040" UserId="56" Comment="added 133 characters in body" Text="Many 1970s-era personal computers used audio cassettes for data storage.  Some early software was sold and distributed on cassette.&#xD;&#xA;" />
  <row Id="659" PostHistoryTypeId="24" PostId="155" RevisionGUID="bd94280c-15b6-4c29-867e-fcb396c8e082" CreationDate="2016-04-23T16:40:13.040" Comment="Proposed by 56 approved by 47 edit id of 61" />
  <row Id="660" PostHistoryTypeId="5" PostId="232" RevisionGUID="e1ef4086-bacd-4217-a786-4b90804ea7f5" CreationDate="2016-04-23T16:40:17.353" UserId="56" Comment="added 37 characters in body" Text="Discussions related to the 65816 CPU." />
  <row Id="661" PostHistoryTypeId="24" PostId="232" RevisionGUID="e1ef4086-bacd-4217-a786-4b90804ea7f5" CreationDate="2016-04-23T16:40:17.353" Comment="Proposed by 56 approved by 47 edit id of 77" />
  <row Id="662" PostHistoryTypeId="5" PostId="186" RevisionGUID="f2252fa9-0a28-4974-ad70-1a86ada8a9f4" CreationDate="2016-04-23T16:40:19.963" UserId="56" Comment="added 200 characters in body" Text="Retro hardware often uses unique or antiquated connectors between devices.  This can include cabling, like the Apple Desktop Bus (ADB), or edge connectors, like the peripheral slots in the Apple II.&#xD;&#xA;" />
  <row Id="663" PostHistoryTypeId="24" PostId="186" RevisionGUID="f2252fa9-0a28-4974-ad70-1a86ada8a9f4" CreationDate="2016-04-23T16:40:19.963" Comment="Proposed by 56 approved by 47 edit id of 67" />
  <row Id="664" PostHistoryTypeId="5" PostId="237" RevisionGUID="3bf98b7f-303a-41a9-a010-d954c4f6df11" CreationDate="2016-04-23T16:40:24.807" UserId="105" Comment="Typo. The CPC646 never existed." Text="During a recent move I lost the monitor for my Amstrad cpc-464. &#xD;&#xA;&#xD;&#xA;Is it possible to adapt the output of this to work on a modern monitor or on television set." />
  <row Id="665" PostHistoryTypeId="4" PostId="237" RevisionGUID="3bf98b7f-303a-41a9-a010-d954c4f6df11" CreationDate="2016-04-23T16:40:24.807" UserId="105" Comment="Typo. The CPC646 never existed." Text="Is it possible to use an Amstrad cpc464 with a modern monitor or TV" />
  <row Id="666" PostHistoryTypeId="6" PostId="237" RevisionGUID="3bf98b7f-303a-41a9-a010-d954c4f6df11" CreationDate="2016-04-23T16:40:24.807" UserId="105" Comment="Typo. The CPC646 never existed." Text="&lt;cpc&gt;&lt;cpc464&gt;" />
  <row Id="667" PostHistoryTypeId="24" PostId="237" RevisionGUID="3bf98b7f-303a-41a9-a010-d954c4f6df11" CreationDate="2016-04-23T16:40:24.807" Comment="Proposed by 105 approved by 47 edit id of 84" />
  <row Id="668" PostHistoryTypeId="2" PostId="249" RevisionGUID="24dfb275-8bad-4276-aefe-d08d1ea09bcc" CreationDate="2016-04-23T17:13:44.987" UserId="75" Text="For example: 0103791363642010121234" />
  <row Id="669" PostHistoryTypeId="1" PostId="249" RevisionGUID="24dfb275-8bad-4276-aefe-d08d1ea09bcc" CreationDate="2016-04-23T17:13:44.987" UserId="75" Text="What information is encoded in Amiga's 22-digit barcodes?" />
  <row Id="670" PostHistoryTypeId="3" PostId="249" RevisionGUID="24dfb275-8bad-4276-aefe-d08d1ea09bcc" CreationDate="2016-04-23T17:13:44.987" UserId="75" Text="&lt;amiga&gt;&lt;barcode&gt;" />
  <row Id="671" PostHistoryTypeId="2" PostId="250" RevisionGUID="adfd53ce-03f5-4ac1-8c56-1af644e54590" CreationDate="2016-04-23T17:13:44.987" UserId="75" Text="I couldn't find this information online, so I collected and compared some serial numbers. The first three digits appear to be the location of manufacture:&#xD;&#xA;&#xD;&#xA; - 010 is Hong Kong&#xD;&#xA; - 012 is China&#xD;&#xA; - 401 is U.K.&#xD;&#xA; - 851 is Philippines&#xD;&#xA;&#xD;&#xA;(However, I found some Post-Commodore Escom Amiga 1200's, all made in France, with country codes 260, 364, 464, and 564.)&#xD;&#xA;&#xD;&#xA;The next two digits are the week number, followed by 2 digits for the year. For example, &quot;3791&quot; specifies September 1991. (This convention appears to have survived through the Escom era.)&#xD;&#xA;&#xD;&#xA;The remaining digits are the product ID or model number followed by the serial number, but I don't know exactly how many digits were used for each or even if it stayed consistent through the end of Commodore." />
  <row Id="672" PostHistoryTypeId="16" PostId="250" RevisionGUID="d61101fa-a267-49ad-a282-683f91b50dc1" CreationDate="2016-04-23T17:13:44.987" UserId="75" />
  <row Id="673" PostHistoryTypeId="2" PostId="251" RevisionGUID="ebfe7a0f-2657-4642-9ffe-a13ddd23e4a7" CreationDate="2016-04-23T17:41:19.280" UserId="225" Text="I remember that a LOT of games for my MSX (i live on Brazil) don't work without some modification - several need some kind of tweak on the loader, like `poke -1,0`. &#xD;&#xA;&#xD;&#xA;I would like to know what are the causes that make those adjustments necessary: Some kind of hardware spec that don't follow the guidelines, or lack of knowledge on those guidelines by developers, or something else?  " />
  <row Id="674" PostHistoryTypeId="1" PostId="251" RevisionGUID="ebfe7a0f-2657-4642-9ffe-a13ddd23e4a7" CreationDate="2016-04-23T17:41:19.280" UserId="225" Text="What are the common sources of incompatibility on different MSX computers?" />
  <row Id="675" PostHistoryTypeId="3" PostId="251" RevisionGUID="ebfe7a0f-2657-4642-9ffe-a13ddd23e4a7" CreationDate="2016-04-23T17:41:19.280" UserId="225" Text="&lt;msx&gt;&lt;compatibility&gt;" />
  <row Id="676" PostHistoryTypeId="2" PostId="252" RevisionGUID="5ea15398-63fc-4151-9fcb-4d6606edaa28" CreationDate="2016-04-23T20:31:23.403" UserId="11" Text="The other responses here are correct (except the spudger, IMO -- it might work but isn't really the tool being asked about here).  The ones I remember looked different, like in this picture which I'll include in case someone finds one and isn't sure what it does.  They worked like the bulldog clip... stick in the crack at the top of the classic-type Mac and wedge the case apart.&#xD;&#xA;&#xD;&#xA;[![Picture of rotating case cracker and long torx wrench, plus the bigger style wedge type.][1]][1]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/90oWB.jpg" />
  <row Id="677" PostHistoryTypeId="2" PostId="253" RevisionGUID="1962d696-bf3a-4474-add6-5eb1da7d6129" CreationDate="2016-04-23T20:41:32.870" UserId="71" Text="I'm trying to complete the original Ultima I on an Apple //e.&#xD;&#xA;&#xD;&#xA;[These instructions][1] explain space flight, but I can't seem to destroy enemy ships.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://guides.gamercorner.net/ultimai/space/" />
  <row Id="678" PostHistoryTypeId="1" PostId="253" RevisionGUID="1962d696-bf3a-4474-add6-5eb1da7d6129" CreationDate="2016-04-23T20:41:32.870" UserId="71" Text="How do I become a Space Ace in Ultima I?" />
  <row Id="679" PostHistoryTypeId="3" PostId="253" RevisionGUID="1962d696-bf3a-4474-add6-5eb1da7d6129" CreationDate="2016-04-23T20:41:32.870" UserId="71" Text="&lt;apple-ii&gt;" />
  <row Id="680" PostHistoryTypeId="2" PostId="254" RevisionGUID="93493742-5659-4fcd-844c-33b2dbecde5d" CreationDate="2016-04-23T21:49:14.147" UserId="71" Text="Are you using an enhanced //e? If so you'll need to get a patched copy, or copy and [patch yours][1].&#xD;&#xA;&#xD;&#xA;The original (non-remake) Apple II version uses an undocumented 6502 opcode in the space flight code. This makes it impossible to hit the alien ships when running on a 65C02.&#xD;&#xA;&#xD;&#xA;The fix is in file &quot;FGT3&quot;. Change the bytes at 74D1 to 46 43 45 43 (all hex).&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://groups.google.com/forum/#!searchin/comp.sys.apple2/ultima$20space$20ace/comp.sys.apple2/rEwRhM5hsHI/Z7knStMvSvUJ" />
  <row Id="681" PostHistoryTypeId="5" PostId="251" RevisionGUID="c4e1af10-80f7-4f1f-a981-2e48cf04b7c6" CreationDate="2016-04-23T22:27:14.410" UserId="12" Comment="Small grammar tweaks" Text="I remember that a LOT of games for my MSX (I live in Brazil) don't work without some modification. For example, several need some kind of tweak on the loader, like `poke -1,0`. &#xD;&#xA;&#xD;&#xA;I would like to know what are the causes that make those adjustments necessary: Some kind of hardware spec that don't follow the guidelines, or lack of knowledge on those guidelines by developers, or something else?  " />
  <row Id="682" PostHistoryTypeId="24" PostId="251" RevisionGUID="c4e1af10-80f7-4f1f-a981-2e48cf04b7c6" CreationDate="2016-04-23T22:27:14.410" Comment="Proposed by 12 approved by 37, 105 edit id of 86" />
  <row Id="683" PostHistoryTypeId="6" PostId="113" RevisionGUID="dd7b16e5-d518-4873-b9ec-2fe6808ee8ff" CreationDate="2016-04-23T22:27:32.113" UserId="92" Comment="Replace tag workbench1.3 by amiga-workbench-1.3 as discussed here: http://meta.retrocomputing.stackexchange.com/a/58/92" Text="&lt;amiga&gt;&lt;amigashell&gt;&lt;amiga-500&gt;&lt;amiga-workbench-1.3&gt;" />
  <row Id="684" PostHistoryTypeId="24" PostId="113" RevisionGUID="dd7b16e5-d518-4873-b9ec-2fe6808ee8ff" CreationDate="2016-04-23T22:27:32.113" Comment="Proposed by 92 approved by 37, 105 edit id of 85" />
  <row Id="685" PostHistoryTypeId="5" PostId="249" RevisionGUID="8669c919-9404-4293-9d03-048bdfd9405d" CreationDate="2016-04-23T22:27:50.380" UserId="12" Comment="Put the question in the body of the text." Text="What information is encoded in Amiga's 22-digit barcodes?&#xD;&#xA;&#xD;&#xA;For example: 0103791363642010121234" />
  <row Id="686" PostHistoryTypeId="24" PostId="249" RevisionGUID="8669c919-9404-4293-9d03-048bdfd9405d" CreationDate="2016-04-23T22:27:50.380" Comment="Proposed by 12 approved by 37, 105 edit id of 87" />
  <row Id="688" PostHistoryTypeId="2" PostId="255" RevisionGUID="03062d27-b921-40da-9f2a-48a861e5ccdc" CreationDate="2016-04-24T00:32:39.630" UserId="37" Text="Seemingly there is an [entire page][1] dedicated to this (by the MSX wiki).&#xD;&#xA;&#xD;&#xA;Most of the time, programmers programmed code like how they usually did with the Commodore 64 and ZX-Spectrum and completely ignored the standards made by MSX computers at the time due to the brand new concept of &quot;home computer standard&quot;:&#xD;&#xA;&#xD;&#xA;&gt; The main reason why we see compatibility problems is that companies that produced software and games tried to program the MSX the way they were used to on ZX-spectrum, C64, and other platforms of that time. The whole concept of &quot;Home computer standard&quot; was a new thing to game coders, so they usually completely ignored the MSX standard definitions because on specific parts of the world there were only a few different MSX1 machines for sale. If the game worked on those few machines then they tough it was fine. It might have been that they were not even aware of MSX2, disk drive etc... or those kind of things just sounded like &quot;not interesting abnormal peculiarity in business means&quot;&#xD;&#xA;&#xD;&#xA;There are lots of reasons why incompatibility finds its way(s) into MSX computers: the RAM was would be present on a given spot, directly accessing I/O ports, bugs with subslot handling, ignoring MSX-DOS or MSX-Disk BIOS coding guidelines and assuming that only MSX-DOS1 would ever be possible, etc:&#xD;&#xA;&#xD;&#xA;&gt; - The programmers assumed that the RAM would be present on a given slot, and hardcoded it into the program&#xD;&#xA;- Bugs on subslot handling: the game doesn't support subslots or has a bug for subslots on a specific slot. This also applies to believing that some resources couldn't ever be present on a specific slot (ram on slot 0-x, for example).&#xD;&#xA;- Directly accessing I/O ports, as this isn't allowed by the standard, or by doing hardcoded VDP I/O access. This causes problem on upgrades or allowed hardware variations, like the MSX2 upgrade cartridges. It also causes the program to fail to use alternate implementations of a given extension, like the RS-232 or the MSX-Music. It's a known troublemaker for games that do direct I/O on the MemoryMapper ports, making them incompatible with MSX-DOS2. On some machines, it's known to cause problems with certain joysticks.&#xD;&#xA;- Directly jumping into the BIOS routines, instead of using the default jump-table interface.&#xD;&#xA;- Incorrect CALLs for the SubROM on MSX&gt;=2 machines. It's difficult to call the SubROM from DOS, and programmers tried unofficial tricks that cause problems on many machines.&#xD;&#xA;- Assumption that the CPU would ever have 3.57MHz. This causes problems on turbo machines, which run such games too fast.&#xD;&#xA;- Assumption that the amount of free memory on BASIC would always be a given amount (like 28815 or 24972 bytes). But floppy-equipped models had less free RAM. This is often solved by holding [CTRL] key pressed while booting the MSX. That way only 1 drive is initialized, which frees up some memory. If that is not enough (like the case with many cassette games) the whole disk drive needs to be disabled. This can be done by holding [SHIFT] key pressed while booting the MSX.&#xD;&#xA;- Ignoring MSX-DOS or MSX-Disk BIOS coding guidelines and assuming that only MSX-DOS1 would ever be possible. This causes many programs to freeze when run on MSX-DOS2&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;   [1]:https://www.msx.org/wiki/MSX_compatibility_problems" />
  <row Id="689" PostHistoryTypeId="2" PostId="256" RevisionGUID="1160df07-11da-4513-90ca-9853eef2836c" CreationDate="2016-04-24T01:55:15.100" UserId="37" Text="The Amiga computers such as the Amiga 1000 required a [Kickstart floppy][1] to be able to boot directly into a hard drive. I have a Amiga 1000 as well but missing the Kickstart floppy. I would like to access the hard drive for my personal use with the floppy without damaging any of the internals of the Amiga 1000.&#xD;&#xA;&#xD;&#xA;How can I safely and effectively boot directly to the hard drive with an Amiga 1000 without the necessary Kickstart floppy?&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;   [1]:https://en.wikipedia.org/wiki/Kickstart_(Amiga)" />
  <row Id="690" PostHistoryTypeId="1" PostId="256" RevisionGUID="1160df07-11da-4513-90ca-9853eef2836c" CreationDate="2016-04-24T01:55:15.100" UserId="37" Text="Booting an Amiga 1000 directly to the hard drive without Kickstart floppy" />
  <row Id="691" PostHistoryTypeId="3" PostId="256" RevisionGUID="1160df07-11da-4513-90ca-9853eef2836c" CreationDate="2016-04-24T01:55:15.100" UserId="37" Text="&lt;amiga&gt;" />
  <row Id="692" PostHistoryTypeId="2" PostId="257" RevisionGUID="0580ed1a-bdec-4c8c-85a0-d19da7e5bb5f" CreationDate="2016-04-24T02:01:01.433" UserId="37" Text="My friend has a Atari 800XL in mint condition. When the device was turned on, the only thing that appeared was a dark red screen. Another friend of mine figured that the memory chips were to blame, and he was nearly right: the memory chips were smoking hot. The memory chips were replaced with more advanced ones (Atari compatible of course) but the screen is still there?&#xD;&#xA;&#xD;&#xA;What can I do to determine and fix the cause of the red screen (you could consider it the blue screen of death...)?" />
  <row Id="693" PostHistoryTypeId="1" PostId="257" RevisionGUID="0580ed1a-bdec-4c8c-85a0-d19da7e5bb5f" CreationDate="2016-04-24T02:01:01.433" UserId="37" Text="Atari 800XL showing a red screen" />
  <row Id="694" PostHistoryTypeId="3" PostId="257" RevisionGUID="0580ed1a-bdec-4c8c-85a0-d19da7e5bb5f" CreationDate="2016-04-24T02:01:01.433" UserId="37" Text="&lt;atari&gt;" />
  <row Id="695" PostHistoryTypeId="2" PostId="258" RevisionGUID="92cfd072-beb3-4260-aed1-5905f9bbc3d4" CreationDate="2016-04-24T03:33:44.250" UserId="75" Text="You need a Kickstart ROM adapter to eliminate the need for the Kickstart disk. There are a number of such adapters out there such as [this one][1] that's currently in production.&#xD;&#xA;&#xD;&#xA;And to boot to a hard drive, you will need a Kickstart 1.3 (or greater) [ROM][2] (I think the linked one will work).&#xD;&#xA;&#xD;&#xA;Then you can boot to a SCSI hard drive.&#xD;&#xA;&#xD;&#xA;I should also mention the [ACA500][3] accelerator which includes Kickstart 1.3 and 3.1 and two CompactFlash slots which replace a hard drive. [Here][4] is a video showing it connected to the Amiga 1000, with another accelerator plugged into it.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.amibay.com/showthread.php?59904-Automatic-Kickstart-Switcher-for-Amiga-1000-PERFECT-WORKING&#xD;&#xA;  [2]: http://amigakit.leamancomputing.com/catalog/product_info.php?products_id=672&#xD;&#xA;  [3]: http://wiki.icomp.de/wiki/ACA500&#xD;&#xA;  [4]: https://www.youtube.com/watch?v=vbeRvkjs1og" />
  <row Id="696" PostHistoryTypeId="5" PostId="258" RevisionGUID="6cc702d1-a4f2-47ac-8b7a-e1efac000c41" CreationDate="2016-04-24T03:46:32.537" UserId="75" Comment="&quot;no Kickstart adapter necessary&quot; for ACA500" Text="You need a Kickstart ROM adapter to eliminate the need for the Kickstart disk. There are a number of such adapters out there such as [this one][1] that's currently in production.&#xD;&#xA;&#xD;&#xA;And to boot to a hard drive, you will need a Kickstart 1.3 (or greater) [ROM][2] (I think the linked one will work).&#xD;&#xA;&#xD;&#xA;Then you can boot to a SCSI hard drive.&#xD;&#xA;&#xD;&#xA;I should also mention the [ACA500][3] accelerator which includes Kickstart 1.3 and 3.1 (no Kickstart adapter necessary) and two CompactFlash slots which replace a hard drive. [Here][4] is a video showing it connected to the Amiga 1000, with another accelerator plugged into it.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.amibay.com/showthread.php?59904-Automatic-Kickstart-Switcher-for-Amiga-1000-PERFECT-WORKING&#xD;&#xA;  [2]: http://amigakit.leamancomputing.com/catalog/product_info.php?products_id=672&#xD;&#xA;  [3]: http://wiki.icomp.de/wiki/ACA500&#xD;&#xA;  [4]: https://www.youtube.com/watch?v=vbeRvkjs1og" />
  <row Id="697" PostHistoryTypeId="5" PostId="237" RevisionGUID="2eb03438-8ae6-4ea7-9cb4-41cc9579978f" CreationDate="2016-04-24T13:01:36.830" UserId="202" Comment="Fixed minor typos" Text="During a recent move I lost the monitor for my Amstrad CPC464. &#xD;&#xA;&#xD;&#xA;Is it possible to adapt the output of this to work on a modern monitor or on television set?" />
  <row Id="698" PostHistoryTypeId="4" PostId="237" RevisionGUID="2eb03438-8ae6-4ea7-9cb4-41cc9579978f" CreationDate="2016-04-24T13:01:36.830" UserId="202" Comment="Fixed minor typos" Text="Is it possible to use an Amstrad CPC464 with a modern monitor or TV" />
  <row Id="699" PostHistoryTypeId="24" PostId="237" RevisionGUID="2eb03438-8ae6-4ea7-9cb4-41cc9579978f" CreationDate="2016-04-24T13:01:36.830" Comment="Proposed by 202 approved by 37, 105 edit id of 88" />
  <row Id="700" PostHistoryTypeId="2" PostId="259" RevisionGUID="36741d51-cd3c-4a7c-bd84-6050d3fa64cf" CreationDate="2016-04-24T13:14:14.350" UserId="141" Text="The Amiga computers would by default automatically detect a disk being inserted and respond by reading from it and displaying its icon.&#xD;&#xA;Polling the drive(s) for a new disk would produce a clicking sound every 1-2s.&#xD;&#xA;&#xD;&#xA;If one had more than one drive or used the computer hard drive only with no disk(s) inserted, the drive checking sound would keep going.&#xD;&#xA;&#xD;&#xA;Patches existed to stop this without loss of the auto-detection of inserted disks - how did these work?" />
  <row Id="701" PostHistoryTypeId="1" PostId="259" RevisionGUID="36741d51-cd3c-4a7c-bd84-6050d3fa64cf" CreationDate="2016-04-24T13:14:14.350" UserId="141" Text="How did programs/patches stopping Amiga idle floppy drive noise work?" />
  <row Id="702" PostHistoryTypeId="3" PostId="259" RevisionGUID="36741d51-cd3c-4a7c-bd84-6050d3fa64cf" CreationDate="2016-04-24T13:14:14.350" UserId="141" Text="&lt;amiga&gt;&lt;disk-drive&gt;" />
  <row Id="703" PostHistoryTypeId="2" PostId="260" RevisionGUID="0bcf7310-92de-4ccc-b7f9-8efe11f1659b" CreationDate="2016-04-24T13:14:14.350" UserId="141" Text="The sound came from the fact that drives would only report on the presence of a disk if the heads were moved. Thus by default, the OS would move the heads back and forth.&#xD;&#xA;&#xD;&#xA;Alternatively, the heads could be moved fully to one side and then asked to step further to that side (by default the heads would be centered to minimise seek time or read the central rootblock immediately).&#xD;&#xA;&#xD;&#xA;Most drives would then refuse to move the heads, but report on disk presence anyway. (Some older drives would not, therefore if a noise was still heard after trying the patch, it was time to reboot and not try again!)" />
  <row Id="704" PostHistoryTypeId="5" PostId="257" RevisionGUID="74763185-db27-47dc-bbac-b48a14d20690" CreationDate="2016-04-24T13:20:43.230" UserId="37" Comment="edited body" Text="My friend has a Atari 800XL in mint condition. When the device was turned on, the only thing that appeared was a dark red screen. Another friend of mine figured that the memory chips were to blame, and he was nearly right: the memory chips were smoking hot. The memory chips were replaced with more advanced ones (Atari compatible of course) but the screen is still there.&#xD;&#xA;&#xD;&#xA;What can I do to determine and fix the cause of the red screen (you could consider it the blue screen of death...)?" />
  <row Id="705" PostHistoryTypeId="2" PostId="261" RevisionGUID="989a3a2d-82b2-4c00-91de-e8c921d63f95" CreationDate="2016-04-24T13:49:04.020" UserId="-1" Text="" />
  <row Id="706" PostHistoryTypeId="2" PostId="262" RevisionGUID="a63e830a-c547-447e-870d-8e0c5f7c81d3" CreationDate="2016-04-24T13:49:04.020" UserId="-1" Text="" />
  <row Id="707" PostHistoryTypeId="10" PostId="253" RevisionGUID="4bc81e9e-f2ff-47d7-9f71-6e980b1878ad" CreationDate="2016-04-24T13:57:50.673" UserId="-1" Comment="102" Text="{&quot;Voters&quot;:[{&quot;Id&quot;:4,&quot;DisplayName&quot;:&quot;Mark&quot;},{&quot;Id&quot;:92,&quot;DisplayName&quot;:&quot;blubberdiblub&quot;},{&quot;Id&quot;:202,&quot;DisplayName&quot;:&quot;Greenonline&quot;},{&quot;Id&quot;:37,&quot;DisplayName&quot;:&quot;PythonMaster&quot;},{&quot;Id&quot;:141,&quot;DisplayName&quot;:&quot;nsandersen&quot;}]}" />
  <row Id="708" PostHistoryTypeId="2" PostId="263" RevisionGUID="1e9b4308-c207-42a2-a008-0f978e55202d" CreationDate="2016-04-24T19:52:04.097" UserId="74" Text="...or for that matter, what didn't it do, so that you'd use the &quot;bootloader/main program&quot; separation instead of loading everything at once.&#xD;&#xA;&#xD;&#xA;Normally, when loading games or any non-BASIC software from tapes, you'd start the computer holding START+OPTION - it disabled BASIC ROM and started it in 'boot' mode. A characteristic deep beep sounded, you'd press 'play' on the cassette recorder, then Return on the keyboard. Some 8-10 seconds of high-pitched constant lead-in, then six (very rarely any other number) records of data from the tape, another deep beep, and another lead-in. At that point often the screen would change, to show some countdown, ads, welcome, or whatever extras the bootloader contained. The game proper would begin loading, and start when it finished loading.&#xD;&#xA;&#xD;&#xA;I never understood the waste: obviously the bootloader was a program, and often quite fancy one. Why couldn't the whole game be implemented as a bootloader? Why waste time on the two start-up procedures, two lead-ins, and a piece of software that was usually overwritten by the game when it finished loading? What were the shortcomings/restrictions of the bootloader so that it was universally implemented in such a minimal form, instead of just being the full application/game?&#xD;&#xA;" />
  <row Id="709" PostHistoryTypeId="1" PostId="263" RevisionGUID="1e9b4308-c207-42a2-a008-0f978e55202d" CreationDate="2016-04-24T19:52:04.097" UserId="74" Text="What did the bootloader in Atari do?" />
  <row Id="710" PostHistoryTypeId="3" PostId="263" RevisionGUID="1e9b4308-c207-42a2-a008-0f978e55202d" CreationDate="2016-04-24T19:52:04.097" UserId="74" Text="&lt;atari&gt;&lt;boot&gt;" />
  <row Id="713" PostHistoryTypeId="5" PostId="255" RevisionGUID="5c16bb18-ab23-4077-9e8e-df9b37f0ec79" CreationDate="2016-04-24T22:15:42.443" UserId="133" Comment="Fixed minor typo." Text="Seemingly there is an [entire page][1] dedicated to this (by the MSX wiki).&#xD;&#xA;&#xD;&#xA;Most of the time, programmers programmed code like how they usually did with the Commodore 64 and ZX-Spectrum and completely ignored the standards made by MSX computers at the time due to the brand new concept of &quot;home computer standard&quot;:&#xD;&#xA;&#xD;&#xA;&gt; The main reason why we see compatibility problems is that companies that produced software and games tried to program the MSX the way they were used to on ZX-spectrum, C64, and other platforms of that time. The whole concept of &quot;Home computer standard&quot; was a new thing to game coders, so they usually completely ignored the MSX standard definitions because on specific parts of the world there were only a few different MSX1 machines for sale. If the game worked on those few machines then they tough it was fine. It might have been that they were not even aware of MSX2, disk drive etc... or those kind of things just sounded like &quot;not interesting abnormal peculiarity in business means&quot;&#xD;&#xA;&#xD;&#xA;There are lots of reasons why incompatibility finds its way(s) into MSX computers: assuming RAM would be present at a given slot, directly accessing I/O ports, bugs with subslot handling, ignoring MSX-DOS or MSX-Disk BIOS coding guidelines and assuming that only MSX-DOS1 would ever be possible, etc:&#xD;&#xA;&#xD;&#xA;&gt; - The programmers assumed that the RAM would be present on a given slot, and hardcoded it into the program&#xD;&#xA;- Bugs on subslot handling: the game doesn't support subslots or has a bug for subslots on a specific slot. This also applies to believing that some resources couldn't ever be present on a specific slot (ram on slot 0-x, for example).&#xD;&#xA;- Directly accessing I/O ports, as this isn't allowed by the standard, or by doing hardcoded VDP I/O access. This causes problem on upgrades or allowed hardware variations, like the MSX2 upgrade cartridges. It also causes the program to fail to use alternate implementations of a given extension, like the RS-232 or the MSX-Music. It's a known troublemaker for games that do direct I/O on the MemoryMapper ports, making them incompatible with MSX-DOS2. On some machines, it's known to cause problems with certain joysticks.&#xD;&#xA;- Directly jumping into the BIOS routines, instead of using the default jump-table interface.&#xD;&#xA;- Incorrect CALLs for the SubROM on MSX&gt;=2 machines. It's difficult to call the SubROM from DOS, and programmers tried unofficial tricks that cause problems on many machines.&#xD;&#xA;- Assumption that the CPU would ever have 3.57MHz. This causes problems on turbo machines, which run such games too fast.&#xD;&#xA;- Assumption that the amount of free memory on BASIC would always be a given amount (like 28815 or 24972 bytes). But floppy-equipped models had less free RAM. This is often solved by holding [CTRL] key pressed while booting the MSX. That way only 1 drive is initialized, which frees up some memory. If that is not enough (like the case with many cassette games) the whole disk drive needs to be disabled. This can be done by holding [SHIFT] key pressed while booting the MSX.&#xD;&#xA;- Ignoring MSX-DOS or MSX-Disk BIOS coding guidelines and assuming that only MSX-DOS1 would ever be possible. This causes many programs to freeze when run on MSX-DOS2&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;   [1]:https://www.msx.org/wiki/MSX_compatibility_problems" />
  <row Id="714" PostHistoryTypeId="24" PostId="255" RevisionGUID="5c16bb18-ab23-4077-9e8e-df9b37f0ec79" CreationDate="2016-04-24T22:15:42.443" Comment="Proposed by 133 approved by 4, 105 edit id of 91" />
  <row Id="715" PostHistoryTypeId="2" PostId="265" RevisionGUID="46588be6-1831-4c98-b52d-df0e3f58e70d" CreationDate="2016-04-24T23:54:18.363" UserId="107" Text="Super hot chips are usually dead chips. That said, with the Atari one common culprit is a bad power supply — certain models are known to go bad in a way that results in excessive voltage at the socket, which can easily fry multiple ICs on the motherboard.&#xD;&#xA;&#xD;&#xA;So first step would be to verify the power supply is good (preferably by not connecting it to another machine!) Use a multimeter to check for steady 5V on the relevant pins. Note this diagram is viewing the socket, i.e. the *back* of the plug.&#xD;&#xA;&#xD;&#xA;  [![Atari 8-bit pinout, viewing from the back of the plug, or looking at the socket][1]][1]&#xD;&#xA;&#xD;&#xA;If the power supply is dead you can actually power these things from a USB wall wart if you put a cable together, I've even run one off the TV it was connected to!&#xD;&#xA;&#xD;&#xA;Once that's been verified as good you you need to work out what else might be wrong. An oscilloscope/logic analyser is one way to do it, but far easier (especially if it's a socketed machine) is to swap ICs with a known good machine.&#xD;&#xA;&#xD;&#xA;I had a machine that only showed dark red, and although this commonly seems to be the RAM or the GTIA, for me it just needed a replacement CPU which I managed to source easily enough online. Good luck!&#xD;&#xA;  [1]: http://i.stack.imgur.com/y53Xv.gif" />
  <row Id="719" PostHistoryTypeId="5" PostId="263" RevisionGUID="0a841ec7-c837-4764-9e0c-3890a1645e98" CreationDate="2016-04-25T08:17:27.107" UserId="74" Comment="added 276 characters in body" Text="...or for that matter, what didn't it do, so that you'd use the &quot;bootloader/main program&quot; separation instead of loading everything at once.&#xD;&#xA;&#xD;&#xA;Normally, when loading games or any non-BASIC software from tapes, you'd start the computer holding START+OPTION - it disabled BASIC ROM and started it in 'boot' mode. A characteristic deep beep sounded, you'd press 'play' on the cassette recorder, then Return on the keyboard. Some 8-10 seconds of high-pitched constant lead-in, then six (very rarely any other number) records of data from the tape, another deep beep, and another lead-in. At that point often the screen would change, to show some countdown, ads, welcome, or whatever extras the bootloader contained. The game proper would begin loading, and start when it finished loading.&#xD;&#xA;&#xD;&#xA;I never understood the waste: obviously the bootloader was a program, and often quite fancy one. Why couldn't the whole game be implemented as a bootloader? Why waste time on the two start-up procedures, two lead-ins, and a piece of software that was usually overwritten by the game when it finished loading? What were the shortcomings/restrictions of the bootloader so that it was universally implemented in such a minimal form, instead of just being the full application/game?&#xD;&#xA;&#xD;&#xA;EDIT:&#xD;&#xA;Just to clarify:&#xD;&#xA;&#xD;&#xA; - about the most common, generic bootloader didn't print anything or affect the screen in any way.&#xD;&#xA; - you couldn't just fast forward past the bootloader and start from the game proper. It wouldn't load, generating a 'BOOT ERROR' message instead." />
  <row Id="721" PostHistoryTypeId="2" PostId="267" RevisionGUID="4f90574a-c4fe-4a7c-8a37-c86f53dfb063" CreationDate="2016-04-25T08:31:47.250" UserId="79" Text="The three commands correspond to three different storage formats.&#xD;&#xA;&#xD;&#xA;* `CSAVE` drives the cassette recorder directly, and stores tokenized files using short inter-record gaps. This is the fastest mode (both when writing and reading) since it uses a compact representation and doesn't need to wait for the tape.&#xD;&#xA;* `SAVE &quot;C:&quot;` uses the cassette tape driver, and stores tokenized files in the standard tape format with long inter-record gaps.&#xD;&#xA;* `LIST &quot;C:&quot;` again uses the cassette tape driver, but it stores text files containing the BASIC listing in ATASCII. This is the slowest mode since it uses a verbose representation.&#xD;&#xA;&#xD;&#xA;`LIST &quot;C:&quot;` provides the best compatibility, since any program which can read text files can load the listing. It also avoids the [Rev. B BASIC bug][1] which causes programs to grow by 16 bytes every time they're loaded.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.atarimagazines.com/compute/issue61/323_1_INSIGHT_Atari.php" />
  <row Id="723" PostHistoryTypeId="2" PostId="268" RevisionGUID="a0c26d1f-a178-4c0c-9f67-8fb22fe5a5c9" CreationDate="2016-04-25T08:43:22.540" UserId="79" Text="[De Re Atari][1] describes the cassette boot protocol, which helps understand why bootloaders were (nearly) always used. In cassette boot mode, the operating system reads a record from the tape recorder and loads the following information:&#xD;&#xA;&#xD;&#xA;* byte 2 gives the number of records to load (up to 256 records, each containing 128 bytes, so 32 KB in theory)&#xD;&#xA;* bytes 3 and 4 give the address at which the tape must be loaded&#xD;&#xA;* bytes 5 and 6 give the address of the initialisation routine which must be called once the given number of records have been loaded and the first-stage initialisation has completed&#xD;&#xA;* the remaining bytes contain code which is called (`JSR`) once the given number of records have been loaded&#xD;&#xA;&#xD;&#xA;The operating system expects the code called at this point to return success or failure; if it indicates success, the initialisation routine pointed to by bytes 5 and 6 is called (`JSR` again), and when that returns, control is transferred to `DOSVEC` using a plain `JMP`, so `DOSVEC` must be set up too. Once the tape had been loaded, &lt;kbd&gt;RESET&lt;/kbd&gt; restarts the second-stage initialisation.&#xD;&#xA;&#xD;&#xA;So the cassette boot protocol expects a three-stage boot in any case. Since the cassette boot loads the tape linearly, it makes sense to use a tape-specific boot loader: the vast majority of programs would have a non-linear memory layout, so dumping all of memory to tape would just result in even longer load times than strictly necessary. Having a boot program allows various records to be loaded from tape into the appropriate location, and it allows &lt;kbd&gt;RESET&lt;/kbd&gt; to be handled without reloading everything from tape. Obviously for anything larger than 32 KB it's required anyway...&#xD;&#xA;&#xD;&#xA;  [1]: http://www.atariarchives.org/dere/chaptC.php" />
  <row Id="725" PostHistoryTypeId="2" PostId="269" RevisionGUID="a8bcbf9d-a8d1-477a-90ea-508833ea53d2" CreationDate="2016-04-25T09:31:44.043" UserId="105" Text="Some time ago, I benchmarked some 8-bit computers to find out the fastest BASIC interpreter. I ended up using the classic SAXPY benchmark, as I didn't want any I/O overhead to fool the measurement: printing on screen is slower for machines that doesn't have a real text mode and always operate in bitmap mode and it doesn't have to do with the BASIC interpreter itself. On the other hand, aritmetic routines play an important part in any BASIC program, so the benchmark does precisely that.&#xD;&#xA;&#xD;&#xA;I'd like to add some other machines to this list: namely, Atari XL machines and Oric Atmos, but I don't know how to measure time in frames (or equivalent resolution). For other computers, as you can see, the TIME or TIMER function is usually present in most BASIC dialects. For the Spectrum and the SAM Coupé, I already knew about the FRAMES system variable to count frames.&#xD;&#xA;&#xD;&#xA;Anyway, here is the current listing. NOTE: (&quot;Tiempo en segundos&quot; is the spanish for &quot;Time in seconds&quot;). &#xD;&#xA;&#xD;&#xA;The title says &quot;Results of SAXPY benchmark applied to 80's classic computers&quot;.&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/oQNRO.png" />
  <row Id="726" PostHistoryTypeId="1" PostId="269" RevisionGUID="a8bcbf9d-a8d1-477a-90ea-508833ea53d2" CreationDate="2016-04-25T09:31:44.043" UserId="105" Text="How can you measure time using BASIC on Atari XL and Oric Atmos computers?" />
  <row Id="727" PostHistoryTypeId="3" PostId="269" RevisionGUID="a8bcbf9d-a8d1-477a-90ea-508833ea53d2" CreationDate="2016-04-25T09:31:44.043" UserId="105" Text="&lt;atari-basic&gt;&lt;oric-atmos&gt;&lt;benchmarking&gt;" />
  <row Id="728" PostHistoryTypeId="2" PostId="270" RevisionGUID="3b1f158b-1652-4cc3-979f-2e941188c78e" CreationDate="2016-04-25T10:24:31.253" UserId="79" Text="On the Atari 8-bit machines, you'd use the real-time clock memory locations starting at offset 18; these are updated during every vertical blank:&#xD;&#xA;&#xD;&#xA;    TIME = INT((PEEK(18) * 65536 + PEEK(19) * 256 + PEEK(20))/60)&#xD;&#xA;&#xD;&#xA;(on an NTSC system; divide by 50 for PAL).&#xD;&#xA;&#xD;&#xA;To measure your own time interval, the safest approach is to `POKE` all three values to 0 at the start of whatever you wish to measure.&#xD;&#xA;&#xD;&#xA;See [Mapping the Atari][1] for more details and &quot;links&quot; to example programs.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.atariarchives.org/mapping/memorymap.php" />
  <row Id="731" PostHistoryTypeId="5" PostId="263" RevisionGUID="11ad2838-6f82-42ad-9659-edca930f40ee" CreationDate="2016-04-25T11:53:20.023" UserId="-1" Comment="Add a formatting" Text="...or for that matter, what didn't it do, so that you'd use the &quot;bootloader/main program&quot; separation instead of loading everything at once.&#xD;&#xA;&#xD;&#xA;Normally, when loading games or any non-BASIC software from tapes, you'd start the computer holding &lt;kbd&gt;START+OPTION&lt;/kbd&gt; - it disabled BASIC ROM and started it in 'boot' mode. A characteristic deep beep sounded, you'd press 'play' on the cassette recorder, then Return on the keyboard. Some 8-10 seconds of high-pitched constant lead-in, then six (very rarely any other number) records of data from the tape, another deep beep, and another lead-in. At that point often the screen would change, to show some countdown, ads, welcome, or whatever extras the bootloader contained. The game proper would begin loading, and start when it finished loading.&#xD;&#xA;&#xD;&#xA;I never understood the waste: obviously the bootloader was a program, and often quite fancy one. Why couldn't the whole game be implemented as a bootloader? Why waste time on the two start-up procedures, two lead-ins, and a piece of software that was usually overwritten by the game when it finished loading? What were the shortcomings/restrictions of the bootloader so that it was universally implemented in such a minimal form, instead of just being the full application/game?&#xD;&#xA;&#xD;&#xA;EDIT:&#xD;&#xA;Just to clarify:&#xD;&#xA;&#xD;&#xA; - about the most common, generic bootloader didn't print anything or affect the screen in any way.&#xD;&#xA; - you couldn't just fast forward past the bootloader and start from the game proper. It wouldn't load, generating a 'BOOT ERROR' message instead." />
  <row Id="732" PostHistoryTypeId="24" PostId="263" RevisionGUID="11ad2838-6f82-42ad-9659-edca930f40ee" CreationDate="2016-04-25T11:53:20.023" Comment="Proposed by 31.13.144.37|984646f5-31ca-4e3c-92dc-0c7363622c97 approved by -1 edit id of 92" />
  <row Id="733" PostHistoryTypeId="5" PostId="263" RevisionGUID="c098c80f-7d3b-4bd0-8336-e59d347c08c5" CreationDate="2016-04-25T11:53:20.023" UserId="74" Comment="Add a formatting" Text="...or for that matter, what didn't it do, so that you'd use the &quot;bootloader/main program&quot; separation instead of loading everything at once.&#xD;&#xA;&#xD;&#xA;Normally, when loading games or any non-BASIC software from tapes, you'd start the computer holding &lt;kbd&gt;START&lt;/kbd&gt;+&lt;kbd&gt;OPTION&lt;/kbd&gt; - it disabled BASIC ROM and started it in 'boot' mode. A characteristic deep beep sounded, you'd press 'play' on the cassette recorder, then Return on the keyboard. Some 8-10 seconds of high-pitched constant lead-in, then six (very rarely any other number) records of data from the tape, another deep beep, and another lead-in. At that point often the screen would change, to show some countdown, ads, welcome, or whatever extras the bootloader contained. The game proper would begin loading, and start when it finished loading.&#xD;&#xA;&#xD;&#xA;I never understood the waste: obviously the bootloader was a program, and often quite fancy one. Why couldn't the whole game be implemented as a bootloader? Why waste time on the two start-up procedures, two lead-ins, and a piece of software that was usually overwritten by the game when it finished loading? What were the shortcomings/restrictions of the bootloader so that it was universally implemented in such a minimal form, instead of just being the full application/game?&#xD;&#xA;&#xD;&#xA;EDIT:&#xD;&#xA;Just to clarify:&#xD;&#xA;&#xD;&#xA; - about the most common, generic bootloader didn't print anything or affect the screen in any way.&#xD;&#xA; - you couldn't just fast forward past the bootloader and start from the game proper. It wouldn't load, generating a 'BOOT ERROR' message instead." />
  <row Id="736" PostHistoryTypeId="5" PostId="269" RevisionGUID="6d37b3b3-34ae-40b0-b6da-dcfe0cfd9632" CreationDate="2016-04-25T12:18:04.177" UserId="105" Comment="added 397 characters in body; edited title" Text="Some time ago, I benchmarked some 8-bit computers to find out the fastest BASIC interpreter. I ended up using the classic SAXPY benchmark, as I didn't want any I/O overhead to fool the measurement: printing on screen is slower for machines that doesn't have a real text mode and always operate in bitmap mode and it doesn't have to do with the BASIC interpreter itself. On the other hand, aritmetic routines play an important part in any BASIC program, so the benchmark does precisely that.&#xD;&#xA;&#xD;&#xA;I'd like to add some other machines to this list, so I need to know how to measure time in frames (or equivalent resolution). For other computers, as you can see, the TIME or TIMER function is usually present in most BASIC dialects. For the Spectrum and the SAM Coupé, I already knew about the FRAMES system variable to count frames, but for others, I have to dig into technical documentation, which is not always available or easy to find/read.&#xD;&#xA;&#xD;&#xA;Here is the current listing. NOTE: (&quot;Tiempo en segundos&quot; is the spanish for &quot;Time in seconds&quot;). &#xD;&#xA;&#xD;&#xA;The title says &quot;Results of SAXPY benchmark applied to 80's classic computers&quot;.&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;UPDATE: thanks to Stephen Kitt answer, I can finally place the Atari XL, and it happens to be between the SAM Coupé and the ZX Spectrum.&#xD;&#xA;&#xD;&#xA;As Stephen suggests, I will ask separate questions for finding out how to measure time for other micros.&#xD;&#xA;&#xD;&#xA;[![enter image description here][2]][2]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/oQNRO.png&#xD;&#xA;  [2]: http://i.stack.imgur.com/cC1Iy.png" />
  <row Id="737" PostHistoryTypeId="4" PostId="269" RevisionGUID="6d37b3b3-34ae-40b0-b6da-dcfe0cfd9632" CreationDate="2016-04-25T12:18:04.177" UserId="105" Comment="added 397 characters in body; edited title" Text="How can you measure time using BASIC on Atari XL computers?" />
  <row Id="738" PostHistoryTypeId="2" PostId="271" RevisionGUID="7eb536b5-318c-462c-a557-1e0247d9aa15" CreationDate="2016-04-25T12:23:28.830" UserId="74" Text="*Personal Paint* was a gfx program for Amiga that introduced many novel concepts, some quite ingenious, some... controversial. Among all, it had a &quot;crash protection&quot; feature, that was meant to enable you to rescue your work in case of some bad crashes. The feature was activated by a very unorthodox key sequence: &lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;Eject&lt;/kbd&gt;. You had to have a floppy in the drive to be ejected to trigger it.&#xD;&#xA;&#xD;&#xA;I was reading the documentation on it, when it came out, and it mentioned that the 'floppy ejected' is about the only unmaskable interrupt that is accessible to the user; hijacking the handler they could have their rescue routine started even if the system was completely unresponsive.&#xD;&#xA;&#xD;&#xA;That's about the scope of what I remember. I'd like to refresh my memory - what interrupt was that? Was it all snake oil or did it work (at least in theory)? Was this or similar technique used anywhere else?" />
  <row Id="739" PostHistoryTypeId="1" PostId="271" RevisionGUID="7eb536b5-318c-462c-a557-1e0247d9aa15" CreationDate="2016-04-25T12:23:28.830" UserId="74" Text="What was the elusive unmaskable interrupt in Amiga?" />
  <row Id="740" PostHistoryTypeId="3" PostId="271" RevisionGUID="7eb536b5-318c-462c-a557-1e0247d9aa15" CreationDate="2016-04-25T12:23:28.830" UserId="74" Text="&lt;amiga&gt;&lt;software&gt;" />
  <row Id="741" PostHistoryTypeId="2" PostId="272" RevisionGUID="fa3c37ff-3f4b-4817-9917-df8ae55a245f" CreationDate="2016-04-25T13:03:11.767" UserId="128" Text="I would like to know which program can be seen as the first malware.&#xD;&#xA;&#xD;&#xA;To define the term &quot;malware&quot; in this question, I would suggest those criteria, but you may modify them if you feel the need:&#xD;&#xA;&#xD;&#xA;- real program, not just fiction&#xD;&#xA;- written intentionally and not by accident&#xD;&#xA;- able to infect a computer without the user's permission&#xD;&#xA;- running malicious code on the target machine (spying, destroying data or even just printing a joke)&#xD;&#xA;- able to replicate itself and autonomously infect further computers&#xD;&#xA;- managed to escape the environment it was created in and infected foreign devices&#xD;&#xA;&#xD;&#xA;Who wrote this first malware, when, why (if known), for what target computers/operating systems and how exactly did it work?" />
  <row Id="742" PostHistoryTypeId="1" PostId="272" RevisionGUID="fa3c37ff-3f4b-4817-9917-df8ae55a245f" CreationDate="2016-04-25T13:03:11.767" UserId="128" Text="What was the first intentional malware that got spread over multiple machines?" />
  <row Id="743" PostHistoryTypeId="3" PostId="272" RevisionGUID="fa3c37ff-3f4b-4817-9917-df8ae55a245f" CreationDate="2016-04-25T13:03:11.767" UserId="128" Text="&lt;malware&gt;" />
  <row Id="744" PostHistoryTypeId="2" PostId="273" RevisionGUID="af6f651a-b2ee-413c-a767-13a4a430eeb1" CreationDate="2016-04-25T13:34:30.100" UserId="79" Text="The first computer worm is reckoned to be [Creeper][1], which was written by Bob Thomas in 1971 and extended by Ray Tomlinson. It targeted DEC PDP-10 computers running TENEX. It would print &quot;I'm the creeper: catch me if you can&quot; on infected computers. It started off as an [experiment][2] to demonstrate the ability to run software remotely, and move software around to take advantage of lightly-loaded systems; it did this using TENEX's RSEXEC server, and as such relied on the general openness of systems back then rather than exploiting a security hole. There's an interesting [interview of Ray Tomlinson][3] which covers this in a little more detail.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://en.wikipedia.org/wiki/Creeper_%28program%29&#xD;&#xA;  [2]: http://history-computer.com/Internet/Maturing/Thomas.html&#xD;&#xA;  [3]: http://nerdology.org/2014/11/qa-with-ray-tomlinson-on-creeper/" />
  <row Id="745" PostHistoryTypeId="2" PostId="274" RevisionGUID="db641145-c529-41a1-bdaf-faa9a40ee386" CreationDate="2016-04-25T14:40:57.287" UserId="125" Text="One of the first viruses to gain widespread attention was &quot;The Brain.&quot;  Two brothers from Lahore, Pakistan had written a heart monitoring program, and realized it was being copied and distributed illegally.  So in 1986, they released a version of their software (as well as other pirated bootleg titles) that contained &quot;The Brain,&quot; kind of as an experiment.&#xD;&#xA;&#xD;&#xA;Essentially it would copy the boot sector of the floppy (or hard drive) to another part of the disk, and mark is as &quot;bad.&quot;  It would then alter the disk label to &quot;©Brain&quot; and replace the boot sector with a copy of the virus.&#xD;&#xA;&#xD;&#xA;The boot sector also contained the following text:&#xD;&#xA;&#xD;&#xA;    Welcome to the Dungeon (c) 1986 Basie &amp; Amends (pvt) Ltd VIRUS_SHOE RECORD V9.0 Dedicated &#xD;&#xA;    to the dynamic memories of millions of viruses who are no longer with us today - Thanks &#xD;&#xA;    GOODNESS!! BEWARE OF THE er..VIRUS : this program is catching program follows after these&#xD;&#xA;    messages....$#@%$@!!&#xD;&#xA;&#xD;&#xA;And...&#xD;&#xA;&#xD;&#xA;    Welcome to the Dungeon © 1986 Brain &amp; Amjads (pvt). BRAIN COMPUTER SERVICES 730 IZANAMI&#xD;&#xA;    BLOCK ALLAMA IQBAL TOWN LAHORE-PAKISTAN PHONE: 430791,443248,280530.&#xD;&#xA;    Beware of this VIRUS....  Contact us for vaccination...&#xD;&#xA;&#xD;&#xA;In addition to that, &quot;The Brain&quot; also caused hard disks to slow over time, and even led to data loss.  From [Going Viral: How Two Pakistani Brothers Created the First PC Virus][1]:&#xD;&#xA;&#xD;&#xA;&gt; Shortly after the University of Delaware outbreak, Brain began popping up at other universities, and then at newspapers. The New York Times reported that a “rogue computer program” had hit the Providence Journal-Bulletin, though the “damage was limited to one reporter losing several months of work contained on a floppy disk.”&#xD;&#xA;&#xD;&#xA;What's interesting about &quot;The Brain,&quot; was that it didn't infect other computers over the internet.  It relied on users to spread it inadvertently via floppy disks.  From the same article mentioned/quoted above, the brothers were quite shocked at the size of the response:&#xD;&#xA;&#xD;&#xA;&gt; Basit and Amjad began receiving calls from all over the world. They were as surprised as anyone that their little experiment had traveled so far. After all, unlike today’s computer viruses, which spread at lightning speed, Brain had to transmit itself the old-fashioned way—through human carriers toting around 5.25-inch floppy discs.&#xD;&#xA;&#xD;&#xA;And as much as I hate referencing things on Wikipedia, here's a link to the Wikipedia article on &quot;The Brain&quot;: [Brain (computer virus)][2]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://mentalfloss.com/article/12462/going-viral-how-two-pakistani-brothers-created-first-pc-virus&#xD;&#xA;  [2]: https://en.wikipedia.org/wiki/Brain_(computer_virus)" />
  <row Id="746" PostHistoryTypeId="2" PostId="275" RevisionGUID="97836720-a5bb-4911-899c-cb3071827709" CreationDate="2016-04-25T15:02:08.017" UserId="-1" Text="" />
  <row Id="747" PostHistoryTypeId="2" PostId="276" RevisionGUID="c81798e6-fc52-49b4-8dff-383fedfe41ef" CreationDate="2016-04-25T15:02:08.017" UserId="-1" Text="" />
  <row Id="748" PostHistoryTypeId="5" PostId="216" RevisionGUID="383eb735-c7c2-40ab-8bd2-2c1f506af240" CreationDate="2016-04-25T15:38:39.500" UserId="79" Comment="Spelling my name ;-). Also expanding PPC." Text="As Stephen rightly points out in his [comment][1], SheepShaver only emulates PowerPC, and so it is not a valid suggestion for your 68K-based question. From [SheepShaver's home page][2]&#xD;&#xA;&#xD;&#xA;&gt;  However, you still need a copy of MacOS and a PowerMac ROM image to use SheepShaver. &#xD;&#xA;&#xD;&#xA;If you attempt to use a 68K based ROM, with SheepShaver, then you should get the error:&#xD;&#xA;&#xD;&#xA;    Invalid ROM file size. SheepShaver requires a 4MB PCI PowerMac ROM.&#xD;&#xA;&#xD;&#xA;as shown in one of the dialogs in the screenshots below.&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;&#xD;&#xA;[SheepShaver][2] and [BasiliskII][3] both work on Linux and should support your requirements.&#xD;&#xA;&#xD;&#xA;To quote the specifications of each emulator respectively:&#xD;&#xA;&#xD;&#xA;&gt; **Some of SheepShaver's features**&#xD;&#xA;&gt; &#xD;&#xA;&gt;  - Runs MacOS 7.5.2 thru 9.0.4. MacOS X as a guest is not supported.&#xD;&#xA;&gt;  - Color video display&#xD;&#xA;&gt;  - CD quality sound output&#xD;&#xA;&gt;  - Access to floppy disks, CD-ROMs and HFS(+) partitions on hard disks&#xD;&#xA;&gt;  - Easy file exchange with the host OS via a &quot;Host Directory Tree&quot; icon on the Mac desktop&#xD;&#xA;&gt;  - Internet and LAN networking via Ethernet&#xD;&#xA;&gt;  - Serial drivers&#xD;&#xA;&gt;  - SCSI Manager (old-style) emulation&#xD;&#xA;&#xD;&#xA;and&#xD;&#xA;&#xD;&#xA;&gt; **Some features of Basilisk II**&#xD;&#xA;&gt; &#xD;&#xA;&gt;  - Emulates either a Mac Classic (which runs MacOS 0.x thru 7.5) or a Mac II series machine (which runs MacOS 7.x, 8.0 and 8.1), depending&#xD;&#xA;&gt; on the ROM being used&#xD;&#xA;&gt;  - Color video display&#xD;&#xA;&gt;  - CD quality sound output&#xD;&#xA;&gt;  - Floppy disk driver (only 1.44MB disks supported)&#xD;&#xA;&gt;  - Driver for HFS partitions and hardfiles&#xD;&#xA;&gt;  - CD-ROM driver with basic audio functions&#xD;&#xA;&gt;  - Easy file exchange with the host OS via a &quot;Host Directory Tree&quot; icon on the Mac desktop&#xD;&#xA;&gt;  - Ethernet driver&#xD;&#xA;&gt;  - Serial drivers&#xD;&#xA;&gt;  - SCSI Manager (old-style) emulation&#xD;&#xA;&gt;  - Emulates extended ADB keyboard and 3-button mouse&#xD;&#xA;&gt;  - Uses UAE 68k emulation or (under AmigaOS and NetBSD/m68k) real 68k processor&#xD;&#xA;&#xD;&#xA;I actually answered [Quadra 650 emulation related question][4], although it *was* for Windows, on SuperUser, and have just spent the last hour trying to find/recover it, after the OP who asked the question has subsequently deleted the question.  I have reproduced the question and answer below - hopefully it could be useful, in case any stumbling blocks are encountered.&#xD;&#xA;&#xD;&#xA;------&#xD;&#xA;&#xD;&#xA;##Question&#xD;&#xA;&#xD;&#xA;BasiliskII and SheepShaver can't open quadra650.rom&#xD;&#xA;&#xD;&#xA;I was thinking I could run Mac OS 7.5.5 on vMac with color but no it won't work with color only OS can run. I thought it would work if I use BasiliskII but when I assemble the ROM, `SDL.dll` and the other stuff, I got an error about the ROM: &quot;Cannot open ROM file.&quot; The same thing happened with SheepShaver.&#xD;&#xA;&#xD;&#xA;This is very huge problem and I don't know how I can fix it. On forums it said `quadra650.rom` will work but I tried and nothing special, I got the same error. I opened both BasiliskII and SheepShaver and I took a screenshot for you guys to know tell me what's going on?&#xD;&#xA;&#xD;&#xA;[![enter image description here][5]][5]&#xD;&#xA;&#xD;&#xA;I got the disk image from youtube - [Tour of Mac OS 7.5.5 with color + games (with download links)][6]. Read the description for `.dsk` file.&#xD;&#xA;&#xD;&#xA;##Answer&#xD;&#xA;&#xD;&#xA;Tackling Basilisk II and SheepShaver in turn...&#xD;&#xA;&#xD;&#xA;##Basilisk II&#xD;&#xA;&#xD;&#xA;I've managed to reproduce your error, using a [Quadra 650 ROM file][2] from a tutorial on [RedundantRobot][7].&#xD;&#xA;&#xD;&#xA;The issue is that you need to specify to the emulator *where* the ROM file is located. Just dropping it in the same directory is not sufficient.&#xD;&#xA;&#xD;&#xA;From the [BASILISK II readme][8], the `rom` preference is defined below:&#xD;&#xA;&#xD;&#xA;&gt; rom &lt;ROM file path&gt;&#xD;&#xA;&gt; &#xD;&#xA;&gt;   This item specifies the file name of the Mac ROM file to be used by &#xD;&#xA;&gt; Basilisk II. If no &quot;rom&quot; line is given, the ROM file has to be named  &quot;ROM&quot; and put in the same directory as the Basilisk II executable.&#xD;&#xA;&#xD;&#xA;So the easiest option, without requiring you to modify the preferences file, in the Basilisk II directory, rename the ROM file, from `quadra650.rom` to just `ROM`.&#xD;&#xA;&#xD;&#xA;![Rename file to ROM][9]&#xD;&#xA;&#xD;&#xA;Or, you could edit the preferences file, by opening the file, `BasiliskII_prefs`, in notepad (as here is no GUI preferences dialogue) and add&#xD;&#xA;&#xD;&#xA;    rom C:\&lt;your path&gt;\quadra650.ROM&#xD;&#xA;&#xD;&#xA;for example,&#xD;&#xA;&#xD;&#xA;    rom C:\Users\davinci\Basilisk\BasiliskII_20-02-2015\quadra650.ROM&#xD;&#xA;&#xD;&#xA;If your disk is specified corectly then the virtual mac should now boot.&#xD;&#xA;&#xD;&#xA;![Booted MacOS][10]&#xD;&#xA;&#xD;&#xA;Otherwise, you would end up with this (and you may need to use Task Manager to end the Basilisk II *process* as the window may refuse to close and kill the application):&#xD;&#xA;&#xD;&#xA;![No disk defined][11]&#xD;&#xA;&#xD;&#xA;This is because the same path issue occurs with the disk image, and you may need to specify the path to the disk image in the preferences file. Again from the [BASILISK II readme][8], the `disk` preference is defined: &#xD;&#xA;&#xD;&#xA;&gt; disk &lt;volume description&gt;&#xD;&#xA;&gt; &#xD;&#xA;&gt;   This item describes one MacOS volume to be mounted by Basilisk II.  &#xD;&#xA;&gt; There can be multiple &quot;disk&quot; lines in the preferences file. Basilisk&#xD;&#xA;&gt; II   can handle hardfiles (byte-per-byte images of HFS volumes in a&#xD;&#xA;&gt; file on   the host system), HFS partitions on hard disks etc., and&#xD;&#xA;&gt; MacOS-partitioned   disks (it can only access the first partition,&#xD;&#xA;&gt; though). The &quot;volume   description&quot; is either the pathname of a&#xD;&#xA;&gt; hardfile or a platform-dependant   description of an HFS partition or&#xD;&#xA;&gt; drive. If the volume description is   prefixed by an asterisk (&quot;*&quot;),&#xD;&#xA;&gt; the volume is write protected for MacOS.&#xD;&#xA;&gt; &#xD;&#xA;&gt;   Basilisk II can also handle some types of Mac &quot;disk image&quot; files&#xD;&#xA;&gt; directly,   as long as they are uncompressed and unencoded.&#xD;&#xA;&gt; &#xD;&#xA;&gt;   BeOS:&#xD;&#xA;&gt;     To specify an HFS partition, simply specify its path (e.g.&#xD;&#xA;&gt;     &quot;/dev/disk/scsi/0/1/0/0_3&quot;). If you don't specify any volumes, Basilisk II&#xD;&#xA;&gt;     will search for and use all available HFS partitions.&#xD;&#xA;&gt; &#xD;&#xA;&gt;   Unix:&#xD;&#xA;&gt;     To specify an HFS partition, simply specify its path (e.g. &quot;/dev/sda5&quot;).&#xD;&#xA;&gt;     If you want to access a MacOS-partitioned hard disk or removable volume&#xD;&#xA;&gt;     (Jaz, Zip etc.) and your operating system doesn't understand MacOS&#xD;&#xA;&gt;     partition tables, you can specify the block device name (e.g. &quot;/dev/sda&quot;)&#xD;&#xA;&gt;     to access the first HFS partition on the device. Under Linux, if you&#xD;&#xA;&gt;     don't specify any volumes, Basilisk II will search /etc/fstab for&#xD;&#xA;&gt;     unmounted HFS partitions and use these.&#xD;&#xA;&gt; &#xD;&#xA;&gt;   AmigaOS:&#xD;&#xA;&gt;     Partitions/drives are specified in the following format:&#xD;&#xA;&gt;       /dev/&lt;device name&gt;/&lt;unit&gt;/&lt;open flags&gt;/&lt;start block&gt;/&lt;size&gt;/&lt;block size&gt;&#xD;&#xA;&gt;     &quot;start block&quot; and &quot;size&quot; are given in blocks, &quot;block size&quot; is given in&#xD;&#xA;&gt;     bytes.&#xD;&#xA;&gt; &#xD;&#xA;&gt;   **Windows:&#xD;&#xA;&gt;     To define a logical volume (Windows NT only), specify its path (e.g. &quot;c:\&quot;).&#xD;&#xA;&gt;     To define a physical volume (NT and 9x), additionally give the &quot;physical&quot;&#xD;&#xA;&gt;     keyword (E.g. &quot;physical c:\&quot;). For safety reasons, volumes are mounted as&#xD;&#xA;&gt;     read-only. This is due to the bugs in PC Exchange. If you don't specify&#xD;&#xA;&gt;     any volume, the files *.hfv and *.dsk are searched from the current&#xD;&#xA;&gt;     directory. Note that in this case, Basilisk II tries to boot from the first&#xD;&#xA;&gt;     volume file found, which is random and may not be what you want.**&#xD;&#xA;&#xD;&#xA;So add the line &#xD;&#xA;&#xD;&#xA;    disk C:\&lt;path&gt;\boot.dsk&#xD;&#xA;&#xD;&#xA;for example,&#xD;&#xA;&#xD;&#xA;    disk C:\Users\davinci\Basilisk\BasiliskII_20-02-2015\boot.dsk&#xD;&#xA;&#xD;&#xA;to the preferences file, where `path` is your path to the Basilisk directory, and rename the `System 7.5.5 Boot.dsk` file to just `boot.dsk`&#xD;&#xA;&#xD;&#xA;![Rename disk image file][12]&#xD;&#xA;&#xD;&#xA;The renaming of the file to something simpler is not be *strictly* necessary but removing the spaces reduces the chance of the file not being recognised or found. The following line ***does*** work though, as Basilisk II handles the spaces in filenames without an issue:&#xD;&#xA;&#xD;&#xA;    disk C:\Users\davinci\Basilisk\BasiliskII_20-02-2015\System 7.5.5 Boot.dsk &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;##SheepShaver&#xD;&#xA;&#xD;&#xA;I've managed to reproduce your error, using a [New World PPC ROM file][13] from a tutorial on [RedundantRobot][7]. [**Edit: This is because SheepShaver does not support 68K Mac emulation**]. If you attempt to use the Quadra 650 ROM file, that you used for Basilisk II, then you will get the following error:&#xD;&#xA;&#xD;&#xA;![Wrong ROM file - Quadra 650 ROM is incompatible][14]&#xD;&#xA;&#xD;&#xA;Copying in the correct New World PPC ROM file is not sufficient, as you will get the following error:&#xD;&#xA;&#xD;&#xA;![newworld86.rom file needs to be renamed to ROM][15]&#xD;&#xA;&#xD;&#xA;If you rename the file to just `ROM`, again without any file extension, then SheepShaver will run, as desired.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://retrocomputing.stackexchange.com/questions/208/linux-68k-macintosh-emulator#comment-200&#xD;&#xA;  [2]: http://sheepshaver.cebix.net/&#xD;&#xA;  [3]: http://basilisk.cebix.net/&#xD;&#xA;  [4]: http://superuser.com/questions/936506/basiliskii-and-sheepshaver-cant-open-quadra650-rom/936536#936536&#xD;&#xA;  [5]: http://i.stack.imgur.com/LYScS.png&#xD;&#xA;  [6]: https://www.youtube.com/watch?v=0Qqplm9-PQo&#xD;&#xA;  [7]: http://www.redundantrobot.com/sheepshaver-tutorial/&#xD;&#xA;  [8]: http://basilisk.cebix.net/README&#xD;&#xA;  [9]: http://i.stack.imgur.com/rP3kq.png&#xD;&#xA;  [10]: http://i.stack.imgur.com/VrpKw.png&#xD;&#xA;  [11]: http://i.stack.imgur.com/fk6yp.png&#xD;&#xA;  [12]: http://i.stack.imgur.com/M2a5Y.png&#xD;&#xA;  [13]: http://www.redundantrobot.com/macemulator/newworld86.rom.zip&#xD;&#xA;  [14]: http://i.stack.imgur.com/OvZwB.png&#xD;&#xA;  [15]: http://i.stack.imgur.com/2lcir.png" />
  <row Id="749" PostHistoryTypeId="24" PostId="216" RevisionGUID="383eb735-c7c2-40ab-8bd2-2c1f506af240" CreationDate="2016-04-25T15:38:39.500" Comment="Proposed by 79 approved by 105, 56 edit id of 93" />
  <row Id="750" PostHistoryTypeId="2" PostId="277" RevisionGUID="aa53f76b-54be-4c4a-86b1-0f4d87cc76fe" CreationDate="2016-04-25T16:02:18.213" UserId="125" Text="I recently picked up a 35 year old pair of Atari 2600 paddle controllers for use with my Atari Flashback 6.  The Amazon store said in the product description that they had been &quot;tested.&quot;  However, they are barely responsive, and when they do respond control is quite jittery.  &#xD;&#xA;&#xD;&#xA;My plan is to open them up and see if there is anything obviously broken or dirty.  Has anyone encountered this before?  Is it possible to fix these?" />
  <row Id="751" PostHistoryTypeId="1" PostId="277" RevisionGUID="aa53f76b-54be-4c4a-86b1-0f4d87cc76fe" CreationDate="2016-04-25T16:02:18.213" UserId="125" Text="Atari 2600 paddle controllers slow, jittery" />
  <row Id="752" PostHistoryTypeId="3" PostId="277" RevisionGUID="aa53f76b-54be-4c4a-86b1-0f4d87cc76fe" CreationDate="2016-04-25T16:02:18.213" UserId="125" Text="&lt;atari-2600&gt;" />
  <row Id="753" PostHistoryTypeId="2" PostId="278" RevisionGUID="fd75b0cd-2d4e-4030-923d-3435eb8f99f2" CreationDate="2016-04-25T16:09:51.293" UserId="125" Text="So I loosely followed the instructions on this site: [Atari Paddle Repair (Cleaning Jittery Paddles)][1]&#xD;&#xA;&#xD;&#xA;Once I had disassembled the &quot;pot&quot; and exposed the metal ring, I could see that the contact points were caked in *years* of black gunk.  Using a Q-tip and a light amount of rubbing alcohol, I was able to clean the contact points, being careful not to leave any fuzz from the Q-tip.&#xD;&#xA;&#xD;&#xA;During reassembly, I made sure that the contact points (prongs) were bent as close to their original angle as I could get them.  Once I had the &quot;pot&quot; back together, I also did a check for range of motion, and everything felt good.&#xD;&#xA;&#xD;&#xA;I completed reassembly, and they now work good as new!  Or, at least as close as I can remember what &quot;new&quot; paddle controllers felt like.  Breakout and Super Breakout are now playable!&#xD;&#xA;&#xD;&#xA;  [1]: http://www.vintagegamingandmore.com/atari-paddle-repair-cleaning/" />
  <row Id="754" PostHistoryTypeId="2" PostId="279" RevisionGUID="9517fa97-e401-4593-9412-7e0c6b50ded2" CreationDate="2016-04-25T16:15:19.267" UserId="-1" Text="" />
  <row Id="755" PostHistoryTypeId="2" PostId="280" RevisionGUID="bca6780c-f452-4a77-9f1f-9c8d42ed9271" CreationDate="2016-04-25T16:15:19.267" UserId="-1" Text="" />
  <row Id="756" PostHistoryTypeId="5" PostId="277" RevisionGUID="46ddc73c-d6be-44a1-a86e-342ad4a8fb00" CreationDate="2016-04-25T16:15:47.373" UserId="125" Comment="deleted 12 characters in body" Text="I recently picked up a pair of Atari 2600 paddle controllers for use with my Atari Flashback 6.  The Amazon store said in the product description that they had been &quot;tested.&quot;  However, they are barely responsive, and when they do respond control is quite jittery.  &#xD;&#xA;&#xD;&#xA;My plan is to open them up and see if there is anything obviously broken or dirty.  Has anyone encountered this before?  Is it possible to fix these?" />
  <row Id="757" PostHistoryTypeId="5" PostId="278" RevisionGUID="b3704155-1cd5-4b13-b430-22a05fa3ca14" CreationDate="2016-04-25T16:16:04.843" UserId="125" Comment="added 3 characters in body" Text="So I loosely followed the instructions on this site: [Atari Paddle Repair (Cleaning Jittery Paddles)][1]&#xD;&#xA;&#xD;&#xA;Once I had disassembled the &quot;pot&quot; and exposed the metal ring, I could see that the contact points were caked in *35 years* of black gunk.  Using a Q-tip and a light amount of rubbing alcohol, I was able to clean the contact points, being careful not to leave any fuzz from the Q-tip.&#xD;&#xA;&#xD;&#xA;During reassembly, I made sure that the contact points (prongs) were bent as close to their original angle as I could get them.  Once I had the &quot;pot&quot; back together, I also did a check for range of motion, and everything felt good.&#xD;&#xA;&#xD;&#xA;I completed reassembly, and they now work good as new!  Or, at least as close as I can remember what &quot;new&quot; paddle controllers felt like.  Breakout and Super Breakout are now playable!&#xD;&#xA;&#xD;&#xA;  [1]: http://www.vintagegamingandmore.com/atari-paddle-repair-cleaning/" />
  <row Id="758" PostHistoryTypeId="2" PostId="281" RevisionGUID="eebadad6-a79f-434d-91d4-dacce7f63179" CreationDate="2016-04-25T20:00:00.423" UserId="4" Text="I've got an old SunBlade 100 workstation that I'm trying to install OpenBSD on.  The first step in the process is to bring up the OpenFirmware prompt to select the boot medium, which you do by pressing &lt;kbd&gt;STOP&lt;/kbd&gt;+&lt;kbd&gt;A&lt;/kbd&gt;.&#xD;&#xA;&#xD;&#xA;The computer didn't have a keyboard when I bought it, but I found one that will work.  However, it doesn't have a &lt;kbd&gt;STOP&lt;/kbd&gt; key.  Is there another way of bringing up the prompt?" />
  <row Id="759" PostHistoryTypeId="1" PostId="281" RevisionGUID="eebadad6-a79f-434d-91d4-dacce7f63179" CreationDate="2016-04-25T20:00:00.423" UserId="4" Text="How to bring up the firmware console on a SunBlade 100" />
  <row Id="760" PostHistoryTypeId="3" PostId="281" RevisionGUID="eebadad6-a79f-434d-91d4-dacce7f63179" CreationDate="2016-04-25T20:00:00.423" UserId="4" Text="&lt;sun-blade&gt;&lt;sparc64&gt;" />
  <row Id="761" PostHistoryTypeId="2" PostId="282" RevisionGUID="f80a356c-c7be-4e02-a861-98d15a1a777e" CreationDate="2016-04-25T20:38:29.970" UserId="12" Text="I only know these a little from messing about with OpenFirmware, but I did run across [this reference that says][1]:&#xD;&#xA;&#xD;&#xA;&gt; One glaring omission by Sun is that you cannot enter OBP from the OS&#xD;&#xA;&gt; using a regular USB keyboard. You can enter OBP from the serial&#xD;&#xA;&gt; console using Ctrl-Break, and Sun keyboards can do Stop-A, but there&#xD;&#xA;&gt; is no way to enter OBP from a non-Sun USB keyboard.&#xD;&#xA;&#xD;&#xA;Which is something I didn't know. I think this implies you are going to have to beg, borrow, or steal a keyboard.&#xD;&#xA;&#xD;&#xA;Can you get it to boot to the serial console?&#xD;&#xA;&#xD;&#xA;  [1]: http://www.finnie.org/text/computers/sunblade100/" />
  <row Id="762" PostHistoryTypeId="2" PostId="283" RevisionGUID="595dcd2a-bade-4b84-aab9-1512ef86f449" CreationDate="2016-04-25T21:13:19.607" UserId="154" Text="There are multiple techniques used by tape copy programs to be able to copy large blocks of data. By large we mean close to the whole RAM capacity (48 KiB) or even more!&#xD;&#xA;&#xD;&#xA;Using maximum of the available RAM&#xD;&#xA;-------&#xD;&#xA;ZX Spectrum 48K (and ZX Spectrum+) has 48 KiB (**49152 B**) of RAM from which 6 KiB (monochrome pixels) + 768 B (colour attributes) are being used for video RAM. A simple copier which uses the video RAM just for ordinary displaying will have about 41 KiB (~42000 B) of space for copying.&#xD;&#xA;&#xD;&#xA;A program can use not only portions of memory used by the BASIC interpreter but also the video RAM. For example [Tape-File Copy](https://archive.org/details/zx_Tape_File_Copy_v6_1986_Arnost_Vecerka) created in 1986 by Arnošt Večerka lets you select which portion of video RAM will be used for storing the data being copied this program allows capacity up to **44288 B**. In the screenshot below the upper part showing the remaining capacity hides the pixels containing data by using the same colour for background and foreground. The lower part uses both the pixel and colour attribute part for visibly storing the data.&#xD;&#xA;&#xD;&#xA;[![Tape-File Copy][1]][1]&#xD;&#xA;&#xD;&#xA;Limiting the program functions (special mode)&#xD;&#xA;-------&#xD;&#xA;[BS Copy 48F/2](https://archive.org/details/zx_BS_Copy_48F_2_1991_Busy_Software) written in 1990 by Slavomír Lábsky is a little bit &quot;Spartan&quot;. It provides only load, save and clear functions, also it shows information only in a single line of the screen (hard to find on the screenshot below :) but it has incredible **48082 B** of available RAM.&#xD;&#xA;&#xD;&#xA;[![BS Copy 48F/2][2]][2]&#xD;&#xA;&#xD;&#xA;There are also programs which go further. For example in special mode they can copy only a single block and they show no information on the screen but they occupy just a tiny space in RAM. One of them is [Iso Copy 1](https://archive.org/details/zx_Iso_Copy_v1.8.7_1984_Individual_Software_Service) which in Max. copy mode provides **49122** available bytes.&#xD;&#xA;&#xD;&#xA;Compressing the data in RAM&#xD;&#xA;-------&#xD;&#xA;The mentioned program BS Copy in addition to large free RAM compresses the loaded data in RAM. It uses just a simple compression of repeated bytes but in many cases this could save a lot of memory and in effect you can copy blocks larger than the physical RAM.&#xD;&#xA;&#xD;&#xA;I am not sure what [LERM Tape Utility](https://wos.meulie.net/pub/sinclair/games-info/l/LermTapeUtilityD.pdf) exactly does in the &quot;B&quot; mode which is said to be able to copy blocks larger than 48 KiB. But it seems that it either compresses the data or it somehow skips unimportant parts of the data.&#xD;&#xA;&#xD;&#xA;Memory paging on ZX Spectrum models with additional RAM&#xD;&#xA;-------&#xD;&#xA;It is worth to mention that there are copiers which are able to use extended RAM in models like ZX Spectrum 128 or home-made extensions like ZX Spectrum 80k. Though the memory space is not continuous in these computers the load and save routines inside the copiers can switch the memory pages during operation and copy extremely large blocks.&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/e617B.png&#xD;&#xA;  [2]: http://i.stack.imgur.com/JOE6u.png" />
  <row Id="764" PostHistoryTypeId="2" PostId="284" RevisionGUID="c3afd42a-9201-40fa-aa5c-61b10665ca56" CreationDate="2016-04-25T21:39:03.273" UserId="56" Text="One of the earliest -- if not *the* earliest -- microcomputer virus is Elk Cloner, an Apple II virus created in the early 1980s as a practical joke.  An infected version of DOS would install itself into the boot tracks when a non-infected floppy was accessed, and then write a signature in the VTOC to avoid re-infecting disks.  After a certain number of operations, the virus would put a poem on the screen.&#xD;&#xA;&#xD;&#xA;While not deliberately destructive, it overwrote the DOS image on floppies with little regard for caution, potentially overwriting data stored in tracks 1 and 2.&#xD;&#xA;&#xD;&#xA;[Wikipedia has an entry][1] on Elk Cloner, and apple2history.org has a long description of [Apple II viruses][2].&#xD;&#xA;&#xD;&#xA;(On a personal note, I was once given a disk with one of these DOS-stomping viruses, but this one was deliberately malignant.  The noisy nature of the old Disk ][ drives saved me though: after booting the infected disk, I inserted a different floppy, and asked for a catalog.  Normally that just seeks to track 17, but I heard the drive head move back to the start of the disk, seek twice to nearby tracks, and then seek back to track 17 before displaying the file list.  I knew something was off and scrubbed the DOS image on my floppy, then played with the infected disk until it erased itself.)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://en.wikipedia.org/wiki/Elk_Cloner&#xD;&#xA;  [2]: http://apple2history.org/history/ah23/" />
  <row Id="768" PostHistoryTypeId="2" PostId="285" RevisionGUID="84849a52-df8d-40ca-a72d-c010e0efdaa2" CreationDate="2016-04-25T22:34:24.980" UserId="12" Text="The first &quot;computer virus&quot; (as opposed to a &quot;worm&quot; that exploited network or boot code; though I make the distinction as a way to present this answer, not as an example of pedantry) was probably created by [Fred Cohen][1] as part of his research into into parasitic, self-replicating applications in 1983.&#xD;&#xA;&#xD;&#xA;Cohen does not give any of his early experiments names in his historical overview of the subject in &quot;[A Short Course on Computer Viruses][2]&quot;, but there are plenty of details about the modes and environments they chose.&#xD;&#xA;&#xD;&#xA;Cohen is considered the first to coin the term &quot;computer virus&quot; to describe the programs and the mechanisms by which they spread.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://en.wikipedia.org/wiki/Fred_Cohen&#xD;&#xA;  [2]: http://www.amazon.com/Course-Computer-Viruses-Professional-Computing/dp/0471007684" />
  <row Id="769" PostHistoryTypeId="2" PostId="286" RevisionGUID="775814b0-dd69-47f3-8f68-a30b5d0aeb5d" CreationDate="2016-04-25T22:35:28.033" UserId="72" Text="Keep in mind that because the memory in banks $E0 and $E1 are used as the 128K of memory in 8-bit mode (yeah, it's counterintuitive), they are controlled by the MEGA II chip, which is in essence an Apple IIe on a single chip (aside from processor and a few other support circuits). Any time access happens within the MEGA II's domain, the system has to slow to 1 MHz. That's why shadowing and such is such a big win for graphics.&#xD;&#xA;&#xD;&#xA;So there are two main data buses in the Apple IIgs (ignoring the slot I/O bus, which doesn't matter for this context): the MEGA II data bus, which operates at 1 MHz to support 8-bit emulation (and the bank $E0 and $E1 memory space), and the FPI (Fast Processor Interface) bus, which handles the 16-bit realm and all the rest of memory.&#xD;&#xA;&#xD;&#xA;The two sides of the system operate largely independently; in fact, they even have their own memory refresh cycles for the areas of memory they're responsible for (the FPI side's refresh cycle causes an 8% loss of performance, which is why you often hear a 2.6 MHz speed for the IIgs).&#xD;&#xA;&#xD;&#xA;Because of that independence, there's a need to synchronize between the two sides whenever data is transferred from one side to the other. Synchronization performs by the FPI basically stopping the FPI side's clock (thereby halting execution) and waiting until the MEGA II is in the right part of its cycle, then it starts running again, but synchronized to the MEGA II clock (and therefore temporarily running at 1 MHz for the duration of the operation).&#xD;&#xA;&#xD;&#xA;I presume that adding the `NOP` at appropriate intervals reduces the length of time spent waiting for synchronization to occur. I have not had time to sit down and do that math and would prefer not to. :)" />
  <row Id="770" PostHistoryTypeId="5" PostId="282" RevisionGUID="1365780b-3efd-4ccf-91fc-fdae4db8190e" CreationDate="2016-04-25T22:40:26.013" UserId="12" Comment="deleted 8 characters in body" Text="I only know these a little from messing about with OpenFirmware, but I did run across [this reference that says][1]:&#xD;&#xA;&#xD;&#xA;&gt; One glaring omission by Sun is that you cannot enter OBP from the OS&#xD;&#xA;&gt; using a regular USB keyboard. You can enter OBP from the serial&#xD;&#xA;&gt; console using Ctrl-Break, and Sun keyboards can do Stop-A, but there&#xD;&#xA;&gt; is no way to enter OBP from a non-Sun USB keyboard.&#xD;&#xA;&#xD;&#xA;Which is something I didn't know. I think this implies you are going to have to beg, borrow, or steal a keyboard.&#xD;&#xA;&#xD;&#xA;Or try to boot to the serial console.&#xD;&#xA;&#xD;&#xA;  [1]: http://www.finnie.org/text/computers/sunblade100/" />
  <row Id="771" PostHistoryTypeId="4" PostId="253" RevisionGUID="00666c06-5f93-424a-89ac-754d58df2ee6" CreationDate="2016-04-25T22:40:44.653" UserId="111" Comment="more descriptive title" Text="Why won't the game &quot;Ultima I&quot; work on my Apple II system?" />
  <row Id="772" PostHistoryTypeId="24" PostId="253" RevisionGUID="00666c06-5f93-424a-89ac-754d58df2ee6" CreationDate="2016-04-25T22:40:44.653" Comment="Proposed by 111 approved by 37, 71 edit id of 98" />
  <row Id="773" PostHistoryTypeId="5" PostId="285" RevisionGUID="34b87c72-a36a-41b4-9602-c6d4a5a549b7" CreationDate="2016-04-25T22:44:56.863" UserId="12" Comment="added 345 characters in body" Text="The first &quot;computer virus&quot; (as opposed to a &quot;worm&quot; that exploited network or boot code; though I make the distinction as a way to present this answer, not as an example of pedantry) was probably created by [Fred Cohen][1] as part of his research into into parasitic, self-replicating applications in 1983.&#xD;&#xA;&#xD;&#xA;Cohen does not give any of his early experiments names in his historical overview of the subject in &quot;[A Short Course on Computer Viruses][2]&quot;, but there are plenty of details about the modes and environments they chose.&#xD;&#xA;&#xD;&#xA;Cohen is considered the first to coin the term &quot;computer virus&quot; to describe the programs and the mechanisms by which they spread.&#xD;&#xA;&#xD;&#xA;Of course, none of this work was &quot;malicious&quot; in nature, as Cohen was interested in the computer science of parasitic programs and possible positive uses for them. So this answer may not satisfy the requirement that the payload be &quot;malicious.&quot; I present this to illustrate that early viruses actually _weren't_ interested in malicious payloads.&#xD;&#xA;&#xD;&#xA;  [1]: https://en.wikipedia.org/wiki/Fred_Cohen&#xD;&#xA;  [2]: http://www.amazon.com/Course-Computer-Viruses-Professional-Computing/dp/0471007684" />
  <row Id="774" PostHistoryTypeId="2" PostId="287" RevisionGUID="7d1aaca7-ea73-48ce-afcc-4ebb05d8c96c" CreationDate="2016-04-25T23:21:37.893" UserId="56" Text="The XBAND Video Game Modem and Network allowed owners of Sega Genesis and Super Nintendo game systems to play head-to-head over a phone line in 1994, before &quot;twitch&quot; gaming over the Internet was feasible.  How was this accomplished?" />
  <row Id="775" PostHistoryTypeId="1" PostId="287" RevisionGUID="7d1aaca7-ea73-48ce-afcc-4ebb05d8c96c" CreationDate="2016-04-25T23:21:37.893" UserId="56" Text="How did XBAND modems transmit game state?" />
  <row Id="776" PostHistoryTypeId="3" PostId="287" RevisionGUID="7d1aaca7-ea73-48ce-afcc-4ebb05d8c96c" CreationDate="2016-04-25T23:21:37.893" UserId="56" Text="&lt;xband&gt;&lt;modem&gt;" />
  <row Id="777" PostHistoryTypeId="2" PostId="288" RevisionGUID="d03de0af-b210-4967-bdd6-118d2eba1b58" CreationDate="2016-04-25T23:21:37.893" UserId="56" Text="Many games played over the Internet use a client-server model, where the server has a full copy of the game state, and distributes appropriate pieces to the connectedclients.  Due to the technology available in 1994, XBAND couldn't work this way.&#xD;&#xA;&#xD;&#xA;When the user wanted to play a game online, the modem called the server through a local dialup point-of-presence, and requested a match for the currently-installed cartridge.  The server either told the modem to wait for a connection, at which point it would sit and wait for the phone to ring, or told it to dial the other player's phone number.  Once connected, the game consoles communicated directly, removing client-server communication latency from the equation.&#xD;&#xA;&#xD;&#xA;The games ran in lockstep on each console.  The cartridges had to be exactly the same, as any difference in logic could throw the systems out of sync.  Once the game started, the consoles simply exchanged controller reads.  At 1200bps, there was just enough time to send a bitmap of currently-pressed buttons and some ECC/EDC bits at 30 fps.&#xD;&#xA;&#xD;&#xA;While 2400bps modems were inexpensive at that time, a 1200bps modem was used instead.  It had sufficient throughput, and its latency characteristics were better.  Features like data compression were disabled to avoid introducing additional latency.&#xD;&#xA;&#xD;&#xA;An attempt to reduce the latency even further was attempted but never shipped.  By changing video modes on the Genesis, the television's VSYNC phase could be altered, potentially allowing two independent televisions to be brought (temporarily) into sync with each other.&#xD;&#xA;" />
  <row Id="778" PostHistoryTypeId="2" PostId="289" RevisionGUID="c4cdc82b-fe66-4c3c-9595-ee9adac2660f" CreationDate="2016-04-26T00:36:55.670" UserId="-1" Text="" />
  <row Id="779" PostHistoryTypeId="2" PostId="290" RevisionGUID="1525069e-1452-4f9f-a8a8-5871dc5fb5dd" CreationDate="2016-04-26T00:36:55.670" UserId="-1" Text="" />
  <row Id="780" PostHistoryTypeId="2" PostId="291" RevisionGUID="46e6b50c-cf7e-421e-939e-73dbb4a70bcb" CreationDate="2016-04-26T00:54:37.470" UserId="-1" Text="" />
  <row Id="781" PostHistoryTypeId="2" PostId="292" RevisionGUID="b55151bc-efe8-4ec5-be26-33170ab8756a" CreationDate="2016-04-26T00:54:37.470" UserId="-1" Text="" />
  <row Id="782" PostHistoryTypeId="2" PostId="293" RevisionGUID="60c70010-516a-4e2d-b922-491b50c4c4dc" CreationDate="2016-04-26T01:11:08.890" UserId="107" Text="I use the Cecile driver for the Kingspec DOM (basically an IDE flash drive0 in my Atari Falcon. I've noticed on occasion that in file dialog boxes (save, open etc.) I sometimes see weird files, called things like &quot;AD&quot;, and &quot;AF&quot; or some other two character combination.&#xD;&#xA;&#xD;&#xA;These aren't visible in the GEM Desktop, and they don't seem to cause any issues, but it does make me a little concerned. Does anyone know if these are a sign of a bad filesystem or just some strange artefact from the driver?" />
  <row Id="783" PostHistoryTypeId="1" PostId="293" RevisionGUID="60c70010-516a-4e2d-b922-491b50c4c4dc" CreationDate="2016-04-26T01:11:08.890" UserId="107" Text="Is my Atari Falcon's filesystem messed up?" />
  <row Id="784" PostHistoryTypeId="3" PostId="293" RevisionGUID="60c70010-516a-4e2d-b922-491b50c4c4dc" CreationDate="2016-04-26T01:11:08.890" UserId="107" Text="&lt;atari-falcon&gt;&lt;driver&gt;&lt;tos&gt;" />
  <row Id="785" PostHistoryTypeId="2" PostId="294" RevisionGUID="8e0622a5-7ecd-4cc2-8ef8-ad8ba61be957" CreationDate="2016-04-26T01:11:35.343" UserId="-1" Text="" />
  <row Id="786" PostHistoryTypeId="2" PostId="295" RevisionGUID="720a8e1a-2782-4ee1-8ed0-a0c36e789984" CreationDate="2016-04-26T01:11:35.343" UserId="-1" Text="" />
  <row Id="787" PostHistoryTypeId="2" PostId="296" RevisionGUID="0a5c2a41-44bd-4726-b7d7-0f20351e91aa" CreationDate="2016-04-26T01:13:07.000" UserId="-1" Text="" />
  <row Id="788" PostHistoryTypeId="2" PostId="297" RevisionGUID="56605a63-c540-4062-a3b7-b5e59f82c396" CreationDate="2016-04-26T01:13:07.000" UserId="-1" Text="" />
  <row Id="789" PostHistoryTypeId="2" PostId="298" RevisionGUID="7c1da062-912b-4559-80bb-b615d1284a5c" CreationDate="2016-04-26T01:13:52.767" UserId="-1" Text="" />
  <row Id="790" PostHistoryTypeId="2" PostId="299" RevisionGUID="94138e74-bd1a-4d5e-aca8-69bcb227f2a1" CreationDate="2016-04-26T01:13:52.767" UserId="-1" Text="" />
  <row Id="794" PostHistoryTypeId="5" PostId="154" RevisionGUID="afbea025-23d7-4328-bd66-bc8d043875e8" CreationDate="2016-04-26T04:05:02.687" UserId="202" Comment="Added image" Text="All you need is a long reach Torx T15 &#xD;&#xA;&#xD;&#xA;[![Extra long Torx screwdriver][1]][1]&#xD;&#xA;&#xD;&#xA;to get at the screws and a large bull dog clip (1&quot;-2&quot;) &#xD;&#xA;&#xD;&#xA;[![Bulldog clip][2]][2]&#xD;&#xA;&#xD;&#xA;to crack the case open. Nothing else.&#xD;&#xA;&#xD;&#xA;The bulldog clip is the cheapest, and best approximation to the &quot;pull apart tool&quot; to which you are referring.&#xD;&#xA;&#xD;&#xA;IIRC, the clip, when closed, is placed in the mid point of the grove (where the front and back parts of the case meet) at the top of the SE/30, and then you slowly open the bulldog clip, to crack the case open. This is obviously done once the screws have been removed. The area to which I am referring is shown below:&#xD;&#xA;&#xD;&#xA;[![Where to place the case cracker][3]][3]&#xD;&#xA;&#xD;&#xA;Top tip: once you have extricated the Torx screws, replace them with Philips/crosshead ( or Allen bolts), to make life simpler for you in the future, as long reach Torx screw drivers are *generally* harder to find than other types.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/brYtm.jpg&#xD;&#xA;  [2]: http://i.stack.imgur.com/i4cXJ.jpg&#xD;&#xA;  [3]: http://i.stack.imgur.com/rsIKT.jpg" />
  <row Id="795" PostHistoryTypeId="5" PostId="216" RevisionGUID="45009665-7c30-41dc-bde0-d5f035d721c4" CreationDate="2016-04-26T04:48:08.657" UserId="202" Comment="Added blockquote formatting" Text="##Preface&#xD;&#xA;&#xD;&#xA;As Stephen rightly points out in his [comment][1], SheepShaver only emulates PowerPC, and so it is not a valid suggestion for your 68K-based question. From [SheepShaver's home page][2]&#xD;&#xA;&#xD;&#xA;&gt;  However, you still need a copy of MacOS and a PowerMac ROM image to use SheepShaver. &#xD;&#xA;&#xD;&#xA;If you attempt to use a 68K based ROM, with SheepShaver, then you should get the error:&#xD;&#xA;&#xD;&#xA;    Invalid ROM file size. SheepShaver requires a 4MB PCI PowerMac ROM.&#xD;&#xA;&#xD;&#xA;as shown in one of the dialogs in the screenshots below.&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;&#xD;&#xA;##Answer&#xD;&#xA;&#xD;&#xA;[SheepShaver][2] and [BasiliskII][3] both work on Linux and should support your requirements.&#xD;&#xA;&#xD;&#xA;To quote the specifications of each emulator respectively:&#xD;&#xA;&#xD;&#xA;&gt; **Some of SheepShaver's features**&#xD;&#xA;&gt; &#xD;&#xA;&gt;  - Runs MacOS 7.5.2 thru 9.0.4. MacOS X as a guest is not supported.&#xD;&#xA;&gt;  - Color video display&#xD;&#xA;&gt;  - CD quality sound output&#xD;&#xA;&gt;  - Access to floppy disks, CD-ROMs and HFS(+) partitions on hard disks&#xD;&#xA;&gt;  - Easy file exchange with the host OS via a &quot;Host Directory Tree&quot; icon on the Mac desktop&#xD;&#xA;&gt;  - Internet and LAN networking via Ethernet&#xD;&#xA;&gt;  - Serial drivers&#xD;&#xA;&gt;  - SCSI Manager (old-style) emulation&#xD;&#xA;&#xD;&#xA;and&#xD;&#xA;&#xD;&#xA;&gt; **Some features of Basilisk II**&#xD;&#xA;&gt; &#xD;&#xA;&gt;  - Emulates either a Mac Classic (which runs MacOS 0.x thru 7.5) or a Mac II series machine (which runs MacOS 7.x, 8.0 and 8.1), depending&#xD;&#xA;&gt; on the ROM being used&#xD;&#xA;&gt;  - Color video display&#xD;&#xA;&gt;  - CD quality sound output&#xD;&#xA;&gt;  - Floppy disk driver (only 1.44MB disks supported)&#xD;&#xA;&gt;  - Driver for HFS partitions and hardfiles&#xD;&#xA;&gt;  - CD-ROM driver with basic audio functions&#xD;&#xA;&gt;  - Easy file exchange with the host OS via a &quot;Host Directory Tree&quot; icon on the Mac desktop&#xD;&#xA;&gt;  - Ethernet driver&#xD;&#xA;&gt;  - Serial drivers&#xD;&#xA;&gt;  - SCSI Manager (old-style) emulation&#xD;&#xA;&gt;  - Emulates extended ADB keyboard and 3-button mouse&#xD;&#xA;&gt;  - Uses UAE 68k emulation or (under AmigaOS and NetBSD/m68k) real 68k processor&#xD;&#xA;&#xD;&#xA;------&#xD;&#xA;&#xD;&#xA;##As an aside&#xD;&#xA;&#xD;&#xA;I actually answered a [Quadra 650 emulation related question][4], a while back, although it *was* for Windows, on SuperUser. I have just spent the last hour trying to find/recover it, after the OP, who asked the question, has subsequently deleted the question.  I have reproduced the question and answer below - hopefully it could be useful, in case any stumbling blocks are encountered.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;###Original Question&#xD;&#xA;&#xD;&#xA;&gt; BasiliskII and SheepShaver can't open quadra650.rom&#xD;&#xA;&gt; &#xD;&#xA;&gt; I was thinking I could run Mac OS 7.5.5 on vMac with color but no it&#xD;&#xA;&gt; won't work with color only OS can run. I thought it would work if I&#xD;&#xA;&gt; use BasiliskII but when I assemble the ROM, `SDL.dll` and the other&#xD;&#xA;&gt; stuff, I got an error about the ROM: &quot;Cannot open ROM file.&quot; The same&#xD;&#xA;&gt; thing happened with SheepShaver.&#xD;&#xA;&gt; &#xD;&#xA;&gt; This is very huge problem and I don't know how I can fix it. On forums&#xD;&#xA;&gt; it said `quadra650.rom` will work but I tried and nothing special, I&#xD;&#xA;&gt; got the same error. I opened both BasiliskII and SheepShaver and I&#xD;&#xA;&gt; took a screenshot for you guys to know tell me what's going on?&#xD;&#xA;&gt; &#xD;&#xA;&gt; [![enter image description here][5]][5]&#xD;&#xA;&gt; &#xD;&#xA;&gt; I got the disk image from youtube - [Tour of Mac OS 7.5.5 with color +&#xD;&#xA;&gt; games (with download links)][6]. Read the description for `.dsk` file.&#xD;&#xA;&#xD;&#xA;###My Answer&#xD;&#xA;&#xD;&#xA;&gt; Tackling Basilisk II and SheepShaver in turn...&#xD;&#xA;&gt; &#xD;&#xA;&gt; ##Basilisk II&#xD;&#xA;&gt; &#xD;&#xA;&gt; I've managed to reproduce your error, using a [Quadra 650 ROM file][2]&#xD;&#xA;&gt; from a tutorial on [RedundantRobot][7].&#xD;&#xA;&gt; &#xD;&#xA;&gt; The issue is that you need to specify to the emulator *where* the ROM&#xD;&#xA;&gt; file is located. Just dropping it in the same directory is not&#xD;&#xA;&gt; sufficient.&#xD;&#xA;&gt; &#xD;&#xA;&gt; From the [BASILISK II readme][8], the `rom` preference is defined&#xD;&#xA;&gt; below:&#xD;&#xA;&gt; &#xD;&#xA;&gt; &gt; rom &lt;ROM file path&gt;&#xD;&#xA;&gt; &gt; &#xD;&#xA;&gt; &gt;   This item specifies the file name of the Mac ROM file to be used by &#xD;&#xA;&gt; &gt; Basilisk II. If no &quot;rom&quot; line is given, the ROM file has to be named  &quot;ROM&quot; and put in the same directory as the Basilisk II executable.&#xD;&#xA;&gt; &#xD;&#xA;&gt; So the easiest option, without requiring you to modify the preferences&#xD;&#xA;&gt; file, in the Basilisk II directory, rename the ROM file, from&#xD;&#xA;&gt; `quadra650.rom` to just `ROM`.&#xD;&#xA;&gt; &#xD;&#xA;&gt; ![Rename file to ROM][9]&#xD;&#xA;&gt; &#xD;&#xA;&gt; Or, you could edit the preferences file, by opening the file,&#xD;&#xA;&gt; `BasiliskII_prefs`, in notepad (as here is no GUI preferences&#xD;&#xA;&gt; dialogue) and add&#xD;&#xA;&gt; &#xD;&#xA;&gt;     rom C:\&lt;your path&gt;\quadra650.ROM&#xD;&#xA;&gt; &#xD;&#xA;&gt; for example,&#xD;&#xA;&gt; &#xD;&#xA;&gt;     rom C:\Users\davinci\Basilisk\BasiliskII_20-02-2015\quadra650.ROM&#xD;&#xA;&gt; &#xD;&#xA;&gt; If your disk is specified corectly then the virtual mac should now&#xD;&#xA;&gt; boot.&#xD;&#xA;&gt; &#xD;&#xA;&gt; ![Booted MacOS][10]&#xD;&#xA;&gt; &#xD;&#xA;&gt; Otherwise, you would end up with this (and you may need to use Task&#xD;&#xA;&gt; Manager to end the Basilisk II *process* as the window may refuse to&#xD;&#xA;&gt; close and kill the application):&#xD;&#xA;&gt; &#xD;&#xA;&gt; ![No disk defined][11]&#xD;&#xA;&gt; &#xD;&#xA;&gt; This is because the same path issue occurs with the disk image, and&#xD;&#xA;&gt; you may need to specify the path to the disk image in the preferences&#xD;&#xA;&gt; file. Again from the [BASILISK II readme][8], the `disk` preference is&#xD;&#xA;&gt; defined: &#xD;&#xA;&gt; &#xD;&#xA;&gt; &gt; disk &lt;volume description&gt;&#xD;&#xA;&gt; &gt; &#xD;&#xA;&gt; &gt;   This item describes one MacOS volume to be mounted by Basilisk II.  &#xD;&#xA;&gt; &gt; There can be multiple &quot;disk&quot; lines in the preferences file. Basilisk&#xD;&#xA;&gt; &gt; II   can handle hardfiles (byte-per-byte images of HFS volumes in a&#xD;&#xA;&gt; &gt; file on   the host system), HFS partitions on hard disks etc., and&#xD;&#xA;&gt; &gt; MacOS-partitioned   disks (it can only access the first partition,&#xD;&#xA;&gt; &gt; though). The &quot;volume   description&quot; is either the pathname of a&#xD;&#xA;&gt; &gt; hardfile or a platform-dependant   description of an HFS partition or&#xD;&#xA;&gt; &gt; drive. If the volume description is   prefixed by an asterisk (&quot;*&quot;),&#xD;&#xA;&gt; &gt; the volume is write protected for MacOS.&#xD;&#xA;&gt; &gt; &#xD;&#xA;&gt; &gt;   Basilisk II can also handle some types of Mac &quot;disk image&quot; files&#xD;&#xA;&gt; &gt; directly,   as long as they are uncompressed and unencoded.&#xD;&#xA;&gt; &gt; &#xD;&#xA;&gt; &gt;   BeOS:&#xD;&#xA;&gt; &gt;     To specify an HFS partition, simply specify its path (e.g.&#xD;&#xA;&gt; &gt;     &quot;/dev/disk/scsi/0/1/0/0_3&quot;). If you don't specify any volumes, Basilisk II&#xD;&#xA;&gt; &gt;     will search for and use all available HFS partitions.&#xD;&#xA;&gt; &gt; &#xD;&#xA;&gt; &gt;   Unix:&#xD;&#xA;&gt; &gt;     To specify an HFS partition, simply specify its path (e.g. &quot;/dev/sda5&quot;).&#xD;&#xA;&gt; &gt;     If you want to access a MacOS-partitioned hard disk or removable volume&#xD;&#xA;&gt; &gt;     (Jaz, Zip etc.) and your operating system doesn't understand MacOS&#xD;&#xA;&gt; &gt;     partition tables, you can specify the block device name (e.g. &quot;/dev/sda&quot;)&#xD;&#xA;&gt; &gt;     to access the first HFS partition on the device. Under Linux, if you&#xD;&#xA;&gt; &gt;     don't specify any volumes, Basilisk II will search /etc/fstab for&#xD;&#xA;&gt; &gt;     unmounted HFS partitions and use these.&#xD;&#xA;&gt; &gt; &#xD;&#xA;&gt; &gt;   AmigaOS:&#xD;&#xA;&gt; &gt;     Partitions/drives are specified in the following format:&#xD;&#xA;&gt; &gt;       /dev/&lt;device name&gt;/&lt;unit&gt;/&lt;open flags&gt;/&lt;start block&gt;/&lt;size&gt;/&lt;block size&gt;&#xD;&#xA;&gt; &gt;     &quot;start block&quot; and &quot;size&quot; are given in blocks, &quot;block size&quot; is given in&#xD;&#xA;&gt; &gt;     bytes.&#xD;&#xA;&gt; &gt; &#xD;&#xA;&gt; &gt;   **Windows:&#xD;&#xA;&gt; &gt;     To define a logical volume (Windows NT only), specify its path (e.g. &quot;c:\&quot;).&#xD;&#xA;&gt; &gt;     To define a physical volume (NT and 9x), additionally give the &quot;physical&quot;&#xD;&#xA;&gt; &gt;     keyword (E.g. &quot;physical c:\&quot;). For safety reasons, volumes are mounted as&#xD;&#xA;&gt; &gt;     read-only. This is due to the bugs in PC Exchange. If you don't specify&#xD;&#xA;&gt; &gt;     any volume, the files *.hfv and *.dsk are searched from the current&#xD;&#xA;&gt; &gt;     directory. Note that in this case, Basilisk II tries to boot from the first&#xD;&#xA;&gt; &gt;     volume file found, which is random and may not be what you want.**&#xD;&#xA;&gt; &#xD;&#xA;&gt; So add the line &#xD;&#xA;&gt; &#xD;&#xA;&gt;     disk C:\&lt;path&gt;\boot.dsk&#xD;&#xA;&gt; &#xD;&#xA;&gt; for example,&#xD;&#xA;&gt; &#xD;&#xA;&gt;     disk C:\Users\davinci\Basilisk\BasiliskII_20-02-2015\boot.dsk&#xD;&#xA;&gt; &#xD;&#xA;&gt; to the preferences file, where `path` is your path to the Basilisk&#xD;&#xA;&gt; directory, and rename the `System 7.5.5 Boot.dsk` file to just&#xD;&#xA;&gt; `boot.dsk`&#xD;&#xA;&gt; &#xD;&#xA;&gt; ![Rename disk image file][12]&#xD;&#xA;&gt; &#xD;&#xA;&gt; The renaming of the file to something simpler is not be *strictly*&#xD;&#xA;&gt; necessary but removing the spaces reduces the chance of the file not&#xD;&#xA;&gt; being recognised or found. The following line ***does*** work though,&#xD;&#xA;&gt; as Basilisk II handles the spaces in filenames without an issue:&#xD;&#xA;&gt; &#xD;&#xA;&gt;     disk C:\Users\davinci\Basilisk\BasiliskII_20-02-2015\System 7.5.5 Boot.dsk &#xD;&#xA;&gt; &#xD;&#xA;&gt; &#xD;&#xA;&gt; ##SheepShaver&#xD;&#xA;&gt; &#xD;&#xA;&gt; I've managed to reproduce your error, using a [New World PPC ROM&#xD;&#xA;&gt; file][13] from a tutorial on [RedundantRobot][7]. [**Edit: This is&#xD;&#xA;&gt; because SheepShaver does not support 68K Mac emulation**]. If you&#xD;&#xA;&gt; attempt to use the Quadra 650 ROM file, that you used for Basilisk II,&#xD;&#xA;&gt; then you will get the following error:&#xD;&#xA;&gt; &#xD;&#xA;&gt; ![Wrong ROM file - Quadra 650 ROM is incompatible][14]&#xD;&#xA;&gt; &#xD;&#xA;&gt; Copying in the correct New World PPC ROM file is not sufficient, as&#xD;&#xA;&gt; you will get the following error:&#xD;&#xA;&gt; &#xD;&#xA;&gt; ![newworld86.rom file needs to be renamed to ROM][15]&#xD;&#xA;&gt; &#xD;&#xA;&gt; If you rename the file to just `ROM`, again without any file&#xD;&#xA;&gt; extension, then SheepShaver will run, as desired.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://retrocomputing.stackexchange.com/questions/208/linux-68k-macintosh-emulator#comment-200&#xD;&#xA;  [2]: http://sheepshaver.cebix.net/&#xD;&#xA;  [3]: http://basilisk.cebix.net/&#xD;&#xA;  [4]: http://superuser.com/questions/936506/basiliskii-and-sheepshaver-cant-open-quadra650-rom/936536#936536&#xD;&#xA;  [5]: http://i.stack.imgur.com/LYScS.png&#xD;&#xA;  [6]: https://www.youtube.com/watch?v=0Qqplm9-PQo&#xD;&#xA;  [7]: http://www.redundantrobot.com/sheepshaver-tutorial/&#xD;&#xA;  [8]: http://basilisk.cebix.net/README&#xD;&#xA;  [9]: http://i.stack.imgur.com/rP3kq.png&#xD;&#xA;  [10]: http://i.stack.imgur.com/VrpKw.png&#xD;&#xA;  [11]: http://i.stack.imgur.com/fk6yp.png&#xD;&#xA;  [12]: http://i.stack.imgur.com/M2a5Y.png&#xD;&#xA;  [13]: http://www.redundantrobot.com/macemulator/newworld86.rom.zip&#xD;&#xA;  [14]: http://i.stack.imgur.com/OvZwB.png&#xD;&#xA;  [15]: http://i.stack.imgur.com/2lcir.png&#xD;&#xA;&#xD;&#xA;" />
  <row Id="796" PostHistoryTypeId="2" PostId="300" RevisionGUID="6d919291-4800-48d7-be0b-19d3ea191c80" CreationDate="2016-04-26T07:41:12.873" UserId="105" Text="Assuming a program consisting of a unique big block of `49152` bytes (the whole RAM space). A routine that may be used for a copier to copy this block would sit at the top memory, say at address `64000` along with the stack. Prior to that, the copier asks the user to start loading the big block, just to get the flag byte (which may be different than `255`). This first load is very short, as the flag byte is the first byte present after the sync pulse.&#xD;&#xA;&#xD;&#xA;Then, the copier sets the computer to load a block starting at address `9472`, with a length of `49152` bytes and a flag as got in the first stage. That is: the block starts loading into ROM. Obviously, the first `6912` bytes won't be actually copied, but this is just the screen, which may or may not be needed to run the program. The rest of the program is therefore loaded from address `16384` to `58623`, making a total length of `42240` bytes. The screen will surely show garbage during the load process.&#xD;&#xA;&#xD;&#xA;The copier is still safe beginning at address `64000`. It will craft a header block of type `3` (Bytes), a file name, start address of `23296` and length according to the number of bytes actually copied (worst case it's `42240` bytes). It will save the header, then the block just loaded beginning from `16384`.&#xD;&#xA;&#xD;&#xA;To recover the original screen content (which might have code hidden in it, or used by the initialization routines to check for integrity as a copy countermeasure), the copier would ask the user to load the big block for a second time, but this time the loader would load only `6912` bytes to address `16384`, discarding the rest of the big block. The copier then, would make another header for the screen file, saving it.&#xD;&#xA;&#xD;&#xA;At the end we end up with two blocks: the first one is a big block of `42240` bytes that will start at `23296`, and the second one, smaller, containing the screen, that will start at `16384` with the standard length for a screen of `6912` bytes.&#xD;&#xA;&#xD;&#xA;Using a copier or by other means, the user would swap the blocks in tape so the screen block comes first, then the big block. A BASIC loader for the whole program would be something like:&#xD;&#xA;&#xD;&#xA;    10 POKE 23729,111: LOAD &quot;&quot;SCREEN$: LOAD &quot;&quot;CODE&#xD;&#xA;&#xD;&#xA;The `POKE` command modifies the address of the output routine for the &quot;S&quot; channel to point to an address in ROM in where a `RET` instruction is stored. The effect of this is to silent any text output to the screen, which would corrupt the screen loaded when the second block loads its header and prints the &quot;`Bytes: ....`&quot; text.&#xD;&#xA;&#xD;&#xA;This loader assumes that the stack pointer doesn't get changed from its default value at boot, which will be case for some programs. Others may need the user to get access to the original loader to see what number the `CLEAR` statement has.&#xD;&#xA;&#xD;&#xA;A example routine that performs the copy of the big block is now presented. It is from the spanish magazine &quot;Microhobby&quot; and belongs to a series of articles collectively called &quot;The Bible of the Hacker&quot;. The routine is featured in the XIV issue.&#xD;&#xA;&#xD;&#xA;As presented here, the routine is meant to be used from plain `BASIC`. It uses the `DEF FN` method so one can run the routine with an argument, in this case, the flag needed for the big block. So, to use the routine you would set up a small `BASIC` program as this:&#xD;&#xA;&#xD;&#xA;    10 DEF FN A(N) = USR 64000&#xD;&#xA;&#xD;&#xA;So, assuming the flag is `255`, you would start the routine by typing:&#xD;&#xA;&#xD;&#xA;    RANDOMIZE FN A(255)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;Link to the scanned article (spanish): &#xD;&#xA;http://microhobby.speccy.cz/mhf/088/MH088_21.jpg&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/yj8vF.jpg" />
  <row Id="797" PostHistoryTypeId="2" PostId="301" RevisionGUID="c98f9d7e-b543-4d0d-987b-d26ff179d744" CreationDate="2016-04-26T08:14:34.183" UserId="256" Text="I have an Acorn Electron that came without tape recorder, so I'm using Audacity to record and replay programs which works fine. Now I also have some software as UEF (Universal Emulator Format) files. These can be converted to .WAV using the  'FreeUEF' software for Windows.  &#xD;&#xA;The problem is that so far I only managed to load one program to my Electron this way. All others start out showing the name of the program and the first block number (00) but then immediatly show:  &#xD;&#xA;&#xD;&#xA;DATA?  &#xD;&#xA;REWIND TAPE  &#xD;&#xA;Searching  &#xD;&#xA;&#xD;&#xA;As the .WAV file is still playing it soon finds the next block and continues loading. But when the loading is finished it looks like the computer does not detect the end and the program does not start.  &#xD;&#xA;I've tried several differnt settings for the output volume, but that does not solve it. Also, when I record my own (Basic) programs and replay them it always works fine.  &#xD;&#xA;My guess is that the converted .WAV file does not not contain a proper header or starting tone so the computer misses the first byte(s) but I could be wrong...   &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;" />
  <row Id="798" PostHistoryTypeId="1" PostId="301" RevisionGUID="c98f9d7e-b543-4d0d-987b-d26ff179d744" CreationDate="2016-04-26T08:14:34.183" UserId="256" Text="Acorn Electron fails to load .UEF files converted to .WAV" />
  <row Id="799" PostHistoryTypeId="3" PostId="301" RevisionGUID="c98f9d7e-b543-4d0d-987b-d26ff179d744" CreationDate="2016-04-26T08:14:34.183" UserId="256" Text="&lt;acorn&gt;&lt;electron&gt;" />
  <row Id="800" PostHistoryTypeId="2" PostId="302" RevisionGUID="b80eaeb7-b0ae-40ca-80f3-98a67d1d0e2b" CreationDate="2016-04-26T10:03:53.437" UserId="74" Text="...besides relabelling the disk to 'Lazarus' and helping the Saddam virus spread?&#xD;&#xA;&#xD;&#xA;I know it was supposed to 'fix' corrupted disks that were ejected during a write operation. I don't think I've seen a single case where it would actually succeed; usually it only made things worse by breaking the label by which the disk would identify. There were tools, like 'disk doctor', that would successfully repair the corruption, but the OS-provided disk-validator seemed to be a totally misguided effort.&#xD;&#xA;&#xD;&#xA;So, actually, what did it try to do, and why did it usually fail?" />
  <row Id="801" PostHistoryTypeId="1" PostId="302" RevisionGUID="b80eaeb7-b0ae-40ca-80f3-98a67d1d0e2b" CreationDate="2016-04-26T10:03:53.437" UserId="74" Text="What did disk-validator do?" />
  <row Id="802" PostHistoryTypeId="3" PostId="302" RevisionGUID="b80eaeb7-b0ae-40ca-80f3-98a67d1d0e2b" CreationDate="2016-04-26T10:03:53.437" UserId="74" Text="&lt;amiga&gt;&lt;software&gt;" />
  <row Id="803" PostHistoryTypeId="2" PostId="303" RevisionGUID="1ba91726-43b8-4b3d-ab13-5bebb29a1b9a" CreationDate="2016-04-26T11:47:54.027" UserId="130" Text="The famous `poke -1,x` depends on each computer's slot configuration. The general formula is `poke -1,((peek(-1)xor&amp;hff)and&amp;hf0)*1.0625`. This is copying the high nibble of the secondary slot selection register into the low nibble. And why is this necessary? Sit down and relax.&#xD;&#xA;&#xD;&#xA;##Slots in MSX1&#xD;&#xA;&#xD;&#xA;The original 1983 specification of the MSX system allowed for four memory slots, each divided in 4x16K pages. You can switch any page of any slot into the page with the same number (same addresses range) of the Z80, thus making the slot contents visible.&#xD;&#xA;&#xD;&#xA;A MSX boots (let's ignore cartridge games and the disk system for now) in MSX-BASIC with the following slots configuration: BIOS ROM in page 0, BASIC interpreter in page 1, RAM in pages 2 and 3. Assuming a 64K RAM computer, a game that wants to use more RAM than the upper 32K must switch the RAM slot in page 0 and/or PAGE 1. The usual procedure for this (which works in _almost_ all the machines) is: check the slot switched in page 3, then switch the same slot in page 0/1. And, hey, it worked.&#xD;&#xA;&#xD;&#xA;##Slots in MSX2&#xD;&#xA;&#xD;&#xA;Life was good for those cassette games but then the MSX2 standard appeared in 1985. Amongst other improvements, it introduced the concept of _expanded slots_. This means that one or more of the four primary slots can be expanded, meaning that the slot actually consists of four _subslots_. So in that case you no longer have e.g. slot 3, but slots 3-0, 3-1, 3-2, and 3-3.&#xD;&#xA;&#xD;&#xA;How does that work? To switch a expanded slot, let's say 3-2 in page 1, you first switch primary slot 3 in page 3. Then you write a value in the _secondary slot selection register_ for this slot, which is located at its address FFFFh. This register contains four two-bit fields, each indicating the secondary slot number that is visible at each page _when the slot is switched to that page_. Whoa. So in our case the value would be `xxxx01xx ` (xx = the previous value).&#xD;&#xA;&#xD;&#xA;##The problem&#xD;&#xA;&#xD;&#xA;So now let's say we are loading a game from a cassette tape in our shiny MSX2 computer. The game does the &quot;let's check the page 3 slot and switch it in page 1&quot; trick to get more RAM visible. But that does not work. Why?&#xD;&#xA;&#xD;&#xA;MSX2 computers have usually slot 3 expanded, and RAM is in one of these subslots. Let's say it's in 3-2 in our case. So the game sees that slot 3 is on page 3, so it switches it on page 1... but **what secondary slot is visible**? Answer: we don't know, it could be anything! Chances are that it is not subslot 2 as we expect, so no RAM is actually visible and... booom.&#xD;&#xA;&#xD;&#xA;##The solution&#xD;&#xA;&#xD;&#xA;The &quot;magical poke&quot; solves this by making sure that the values of the secondary slot selection register of the RAM slot for pages 0 and 1 are the same as for pages 2 and 3 (which are usually the same). You can poke directly from BASIC because the RAM slot is already visible in page 3 (-1 = &amp;HFFF in BASIC), then the non-expended-slots-aware game can happily switch just the primary slot, and tada! RAM is here happily waiting for us.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;" />
  <row Id="804" PostHistoryTypeId="2" PostId="304" RevisionGUID="1a96f419-d3ab-4143-bf39-f5201ea159f2" CreationDate="2016-04-26T12:31:27.653" UserId="141" Text="It would work in simple cases where there was a crash during a write in such a way that it would simply not finish.&#xD;&#xA;&#xD;&#xA;What would happen as part of a write was that the bitmap(s) indexing unused blocks (0 = used, 1 = unused) would be invalidated, the write would proceed, the bitmap updated with the information about newly used blocks and marked as valid again.&#xD;&#xA;&#xD;&#xA;If a crash occurred while the bitmap was not marked as valid, then the disk would be read-only to the user and OS apart from the disk-validator. It would then go through the disk to rebuild the bitmap and mark it as valid, after which the disk would be read/write again.&#xD;&#xA;&#xD;&#xA;The unfinished file would have to be regenerated (or &quot;part-salvaged&quot; by the user).&#xD;&#xA;&#xD;&#xA;Now, a less controlled crash/error (such as a power loss or accidental eject while writing?) might be more unpredictable and more likely to trash other data, perhaps including metadata about the directory layout; this would require more specialised repair programs to see &quot;invisible files&quot; etc., which I do not have under-the-hood knowledge of.." />
  <row Id="806" PostHistoryTypeId="5" PostId="290" RevisionGUID="74b8265d-bb36-4761-915e-78c942da12b5" CreationDate="2016-04-26T13:19:22.417" UserId="56" Comment="added 53 characters in body" Text="Discussion of the XBAND Video Game Modem and Network." />
  <row Id="807" PostHistoryTypeId="24" PostId="290" RevisionGUID="74b8265d-bb36-4761-915e-78c942da12b5" CreationDate="2016-04-26T13:19:22.417" Comment="Proposed by 56 approved by 47 edit id of 100" />
  <row Id="808" PostHistoryTypeId="5" PostId="299" RevisionGUID="2ce784c5-fb88-45c9-b9b9-9fcbd858e11f" CreationDate="2016-04-26T13:19:39.887" UserId="107" Comment="added 111 characters in body" Text="This tag is for questions related to the Atari TOS operating system which was used on the ST line of computers." />
  <row Id="809" PostHistoryTypeId="24" PostId="299" RevisionGUID="2ce784c5-fb88-45c9-b9b9-9fcbd858e11f" CreationDate="2016-04-26T13:19:39.887" Comment="Proposed by 107 approved by -1 edit id of 106" />
  <row Id="810" PostHistoryTypeId="5" PostId="299" RevisionGUID="4e5c22ea-8963-47bb-97c9-9d9d4cb4d098" CreationDate="2016-04-26T13:19:39.887" UserId="47" Comment="deleted 12 characters in body" Text="For questions related to the Atari TOS operating system which was used on the ST line of computers." />
  <row Id="811" PostHistoryTypeId="5" PostId="275" RevisionGUID="cba31111-9dc9-4d95-b380-7fe8ab167a07" CreationDate="2016-04-26T13:19:43.607" UserId="125" Comment="added 408 characters in body" Text="This tag is intended for older, vintage Malware (malicious software), a type of program designed to access a computer system without the owner's informed consent, usually for reasons of data theft or other destructive purposes.&#xD;&#xA;&#xD;&#xA;Malware can include (but is not limited to) computer viruses, worms, trojan horses, spyware, dishonest adware, scareware, crimeware, most rootkits, and other malicious programs." />
  <row Id="812" PostHistoryTypeId="24" PostId="275" RevisionGUID="cba31111-9dc9-4d95-b380-7fe8ab167a07" CreationDate="2016-04-26T13:19:43.607" Comment="Proposed by 125 approved by 47 edit id of 94" />
  <row Id="813" PostHistoryTypeId="5" PostId="291" RevisionGUID="a3cad352-3bb2-4098-81a6-e0325d563ada" CreationDate="2016-04-26T13:19:46.450" UserId="56" Comment="added 496 characters in body" Text="A modem (modulator/demodulator) is used to transmit digital information via analog signals.  In retro-computing, this usually means sound waves over telephone lines.&#xD;&#xA;&#xD;&#xA;Appropriate topics pertain to aspects of modems particular to retro-computing devices.  For example, while 300 baud signaling isn't popular anymore, it's not inherently retro, as modern devices typically support it (along with many other protocols).  Features tied to a certain era, like US Robotics' HST, are suitably retro.&#xD;&#xA;" />
  <row Id="814" PostHistoryTypeId="24" PostId="291" RevisionGUID="a3cad352-3bb2-4098-81a6-e0325d563ada" CreationDate="2016-04-26T13:19:46.450" Comment="Proposed by 56 approved by 47 edit id of 101" />
  <row Id="815" PostHistoryTypeId="5" PostId="262" RevisionGUID="cab5e54b-f57a-477e-9499-91c7e2d8f4f1" CreationDate="2016-04-26T13:19:56.850" UserId="141" Comment="Trying to save it.." Text="For questions about computer disk drives for removable magnetic storage media." />
  <row Id="816" PostHistoryTypeId="24" PostId="262" RevisionGUID="cab5e54b-f57a-477e-9499-91c7e2d8f4f1" CreationDate="2016-04-26T13:19:56.850" Comment="Proposed by 141 approved by 47 edit id of 90" />
  <row Id="817" PostHistoryTypeId="5" PostId="276" RevisionGUID="48649f15-ada9-4011-94e3-953136eba73f" CreationDate="2016-04-26T13:20:10.087" UserId="125" Comment="added 227 characters in body" Text="This tag is intended for older, vintage Malware (malicious software), a type of program designed to access a computer system without the owner's informed consent, usually for reasons of data theft or other destructive purposes." />
  <row Id="818" PostHistoryTypeId="24" PostId="276" RevisionGUID="48649f15-ada9-4011-94e3-953136eba73f" CreationDate="2016-04-26T13:20:10.087" Comment="Proposed by 125 approved by 47 edit id of 95" />
  <row Id="819" PostHistoryTypeId="5" PostId="298" RevisionGUID="2eddfeb5-8203-4e60-89cd-e8595d6b079c" CreationDate="2016-04-26T13:20:13.343" UserId="107" Comment="added 450 characters in body" Text="TOS (The Operating System also Tramiel Operating System from Jack Tramiel, owner of Atari Inc. at the time) is the operating system of the Atari ST range of computers. This range includes the 520 and 1040ST, their STF/M/FM and STE variants and the Mega ST/STE. Later, 32-bit machines (TT, Falcon030) were developed using a new version of TOS, called MultiTOS, which allowed multitasking. More recently, users have further developed TOS into FreeMiNT." />
  <row Id="820" PostHistoryTypeId="24" PostId="298" RevisionGUID="2eddfeb5-8203-4e60-89cd-e8595d6b079c" CreationDate="2016-04-26T13:20:13.343" Comment="Proposed by 107 approved by 47 edit id of 105" />
  <row Id="821" PostHistoryTypeId="5" PostId="279" RevisionGUID="8fecffbb-6d5b-4337-a3ab-685a1bfbc8a0" CreationDate="2016-04-26T13:20:16.317" UserId="125" Comment="added 303 characters in body" Text="The Atari 2600 is a 2nd generation home video game console by Atari, Inc. This tag should be used if the question is about the Atari 2600 hardware or cartridges.&#xD;&#xA;&#xD;&#xA; - Manufacturer: Atari, Inc.&#xD;&#xA; - Released: 1977 (USA), 1978 (EU), October 1983 (Japan, as the Atari 2800)&#xD;&#xA; - Game Media: Cartridge, Tape." />
  <row Id="822" PostHistoryTypeId="24" PostId="279" RevisionGUID="8fecffbb-6d5b-4337-a3ab-685a1bfbc8a0" CreationDate="2016-04-26T13:20:16.317" Comment="Proposed by 125 approved by 47 edit id of 96" />
  <row Id="823" PostHistoryTypeId="5" PostId="289" RevisionGUID="e2ccbda3-557e-4777-a213-4f8111fe328b" CreationDate="2016-04-26T13:20:18.890" UserId="56" Comment="added 457 characters in body" Text="XBAND was an online gaming system for consoles, first sold in 1994.  Hardware was developed for the Sega Genesis and Super Nintendo Entertainment System (SNES) that allowed supported games to be played over a phone line.  An online service provided game matching and e-mail.  The system was later expanded to include the Sega Saturn.&#xD;&#xA;&#xD;&#xA;A description of the product and service can be found on [wikipedia][1].&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://en.wikipedia.org/wiki/XBAND" />
  <row Id="824" PostHistoryTypeId="24" PostId="289" RevisionGUID="e2ccbda3-557e-4777-a213-4f8111fe328b" CreationDate="2016-04-26T13:20:18.890" Comment="Proposed by 56 approved by 47 edit id of 99" />
  <row Id="825" PostHistoryTypeId="5" PostId="261" RevisionGUID="2594a954-4c12-4e66-af61-fc0e0a7b5f80" CreationDate="2016-04-26T13:20:21.680" UserId="141" Comment="Trying to save it.." Text="Questions about the actual media such as 5.25&quot; or 3.25&quot; disks or disk data formats should be tagged with [floppy-disk].&#xD;&#xA;Questions about optical drives and media should be tagged separately." />
  <row Id="826" PostHistoryTypeId="24" PostId="261" RevisionGUID="2594a954-4c12-4e66-af61-fc0e0a7b5f80" CreationDate="2016-04-26T13:20:21.680" Comment="Proposed by 141 approved by 47 edit id of 89" />
  <row Id="827" PostHistoryTypeId="5" PostId="292" RevisionGUID="db014ad5-40a0-475f-b260-0744d5371baf" CreationDate="2016-04-26T13:20:33.580" UserId="56" Comment="added 36 characters in body" Text="Discussion of retrocomputing modems." />
  <row Id="828" PostHistoryTypeId="24" PostId="292" RevisionGUID="db014ad5-40a0-475f-b260-0744d5371baf" CreationDate="2016-04-26T13:20:33.580" Comment="Proposed by 56 approved by 47 edit id of 102" />
  <row Id="829" PostHistoryTypeId="5" PostId="297" RevisionGUID="230f6968-aebf-4fbc-9f5f-2db5e5e84b29" CreationDate="2016-04-26T13:20:40.223" UserId="107" Comment="added 102 characters in body" Text="For questions relating to the use and development of hardware drivers for a computer operating system." />
  <row Id="830" PostHistoryTypeId="24" PostId="297" RevisionGUID="230f6968-aebf-4fbc-9f5f-2db5e5e84b29" CreationDate="2016-04-26T13:20:40.223" Comment="Proposed by 107 approved by 47 edit id of 104" />
  <row Id="832" PostHistoryTypeId="6" PostId="185" RevisionGUID="c929c07e-e9ce-4e14-bc2d-27db3cf82d23" CreationDate="2016-04-26T17:05:42.980" UserId="173" Comment="edited tags" Text="&lt;atari&gt;&lt;apple-ii&gt;&lt;commodore-64&gt;&lt;color-computer&gt;" />
  <row Id="833" PostHistoryTypeId="2" PostId="305" RevisionGUID="086f9d24-1345-48b3-96ee-9621795bc876" CreationDate="2016-04-26T17:34:06.117" UserId="173" Text="Several chips come to mind that can cause this on an 800XL.&#xD;&#xA;&#xD;&#xA; - CPU &#xD;&#xA; - Antic &#xD;&#xA; - OS &#xD;&#xA; - ROM &#xD;&#xA; - RAM &#xD;&#xA; - Chips&#xD;&#xA;&#xD;&#xA;If you don't have a logic analyzer, scope or logic probe, your only real option is to swap IC chips with known good ones. &#xD;&#xA;&#xD;&#xA;If you have any of the equipment above, the Atari field service manuals or SAM's Computerfacts available at [Atari Mania][1] will be of great service in your attempts to resurrect the XL.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.atarimania.com/documents-atari-atari-400-800-xl-xe--technical-documents_3_8.html" />
  <row Id="834" PostHistoryTypeId="2" PostId="306" RevisionGUID="bbc75f53-7f04-4c9e-a8be-b209450ae96d" CreationDate="2016-04-26T17:43:52.203" UserId="81" Text="On my systems that are running MS-DOS, I change the default **command.com** to [4DOS](http://www.4dos.info/) for more features.&#xD;&#xA;&#xD;&#xA;How was the shell system designed and how did it with the operating system in MS-DOS that it enabled you to swap in a different one?" />
  <row Id="835" PostHistoryTypeId="1" PostId="306" RevisionGUID="bbc75f53-7f04-4c9e-a8be-b209450ae96d" CreationDate="2016-04-26T17:43:52.203" UserId="81" Text="How does the command.com shell work with MS-DOS?" />
  <row Id="836" PostHistoryTypeId="3" PostId="306" RevisionGUID="bbc75f53-7f04-4c9e-a8be-b209450ae96d" CreationDate="2016-04-26T17:43:52.203" UserId="81" Text="&lt;ms-dos&gt;&lt;shell&gt;" />
  <row Id="841" PostHistoryTypeId="2" PostId="308" RevisionGUID="4c61ad44-8a5d-4feb-9e77-9050b167f04c" CreationDate="2016-04-26T18:37:02.473" UserId="29" Text="How does the TIMER function work in Color BASIC? How does the number keep incrementing even when the computer appears to be doing nothing? " />
  <row Id="842" PostHistoryTypeId="1" PostId="308" RevisionGUID="4c61ad44-8a5d-4feb-9e77-9050b167f04c" CreationDate="2016-04-26T18:37:02.473" UserId="29" Text="Color BASIC TIMER Fuction" />
  <row Id="843" PostHistoryTypeId="3" PostId="308" RevisionGUID="4c61ad44-8a5d-4feb-9e77-9050b167f04c" CreationDate="2016-04-26T18:37:02.473" UserId="29" Text="&lt;color-computer&gt;&lt;color-basic&gt;" />
  <row Id="844" PostHistoryTypeId="2" PostId="309" RevisionGUID="abb25287-19da-4095-934f-d085f99bfcec" CreationDate="2016-04-26T18:38:11.733" UserId="4" Text="Virtually every telephone modem in existence runs at a data rate that's a multiple of the Bell 103A's 300 bps.  Why was the base 300 bps chosen in the first place?" />
  <row Id="845" PostHistoryTypeId="1" PostId="309" RevisionGUID="abb25287-19da-4095-934f-d085f99bfcec" CreationDate="2016-04-26T18:38:11.733" UserId="4" Text="Why did the Bell 103 modem use a data rate of 300 bps?" />
  <row Id="846" PostHistoryTypeId="3" PostId="309" RevisionGUID="abb25287-19da-4095-934f-d085f99bfcec" CreationDate="2016-04-26T18:38:11.733" UserId="4" Text="&lt;history&gt;&lt;modem&gt;" />
  <row Id="848" PostHistoryTypeId="2" PostId="310" RevisionGUID="a944c0ed-c41e-4f2a-af1a-77d6bc7780a2" CreationDate="2016-04-26T19:04:48.053" UserId="12" Text="The signalling rate (baud) is constrained by a few things. Probably most important is the maximum signalling rate (roughly, how many changes a second) of the path the signal takes (i.e., POTS wires). How many bits can be represented by one signalling change gives us the bits per second.&#xD;&#xA;&#xD;&#xA;I think the early Bell modems were 110 baud and used frequency-shift keying (FSK). This gives us one bit per signal change, or 110 bps. Similarly the Bell 103 had a signalling rate of 300 baud with FSK giving us 300 bps.&#xD;&#xA;&#xD;&#xA;100 and 300 baud were chosen at the time primarily because both modems were intended to be used over copper wire and &quot;unconditioned&quot; telephone lines, with at least one part of the connection going through an acoustic coupler. The worst-case for acoustic couplers talking to carbon microphones is somewhere around 300 baud. Since this is a worst-case, this is what we get.&#xD;&#xA;&#xD;&#xA;This could theoretically be increased, but reliability suffers.&#xD;&#xA;&#xD;&#xA;A natural improvement is to increase the number of bits that can be transferred for each signalling rate, which is what newer modulation techniques like PSK, Trellis, etc. gives us. The baud rate can stay the same so that it is within safe parameters for unconditioned lines, and the bit-rate can be increased.&#xD;&#xA;&#xD;&#xA;As phone lines improved and lines could be counted on to be conditioned, and advances in modulation error correction and error detection, baud rates increased. This led to increases in bit-rate.  I think the last telephone modems had a baud rate of 8000, and modulations that allowed for 56/46 kbs as a result." />
  <row Id="849" PostHistoryTypeId="5" PostId="310" RevisionGUID="cd524669-8c93-4bd3-9363-75d3e4bb4de3" CreationDate="2016-04-26T19:10:08.180" UserId="12" Comment="added 66 characters in body" Text="The signalling rate (baud) is constrained by a few things. Probably most important is the maximum signalling rate (roughly, how many changes a second) of the path the signal takes (i.e., POTS wires). How many bits can be represented by one signalling change gives us the bits per second.&#xD;&#xA;&#xD;&#xA;I think the early Bell modems were 110 baud and used frequency-shift keying (FSK). This gives us one bit per signal change, or 110 bps. Similarly the Bell 103 had a signalling rate of 300 baud with FSK giving us 300 bps.&#xD;&#xA;&#xD;&#xA;100 and 300 baud were chosen at the time primarily because both modems were intended to be used over copper wire and &quot;unconditioned&quot; telephone lines, with at least one part of the connection going through an acoustic coupler. The worst-case for acoustic couplers talking to carbon microphones is somewhere around 300 baud. Since this is a worst-case, this is what we get.&#xD;&#xA;&#xD;&#xA;This could theoretically be increased, but reliability suffers.&#xD;&#xA;&#xD;&#xA;A natural improvement is to increase the number of bits that can be transferred for each signalling rate, which is what newer modulation techniques like PSK, Trellis, etc. gives us. The baud rate can stay the same so that it is within safe parameters for unconditioned lines, and the bit-rate can be increased.&#xD;&#xA;&#xD;&#xA;As phone lines improved and lines could be counted on to be conditioned (and we knew where wouldn't be a carbon-microphone step in there), and advances in modulation error correction and error detection, baud rates increased. This led to increases in bit-rate.  I think the last telephone modems had a baud rate of 8000, and modulations that allowed for 56/46 kbs as a result." />
  <row Id="850" PostHistoryTypeId="5" PostId="303" RevisionGUID="87d7fe7e-8d3d-40c6-b775-e5e6e46161c6" CreationDate="2016-04-26T19:14:23.800" UserId="130" Comment="Small corrections" Text="The famous `poke -1,x` depends on each computer's slot configuration. The general formula is `poke -1,((peek(-1)xor&amp;hff)and&amp;hf0)*1.0625`. This is copying the high nibble of the secondary slot selection register into the low nibble. And why is this necessary? Sit down and relax.&#xD;&#xA;&#xD;&#xA;##Slots in MSX1&#xD;&#xA;&#xD;&#xA;The original 1983 specification of the MSX system allowed for four memory slots, each divided in 4x16K pages. You can switch any page of any slot into the page with the same number (same addresses range) of the Z80, thus making the slot contents visible.&#xD;&#xA;&#xD;&#xA;A MSX boots (let's ignore cartridge games and the disk system for now) in MSX-BASIC with the following slots configuration: BIOS ROM in page 0, BASIC interpreter in page 1, RAM in pages 2 and 3. Assuming a 64K RAM computer, a game that wants to use more RAM than the upper 32K must switch the RAM slot in page 0 and/or PAGE 1. The usual procedure for this (which works in _almost_ all the machines) is: check the slot switched in page 3, then switch the same slot in page 0/1. And, hey, it worked.&#xD;&#xA;&#xD;&#xA;##Slots in MSX2&#xD;&#xA;&#xD;&#xA;Life was good for those cassette games but then the MSX2 standard appeared in 1985. Amongst other improvements, it introduced the concept of _expanded slots_. This means that one or more of the four primary slots can be expanded, meaning that the slot actually consists of four _subslots_. So in that case you no longer have e.g. slot 3, but slots 3-0, 3-1, 3-2, and 3-3.&#xD;&#xA;&#xD;&#xA;How does that work? To switch a expanded slot, let's say 3-2 in page 1, you first switch primary slot 3 in page 3. Then you write a value in the _secondary slot selection register_ for this slot, which is located at its address FFFFh. This register contains four two-bit fields, each indicating the secondary slot number that is visible at each page _when the slot is switched to that page_. Whoa. So in our case the value would be `xxxx10xx ` (xx = the previous value).&#xD;&#xA;&#xD;&#xA;##The problem&#xD;&#xA;&#xD;&#xA;So now let's say we are loading a game from a cassette tape in our shiny MSX2 computer. The game does the &quot;let's check the page 3 slot and switch it in page 1&quot; trick to get more RAM visible. But that does not work. Why?&#xD;&#xA;&#xD;&#xA;MSX2 computers have usually slot 3 expanded, and RAM is in one of these subslots. Let's say it's in 3-2 in our case. So the game sees that slot 3 is on page 3, so it switches it on page 1... but **what secondary slot is visible**? Answer: we don't know, it could be anything! Chances are that it is not subslot 2 as we expect, so no RAM is actually visible and... booom.&#xD;&#xA;&#xD;&#xA;##The solution&#xD;&#xA;&#xD;&#xA;The &quot;magical poke&quot; solves this by making sure that the values of the secondary slot selection register of the RAM slot for pages 0 and 1 are the same as for pages 2 and 3 (which are usually the same). You can poke directly from BASIC because the RAM slot is already visible in page 3 (-1 = &amp;HFFFF in BASIC), then the non-expended-slots-aware game can happily switch just the primary slot, and tada! RAM is here happily waiting for us.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;" />
  <row Id="851" PostHistoryTypeId="5" PostId="310" RevisionGUID="32d92736-eff8-4b7c-9330-fe2f5a2d7ef4" CreationDate="2016-04-26T19:17:54.797" UserId="12" Comment="added 108 characters in body" Text="The signalling rate (baud) is constrained by a few things. Probably most important is the maximum signalling rate (roughly, how many changes a second) of the path the signal takes (i.e., POTS wires). How many bits can be represented by one signalling change gives us the bits per second.&#xD;&#xA;&#xD;&#xA;I think the early Bell modems were 110 baud and used frequency-shift keying (FSK). This gives us one bit per signal change, or 110 bps. Similarly the Bell 103 had a signalling rate of 300 baud with FSK giving us 300 bps.&#xD;&#xA;&#xD;&#xA;110 and 300 baud were chosen at the time primarily because both modems were intended to be used over copper wire and &quot;unconditioned&quot; telephone lines, with at least one part of the connection going through an acoustic coupler. The worst-case for acoustic couplers talking to carbon microphones is somewhere around 300 baud. Since this is a worst-case, this is what we get.&#xD;&#xA;&#xD;&#xA;(I recall 110 baud was related to reliable half-duplex teletype comms, but I might be wrong about that.)&#xD;&#xA;&#xD;&#xA;This could theoretically be increased, but reliability suffers.&#xD;&#xA;&#xD;&#xA;A natural improvement is to increase the number of bits that can be transferred for each signalling rate, which is what newer modulation techniques like PSK, Trellis, etc. gave us. The baud rate can stay the same so that it is within safe parameters for unconditioned lines, and the bit-rate can be increased.&#xD;&#xA;&#xD;&#xA;As phone lines improved and lines could be counted on to be conditioned (and we knew there wouldn't be a carbon-microphone step in there somewhere) and advances in modulation error correction and error detection, baud rates increased. This led to increases in bit-rate.  I think the last telephone modems had a baud rate of 8000, and modulations that allowed for 56/46 kbs as a result." />
  <row Id="852" PostHistoryTypeId="2" PostId="311" RevisionGUID="6f62489f-8155-48a2-8b1d-9655563443d9" CreationDate="2016-04-26T19:20:52.130" UserId="130" Text="" />
  <row Id="853" PostHistoryTypeId="2" PostId="312" RevisionGUID="0117b859-7bd0-406b-9c8a-407a7123fcba" CreationDate="2016-04-26T19:20:52.130" UserId="130" Text="For questions about the MSX standard or about computers, hardware or software conforming to the MSX standard." />
  <row Id="854" PostHistoryTypeId="2" PostId="313" RevisionGUID="27670525-a1ef-4326-aaf9-e7e86474bba3" CreationDate="2016-04-26T20:20:37.657" UserId="-1" Text="" />
  <row Id="855" PostHistoryTypeId="2" PostId="314" RevisionGUID="1d0c3c6e-c32e-4b48-af7a-1c9548026689" CreationDate="2016-04-26T20:20:37.657" UserId="-1" Text="" />
  <row Id="856" PostHistoryTypeId="5" PostId="285" RevisionGUID="777462f9-9937-4782-90be-df5319a0473a" CreationDate="2016-04-26T20:37:46.870" UserId="12" Comment="added 4 characters in body" Text="The first computer _virus_ (as opposed to a _worm_ that exploited network or boot code; though I make the distinction as a way to present this answer, **not** as an example of pedantry) was probably created by [Fred Cohen][1] as part of his research into into parasitic, self-replicating applications in 1983.&#xD;&#xA;&#xD;&#xA;Cohen does not give any of his early experiments names in his historical overview of the subject in &quot;[A Short Course on Computer Viruses][2]&quot;, but there are plenty of details about the modes and environments they chose.&#xD;&#xA;&#xD;&#xA;Cohen is considered the first to coin the term &quot;computer virus&quot; to describe the programs and the mechanisms by which they spread.&#xD;&#xA;&#xD;&#xA;Of course, none of this work was &quot;malicious&quot; in nature, as Cohen was interested in the computer science of parasitic programs and possible positive uses for them. So this answer may not satisfy the requirement that the payload be &quot;malicious.&quot; I present this to illustrate that early viruses actually _weren't_ interested in malicious payloads.&#xD;&#xA;&#xD;&#xA;  [1]: https://en.wikipedia.org/wiki/Fred_Cohen&#xD;&#xA;  [2]: http://www.amazon.com/Course-Computer-Viruses-Professional-Computing/dp/0471007684" />
  <row Id="857" PostHistoryTypeId="2" PostId="315" RevisionGUID="de74f95e-c2c0-448a-8a32-04a2eae2eb45" CreationDate="2016-04-26T20:42:41.340" UserId="-1" Text="" />
  <row Id="858" PostHistoryTypeId="2" PostId="316" RevisionGUID="4c8fe4dd-a0e7-4144-ae3a-f7c4bb83c9a0" CreationDate="2016-04-26T20:42:41.340" UserId="-1" Text="" />
  <row Id="859" PostHistoryTypeId="2" PostId="317" RevisionGUID="3f114271-470e-4010-88ac-6e9d7404fd59" CreationDate="2016-04-26T22:15:49.507" UserId="56" Text="The Apple II hi-res screen sits on 8KB of memory, so it should be possible to erase it quickly.  The Applesoft `HGR` command is slow enough that the &quot;Venetian blind&quot; erasure is clearly visible.  Clearing the screen to a color with `CALL 62454` feels even slower.  Why is this?" />
  <row Id="860" PostHistoryTypeId="1" PostId="317" RevisionGUID="3f114271-470e-4010-88ac-6e9d7404fd59" CreationDate="2016-04-26T22:15:49.507" UserId="56" Text="Why is the Apple II hi-res HGR command so slow?" />
  <row Id="861" PostHistoryTypeId="3" PostId="317" RevisionGUID="3f114271-470e-4010-88ac-6e9d7404fd59" CreationDate="2016-04-26T22:15:49.507" UserId="56" Text="&lt;apple-ii&gt;&lt;6502&gt;" />
  <row Id="862" PostHistoryTypeId="2" PostId="318" RevisionGUID="556187e1-7190-487f-b942-8ec26154f0c0" CreationDate="2016-04-26T22:15:49.507" UserId="56" Text="If you look at the screen clear code in the Applesoft BASIC ROM, you'll find this:&#xD;&#xA;&#xD;&#xA;    f3f6    lda $e6        ;put base address of current hi-res page&#xD;&#xA;            sta $1b        ; into $1a/1b (will be $2000 or $4000)&#xD;&#xA;            ldy #$00&#xD;&#xA;            sty $1a&#xD;&#xA;    f3fe    lda $1c        ;get color value&#xD;&#xA;            sta ($1a),y    ;store it in frame buffer&#xD;&#xA;            jsr $f47e      ;update color value&#xD;&#xA;            iny            ;advance, looping...&#xD;&#xA;            bne $f3fe&#xD;&#xA;            inc $1b&#xD;&#xA;            lda $1b&#xD;&#xA;            and #$1f&#xD;&#xA;            bne $f3fe      ;...until we get to $4000/$6000&#xD;&#xA;            rts&#xD;&#xA;&#xD;&#xA;    f47e    asl            ;lose the hi bit, now $00/$fe for black/white,&#xD;&#xA;            cmp #$c0       ; or $54/$aa for green/purple/orange/blue&#xD;&#xA;            bpl $f489      ;branch if black or white&#xD;&#xA;            lda $1c&#xD;&#xA;            eor #$7f       ;invert color bits for odd/even&#xD;&#xA;            sta $1c&#xD;&#xA;    f489    rts&#xD;&#xA;&#xD;&#xA;This is a ROM routine, so size is at a premium, and self-modifying code is not allowed.  It's optimized for space, not speed.&#xD;&#xA;&#xD;&#xA;The most significant impact of this optimization choice is the code at $f47e, which tests the color value and potentially updates it for every byte.  This code is necessary because of the rather strange hi-res graphics layout, which (among other oddities) represents an odd number of pixels with each byte.  So while a solid black line is `00 00 00 00 ...`, a solid green line is `2a 55 2a 55 ...`.  The high bit doesn't change, hence the exclusive-OR with $7f.  (The code at $f47e is shared with other routines, e.g. the line-drawing code, that must update the color when moving across the screen.)&#xD;&#xA;&#xD;&#xA;The total time required to erase the screen to black is 271,121 cycles.  Clearing to green would require 328,465 cycles.&#xD;&#xA;&#xD;&#xA;The fastest possible screen clear would write a byte to 7680 addresses -- it's not 8192 because we don't need to overwrite the &quot;screen holes&quot;.  On a 6502, that requires 4 cycles per byte, or about 30720 cycles.  The code to do that would fill about half of available RAM on an Apple II though.&#xD;&#xA;&#xD;&#xA;A 192-byte unrolled loop can do it in about 39480 cycles.  That's ~5x the code, for ~8x the speed.&#xD;&#xA;&#xD;&#xA;While these approaches are faster, they still have the &quot;Venetian blind&quot; look.  While that's something of an Apple II hallmark, not everyone wants that, and it may not be possible to simply show page 2 while you're erasing page 1.  In a mere 127 bytes, for ~41,300 cycles you can erase the screen from right to left, using a [clever function written by John Brooks][1].&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://groups.google.com/d/msg/comp.sys.apple2/Jkb6V4v-65k/7Lqg6o7QCQAJ" />
  <row Id="863" PostHistoryTypeId="5" PostId="305" RevisionGUID="3ccb7482-bd25-479e-a467-ff3b017a390b" CreationDate="2016-04-27T00:27:25.890" UserId="173" Comment="deleted 5 characters in body" Text="Several chips come to mind that can cause this on an 800XL.&#xD;&#xA;&#xD;&#xA; - CPU &#xD;&#xA; - Antic &#xD;&#xA; - OS &#xD;&#xA; - ROM &#xD;&#xA; - RAM Chips&#xD;&#xA;&#xD;&#xA;If you don't have a logic analyzer, scope or logic probe, your only real option is to swap IC chips with known good ones. &#xD;&#xA;&#xD;&#xA;If you have any of the equipment above, the Atari field service manuals or SAM's Computerfacts available at [Atari Mania][1] will be of great service in your attempts to resurrect the XL.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.atarimania.com/documents-atari-atari-400-800-xl-xe--technical-documents_3_8.html" />
  <row Id="865" PostHistoryTypeId="2" PostId="319" RevisionGUID="6b520848-c5fd-465b-b15d-20291fbe16e9" CreationDate="2016-04-27T06:59:29.843" UserId="79" Text="Traditionally, operating shells are relatively independent of the operating system's function and the operating system can operate without a shell. Most shells have two modes of operation, interactive mode where they manage the command line and execute commands entered interactively, and batch mode where they run scripts.&#xD;&#xA;&#xD;&#xA;COMMAND.COM follows this standard model of shell design, but it's more closely tied to MS-DOS than you might expect. Because of the way DOS works, with no protection between processes, and using fairly well-documented (or reverse-engineered) functions via the 0x21 interrupt, operating system functions could be implemented in various places, and extended by any number of programs, so the &quot;kernel&quot;, command interpreter and extension TSRs ended up constituting a closely-tied ecosystem... DOS ended up relying on COMMAND.COM for certain features, and some of the features DOS provided to COMMAND.COM ended up being extended in ways users expected to find; replacement DOS shells had to provide the former, and ideally respect the latter.&#xD;&#xA;&#xD;&#xA;Some examples will hopefully help understand the kinds of issues involved better.&#xD;&#xA;&#xD;&#xA;* COMMAND.COM uses a DOS function, [0x210A (&quot;Buffered Keyboard Input&quot;)][1], to read command lines; as standard this provides basic command-line editing capabilities (move the cursor around, insert/delete handling, and &lt;kbd&gt;F3&lt;/kbd&gt; command recall), but many TSRs were available to extend this: CMDEDIT, DOS 5's own DOSKEY... As an added subtlety, starting with DOS 3.3, function 0x210A indirectly checked the passage of time to handle midnight — imagine you left a DOS computer sitting at the command prompt overnight; whose job is it to notice that the date has to change? Obviously it's the operating system's responsibility, but in single-tasking DOS this required the co-operation of whatever software was running. DOSKEY hooked 0x210A to provide its enhanced command-line handling (adding history), and re-implemented most of the time-related features — but it does not handle midnight, so a DOS 5 computer running DOSKEY can lose a day if it's sitting at the command prompt at midnight.&#xD;&#xA;* COMMAND.COM allows other programs to run its internal commands (in DOS, even commands such as `DIR` and `COPY` are implemented in the command processor); replacement shells ideally need to implement this too. Some third-party programs used this to add new internal commands to DOS, so replacement shells not only need to expose their internal commands in the same way as COMMAND.COM (I can't remember the details off-hand), they should really support the same extension hooks too.&#xD;&#xA;* COMMAND.COM splits itself into multiple sections: one (small part) for the primary shell, which is always resident, one containing initialisation code, and finally the so-called transient part which implements most of the functionality. The transient part isn't needed during execution of other programs, so to provide more memory for applications, it is designed so that it can remain in memory opportunistically without using any allocated memory. The way this works is that it is relocated to the top of memory (with hooks so the other parts of COMMAND.COM can find it), with some sort of signature. Programs which run without using much memory won't overwrite any of this, and when COMMAND.COM regains control, it checks its transient portion and can then just reuse it without reloading anything. Programs which use enough memory will overwrite the transient portion; when COMMAND.COM regains control, it notices this and reloads its transient portion from disk (which may involve swapping floppies; the `COMSPEC` variable was used to point COMMAND.COM to the right file).&#xD;&#xA;&#xD;&#xA;Most of this was documented at the time, and what wasn't was quickly discovered. Nowadays you can read the source code for FreeCOM or 4DOS if you're curious to see exactly how a DOS shell works...&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.ctyme.com/intr/rb-2563.htm" />
  <row Id="866" PostHistoryTypeId="5" PostId="319" RevisionGUID="c2c30369-a7cd-4667-8835-28ddaf7f970d" CreationDate="2016-04-27T07:04:38.547" UserId="79" Comment="added 86 characters in body" Text="Traditionally, operating shells are relatively independent of the operating system's function and the operating system can operate without a shell. Most shells have two modes of operation, interactive mode where they manage the command line and execute commands entered interactively, and batch mode where they run scripts.&#xD;&#xA;&#xD;&#xA;COMMAND.COM follows this standard model of shell design, but it's more closely tied to MS-DOS than you might expect. Because of the way DOS works, with no protection between processes, and using fairly well-documented (or reverse-engineered) functions via the 0x21 interrupt, operating system functions could be implemented in various places, and extended by any number of programs, so the &quot;kernel&quot;, command interpreter and extension TSRs ended up constituting a closely-tied ecosystem... DOS ended up relying on COMMAND.COM for certain features, and some of the features DOS provided to COMMAND.COM ended up being extended in ways users expected to find; replacement DOS shells had to provide the former, and ideally respect the latter.&#xD;&#xA;&#xD;&#xA;Some examples will hopefully help understand the kinds of issues involved better.&#xD;&#xA;&#xD;&#xA;* COMMAND.COM uses a DOS function, [0x210A (&quot;Buffered Keyboard Input&quot;)][1], to read command lines; as standard this provides basic command-line editing capabilities (move the cursor around, insert/delete handling, and &lt;kbd&gt;F3&lt;/kbd&gt; command recall), but many TSRs were available to extend this: CMDEDIT, DOS 5's own DOSKEY... As an added subtlety, starting with DOS 3.3, function 0x210A indirectly checked the passage of time to handle midnight — imagine you left a DOS computer sitting at the command prompt overnight; whose job is it to notice that the date has to change? Obviously it's the operating system's responsibility, but in single-tasking DOS this required the co-operation of whatever software was running. DOSKEY hooked 0x210A to provide its enhanced command-line handling (adding history), and re-implemented most of the time-related features — but it does not handle midnight, so a DOS 5 computer running DOSKEY can lose a day if it's sitting at the command prompt at midnight.&#xD;&#xA;* COMMAND.COM allows other programs to run its internal commands (in DOS, even commands such as `DIR` and `COPY` are implemented in the command processor); replacement shells ideally need to implement this too. Some third-party programs used this to add new internal commands to DOS, so replacement shells not only need to expose their internal commands in the same way as COMMAND.COM (I can't remember the details off-hand), they should really support the same extension hooks too.&#xD;&#xA;* COMMAND.COM splits itself into multiple sections: one (small part) for the primary shell, which is always resident (and accessed via [function 0x2F55][2]), one containing initialisation code, and finally the so-called transient part which implements most of the functionality. The transient part isn't needed during execution of other programs, so to provide more memory for applications, it is designed so that it can remain in memory opportunistically without using any allocated memory. The way this works is that it is relocated to the top of memory (with hooks so the other parts of COMMAND.COM can find it), with some sort of signature. Programs which run without using much memory won't overwrite any of this, and when COMMAND.COM regains control, it checks its transient portion and can then just reuse it without reloading anything. Programs which use enough memory will overwrite the transient portion; when COMMAND.COM regains control, it notices this and reloads its transient portion from disk (which may involve swapping floppies; the `COMSPEC` variable was used to point COMMAND.COM to the right file).&#xD;&#xA;&#xD;&#xA;Most of this was documented at the time, and what wasn't was quickly discovered. Nowadays you can read the source code for FreeCOM or 4DOS if you're curious to see exactly how a DOS shell works...&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.ctyme.com/intr/rb-2563.htm&#xD;&#xA;  [2]: http://www.ctyme.com/intr/rb-4896.htm" />
  <row Id="867" PostHistoryTypeId="5" PostId="319" RevisionGUID="21ea6375-7024-49dd-a691-d0ff17de1af9" CreationDate="2016-04-27T07:10:29.863" UserId="79" Comment="Describe the IO/MSDOS/COMMAND connection." Text="Traditionally, operating shells are relatively independent of the operating system's function and the operating system can operate without a shell. Most shells have two modes of operation, interactive mode where they manage the command line and execute commands entered interactively, and batch mode where they run scripts. They're &quot;standard&quot; programs which handle whatever the input and output system is, and provide their features with no extra special sauce.&#xD;&#xA;&#xD;&#xA;In DOS, the &quot;kernel&quot; is provided by two files, typically `IO.SYS` and `MSDOS.SYS` (or `IBMBIO.COM` and `IBMDOS.COM`). These are loaded at boot-up; they read `CONFIG.SYS` for configuration, and once all the device drivers have loaded and initialised, they load the shell and start running it. By default the shell is `COMMAND.COM` on the boot disk, but this can be overridden by the `SHELL` directive in `CONFIG.SYS`.&#xD;&#xA;&#xD;&#xA;In theory you'd expect the IO and DOS portions of the kernel to provide the &quot;real&quot; operating system, and then COMMAND.COM to follow the standard model of shell design on top of that, but in DOS the distinction between the three parts of the core operating system aren't as well delineated as you might hope. Because of the way DOS works, with no protection between processes, and using fairly well-documented (or reverse-engineered) functions via the 0x21 interrupt, operating system functions could be implemented in various places, and extended by any number of programs, so the &quot;kernel&quot;, command interpreter and extension TSRs ended up constituting a closely-tied ecosystem... Over the course of its history, DOS ended up relying on COMMAND.COM for certain features, and some of the features DOS provided to COMMAND.COM ended up being extended in ways users expected to find; replacement DOS shells had to provide the former, and ideally respect the latter.&#xD;&#xA;&#xD;&#xA;Some examples will hopefully help understand the kinds of issues involved better.&#xD;&#xA;&#xD;&#xA;* COMMAND.COM uses a DOS function, [0x210A (&quot;Buffered Keyboard Input&quot;)][1], to read command lines; as standard this provides basic command-line editing capabilities (move the cursor around, insert/delete handling, and &lt;kbd&gt;F3&lt;/kbd&gt; command recall), but many TSRs were available to extend this: CMDEDIT, DOS 5's own DOSKEY... As an added subtlety, starting with DOS 3.3, function 0x210A indirectly checked the passage of time to handle midnight — imagine you left a DOS computer sitting at the command prompt overnight; whose job is it to notice that the date has to change? Obviously it's the operating system's responsibility, but in single-tasking DOS this required the co-operation of whatever software was running. DOSKEY hooked 0x210A to provide its enhanced command-line handling (adding history), and re-implemented most of the time-related features — but it does not handle midnight, so a DOS 5 computer running DOSKEY can lose a day if it's sitting at the command prompt at midnight.&#xD;&#xA;* COMMAND.COM allows other programs to run its internal commands (in DOS, even commands such as `DIR` and `COPY` are implemented in the command processor); replacement shells ideally need to implement this too. Some third-party programs used this to add new internal commands to DOS, so replacement shells not only need to expose their internal commands in the same way as COMMAND.COM (I can't remember the details off-hand), they should really support the same extension hooks too.&#xD;&#xA;* COMMAND.COM splits itself into multiple sections: one (small part) for the primary shell, which is always resident (and accessed via [function 0x2F55][2]), one containing initialisation code, and finally the so-called transient part which implements most of the functionality. The transient part isn't needed during execution of other programs, so to provide more memory for applications, it is designed so that it can remain in memory opportunistically without using any allocated memory. The way this works is that it is relocated to the top of memory (with hooks so the other parts of COMMAND.COM can find it), with some sort of signature. Programs which run without using much memory won't overwrite any of this, and when COMMAND.COM regains control, it checks its transient portion and can then just reuse it without reloading anything. Programs which use enough memory will overwrite the transient portion; when COMMAND.COM regains control, it notices this and reloads its transient portion from disk (which may involve swapping floppies; the `COMSPEC` variable was used to point COMMAND.COM to the right file).&#xD;&#xA;&#xD;&#xA;Most of this was documented at the time, and what wasn't was quickly discovered. Nowadays you can read the source code for FreeCOM or 4DOS if you're curious to see exactly how a DOS shell works...&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.ctyme.com/intr/rb-2563.htm&#xD;&#xA;  [2]: http://www.ctyme.com/intr/rb-4896.htm" />
  <row Id="868" PostHistoryTypeId="2" PostId="320" RevisionGUID="5a5c89d2-90b3-485d-b204-f5ff56a139cd" CreationDate="2016-04-27T07:20:40.977" UserId="143" Text="My Commodore 64 has developed a fault with the keyboard. Some of the keys are working and some aren't. As far as I can see there is no pattern and they are randomly distributed across the keyboard. &#xD;&#xA;&#xD;&#xA;I have eliminated a fault with the keyboard itself by swapping it with another one and the fault remained.&#xD;&#xA;&#xD;&#xA;Where else could I look for the fault?" />
  <row Id="869" PostHistoryTypeId="1" PostId="320" RevisionGUID="5a5c89d2-90b3-485d-b204-f5ff56a139cd" CreationDate="2016-04-27T07:20:40.977" UserId="143" Text="Commodore 64 with partly working keyboard" />
  <row Id="870" PostHistoryTypeId="3" PostId="320" RevisionGUID="5a5c89d2-90b3-485d-b204-f5ff56a139cd" CreationDate="2016-04-27T07:20:40.977" UserId="143" Text="&lt;commodore-64&gt;&lt;keyboards&gt;" />
  <row Id="871" PostHistoryTypeId="2" PostId="321" RevisionGUID="8ebd3ece-f1ff-4131-bb01-bdb0c59bdd63" CreationDate="2016-04-27T07:53:43.803" UserId="105" Text="The C64 keyboard matrix is controlled by one of the two CIAs, namely, CIA1 (U1 in most schematics). If you have both CIAs socketed, try swapping them. If CIA1 was damaged, after swapping them, the damaged CIA, now in CIA2, may affect operation of other parts of the C64 (depending on what is damaged). If the damage is only present in the GPIOs, then the C64 may boot with a full working keyboard, but with issues in the IEC port. It might even prevent the C64 to boot properly.&#xD;&#xA;&#xD;&#xA;On the other hand, if you have another socketed full working C64, you may borrow one of its CIAs, put it in the place of CIA1 in the affected computer and put the damaged CIA in the donor computer to check if the issue is now present in the donor computer.&#xD;&#xA;&#xD;&#xA;If it happens that the CIA is not damaged, then the last thing to check is for bad soldering at the keyboard connector (resoldering it may help). Try reseating CIA1 in its socket, if socketed (take off CIA1, inspect and clean, if needed, both the socket and the pins of the chip, and put it again)" />
  <row Id="872" PostHistoryTypeId="2" PostId="322" RevisionGUID="853f5542-641e-4798-b468-f69bc5af044b" CreationDate="2016-04-27T13:09:18.383" UserId="260" Text="The major difference between drive speeds in classic computers is the philosophy and design of the drive and it's attachment mechanism.  Some computers, such as the TRS-80/CoCo and Apple II lines, used a bus-level connection that allows the drive's controller to dump data in a parallel fashion from the drive to the computer's RAM.&#xD;&#xA;&#xD;&#xA;Other lines, such as Atari and Commodore, used a serial interface that could only transfer 1 or 2 bits of data at a time, though the drives were smart devices with their own processor which offloaded the control of the drive from the computer, which has its own advantages such as letting music and graphics operate as &quot;normal&quot; while data was being pulled from the drive.  Also, the serial mechanism allows for more devices to be attached.  I've had over 6 different IEC devices attached to a single Commodore 64 when running a BBS and there was never an issue.&#xD;&#xA;&#xD;&#xA;Although the Commodore's serial out of the box was slow, it could be sped up considerably using fast-disk routines which re-wrote the code for the IEC bus in both the computer and the drive.  The most famous of these was JiffyDOS, which is quite good.  It requires that a new ROM be placed in both the drive and the computer to work, but the speed improvements are well worth it.  For example, JiffyDOS can see a 10x improvement when moving data around on fast devices such as the CMD Hard Drive or a modern device such as the uIEC (pronounced micro-IEC).&#xD;&#xA;" />
  <row Id="873" PostHistoryTypeId="2" PostId="323" RevisionGUID="b5ef51ec-387a-4fd6-b084-2e9a8728e8d5" CreationDate="2016-04-27T16:21:28.100" UserId="29" Text="The program CoCo Max came with a cartridge. The cartridge had a mouse/joystick port.&#xD;&#xA;&#xD;&#xA;How did the CoCo Max Analog to Digital cartridge work? Is it possible to use the device in my own software?" />
  <row Id="874" PostHistoryTypeId="1" PostId="323" RevisionGUID="b5ef51ec-387a-4fd6-b084-2e9a8728e8d5" CreationDate="2016-04-27T16:21:28.100" UserId="29" Text="CoCo Max Mouse Cartridge" />
  <row Id="875" PostHistoryTypeId="3" PostId="323" RevisionGUID="b5ef51ec-387a-4fd6-b084-2e9a8728e8d5" CreationDate="2016-04-27T16:21:28.100" UserId="29" Text="&lt;color-computer&gt;" />
  <row Id="877" PostHistoryTypeId="2" PostId="324" RevisionGUID="d63cdea8-9fb1-4c22-ac4e-053a276f5558" CreationDate="2016-04-27T17:15:37.890" UserId="81" Text="I have both a beige VIC-20 styled VIC-1541 disk drive and the later brown C64 1541 drive. Is there a difference between them (besides how they look)?" />
  <row Id="878" PostHistoryTypeId="1" PostId="324" RevisionGUID="d63cdea8-9fb1-4c22-ac4e-053a276f5558" CreationDate="2016-04-27T17:15:37.890" UserId="81" Text="Any difference between a VIC-1541 and a C64-1541?" />
  <row Id="879" PostHistoryTypeId="3" PostId="324" RevisionGUID="d63cdea8-9fb1-4c22-ac4e-053a276f5558" CreationDate="2016-04-27T17:15:37.890" UserId="81" Text="&lt;commodore-64&gt;&lt;hardware&gt;" />
  <row Id="880" PostHistoryTypeId="5" PostId="201" RevisionGUID="5f4bdbd9-72c4-4e76-b870-11d968ba8973" CreationDate="2016-04-27T17:46:59.613" UserId="64" Comment="I meant to type &quot;correct&quot; and not &quot;current.&quot;  Also updated the first paragraph to transition better." Text="Do not use an original Commodore 64 power supply, especially if it has not been tested.  They're prone to fail, and when they do, they'll take the C64 with it.  But if you do intend on using one of these power supplies, people have developed hardware that go between the Commodore 64 and power supply and can protect the C64 from power supply failure.&#xD;&#xA;&#xD;&#xA;The Commodore 128 power supply was better, but the connector is different so the cable will need modifications or an adapter.&#xD;&#xA;&#xD;&#xA;If you find two wall-wart power supplies that provide the required currents, you can solder them to the correct DIN connector." />
  <row Id="881" PostHistoryTypeId="2" PostId="325" RevisionGUID="cabfa290-9eda-4940-a361-082711bcc8d9" CreationDate="2016-04-27T17:52:11.467" UserId="64" Text="The Commodore 64 did not have any hardware dedicated to digital audio playback, so how were some games and songs able to achieve this on an unmodified and unextended Commodore 64?  Did these techniques require specific hardware revisions?&#xD;&#xA;" />
  <row Id="882" PostHistoryTypeId="1" PostId="325" RevisionGUID="cabfa290-9eda-4940-a361-082711bcc8d9" CreationDate="2016-04-27T17:52:11.467" UserId="64" Text="How was digital sound playback achieved on the Commodore 64?" />
  <row Id="883" PostHistoryTypeId="3" PostId="325" RevisionGUID="cabfa290-9eda-4940-a361-082711bcc8d9" CreationDate="2016-04-27T17:52:11.467" UserId="64" Text="&lt;commodore-64&gt;" />
  <row Id="884" PostHistoryTypeId="2" PostId="326" RevisionGUID="bbeab092-7578-4b46-b1c0-ffbe42712b52" CreationDate="2016-04-27T17:57:53.937" UserId="260" Text="Functionally there is no difference between the VIC-1541 and 1541.  Internally, there may be lots of differences due to production variation and component variation.  The thing to remember is that both drives have modes to directly support the VIC-20 and C64.  The VIC-20 is actually faster reading data when the drive is in 1540 mode instead of 1541 mode, but ANY 1541 drive supports 1540 mode." />
  <row Id="886" PostHistoryTypeId="2" PostId="327" RevisionGUID="2d4dcc45-8fb9-471c-84af-732440bbee51" CreationDate="2016-04-27T18:07:03.360" UserId="260" Text="No hardware revisions are necessary.  The digitization playback is achieved by bit-banging the volume register of the SID chip to simulate a digital playback device.  Essentially, the SID can be used as a 1-bit digital playback device.  What's amazing is that the thing sounds as good as it does playing back digital data.&#xD;&#xA;&#xD;&#xA;A great article about digis on the C64 can be found here: http://sid.kubarth.com/articles/the_c64_digi.txt" />
  <row Id="887" PostHistoryTypeId="2" PostId="328" RevisionGUID="207c83e5-13b3-4fe3-a206-da0ed8f4c97b" CreationDate="2016-04-27T19:07:05.760" UserId="40" Text="The CoCo has an interrupt called fast interrupt (FIRQ) which is connected to the video output horizontal sync pulse. The IRQ happens every 1/16 of a millisecond (62.5 microseconds). The extended basic command timer uses this interrupt to increment its counter. Remember that the IRQ happens independently of what you see on screen so this is why the number keeps increasing even if &quot;nothing&quot; is happening.&#xD;&#xA; &#xD;&#xA;According to this [paper][1] from 1987 written by Arthur J. Flexser, the TIMER command of the Extended CoCo BASIC counts &quot;horizontal synchronization pulses, which are approximately 1/16 of a millisecond. This count is multiplied by a constant to convert to milliseconds and is then rounded to the nearest integer.&quot;&#xD;&#xA;&#xD;&#xA;The document also explains that holding a keyboard key down or keep the joystick button pressed will make the timer to halt, since the TIMER routine first check to see if both of them (key and joystick button) are in released state.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://download.springer.com/static/pdf/814/art%253A10.3758%252FBF03205614.pdf" />
  <row Id="888" PostHistoryTypeId="5" PostId="282" RevisionGUID="8c37e076-0cef-4788-8b38-daf4875bc5f3" CreationDate="2016-04-27T19:21:48.390" UserId="12" Comment="added 222 characters in body" Text="I only know these a little from messing about with OpenFirmware, but I did run across [this reference that says][1]:&#xD;&#xA;&#xD;&#xA;&gt; One glaring omission by Sun is that you cannot enter OBP from the OS&#xD;&#xA;&gt; using a regular USB keyboard. You can enter OBP from the serial&#xD;&#xA;&gt; console using Ctrl-Break, and Sun keyboards can do Stop-A, but there&#xD;&#xA;&gt; is no way to enter OBP from a non-Sun USB keyboard.&#xD;&#xA;&#xD;&#xA;Which is something I didn't know. I think this implies you are going to have to beg, borrow, or steal a keyboard.&#xD;&#xA;&#xD;&#xA;Or try to boot to the serial console.&#xD;&#xA;&#xD;&#xA;-----&#xD;&#xA;&#xD;&#xA;I do not have a SunBlade around anymore to test, but I just ran across a hint that you can get to the OBP if you push the power button twice after the first beep. Apparently, this was an alternative for this exact situation.&#xD;&#xA;&#xD;&#xA;  [1]: http://www.finnie.org/text/computers/sunblade100/" />
  <row Id="890" PostHistoryTypeId="2" PostId="329" RevisionGUID="e4bc0393-bdf4-4f35-84de-b64fb22c78ea" CreationDate="2016-04-27T23:36:54.257" UserId="29" Text="The `RND()` function for random numbers appears to give the same results each time the computer is reset. How do I seed the random number generator with a random number?" />
  <row Id="891" PostHistoryTypeId="1" PostId="329" RevisionGUID="e4bc0393-bdf4-4f35-84de-b64fb22c78ea" CreationDate="2016-04-27T23:36:54.257" UserId="29" Text="Color BASIC RND not so Random" />
  <row Id="892" PostHistoryTypeId="3" PostId="329" RevisionGUID="e4bc0393-bdf4-4f35-84de-b64fb22c78ea" CreationDate="2016-04-27T23:36:54.257" UserId="29" Text="&lt;color-computer&gt;" />
  <row Id="895" PostHistoryTypeId="2" PostId="331" RevisionGUID="c39c998b-f585-40a8-b21e-5619dd297281" CreationDate="2016-04-28T05:24:45.493" UserId="71" Text="[From here][1] it looks like the official way is to use RND(N) to seed, where is N is a negative number.&#xD;&#xA;&#xD;&#xA;[But according to this][2] you can also just copy a byte from a timer to the RND seed with:&#xD;&#xA;&#xD;&#xA;    POKE 280,PEEK(275)&#xD;&#xA;&#xD;&#xA;If your program shows a title screen with a loop checking for a user keypress, you could:&#xD;&#xA;  &#xD;&#xA; - Do X=RND(0) in the loop. This will put you at a random place in the&#xD;&#xA;   sequence.&#xD;&#xA;&#xD;&#xA; - Set N to -1 then decrement it in the loop (maybe wrap somewhere to -1 to avoid overflow). Then X=RND(N) to seed. (You could put that in the loop but it would reduce the precision of N.)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://jimgerrie.blogspot.com/2016/01/january-2016-retrochallenge-7-new-10.html&#xD;&#xA;  [2]: http://www.cocopedia.com/wiki/index.php/Undercolor/850103/Hints_Tips_and_Tricks/filler" />
  <row Id="896" PostHistoryTypeId="2" PostId="332" RevisionGUID="23fe910d-6fc3-4a80-8e88-621af333b902" CreationDate="2016-04-28T05:26:46.973" UserId="268" Text="I'm looking for a small 386 computer, preferably handheld, with a VGA screen that is capable of running MS-DOS.&#xD;&#xA;&#xD;&#xA;Does anyone know if such a system is available, either using real hardware, or emulated within an FPGA?" />
  <row Id="897" PostHistoryTypeId="1" PostId="332" RevisionGUID="23fe910d-6fc3-4a80-8e88-621af333b902" CreationDate="2016-04-28T05:26:46.973" UserId="268" Text="Portable 386 hardware implementation or emulated in FPGA" />
  <row Id="898" PostHistoryTypeId="3" PostId="332" RevisionGUID="23fe910d-6fc3-4a80-8e88-621af333b902" CreationDate="2016-04-28T05:26:46.973" UserId="268" Text="&lt;386&gt;&lt;handheld&gt;" />
  <row Id="900" PostHistoryTypeId="2" PostId="333" RevisionGUID="db50daa9-c3b4-4316-9361-d1981903a4c9" CreationDate="2016-04-28T07:17:45.347" UserId="148" Text="Someone on reddit acquired a Sabre-ADS [terminal](http://imgur.com/a/6PEft), Model 757. They were used for airline reservation and probably connected to an IBM mainframe.&#xD;&#xA;&#xD;&#xA;Is there anything known about the pinout and workings of the interface connectors, so one can hook them up to other hardware like a PC, and replace the missing keyboard somehow? &#xD;&#xA;" />
  <row Id="901" PostHistoryTypeId="1" PostId="333" RevisionGUID="db50daa9-c3b4-4316-9361-d1981903a4c9" CreationDate="2016-04-28T07:17:45.347" UserId="148" Text="Information about Sabre-ADS Model 757 terminal" />
  <row Id="902" PostHistoryTypeId="3" PostId="333" RevisionGUID="db50daa9-c3b4-4316-9361-d1981903a4c9" CreationDate="2016-04-28T07:17:45.347" UserId="148" Text="&lt;terminal&gt;&lt;mainframe&gt;" />
  <row Id="904" PostHistoryTypeId="5" PostId="308" RevisionGUID="47b5e92e-4a41-47d2-9bfb-c9e123cf3abf" CreationDate="2016-04-28T14:24:56.420" UserId="29" Comment="Changed reference to Extended Color BASIC." Text="How does the `TIMER` function work in Extended Color BASIC? How does the number keep incrementing even when the computer appears to be doing nothing? " />
  <row Id="905" PostHistoryTypeId="4" PostId="308" RevisionGUID="47b5e92e-4a41-47d2-9bfb-c9e123cf3abf" CreationDate="2016-04-28T14:24:56.420" UserId="29" Comment="Changed reference to Extended Color BASIC." Text="Extended Color BASIC TIMER Fuction" />
  <row Id="906" PostHistoryTypeId="2" PostId="334" RevisionGUID="16f3f1b9-96c2-49b3-8666-fe4130fd5b91" CreationDate="2016-04-28T14:45:09.963" UserId="29" Text="A popular third party floppy disk controller for the Color Computer was the Super Controller II from Disto. It's main feature was a no-halt mode. Why was this desirable? How did the no-halt mode work?" />
  <row Id="907" PostHistoryTypeId="1" PostId="334" RevisionGUID="16f3f1b9-96c2-49b3-8666-fe4130fd5b91" CreationDate="2016-04-28T14:45:09.963" UserId="29" Text="Disto Super Controller II" />
  <row Id="908" PostHistoryTypeId="3" PostId="334" RevisionGUID="16f3f1b9-96c2-49b3-8666-fe4130fd5b91" CreationDate="2016-04-28T14:45:09.963" UserId="29" Text="&lt;color-computer&gt;" />
  <row Id="909" PostHistoryTypeId="2" PostId="335" RevisionGUID="ec2782ff-bdba-4c3e-95c0-74c17047f105" CreationDate="2016-04-28T16:23:34.817" UserId="173" Text="While in normal mode, the SCII (and the Tandy and other manufacturers' controllers) would not buffer data. The CPU would wait as the drive would read and write data to and from the computer's memory. While data transfer for the CoCo was pretty quick for the day, this process would not allow the CPU to do any other work.&#xD;&#xA;&#xD;&#xA;The SCII had a second mode which was buffered. With the proper drivers, the CPU would command the controller to switch into buffered mode, and the buffer circuit would take over the task of waiting for the drive to transfer data to and from it's own RAM. After the data transfer was complete, the controller would signal the CPU that it was done, and the CPU could handle the data in whatever fashion it needed to. &#xD;&#xA;&#xD;&#xA;This was a very nice feature as it freed up the CPU for other tasks while the controller took care of the buffering the data from the disk drive." />
  <row Id="910" PostHistoryTypeId="2" PostId="336" RevisionGUID="cad5985d-7fc4-47d9-b2a1-1a670a81ddfc" CreationDate="2016-04-28T16:23:44.260" UserId="125" Text="According to this gem [Tandy's Little Wonder, The Color Computer 1979-1991][1], &#xD;&#xA;&#xD;&#xA;&gt; When OS-9 came out a flaw was quickly discovered in the Tandy disk controller (and all others made at that time). Although OS-9 was a multi-user, multi-tasking true DOS, the CoCo disk controller was not! The controller used a simple design that interrupted the 6809 during disk access. This was the cheapest and easiest way to build the control- lers, but it prevented OS-9 from doing anything until disk access was completed.&#xD;&#xA;&#xD;&#xA;Essentially, the original CoCo disk controller would block the CPU during disk seeks.  This was problematic due to how (relatively) slow the disk technology of the time was.  After-market controllers like the DISTO SC II and Sardis Technologies &quot;no halt&quot; controller got around this problem by using a buffered mode that handles waiting for the floppy disk controller and writing the data into RAM.&#xD;&#xA;&#xD;&#xA;Additional reference: [Disto Super Controller II Instruction Manual][2]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.roust-it.dk/coco/littlewonder.pdf&#xD;&#xA;  [2]: http://www.colorcomputerarchive.com/coco/Documents/Manuals/Hardware/Disto%20Super%20Controller%20II%20(Disto%20Super%20Products).pdf" />
  <row Id="911" PostHistoryTypeId="5" PostId="336" RevisionGUID="da4cc559-dda9-4268-9cb0-2900e158dfee" CreationDate="2016-04-28T16:33:54.367" UserId="125" Comment="added 48 characters in body" Text="According to this gem [Tandy's Little Wonder, The Color Computer 1979-1991][1], &#xD;&#xA;&#xD;&#xA;&gt; When OS-9 came out a flaw was quickly discovered in the Tandy disk controller (and all others made at that time). Although OS-9 was a multi-user, multi-tasking true DOS, the CoCo disk controller was not! The controller used a simple design that interrupted the 6809 during disk access. This was the cheapest and easiest way to build the control- lers, but it prevented OS-9 from doing anything until disk access was completed.&#xD;&#xA;&#xD;&#xA;Essentially, the original CoCo disk controller would block the CPU during disk seeks.  This was problematic due to how (relatively) slow the disk technology of the time was.  After-market controllers like the DISTO SC II and Sardis Technologies &quot;no halt&quot; controller got around this problem by using a buffered mode that handles waiting for the floppy disk controller and writing the data into RAM (so the CPU didn't have to manage that process).&#xD;&#xA;&#xD;&#xA;Additional reference: [Disto Super Controller II Instruction Manual][2]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.roust-it.dk/coco/littlewonder.pdf&#xD;&#xA;  [2]: http://www.colorcomputerarchive.com/coco/Documents/Manuals/Hardware/Disto%20Super%20Controller%20II%20(Disto%20Super%20Products).pdf" />
  <row Id="912" PostHistoryTypeId="2" PostId="337" RevisionGUID="cf81fa6b-ff52-454d-8bb4-ab56808a9ec6" CreationDate="2016-04-28T18:24:38.303" UserId="141" Text="The &quot;Paula&quot; chip used for sound output in all Amiga computers had 4 8bit sound channels (arguably comparable to 9bit stereo). &#xD;&#xA;&#xD;&#xA;There were programs/libraries which could play 14bit stereo on the Amiga - how did these work?&#xD;&#xA;&#xD;&#xA;How much were they used?" />
  <row Id="913" PostHistoryTypeId="1" PostId="337" RevisionGUID="cf81fa6b-ff52-454d-8bb4-ab56808a9ec6" CreationDate="2016-04-28T18:24:38.303" UserId="141" Text="How could Amiga computers play 14 bit sound?" />
  <row Id="914" PostHistoryTypeId="3" PostId="337" RevisionGUID="cf81fa6b-ff52-454d-8bb4-ab56808a9ec6" CreationDate="2016-04-28T18:24:38.303" UserId="141" Text="&lt;amiga&gt;&lt;audio&gt;" />
  <row Id="915" PostHistoryTypeId="2" PostId="338" RevisionGUID="09fc437e-4b1f-4610-9580-0026e1f96db9" CreationDate="2016-04-28T18:24:38.303" UserId="141" Text="As the sound channels had independent linear 64-step volume control (6 bits + mute setting), by calibration and splitting sample bits for one 14bit waveform across two channels, two-channel 14bit (stereo) sound could in principle be improvised using all 4 channels.&#xD;&#xA;&#xD;&#xA;This would be done by playing&#xD;&#xA;&#xD;&#xA;* A coarse part of the waveform generated from the higher 8 bits at full volume on one channel.&#xD;&#xA;&#xD;&#xA;* A fine part of the waveform with the lower 6 bits at volume 1 on another channel on the same stereo &quot;side&quot;. (If trying to play a 16bit waveform, the lowest two bits would be discarded.)&#xD;&#xA;&#xD;&#xA;However, this would then require additional real-time mixing of waveforms by the CPU to play more than two independent logical &quot;channels&quot;, as opposed to much typical Amiga music using 4 physical channels and no real-time mixing - for example one channel for instrument, one for accompaniment with pre-mixed chords, one for bass and one for percussion.&#xD;&#xA;&#xD;&#xA;It would also require mixing or at least scaling for volume changes on a 14bit &quot;channel&quot;, as the volume levels would be locked in to allow 14bit resolution.&#xD;&#xA;&#xD;&#xA;The A1200 had the 14MHz Motorola 68020 - at a sampling frequency of 28kHz, that would give ~500 clock cycles for each sampling point or ~1000 for 14KHz playback.&#xD;&#xA;&#xD;&#xA;The 7MHz 68000 A1000, A500 and A600 models would have half that number of clock cycles for each sampling point, so ~250 for 28KHz and ~500 for 14KHz.&#xD;&#xA;&#xD;&#xA;That gives scope for mixing, however, I only remember a simple 14bit playback program, which could handle PC Fasttracker formats and a composing program called DeliTracker.&#xD;&#xA;&#xD;&#xA;Perhaps one of the problems was that it would be difficult to do the normal pitch control by playing back waveforms with different sampling frequencies, as these would have to be interpolated into the mixing.&#xD;&#xA;&#xD;&#xA;For example, to play a waveform that needs 25KHz for a particular note and another waveform (or the same) that needs 9KHz for another (in that case lower) note, you would ideally mix at a much higher frequency, but if you are limited to 28KHz, you have to &quot;force&quot; the other waveforms to fit your sampling period the best you can as these numbers are not divisible.&#xD;&#xA;&#xD;&#xA;I imagine that with the typical sampling frequencies possible with the CPUs at hand that would have resulted in a loss of quality, which might have been the main limitation. Does anybody know whether that is correct?" />
  <row Id="916" PostHistoryTypeId="2" PostId="339" RevisionGUID="37360d9b-82c3-478d-bfa1-df303031c923" CreationDate="2016-04-28T18:26:11.970" UserId="-1" Text="" />
  <row Id="917" PostHistoryTypeId="2" PostId="340" RevisionGUID="fceefa10-f978-495a-91b5-95a5d237e7db" CreationDate="2016-04-28T18:26:11.970" UserId="-1" Text="" />
  <row Id="918" PostHistoryTypeId="2" PostId="341" RevisionGUID="d13a094a-2a19-4c87-b807-794ec3a9334d" CreationDate="2016-04-28T20:22:16.543" UserId="75" Text="Maybe an [IBM Palm Top PC110][1]. Slightly bigger but easier to find is the [Toshiba Libretto 50CT][2].&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.basterfield.com/pc110/pc110idx.htm&#xD;&#xA;  [2]: http://www.cnet.com/products/toshiba-libretto-50ct-6-1-pentium-16-mb-ram-772-mb-hdd/specs/" />
  <row Id="920" PostHistoryTypeId="10" PostId="332" RevisionGUID="7d81fef5-28f2-40db-8e1d-08e17267d495" CreationDate="2016-04-28T20:46:23.330" UserId="-1" Comment="102" Text="{&quot;Voters&quot;:[{&quot;Id&quot;:133,&quot;DisplayName&quot;:&quot;middaparka&quot;},{&quot;Id&quot;:111,&quot;DisplayName&quot;:&quot;user3169&quot;},{&quot;Id&quot;:37,&quot;DisplayName&quot;:&quot;PythonMaster&quot;},{&quot;Id&quot;:15,&quot;DisplayName&quot;:&quot;Gilles&quot;},{&quot;Id&quot;:81,&quot;DisplayName&quot;:&quot;Thraka&quot;}]}" />
  <row Id="921" PostHistoryTypeId="6" PostId="325" RevisionGUID="99beb736-372e-41ae-ba57-5565ba670772" CreationDate="2016-04-28T23:03:28.060" UserId="141" Comment="Added audio tag." Text="&lt;commodore-64&gt;&lt;audio&gt;" />
  <row Id="922" PostHistoryTypeId="24" PostId="325" RevisionGUID="99beb736-372e-41ae-ba57-5565ba670772" CreationDate="2016-04-28T23:03:28.060" Comment="Proposed by 141 approved by -1 edit id of 112" />
  <row Id="923" PostHistoryTypeId="6" PostId="325" RevisionGUID="d272a007-ce2d-4637-8ac9-0965a32c5f3b" CreationDate="2016-04-28T23:03:28.060" UserId="105" Comment="Added audio tag." Text="&lt;commodore-64&gt;&lt;digital-audio&gt;" />
  <row Id="924" PostHistoryTypeId="5" PostId="280" RevisionGUID="29b593bb-2f80-4c59-8dee-ee2a555144cb" CreationDate="2016-04-28T23:05:18.250" UserId="125" Comment="added 161 characters in body" Text="The Atari 2600 is a 2nd generation home video game console by Atari, Inc. This tag should be used if the question is about the Atari 2600 hardware or cartridges." />
  <row Id="925" PostHistoryTypeId="24" PostId="280" RevisionGUID="29b593bb-2f80-4c59-8dee-ee2a555144cb" CreationDate="2016-04-28T23:05:18.250" Comment="Proposed by 125 approved by 56, 105 edit id of 97" />
  <row Id="926" PostHistoryTypeId="5" PostId="295" RevisionGUID="ee792c6f-98d3-4026-90e0-7f7b494af32c" CreationDate="2016-04-28T23:05:40.690" UserId="107" Comment="added 93 characters in body" Text="This tag is for questions relating to the Atari Falcon 030 - the last computer made by Atari." />
  <row Id="927" PostHistoryTypeId="24" PostId="295" RevisionGUID="ee792c6f-98d3-4026-90e0-7f7b494af32c" CreationDate="2016-04-28T23:05:40.690" Comment="Proposed by 107 approved by 56, 105 edit id of 103" />
  <row Id="929" PostHistoryTypeId="2" PostId="342" RevisionGUID="38860651-9ecb-4fb3-bbc8-7747dc060876" CreationDate="2016-04-29T03:44:27.667" UserId="280" Text="There were also some more recent creative alternatives taking advantage of filters and undocumented test bits as well.  Check out the Cubase64 demo by Mahoney: http://www.livet.se/mahoney/cubase64  You can also find versions of it playing on the real thing on YouTube, naturally.  (spoiler alert: your face will melt -- it's that awesome.)" />
  <row Id="931" PostHistoryTypeId="6" PostId="329" RevisionGUID="25699fa2-6e9b-4323-a4c4-643e7cfee9a0" CreationDate="2016-04-29T07:23:36.090" UserId="115" Comment="add color-basic tag" Text="&lt;color-computer&gt;&lt;color-basic&gt;" />
  <row Id="932" PostHistoryTypeId="24" PostId="329" RevisionGUID="25699fa2-6e9b-4323-a4c4-643e7cfee9a0" CreationDate="2016-04-29T07:23:36.090" Comment="Proposed by 115 approved by 56, 79 edit id of 113" />
  <row Id="933" PostHistoryTypeId="2" PostId="343" RevisionGUID="70883815-7a0b-4f0f-818d-0c86c7a6c3b0" CreationDate="2016-04-29T09:09:55.977" UserId="74" Text="[Oktalyzer](http://www.vgmpf.com/Wiki/index.php?title=Oktalyzer) was a Tracker style program for Amiga, that allowed composing and playing music with 8 channels instead of the &quot;hardware-natural&quot; 4.&#xD;&#xA;&#xD;&#xA;So far I learned it achieved that by splitting the 4 8-bit channels into 8 4-bit ones. But I still don't understand how it was done from 'mathematics' point of view - it doesn't seem like you can split a DAC index into two halves and have two waveforms of comparable volume overlaid.&#xD;&#xA;&#xD;&#xA;One would range 0-16 in 1-bit increments and the other 0-256 in 16-bit increments, resulting in one being 16 times more quiet than the other. Or you could take every other bit, achieving 16-bit increments on both, but one would still be half as loud as the other, not having access to the most significant bit. How was it done in reality?" />
  <row Id="934" PostHistoryTypeId="1" PostId="343" RevisionGUID="70883815-7a0b-4f0f-818d-0c86c7a6c3b0" CreationDate="2016-04-29T09:09:55.977" UserId="74" Text="How was 8-channel audio achieved on Amiga?" />
  <row Id="935" PostHistoryTypeId="3" PostId="343" RevisionGUID="70883815-7a0b-4f0f-818d-0c86c7a6c3b0" CreationDate="2016-04-29T09:09:55.977" UserId="74" Text="&lt;amiga&gt;&lt;audio&gt;" />
  <row Id="936" PostHistoryTypeId="2" PostId="344" RevisionGUID="667e3c67-da19-49a6-a869-1aff010ed979" CreationDate="2016-04-29T09:21:47.420" UserId="105" Text="According to the very same link you provided:&#xD;&#xA;&#xD;&#xA;&gt; To perform this feat, Oktalyzer loaded eight channels in memory, mixed&#xD;&#xA;&gt; them in real time down to four channels, and sent the result to the&#xD;&#xA;&gt; Amiga sound chip. This was a processor-intensive task which degraded&#xD;&#xA;&gt; sound quality, but was more than made up for with doubled channels.&#xD;&#xA;&gt; Oktalyzer could also be run in 4-channel mode to suit more&#xD;&#xA;&gt; processor-heavy programs.&#xD;&#xA;&#xD;&#xA;which makes more sense to me that splitting each channel into two 4-bit channels." />
  <row Id="937" PostHistoryTypeId="5" PostId="344" RevisionGUID="ec436764-3b46-4fcd-b07f-27cb41f029c4" CreationDate="2016-04-29T09:34:35.923" UserId="105" Comment="added 776 characters in body" Text="According to the very same link you provided:&#xD;&#xA;&#xD;&#xA;&gt; To perform this feat, Oktalyzer loaded eight channels in memory, mixed&#xD;&#xA;&gt; them in real time down to four channels, and sent the result to the&#xD;&#xA;&gt; Amiga sound chip. This was a processor-intensive task which degraded&#xD;&#xA;&gt; sound quality, but was more than made up for with doubled channels.&#xD;&#xA;&gt; Oktalyzer could also be run in 4-channel mode to suit more&#xD;&#xA;&gt; processor-heavy programs.&#xD;&#xA;&#xD;&#xA;which makes more sense to me that splitting each channel into two 4-bit channels.&#xD;&#xA;&#xD;&#xA;So the process is quite straightforward. During the time between two timer interrupts (these occurs normally each 20 ms), the CPU has to take two sample buffers, mix them and write the result to a channel buffer that will be used to feed Paula.&#xD;&#xA;&#xD;&#xA;This is quite processor intensive, as for each sample in a 20 ms buffer, the CPU has to calculate what sample to fetch (depending upon the playing frequency), check if it reached the end of sample so it will start at repetition begin. With both samples gathered, each one has to be scaled according to its volume setting, then the CPU has to add them and possibly, apply some compression to avoid clipping while keeping the original dynamic range (adding both sample and then dividing into 2 would result in too quiet sound)" />
  <row Id="938" PostHistoryTypeId="5" PostId="344" RevisionGUID="eee2b94f-0dea-4808-b6ae-fe1355404cff" CreationDate="2016-04-29T09:40:40.613" UserId="105" Comment="added 1 character in body" Text="According to the very same link you provided:&#xD;&#xA;&#xD;&#xA;&gt; To perform this feat, Oktalyzer loaded eight channels in memory, mixed&#xD;&#xA;&gt; them in real time down to four channels, and sent the result to the&#xD;&#xA;&gt; Amiga sound chip. This was a processor-intensive task which degraded&#xD;&#xA;&gt; sound quality, but was more than made up for with doubled channels.&#xD;&#xA;&gt; Oktalyzer could also be run in 4-channel mode to suit more&#xD;&#xA;&gt; processor-heavy programs.&#xD;&#xA;&#xD;&#xA;which makes more sense to me that splitting each channel into two 4-bit channels.&#xD;&#xA;&#xD;&#xA;So the process is quite straightforward. During the time between two VBlank interrupts (these occurs normally each 20 ms), the CPU has to take two sample buffers, mix them and write the result to a channel buffer that will be used to feed Paula.&#xD;&#xA;&#xD;&#xA;This is quite processor intensive, as for each sample in a 20 ms buffer, the CPU has to calculate what sample to fetch (depending upon the playing frequency), check if it reached the end of sample so it will start at repetition begin. With both samples gathered, each one has to be scaled according to its volume setting, then the CPU has to add them and possibly, apply some compression to avoid clipping while keeping the original dynamic range (adding both sample and then dividing into 2 would result in too quiet sound)" />
  <row Id="939" PostHistoryTypeId="5" PostId="344" RevisionGUID="71fc7e75-ccc8-4ef5-b041-ea11541a6249" CreationDate="2016-04-29T09:59:22.480" UserId="105" Comment="added 1294 characters in body" Text="According to the very same link you provided:&#xD;&#xA;&#xD;&#xA;&gt; To perform this feat, Oktalyzer loaded eight channels in memory, mixed&#xD;&#xA;&gt; them in real time down to four channels, and sent the result to the&#xD;&#xA;&gt; Amiga sound chip. This was a processor-intensive task which degraded&#xD;&#xA;&gt; sound quality, but was more than made up for with doubled channels.&#xD;&#xA;&gt; Oktalyzer could also be run in 4-channel mode to suit more&#xD;&#xA;&gt; processor-heavy programs.&#xD;&#xA;&#xD;&#xA;which makes more sense to me that splitting each channel into two 4-bit channels.&#xD;&#xA;&#xD;&#xA;So the process is quite straightforward. During the time between two VBlank interrupts (these occurs normally each 20 ms), the CPU has to take two sample buffers, mix them and write the result to a channel buffer that will be used to feed Paula.&#xD;&#xA;&#xD;&#xA;This is quite processor intensive, as for each sample in a 20 ms buffer, the CPU has to calculate what sample to fetch (depending upon the playing frequency), check if it reached the end of sample so it will start at repetition begin. With both samples gathered, each one has to be scaled according to its volume setting, then the CPU has to add them and possibly, apply some compression to avoid clipping while keeping the original dynamic range (adding both sample and then dividing into 2 would result in too quiet sound)&#xD;&#xA;&#xD;&#xA;I've just digged into the source code of an early release of Oktalyzer and found this macro: (comments of my own)&#xD;&#xA;&#xD;&#xA;    GetSample:	macro&#xD;&#xA;    		move.b	(a0,d0.w),d4  ;get sample from buffer addressed by a0&#xD;&#xA;    		add.b	(a1,d1.w),d4  ;add sample from buffer addressed by a1&#xD;&#xA;    		eor.b	d5,d4         ;d5=-128. Fast way to add -128 to result&#xD;&#xA;    		move.b	d4,(a5)+      ;store result into output buffer&#xD;&#xA;    		swap	d0&#xD;&#xA;    		swap	d1&#xD;&#xA;    		add.l	d2,d0        ;calculate offset for next sample, buffer a0&#xD;&#xA;    		add.l	d3,d1        ;ditto for buffer a1&#xD;&#xA;    		swap	d0&#xD;&#xA;    		swap	d1&#xD;&#xA;    		endm&#xD;&#xA;&#xD;&#xA;Which pretty does much of what I've explained (minus the volume scaling operation).&#xD;&#xA;&#xD;&#xA;From this source code, I guess that initial buffers pointed by `a0` and `a1` already contain scaled samples, as there is no code in the macro to check for clipping. I also assume that these original samples are 7 bits unsigned samples. Adding them won't produce clipping, but we will end up with a 8-bit unsiged sample, which is not suitable for Paula, which expects 8-bit signed samples. To get that, we have to substract 128 from the sample value, that's to say, add -128. Adding -128 to a 8-bit number is just toggling its MSb, so d5 is preloaded with -128 and then it is XORed with the calculated sample." />
  <row Id="940" PostHistoryTypeId="5" PostId="314" RevisionGUID="c9973c43-6087-45ac-bdbf-39c7fd82c5bb" CreationDate="2016-04-29T12:44:25.080" UserId="56" Comment="added 37 characters in body" Text="Discussion of character set mappings." />
  <row Id="941" PostHistoryTypeId="24" PostId="314" RevisionGUID="c9973c43-6087-45ac-bdbf-39c7fd82c5bb" CreationDate="2016-04-29T12:44:25.080" Comment="Proposed by 56 approved by 47 edit id of 108" />
  <row Id="942" PostHistoryTypeId="5" PostId="313" RevisionGUID="02e04cec-2d18-4761-b826-d97a1319db32" CreationDate="2016-04-29T12:44:30.423" UserId="56" Comment="added 174 characters in body" Text="While Unicode is not a retrocomputing topic, the conversion of old documents for use on modern systems is.  This tag is intended for discussions of character set conversions." />
  <row Id="943" PostHistoryTypeId="24" PostId="313" RevisionGUID="02e04cec-2d18-4761-b826-d97a1319db32" CreationDate="2016-04-29T12:44:30.423" Comment="Proposed by 56 approved by 47 edit id of 107" />
  <row Id="944" PostHistoryTypeId="5" PostId="315" RevisionGUID="61d68dca-b99b-44e3-bb57-55bed7ab05ad" CreationDate="2016-04-29T12:44:34.893" UserId="125" Comment="added 367 characters in body" Text="The TRS-80 Color Computers (aka CoCo) 1, 2, and 3 were a line of personal computers built by Tandy Radio Shack in the 1980's.  They were direct descendants of the TRS-80 model computers.&#xD;&#xA;&#xD;&#xA; - CoCo 1 (1980) -   4k to  32k RAM&#xD;&#xA; - CoCo 2 (1983) -  16k to  64k RAM&#xD;&#xA; - CoCo 3 (1986) - 128k to 512k RAM&#xD;&#xA;   - Graphics Interrupt Memory Enhancement (GIME) graphics adapter" />
  <row Id="945" PostHistoryTypeId="24" PostId="315" RevisionGUID="61d68dca-b99b-44e3-bb57-55bed7ab05ad" CreationDate="2016-04-29T12:44:34.893" Comment="Proposed by 125 approved by 56, 47 edit id of 109" />
  <row Id="946" PostHistoryTypeId="5" PostId="316" RevisionGUID="bcf7019c-490a-4ef2-9ca1-92b4e8050d41" CreationDate="2016-04-29T12:44:39.783" UserId="125" Comment="added 113 characters in body" Text="The TRS-80 Color Computers (aka CoCo) 1, 2, and 3 were a line of personal computers built by Tandy in the 1980's." />
  <row Id="947" PostHistoryTypeId="24" PostId="316" RevisionGUID="bcf7019c-490a-4ef2-9ca1-92b4e8050d41" CreationDate="2016-04-29T12:44:39.783" Comment="Proposed by 125 approved by 56, 47 edit id of 110" />
  <row Id="948" PostHistoryTypeId="5" PostId="340" RevisionGUID="439e3c74-e034-4c09-b150-c3ef90be0522" CreationDate="2016-04-29T12:44:47.503" UserId="141" Comment="added 62 characters in body" Text="Use this tag for digital/analogue computer sound/audio topics." />
  <row Id="949" PostHistoryTypeId="24" PostId="340" RevisionGUID="439e3c74-e034-4c09-b150-c3ef90be0522" CreationDate="2016-04-29T12:44:47.503" Comment="Proposed by 141 approved by 56, 47 edit id of 111" />
  <row Id="950" PostHistoryTypeId="2" PostId="345" RevisionGUID="067f3274-acf0-4bb0-96f1-7e0ae2ec159d" CreationDate="2016-04-29T14:31:47.197" UserId="-1" Text="" />
  <row Id="951" PostHistoryTypeId="2" PostId="346" RevisionGUID="7051088e-fcce-4f60-9df7-97bc37892f9a" CreationDate="2016-04-29T14:31:47.197" UserId="-1" Text="" />
  <row Id="952" PostHistoryTypeId="2" PostId="347" RevisionGUID="9815779e-4c51-4b65-9884-83b855b398af" CreationDate="2016-04-29T14:32:51.373" UserId="-1" Text="" />
  <row Id="953" PostHistoryTypeId="2" PostId="348" RevisionGUID="a43883ca-f2e3-4ae0-a1bb-95363865f2e0" CreationDate="2016-04-29T14:32:51.373" UserId="-1" Text="" />
  <row Id="955" PostHistoryTypeId="5" PostId="348" RevisionGUID="a639039b-bdd7-46d4-97d7-2baa23830f4d" CreationDate="2016-04-29T16:59:49.383" UserId="276" Comment="added 97 characters in body" Text="A budget computer made by Acorn and released in 1983.  A cut-down version of the Acorn BBC Micro." />
  <row Id="956" PostHistoryTypeId="24" PostId="348" RevisionGUID="a639039b-bdd7-46d4-97d7-2baa23830f4d" CreationDate="2016-04-29T16:59:49.383" Comment="Proposed by 276 approved by 56, 37 edit id of 115" />
  <row Id="957" PostHistoryTypeId="5" PostId="181" RevisionGUID="f7a786c8-9657-4468-9584-10dcb4473e47" CreationDate="2016-04-29T16:59:56.023" UserId="132" Comment="added 44 characters in body" Text="This tag is for questions concerning the history of electronic devices and their companies" />
  <row Id="958" PostHistoryTypeId="24" PostId="181" RevisionGUID="f7a786c8-9657-4468-9584-10dcb4473e47" CreationDate="2016-04-29T16:59:56.023" Comment="Proposed by 132 approved by 37 edit id of 116" />
  <row Id="959" PostHistoryTypeId="2" PostId="349" RevisionGUID="a37211b6-edb7-41c7-8f14-6e4ab958849a" CreationDate="2016-04-29T18:10:43.690" UserId="-1" Text="" />
  <row Id="960" PostHistoryTypeId="2" PostId="350" RevisionGUID="c9c35f3f-c235-4d43-8c07-148e2a2c9e02" CreationDate="2016-04-29T18:10:43.690" UserId="-1" Text="" />
  <row Id="961" PostHistoryTypeId="2" PostId="351" RevisionGUID="c4954e63-cd9d-4486-9429-85bc4f4b8da4" CreationDate="2016-04-29T20:07:00.797" UserId="4" Text="Every NES emulator I've found runs off ROM dumps.  Would it be possible to run an emulator using the original cartridges directly?  It's probably not the most practical way of doing things, but the &quot;cool factor&quot; of plugging Super Mario Bros. into the front of your computer is definitely there." />
  <row Id="962" PostHistoryTypeId="1" PostId="351" RevisionGUID="c4954e63-cd9d-4486-9429-85bc4f4b8da4" CreationDate="2016-04-29T20:07:00.797" UserId="4" Text="Can I run a NES emulator off the original cartridges?" />
  <row Id="963" PostHistoryTypeId="3" PostId="351" RevisionGUID="c4954e63-cd9d-4486-9429-85bc4f4b8da4" CreationDate="2016-04-29T20:07:00.797" UserId="4" Text="&lt;emulation&gt;&lt;nes&gt;" />
  <row Id="964" PostHistoryTypeId="2" PostId="352" RevisionGUID="5b9fc3d9-9a25-42fa-a2cb-a75854bb80b5" CreationDate="2016-04-29T20:22:57.460" UserId="130" Text="You can, provided that you have a cartridge reader that you can plug to the computer that runs the emulator. One such reader is [Retrode](https://en.wikipedia.org/wiki/Retrode); if you google &quot;nes cartridge reader&quot; you will find referendes to more similar products, even DIY kits. " />
  <row Id="965" PostHistoryTypeId="5" PostId="346" RevisionGUID="8b6d0bdc-8181-4f6f-a2be-8705decf89c3" CreationDate="2016-04-29T23:25:59.150" UserId="276" Comment="added 110 characters in body" Text="For questions regarding the products of Acorn Computers Ltd.  A British computer manufacturer founded in 1978." />
  <row Id="966" PostHistoryTypeId="24" PostId="346" RevisionGUID="8b6d0bdc-8181-4f6f-a2be-8705decf89c3" CreationDate="2016-04-29T23:25:59.150" Comment="Proposed by 276 approved by 37, 105 edit id of 114" />
  <row Id="967" PostHistoryTypeId="5" PostId="350" RevisionGUID="419c13da-3c93-4467-930b-6cb11e417918" CreationDate="2016-04-29T23:26:14.273" UserId="276" Comment="added 116 characters in body" Text="For questions regarding the hardware, software and peripheral products of DEC - The Digital Equipment Corporation.  " />
  <row Id="968" PostHistoryTypeId="24" PostId="350" RevisionGUID="419c13da-3c93-4467-930b-6cb11e417918" CreationDate="2016-04-29T23:26:14.273" Comment="Proposed by 276 approved by 37, 105 edit id of 117" />
  <row Id="969" PostHistoryTypeId="2" PostId="353" RevisionGUID="1ebb1637-340e-4d5a-951a-1da3fa0038f3" CreationDate="2016-04-29T23:28:47.853" UserId="-1" Text="" />
  <row Id="970" PostHistoryTypeId="2" PostId="354" RevisionGUID="42d78700-9da2-492d-af19-1d08b0aed605" CreationDate="2016-04-29T23:28:47.853" UserId="-1" Text="" />
  <row Id="971" PostHistoryTypeId="2" PostId="355" RevisionGUID="738164d9-44ca-49a3-a045-06120427980c" CreationDate="2016-04-29T23:33:17.897" UserId="81" Text="Why would adding a cart in your system suddenly speed up the C64 or the 1541 for loading games?" />
  <row Id="972" PostHistoryTypeId="1" PostId="355" RevisionGUID="738164d9-44ca-49a3-a045-06120427980c" CreationDate="2016-04-29T23:33:17.897" UserId="81" Text="How did the Epyx Fast Load cart work with a Commdore 64?" />
  <row Id="973" PostHistoryTypeId="3" PostId="355" RevisionGUID="738164d9-44ca-49a3-a045-06120427980c" CreationDate="2016-04-29T23:33:17.897" UserId="81" Text="&lt;commodore-64&gt;&lt;hardware&gt;" />
  <row Id="974" PostHistoryTypeId="2" PostId="356" RevisionGUID="d774e71d-de57-42d9-984c-99be8e62c8e5" CreationDate="2016-04-30T00:28:00.643" UserId="173" Text="Have a 3003b CoCo 1 (the white one) with the melty keyboard. A few of the keys do not work. On a few of them, there appears to be a slimy substance that I've cleaned from the surface. The badge on the top of the case is mushy, so I can only assume someone used a cleaner on it and it got down into the keyboard. &#xD;&#xA;&#xD;&#xA;This keyboard used folded mylar sheets with a separater sheet. I'll be taking the keyboard apart next week to inspect it. What's the best cleaner to use on these types without damaging the mylar or the material the traces are made out of? " />
  <row Id="975" PostHistoryTypeId="1" PostId="356" RevisionGUID="d774e71d-de57-42d9-984c-99be8e62c8e5" CreationDate="2016-04-30T00:28:00.643" UserId="173" Text="Cleaning membrane keyboards" />
  <row Id="976" PostHistoryTypeId="3" PostId="356" RevisionGUID="d774e71d-de57-42d9-984c-99be8e62c8e5" CreationDate="2016-04-30T00:28:00.643" UserId="173" Text="&lt;color-computer&gt;&lt;maintenance&gt;" />
  <row Id="977" PostHistoryTypeId="4" PostId="308" RevisionGUID="e42c7cc2-e753-4a88-804c-f50d610432ff" CreationDate="2016-04-30T01:07:05.270" UserId="12" Comment="Small typo in title" Text="Extended Color BASIC TIMER Function" />
  <row Id="978" PostHistoryTypeId="24" PostId="308" RevisionGUID="e42c7cc2-e753-4a88-804c-f50d610432ff" CreationDate="2016-04-30T01:07:05.270" Comment="Proposed by 12 approved by 29 edit id of 120" />
  <row Id="979" PostHistoryTypeId="5" PostId="331" RevisionGUID="d1c6e90b-9a51-4aba-a3a2-99554ebbd10a" CreationDate="2016-04-30T01:40:45.470" UserId="71" Comment="Corrected precision to range - slightly different." Text="[From here][1] it looks like the official way is to use RND(N) to seed, where is N is a negative number.&#xD;&#xA;&#xD;&#xA;[But according to this][2] you can also just copy a byte from a timer to the RND seed with:&#xD;&#xA;&#xD;&#xA;    POKE 280,PEEK(275)&#xD;&#xA;&#xD;&#xA;If your program shows a title screen with a loop checking for a user keypress, you could:&#xD;&#xA;  &#xD;&#xA; - Do X=RND(0) in the loop. This will put you at a random place in the&#xD;&#xA;   sequence.&#xD;&#xA;&#xD;&#xA; - Set N to -1 then decrement it in the loop (maybe wrap somewhere to -1 to avoid overflow). Then X=RND(N) to seed. (You could put that in the loop but it would slightly reduce the range of N.)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://jimgerrie.blogspot.com/2016/01/january-2016-retrochallenge-7-new-10.html&#xD;&#xA;  [2]: http://www.cocopedia.com/wiki/index.php/Undercolor/850103/Hints_Tips_and_Tricks/filler" />
  <row Id="980" PostHistoryTypeId="2" PostId="357" RevisionGUID="554785e4-bf78-4155-ba0b-48e70af4ac8e" CreationDate="2016-04-30T02:09:03.747" UserId="71" Text="There are minor and major differences between the many Apple II models.&#xD;&#xA;&#xD;&#xA;I would like to detect whether my 8-bit assembly language program is running on a II, II+, IIe (enhanced or not), or ///, and which ROM version if on a //c or IIgs.&#xD;&#xA;&#xD;&#xA;Also, are there any ways (and reasons) to detect whether the code is running on a /// or ///+, or on a Mac Apple IIe Card emulator?" />
  <row Id="981" PostHistoryTypeId="1" PostId="357" RevisionGUID="554785e4-bf78-4155-ba0b-48e70af4ac8e" CreationDate="2016-04-30T02:09:03.747" UserId="71" Text="How can I programmatically tell which version of Apple II my code is on?" />
  <row Id="982" PostHistoryTypeId="3" PostId="357" RevisionGUID="554785e4-bf78-4155-ba0b-48e70af4ac8e" CreationDate="2016-04-30T02:09:03.747" UserId="71" Text="&lt;apple-ii&gt;" />
  <row Id="984" PostHistoryTypeId="2" PostId="358" RevisionGUID="00c4dbf8-cfc4-4ac7-8b15-5638f26241cb" CreationDate="2016-04-30T04:21:40.707" UserId="115" Text="The CHIP-8 has, among its instructions, [the following ones](https://en.wikipedia.org/wiki/CHIP-8#Opcode_table):&#xD;&#xA;&#xD;&#xA;&gt;* `EX9E`:	Skips the next instruction if the key stored in VX is pressed.&#xD;&#xA;&gt;* `EXA1`:	Skips the next instruction if the key stored in VX isn't pressed.&#xD;&#xA;&gt;* `FX0A`:    A key press is awaited, and then stored in VX.&#xD;&#xA;&#xD;&#xA;How did these interact with held-down keys? Does `FX0A` immediately return in that case, or would it wait for a new keypress? Does reading a key via `EX9E`/`EXA1` somehow &quot;clear&quot; it, or would it take the &quot;pressed&quot; branch as long as the given key is held?" />
  <row Id="985" PostHistoryTypeId="1" PostId="358" RevisionGUID="00c4dbf8-cfc4-4ac7-8b15-5638f26241cb" CreationDate="2016-04-30T04:21:40.707" UserId="115" Text="How are held-down keys handled in CHIP-8?" />
  <row Id="986" PostHistoryTypeId="3" PostId="358" RevisionGUID="00c4dbf8-cfc4-4ac7-8b15-5638f26241cb" CreationDate="2016-04-30T04:21:40.707" UserId="115" Text="&lt;keyboards&gt;&lt;chip-8&gt;" />
  <row Id="987" PostHistoryTypeId="2" PostId="359" RevisionGUID="f2888a19-1103-4d72-a48f-37d530567b7f" CreationDate="2016-04-30T04:35:12.007" UserId="115" Text="The VIC-20 and the C64 had horribly slow disk IO because everything was done by the CPU over a serial link, i.e. the CPU was reading in the data bit by bit. Both software and cartridge &quot;turbo loaders&quot; worked by replacing the protocol with something more efficient, for example by doing synchronization only once per byte instead of once per bit.&#xD;&#xA;&#xD;&#xA;I think I read somewhere once that some also used the clock wire as a second data wire, but I'm not sure if this was something that could be done purely in software/cartridge or if that required a direct connection between the drive and something plugged into the user port of the C64." />
  <row Id="990" PostHistoryTypeId="5" PostId="358" RevisionGUID="dce5c540-f12a-4a77-b981-c1405aad1e03" CreationDate="2016-04-30T10:17:59.980" UserId="115" Comment="edited body" Text="The CHIP-8 has, among its instructions, [the following ones](https://en.wikipedia.org/wiki/CHIP-8#Opcode_table):&#xD;&#xA;&#xD;&#xA;&gt;* `Ex9E`:	Skips the next instruction if the key stored in VX is pressed.&#xD;&#xA;&gt;* `ExA1`:	Skips the next instruction if the key stored in VX isn't pressed.&#xD;&#xA;&gt;* `Fx0A`:    A key press is awaited, and then stored in VX.&#xD;&#xA;&#xD;&#xA;How did these interact with held-down keys? Does `FX0A` immediately return in that case, or would it wait for a new keypress? Does reading a key via `EX9E`/`EXA1` somehow &quot;clear&quot; it, or would it take the &quot;pressed&quot; branch as long as the given key is held?" />
  <row Id="992" PostHistoryTypeId="6" PostId="329" RevisionGUID="41589dac-c73f-4074-94a3-d1da40457325" CreationDate="2016-04-30T14:04:17.913" UserId="71" Comment="Create programming tag" Text="&lt;color-computer&gt;&lt;color-basic&gt;&lt;programming&gt;" />
  <row Id="993" PostHistoryTypeId="24" PostId="329" RevisionGUID="41589dac-c73f-4074-94a3-d1da40457325" CreationDate="2016-04-30T14:04:17.913" Comment="Proposed by 71 approved by 79, 29 edit id of 121" />
  <row Id="994" PostHistoryTypeId="2" PostId="360" RevisionGUID="2a51a807-5cc4-4bef-9723-8283ae08ff84" CreationDate="2016-04-30T14:39:50.003" UserId="2" Text="I've got a motherboard with a Am386/DX processor.&#xD;&#xA;I've also got an Intel 387 coprocessor.&#xD;&#xA;Is it possible to use the Intel 387 that I've got together with the Am386 or do I need a coprocessor from AMD?&#xD;&#xA;&#xD;&#xA;Also, the Intel coprocessor physically fits in the slot for the Am387 but it is a bit smaller which causes a row of socket pinholes to be visible at each side of the coprocessor." />
  <row Id="995" PostHistoryTypeId="1" PostId="360" RevisionGUID="2a51a807-5cc4-4bef-9723-8283ae08ff84" CreationDate="2016-04-30T14:39:50.003" UserId="2" Text="Pair Am386 with i387" />
  <row Id="996" PostHistoryTypeId="3" PostId="360" RevisionGUID="2a51a807-5cc4-4bef-9723-8283ae08ff84" CreationDate="2016-04-30T14:39:50.003" UserId="2" Text="&lt;hardware&gt;&lt;cpu&gt;&lt;compatibility&gt;&lt;386&gt;" />
  <row Id="997" PostHistoryTypeId="2" PostId="361" RevisionGUID="9abaf9ea-3460-4db6-bfc4-ff494e8d83ef" CreationDate="2016-04-30T15:21:46.217" UserId="105" Text="I haven't found an official reference for how instructions should behave, so I've taken the disassembly of the original CHIP-8 interpreter for the COSMAC VIP as the reference implementation.&#xD;&#xA;&#xD;&#xA;Fortunately, this is rather well documented, and available at http://laurencescotford.co.uk/wp-content/uploads/2013/08/CHIP-8-Interpreter-Disassembly.pdf&#xD;&#xA;&#xD;&#xA;For `Fx0A` instruction:&#xD;&#xA;- The decoding of `Fxxx` instructions begin at program address `0105`. More precisely, instruction `Fx0A` is decoded and executed from address `010A`. The execution of this instruction implies to call a ROM routine to read the keyboard:&#xD;&#xA;&#xD;&#xA;    010A F8 81   FX0A: LDI 0x81    Instruction FX0A -&gt; wait for a key press and&#xD;&#xA;                                   store it in VX&#xD;&#xA;                                   0x81 is the high-order byte of the address&#xD;&#xA;                                   of a routine in the COSMAC VIP ROM that&#xD;&#xA;                                   reads the keyboard&#xD;&#xA;    010C BC            PHI C       Store this in RC.1&#xD;&#xA;    010D F8 95         LDI 0x95    0x95 is the low-order byte of the address of&#xD;&#xA;                                   the keyboard routine&#xD;&#xA;    010F AC            PLO C       Put this in RC.0 - RC now contains the full&#xD;&#xA;                                   address 0x8195&#xD;&#xA;    0110 22            DEC 2       Decrement stack pointer - the ROM routine&#xD;&#xA;                                   uses the stack so we need to ensure the&#xD;&#xA;                                   stack pointer is pointing at the next empty&#xD;&#xA;                                   location before calling it&#xD;&#xA;    0111 DC            SEP C       Call the routine to read the keyboard&#xD;&#xA;                                   On return the value of the key pressed will&#xD;&#xA;                                   be in the accumulator D&#xD;&#xA;    0112 12            INC 2       Increment stack pointer&#xD;&#xA;    0113 56            STR 6       Store the result in VX&#xD;&#xA;    0114 D4            SEP 4       Return to the fetch and decode routine&#xD;&#xA;&#xD;&#xA;The behaviour of the keyboard ROM routine is documented by the same guy, Laurence Scotford. This is the flowchart taken from his web (the actual ROM code is also there)&#xD;&#xA;http://laurencescotford.co.uk/?p=347&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;As you can see, the keyboard ROM routine waits for any key to be pressed, and then, the routine waits until it has been released. Then it returns the key code that ***was*** pressed&#xD;&#xA;&#xD;&#xA;So, according to this, if the Fx0A instruction is executed while a key has been already pressed, the instruction will wait until the key is released and then it will return the key code in register Vx.&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/77QWh.gif" />
  <row Id="998" PostHistoryTypeId="5" PostId="361" RevisionGUID="be6e10b4-0b8e-4c32-83a5-3db2cdae5a11" CreationDate="2016-04-30T15:32:52.817" UserId="105" Comment="added 1261 characters in body" Text="I haven't found an official reference for how instructions should behave, so I've taken the disassembly of the original CHIP-8 interpreter for the COSMAC VIP as the reference implementation.&#xD;&#xA;&#xD;&#xA;Fortunately, this is rather well documented, and available at http://laurencescotford.co.uk/wp-content/uploads/2013/08/CHIP-8-Interpreter-Disassembly.pdf&#xD;&#xA;&#xD;&#xA;**For `Fx0A` instruction:**&#xD;&#xA;&#xD;&#xA;The decoding of `Fxxx` instructions begin at program address `0105`. More precisely, instruction `Fx0A` is decoded and executed from address `010A`. The execution of this instruction implies to call a ROM routine to read the keyboard:&#xD;&#xA;&#xD;&#xA;    010A F8 81   FX0A: LDI 0x81    Instruction FX0A -&gt; wait for a key press and&#xD;&#xA;                                   store it in VX&#xD;&#xA;                                   0x81 is the high-order byte of the address&#xD;&#xA;                                   of a routine in the COSMAC VIP ROM that&#xD;&#xA;                                   reads the keyboard&#xD;&#xA;    010C BC            PHI C       Store this in RC.1&#xD;&#xA;    010D F8 95         LDI 0x95    0x95 is the low-order byte of the address of&#xD;&#xA;                                   the keyboard routine&#xD;&#xA;    010F AC            PLO C       Put this in RC.0 - RC now contains the full&#xD;&#xA;                                   address 0x8195&#xD;&#xA;    0110 22            DEC 2       Decrement stack pointer - the ROM routine&#xD;&#xA;                                   uses the stack so we need to ensure the&#xD;&#xA;                                   stack pointer is pointing at the next empty&#xD;&#xA;                                   location before calling it&#xD;&#xA;    0111 DC            SEP C       Call the routine to read the keyboard&#xD;&#xA;                                   On return the value of the key pressed will&#xD;&#xA;                                   be in the accumulator D&#xD;&#xA;    0112 12            INC 2       Increment stack pointer&#xD;&#xA;    0113 56            STR 6       Store the result in VX&#xD;&#xA;    0114 D4            SEP 4       Return to the fetch and decode routine&#xD;&#xA;&#xD;&#xA;The behaviour of the keyboard ROM routine is documented by the same guy, Laurence Scotford. This is the flowchart taken from his web (the actual ROM code is also there)&#xD;&#xA;http://laurencescotford.co.uk/?p=347&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;As you can see, the keyboard ROM routine waits for any key to be pressed, and then, the routine waits until it has been released. Then it returns the key code that ***was*** pressed&#xD;&#xA;&#xD;&#xA;So, according to this, if the Fx0A instruction is executed while a key has been already pressed, the instruction will wait until the key is released and then it will return the key code in register Vx.&#xD;&#xA;&#xD;&#xA;**For instructions `Ex9E` / `ExA1`:**&#xD;&#xA;&#xD;&#xA;Decoding and execution of these instructions begin at address `0199` of the interpreter code. A few instructions later, a direct keyboard reading is performed, isntead of calling a ROM routine.&#xD;&#xA;&#xD;&#xA;    019A 62        OUT 2            This will take the value in VX and output it&#xD;&#xA;                                    to the keyboard latch. This causes external&#xD;&#xA;                                    flag 3 to be set if that key is currently &#xD;&#xA;                                    held down or reset if not&#xD;&#xA;&#xD;&#xA;So these instructions will react accordingly if a key was pressed before the isntruction was executed. Both will read the current state of that key the moment the Exxx instructions are executed. These two instructions don't use the ROM, so they don't interfere with any system variable that would have been modified in response to keys pressed or released.&#xD;&#xA;&#xD;&#xA;In other words: if key '1' is pressed and hold, and `V1` stores the key code for '1' the following sequence of instructions will behave as this:&#xD;&#xA;&#xD;&#xA;`E19E`: will skip the next instruction.&#xD;&#xA;&#xD;&#xA;`E1A1`: will not skip the next instruction.&#xD;&#xA;&#xD;&#xA;`F20A`: will wait until the user releases the '1' key, then it will store its keycode into register `V2`.&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/77QWh.gif&#xD;&#xA;&#xD;&#xA;" />
  <row Id="999" PostHistoryTypeId="2" PostId="362" RevisionGUID="f4334283-83cb-4630-9177-5abc046d23f5" CreationDate="2016-04-30T15:38:35.197" UserId="79" Text="The Intel 387 should work fine with an AMD 386DX; the latter was a direct clone of the Intel 386. The extra rows of pins are perfectly normal — see [this photo](https://en.wikipedia.org/wiki/X87#/media/File:80386with387.JPG) for an example. (If I remember correctly the extra pins were used for Weitek 3167 co-processors, but I'm not sure about that.)" />
  <row Id="1000" PostHistoryTypeId="5" PostId="361" RevisionGUID="832de000-0c9e-440b-8ff2-2c54915e395f" CreationDate="2016-04-30T15:40:48.537" UserId="105" Comment="added 1261 characters in body" Text="I haven't found an official reference for how instructions should behave, so I've taken the disassembly of the original CHIP-8 interpreter for the COSMAC VIP as the reference implementation.&#xD;&#xA;&#xD;&#xA;Fortunately, this is rather well documented, and available at http://laurencescotford.co.uk/wp-content/uploads/2013/08/CHIP-8-Interpreter-Disassembly.pdf&#xD;&#xA;&#xD;&#xA;**For `Fx0A` instruction:**&#xD;&#xA;&#xD;&#xA;The decoding of `Fxxx` instructions begin at program address `0105`. More precisely, instruction `Fx0A` is decoded and executed from address `010A`. The execution of this instruction implies to call a ROM routine to read the keyboard:&#xD;&#xA;&#xD;&#xA;    010A F8 81   FX0A: LDI 0x81    Instruction FX0A -&gt; wait for a key press and&#xD;&#xA;                                   store it in VX&#xD;&#xA;                                   0x81 is the high-order byte of the address&#xD;&#xA;                                   of a routine in the COSMAC VIP ROM that&#xD;&#xA;                                   reads the keyboard&#xD;&#xA;    010C BC            PHI C       Store this in RC.1&#xD;&#xA;    010D F8 95         LDI 0x95    0x95 is the low-order byte of the address of&#xD;&#xA;                                   the keyboard routine&#xD;&#xA;    010F AC            PLO C       Put this in RC.0 - RC now contains the full&#xD;&#xA;                                   address 0x8195&#xD;&#xA;    0110 22            DEC 2       Decrement stack pointer - the ROM routine&#xD;&#xA;                                   uses the stack so we need to ensure the&#xD;&#xA;                                   stack pointer is pointing at the next empty&#xD;&#xA;                                   location before calling it&#xD;&#xA;    0111 DC            SEP C       Call the routine to read the keyboard&#xD;&#xA;                                   On return the value of the key pressed will&#xD;&#xA;                                   be in the accumulator D&#xD;&#xA;    0112 12            INC 2       Increment stack pointer&#xD;&#xA;    0113 56            STR 6       Store the result in VX&#xD;&#xA;    0114 D4            SEP 4       Return to the fetch and decode routine&#xD;&#xA;&#xD;&#xA;The behaviour of the keyboard ROM routine is documented by the same guy, Laurence Scotford. This is the flowchart taken from his web (the actual ROM code is also there)&#xD;&#xA;http://laurencescotford.co.uk/?p=347&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;As you can see, the keyboard ROM routine waits for any key to be pressed, and then, the routine waits until it has been released. Then it returns the key code that ***was*** pressed&#xD;&#xA;&#xD;&#xA;So, according to this, if the Fx0A instruction is executed while a key has been already pressed, the instruction will wait until the key is released and then it will return the key code in register Vx.&#xD;&#xA;&#xD;&#xA;**For instructions `Ex9E` / `ExA1`:**&#xD;&#xA;&#xD;&#xA;Decoding and execution of these instructions begin at address `0199` of the interpreter code. A few instructions later, a direct keyboard reading is performed, isntead of calling a ROM routine.&#xD;&#xA;&#xD;&#xA;    019A 62        OUT 2            This will take the value in VX and output it&#xD;&#xA;                                    to the keyboard latch. This causes external&#xD;&#xA;                                    flag 3 to be set if that key is currently &#xD;&#xA;                                    held down or reset if not&#xD;&#xA;&#xD;&#xA;So these instructions will react accordingly if a key was pressed before the isntruction was executed. Both will read the current state of that key the moment the Exxx instructions are executed. These two instructions don't use the ROM, so they don't interfere with any system variable that would have been modified in response to keys pressed or released.&#xD;&#xA;&#xD;&#xA;In other words: if key '1' is pressed and hold, and `V1` stores the key code for '1'...&#xD;&#xA;&#xD;&#xA;    LD V1,1     6101   ;store key code 1 into V1&#xD;&#xA;&#xD;&#xA;...the following sequence of instructions will behave as this:&#xD;&#xA;&#xD;&#xA;    SKP  V1     E19E   ;will skip the next instruction.&#xD;&#xA;    SKNP V1     E1A1   ;will not skip the next instruction.&#xD;&#xA;&#xD;&#xA;    LD V2,K     F20A   ;will wait until the user releases the '1' key, &#xD;&#xA;                       ;then it will store its keycode into &#xD;&#xA;                       ;register V2.&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/77QWh.gif&#xD;&#xA;&#xD;&#xA;" />
  <row Id="1001" PostHistoryTypeId="5" PostId="362" RevisionGUID="91039f93-75cc-4f7b-8044-c4039ca4070e" CreationDate="2016-04-30T15:45:01.480" UserId="79" Comment="added 245 characters in body" Text="The Intel 387 should work fine with an AMD 386DX; the latter was a direct clone of the Intel 386. The extra rows of pins are perfectly normal — see [this photo](https://en.wikipedia.org/wiki/X87#/media/File:80386with387.JPG) for an example. (If I remember correctly the extra pins were used for Weitek 3167 co-processors, but I'm not sure about that.)&#xD;&#xA;&#xD;&#xA;I'm not sure AMD ever produced their own 387; various on-line collections document the AMD 287, but not the 387. See [here](http://www.x86-guide.com/en/marques/AMD.html) or [here](http://www.cpu-info.com/index2.php?mainid=Copro) for example." />
  <row Id="1002" PostHistoryTypeId="2" PostId="363" RevisionGUID="9da1f78d-e1fd-4997-b387-f27426c0c489" CreationDate="2016-04-30T15:46:10.777" UserId="105" Text="AMD 80386 chips are die-identical to Intel's, as AMD got a license from Intel to manufacture them. So, putting an Intel 80387 (or ULSI 80387 or IIT-387) will do fine, as long as their speed is equal or faster than the main CPU..&#xD;&#xA;&#xD;&#xA;The row of socket pinholes is, efectively, for the less standard Weitek 3167 coprocessor, which was not binary compatible with the 387." />
  <row Id="1003" PostHistoryTypeId="5" PostId="362" RevisionGUID="9cae3eb9-8fb6-4433-b71f-b5b13fcfcbc4" CreationDate="2016-04-30T16:10:10.177" UserId="79" Comment="The extra pins are indeed for 3167s." Text="The Intel 387 should work fine with an AMD 386DX; the latter was a direct clone of the Intel 386. The extra rows of pins are perfectly normal — see [this photo](https://en.wikipedia.org/wiki/X87#/media/File:80386with387.JPG) for an example. (The extra pins were used for [Weitek 3167 co-processors](http://www.cpu-world.com/CPUs/3167/).)&#xD;&#xA;&#xD;&#xA;I'm not sure AMD ever produced their own 387; various on-line collections document the AMD 287, but not the 387. See [here](http://www.x86-guide.com/en/marques/AMD.html) or [here](http://www.cpu-info.com/index2.php?mainid=Copro) for example. AMD isn't listed in [CPU World's list of 387 manufacturers](http://www.cpu-world.com/CPUs/80387/index.html)..." />
  <row Id="1004" PostHistoryTypeId="5" PostId="196" RevisionGUID="3be11a50-531f-4aad-9afa-cfb7fc20f453" CreationDate="2016-04-30T16:43:19.487" UserId="92" Comment="Show an example of HAM color bleeding" Text="EHB&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;For example, a game that uses EHB (Extra HalfBrite) mode during the game action (i. e. ingame) is _Pinball Dreams_. In my example run of the _Beat Box_ table I can find the following in the copper list:&#xD;&#xA;&#xD;&#xA;    $00D6EA WAIT $4211FFFE&#xD;&#xA;    $00D6EE MOVE #$6200,BPLCON0&#xD;&#xA;&#xD;&#xA;I. e. it waits for raster line $42 (66) and uses BPLCON0 to set the number of bitplanes to 6 without the HAM bit set, which means EHB mode.&#xD;&#xA;&#xD;&#xA;_Cannon Fodder_ uses EHB for some of its still pictures. I'm not sure if it uses it ingame, but I consider it unlikely.&#xD;&#xA;&#xD;&#xA;A newer game, _Nemac IV_, presents you with a screen mode selection at the beginning, offering EHB mode as an option. It can then render its ingame 3D graphics to an EHB mode display. However, it requires a machine more powerful than a stock Amiga 500.&#xD;&#xA;&#xD;&#xA;HAM&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;The way HAM (Hold And Modify) mode works makes it unsuitable for ingame animation in most cases. I'm unaware of a game that uses it for its game action, however, that doesn't necessarily mean that none exists.&#xD;&#xA;&#xD;&#xA;_Fury of the Furries_ uses HAM for its still images, for example the title image and the images that are displayed before entering a new world (each consisting of a set of levels).&#xD;&#xA;&#xD;&#xA;The reason why it is unfeasible to use HAM for animated action is that you will either have to tolerate so-called color bleeding to the right of pixels or you will need to employ sophisticated algorithms to counteract the color bleeding, which timing constraints may forbid or which are just not worth it to come up with.&#xD;&#xA;&#xD;&#xA;In HAM mode you usually use 6 bitplanes (you can also use it with 5 bitplanes, but there's not much point to that). That's 64 possible values per pixel. Values 0 to 15 select a full RGB color from the 16 color palette, the same way other normal screen modes would. However, value sets 16 to 31 (modify blue component), 32 to 47 (modify red component) and 48 to 63 (modify green component), respectively, each just change one of the color components relative to the color of the previous pixel. The other two color components remain unchanged from the previous pixel.&#xD;&#xA;&#xD;&#xA;Say you set the color to palette entry 8 in column 100. Say also that this palette entry is $0333, i. e. a very dark gray. So the pixel in column 100 will appear gray.&#xD;&#xA;&#xD;&#xA; 1. Then, lacking a matching color in the palette, you modify the red component in column 101 to $6 (using a pixel value of $26 = 38). The resulting pixel in column 101 will now have a color equivalent to $0633, which is a dark unsaturated red.&#xD;&#xA;&#xD;&#xA; 2. Next, again lacking a matching color in the palette, you modify the green component in column 102 to $7 (using a pixel value of $37 = 55). The resulting pixel in column 102 will now have a color equivalent to $0673, which is a brown-greenish color.&#xD;&#xA;&#xD;&#xA; 3. Finally, lacking a matching color in the palette once more, you modify the blue component in column 103 to $6 (using a pixel value of $16 = 22). The resulting pixel in column 103 will now have a color equivalent to $0676, which is a dark gray with a very slight shimmer of green.&#xD;&#xA;&#xD;&#xA; [![HAM pixels before blitting][1]][1]  &#xD;&#xA; *note that each differently colored square represents 1 pixel*&#xD;&#xA;&#xD;&#xA;So far so good, but say you now want to blit an animated character onto the bitmap. Say the rightmost pixel of that character ends up in column 100 and it is a bright white, palette value $0FFF. What this means is that the white will bleed into the next 2 pixels:&#xD;&#xA;&#xD;&#xA; 1. Due to modifying just the red component, the visible color in column 101 will be $06FF, a bright cyan.&#xD;&#xA;&#xD;&#xA; 2. Due to modifying just the green component, the visible color in column 102 will be $067F, a bright blue.&#xD;&#xA;&#xD;&#xA; 3. Only in column 103 will you have modified all three color components and the apparent pixel color will be the same $0676 as the original one before blitting.&#xD;&#xA;&#xD;&#xA; [![HAM pixels after blitting][2]][2]  &#xD;&#xA; *note that each differently colored square represents 1 pixel*&#xD;&#xA;&#xD;&#xA;Depending on how many and which color components you consecutively modify, the color bleeding can affect more or less pixels and depending on how different the colors are to the originally intended colors, the artifacts can be more or less visible.&#xD;&#xA;&#xD;&#xA; [![uncorrected HAM color bleeding when naively blitting][3]][3]  &#xD;&#xA; *note that the resolution of the image was doubled to make it easier to see on contemporary devices*&#xD;&#xA;&#xD;&#xA;To counteract the bleeding, you would have to design a routine that figures out which pixels to the right of a blit to adjust and which pixel values are the optimal ones that let the apparent pixel colors match the original ones as closely as possible. You won't get completely rid of the artifacts, but they might now be unnoticeable unless you take a closer look.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/xGlsK.png&#xD;&#xA;  [2]: http://i.stack.imgur.com/OTbAq.png&#xD;&#xA;  [3]: http://i.stack.imgur.com/SnUsv.gif" />
  <row Id="1005" PostHistoryTypeId="5" PostId="363" RevisionGUID="79311c88-1113-41aa-951d-4050b07f9a27" CreationDate="2016-04-30T17:00:53.533" UserId="105" Comment="deleted 24 characters in body" Text="AMD 80386 chips are die-identical to Intel's, as AMD cloned the Intel 386. So, putting an Intel 80387 (or ULSI 80387 or IIT-387) will do fine, as long as their speed is equal or faster than the main CPU..&#xD;&#xA;&#xD;&#xA;The row of socket pinholes is, efectively, for the less standard Weitek 3167 coprocessor, which was not binary compatible with the 387." />
  <row Id="1006" PostHistoryTypeId="2" PostId="364" RevisionGUID="a6bb42bb-aca6-4b85-a19b-e952867a6317" CreationDate="2016-04-30T18:19:03.557" UserId="92" Text="From what I can tell, it succeeded more often than not. But when it succeeded, it did so silently (apart from audibly using the disk for some time) and you could just go on working as long as you didn't need to write to disk early. Very likely you either didn't notice or you forgot about those instances over the years.&#xD;&#xA;&#xD;&#xA;It was only very vocal when you left the disk write protected or when it otherwise failed to complete its task and those are the instances that we remember the easiest.&#xD;&#xA;&#xD;&#xA;As already explained in [nsandersen's answer](http://retrocomputing.stackexchange.com/a/304/92), its task was to get an invalid block allocation bitmap back into a valid state. In order to find out which blocks are in use, it scanned through all directories, starting from the file system root, taking note of all metadata blocks (including all extension blocks) and the locations of the file data blocks and marking all those as occupied while marking all other as free. (Which also explains why it would take longer on a disk with a more complicated directory structure and on (fragmented) file systems where the metadata blocks are spread out over a far distance.)&#xD;&#xA;&#xD;&#xA;But it could only finish its task if it didn't find any invalid blocks or inconsistencies during the process. If it stumbled upon an inconsistency, it would stop, report its failure and leave the disk unchanged. You were then unable to write to the disk until you used one more sophisticated repair / salvage program on it.&#xD;&#xA;&#xD;&#xA;As an example of those repair programs you mention *Disk Doctor*. From my experience, it was often unable to successfully repair an invalid file system. Not seldom it even did changes to the disk that made the situation worse and you lost more data than necessary. Usually you were better off resorting to third party programs like *DiskSalv*." />
  <row Id="1007" PostHistoryTypeId="5" PostId="364" RevisionGUID="c5498ea9-c944-4fe6-8e06-382695918184" CreationDate="2016-04-30T18:27:58.223" UserId="92" Comment="one -&gt; a" Text="From what I can tell, it succeeded more often than not. But when it succeeded, it did so silently (apart from audibly using the disk for some time) and you could just go on working as long as you didn't need to write to disk early. Very likely you either didn't notice or you forgot about those instances over the years.&#xD;&#xA;&#xD;&#xA;It was only very vocal when you left the disk write protected or when it otherwise failed to complete its task and those are the instances that we remember the easiest.&#xD;&#xA;&#xD;&#xA;As already explained in [nsandersen's answer](http://retrocomputing.stackexchange.com/a/304/92), its task was to get an invalid block allocation bitmap back into a valid state. In order to find out which blocks are in use, it scanned through all directories, starting from the file system root, taking note of all metadata blocks (including all extension blocks) and the locations of the file data blocks and marking all those as occupied while marking all other as free. (Which also explains why it would take longer on a disk with a more complicated directory structure and on (fragmented) file systems where the metadata blocks are spread out over a far distance.)&#xD;&#xA;&#xD;&#xA;But it could only finish its task if it didn't find any invalid blocks or inconsistencies during the process. If it stumbled upon an inconsistency, it would stop, report its failure and leave the disk unchanged. You were then unable to write to the disk until you used a more sophisticated repair / salvage program on it.&#xD;&#xA;&#xD;&#xA;As an example of those repair programs you mention *Disk Doctor*. From my experience, it was often unable to successfully repair an invalid file system. Not seldom it even did changes to the disk that made the situation worse and you lost more data than necessary. Usually you were better off resorting to third party programs like *DiskSalv*." />
  <row Id="1008" PostHistoryTypeId="10" PostId="105" RevisionGUID="44fafd5b-80a1-430f-aaef-1afeb684cb29" CreationDate="2016-04-30T19:47:56.713" UserId="-1" Comment="101" Text="{&quot;OriginalQuestionIds&quot;:[2],&quot;Voters&quot;:[{&quot;Id&quot;:13,&quot;DisplayName&quot;:&quot;Tim Penner&quot;},{&quot;Id&quot;:37,&quot;DisplayName&quot;:&quot;PythonMaster&quot;},{&quot;Id&quot;:12,&quot;DisplayName&quot;:&quot;jdv&quot;},{&quot;Id&quot;:92,&quot;DisplayName&quot;:&quot;blubberdiblub&quot;},{&quot;Id&quot;:15,&quot;DisplayName&quot;:&quot;Gilles&quot;}]}" />
  <row Id="1009" PostHistoryTypeId="5" PostId="354" RevisionGUID="2802055d-608e-46bf-9b6e-e71b8e07f2d3" CreationDate="2016-04-30T21:52:54.827" UserId="105" Comment="added 99 characters in body" Text="For questions about the Oric Atmos. A computer produced by Oric Products International Ltd. in 1982" />
  <row Id="1010" PostHistoryTypeId="24" PostId="354" RevisionGUID="2802055d-608e-46bf-9b6e-e71b8e07f2d3" CreationDate="2016-04-30T21:52:54.827" Comment="Proposed by 105 approved by 56, 37 edit id of 118" />
  <row Id="1011" PostHistoryTypeId="5" PostId="353" RevisionGUID="19113e3e-cd14-4fe4-bb44-e1f697f98c63" CreationDate="2016-04-30T21:53:04.907" UserId="105" Comment="added 110 characters in body" Text="For questions about the Oric Atmos. A 6502 based computer produced by Oric Products International Ltd. in 1982" />
  <row Id="1012" PostHistoryTypeId="24" PostId="353" RevisionGUID="19113e3e-cd14-4fe4-bb44-e1f697f98c63" CreationDate="2016-04-30T21:53:04.907" Comment="Proposed by 105 approved by 56, 37 edit id of 119" />
  <row Id="1013" PostHistoryTypeId="2" PostId="365" RevisionGUID="3605d442-76e9-40c8-8a49-57d7a179a474" CreationDate="2016-04-30T23:19:23.407" UserId="12" Text="[The same stuff used to clean electronics mentioned in this answer][1] (e.g., &quot;CRC QD Contact Cleaner&quot;) will also clean contacts in computer keyboards. As discussed there, do not get the type used to clean and _lubricate_ potentiometers, as this has a light lubricant in it.&#xD;&#xA;&#xD;&#xA;The plain old contact cleaner found at hardware and electronic supply stores will do. Remove the keyboard from the case, and spray spaces between the keys liberally, letting the liquid run and boil out the various holes at the bottom and sides.&#xD;&#xA;&#xD;&#xA;I've used this stuff to clean pop out of an original silver Color Computer in the 80s.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://retrocomputing.stackexchange.com/a/7/12" />
  <row Id="1014" PostHistoryTypeId="5" PostId="365" RevisionGUID="34cb2151-a4a6-46e1-b8cc-2e2a3e83097f" CreationDate="2016-04-30T23:26:25.503" UserId="12" Comment="added 44 characters in body" Text="[The same stuff used to clean electronics mentioned in this answer][1] (e.g., &quot;CRC QD Contact Cleaner&quot;) will also clean contacts in computer keyboards. As discussed there, do not get the type used to clean and _lubricate_ potentiometers, as this has a (surprise!) light lubricant in it. Still, an easy to make mistake.&#xD;&#xA;&#xD;&#xA;The plain old contact cleaner found at hardware and electronic supply stores will do. Remove the keyboard from the case, and spray spaces between the keys liberally, letting the liquid run and boil out the various holes at the bottom and sides.&#xD;&#xA;&#xD;&#xA;I've used this stuff to clean pop out of an original silver Color Computer in the 80s.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://retrocomputing.stackexchange.com/a/7/12" />
  <row Id="1015" PostHistoryTypeId="2" PostId="366" RevisionGUID="ac4d67e5-7243-44c4-897c-e2d057987b04" CreationDate="2016-05-01T00:17:55.977" UserId="56" Text="The way to identify different Apple IIs is described in Apple II [Miscellaneous Tech Note #7][1].  Excerpting from that document:&#xD;&#xA;&#xD;&#xA;&gt; To identify which computer of the Apple II family is executing your program, you must check the following identification bytes. These bytes are in the main bank of main ROM (shadowed on the Apple IIgs), and you should make sure that this bank is switched in before making decisions based on the contents of these locations.&#xD;&#xA;&#xD;&#xA;    Machine                    $FBB3    $FB1E    $FBC0    $FBDD    $FBBE    $FBBF&#xD;&#xA;    -----------------------------------------------------------------------------&#xD;&#xA;    Apple ][                    $38              [$60]                      [$2F]&#xD;&#xA;    Apple ][+                   $EA      $AD     [$EA]                      [$EA]&#xD;&#xA;    Apple /// (emulation)       $EA      $8A&#xD;&#xA;    Apple IIe                   $06               $EA                       [$C1]&#xD;&#xA;    Apple IIe (enhanced)        $06               $E0                       [$00]&#xD;&#xA;    Apple IIe Option Card       $06               $E0      $02      $00&#xD;&#xA;    Apple IIc                   $06               $00                        $FF&#xD;&#xA;    Apple IIc (3.5 ROM)         $06               $00                        $00&#xD;&#xA;    Apple IIc (Org. Mem. Exp.)  $06               $00                        $03&#xD;&#xA;    Apple IIc (Rev. Mem. Exp.)  $06               $00                        $04 &#xD;&#xA;    Apple IIc Plus              $06               $00                        $05&#xD;&#xA;    Apple IIgs                  (see below)&#xD;&#xA;&#xD;&#xA;&gt; The Apple IIe Card for Macintosh LC uses the same identification bytes ($FBB3 and $FBC0) as an enhanced Apple IIe. Location $FBDD allows you to tell the difference between the Apple IIe Card and an enhanced Apple IIe because $FBDD will always contain the value $02 on the Apple IIe Card. Location $FBBE is the version byte for the Apple IIe Card (just as $FBBF is the version byte for the Apple IIc family) and is $00 for the first release of the Apple IIe Card.&#xD;&#xA;&#xD;&#xA;&gt; The ID bytes for an Apple IIgs are not listed in the table since they match those of an enhanced Apple IIe. Future 16-bit Apple II products may match different Apple II identification bytes for compatibility reasons, so to identify a machine as a IIgs or other 16-bit Apple II, you must make the following ROM call:&#xD;&#xA;&#xD;&#xA;    SEC               ;Set carry bit (flag)&#xD;&#xA;    JSR $FE1F         ;Call to the monitor&#xD;&#xA;    BCS OLDMACHINE    ;If carry is still set, then old machine&#xD;&#xA;    BCC NEWMACHINE    ;If carry is clear, then new machine&#xD;&#xA;&#xD;&#xA;The IIgs ROM version information can be determined from the contents of the A/X/Y registers set by `$FE1F` when the carry is clear.  (The ROM versions are described in [IIgs Tech Note #26][3].)&#xD;&#xA;&#xD;&#xA;    Bit      Accumulator                       X Register  Y Register&#xD;&#xA;    ------------------------------------------------------------------------&#xD;&#xA;    Bit 15   Reserved                          Reserved    Machine ID Number &#xD;&#xA;                                                           (0 = Apple IIgs)&#xD;&#xA;    Bit 14   Reserved                          Reserved    Machine ID Number&#xD;&#xA;    Bit 13   Reserved                          Reserved    Machine ID Number&#xD;&#xA;    Bit 12   Reserved                          Reserved    Machine ID Number &#xD;&#xA;    Bit 11   Reserved                          Reserved    Machine ID Number&#xD;&#xA;    Bit 10   Reserved                          Reserved    Machine ID Number&#xD;&#xA;    Bit 9    Reserved                          Reserved    Machine ID Number&#xD;&#xA;    Bit 8    Reserved                          Reserved    Machine ID Number&#xD;&#xA;    Bit 7    Reserved                          Reserved    ROM version number&#xD;&#xA;    Bit 6    1 if system has memory expansion slot&#xD;&#xA;                                               Reserved    ROM version number&#xD;&#xA;    Bit 5    1 if system has IWM port          Reserved    ROM version number&#xD;&#xA;    Bit 4    1 if system has a built-in clock  Reserved    ROM version number&#xD;&#xA;    Bit 3    1 if system has desktop bus       Reserved    ROM version number&#xD;&#xA;    Bit 2    1 if system has SCC built-in      Reserved    ROM version number&#xD;&#xA;    Bit 1    1 if system has external slots    Reserved    ROM version number&#xD;&#xA;    Bit 0    1 if system has internal ports    Reserved    ROM version number&#xD;&#xA;&#xD;&#xA;&gt; Note: In emulation or eight-bit mode, only the lower eight bits are returned.&#xD;&#xA;&#xD;&#xA;The value in A will be slightly wrong if Y is zero (i.e. ROM 0), reporting $xx1F when it should be $xx7F.&#xD;&#xA;&#xD;&#xA;Code that does all of the checks, as well as identifying the memory configuration, can be found in [Miscellaneous Tech Note #2][2].&#xD;&#xA;&#xD;&#xA;One thing not covered by the tech notes is how to tell the difference between a real Apple II and one of the not-quite-clones, such as the Franklin Ace.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.1000bit.it/support/manuali/apple/technotes/misc/tn.misc.07.html&#xD;&#xA;  [2]: http://www.1000bit.it/support/manuali/apple/technotes/misc/tn.misc.02.html&#xD;&#xA;  [3]: http://www.1000bit.it/support/manuali/apple/technotes/iigs/tn.iigs.026.html" />
  <row Id="1016" PostHistoryTypeId="5" PostId="230" RevisionGUID="3efa2425-0904-48a8-b602-3df693050bb1" CreationDate="2016-05-01T01:08:29.973" UserId="56" Comment="Removed &quot;written&quot; and &quot;last edited&quot; dates, as those appear just below" Text="Fast Screen Refresh With PEI Slamming&#xD;&#xA;=====================================&#xD;&#xA;(Or: Dirty Tricks With the Direct Page)&#xD;&#xA;---------------------------------------&#xD;&#xA;&#xD;&#xA;*This article is based on my KansasFest 2004 presentation &quot;Code Secrets of Wolf 3D.&quot;*&#xD;&#xA;&#xD;&#xA;###Introduction&#xD;&#xA;&#xD;&#xA;Drawing super high-resolution (SHR) graphics on the Apple IIgs is slow. Unfortunately, the SHR screen's memory in bank $E1 is located in &quot;slow RAM&quot; — that is, memory controlled by the Mega II chip which emulates 1 MHz 8-bit Apple IIs. Access to this memory is gated to that 1 MHz speed instead of the 2.8 MHz of the rest of memory. This has plagued Apple IIgs graphics developers since the beginning.&#xD;&#xA;&#xD;&#xA;Fortunately, a number of hardware quirks of the Apple IIgs can be used in tandem to help ease the pain:&#xD;&#xA;&#xD;&#xA;* Shadowing allows bank $01 to be shadowed into bank $E1; that means that whatever is written into bank $01 is automatically mirrored into bank $E1 without slowing you down.&#xD;&#xA;&#xD;&#xA;* You can use the main/auxmem toggle softswitches ($C003 and $C005) to use bank $01 instead of bank $00 for the direct page and stack.&#xD;&#xA;&#xD;&#xA;* The stack and direct page can both be moved around within the bank they're located in by changing the values of the stack pointer and direct register.&#xD;&#xA;&#xD;&#xA;Let's see how this works!&#xD;&#xA;&#xD;&#xA;###Shadowing&#xD;&#xA;&#xD;&#xA;You probably know that the Apple IIgs has a single super high-resolution graphics buffer, located in bank $E1 from $2000-$9FFF. This SHR buffer consists of the pixel data, a set of scanline control bytes (SCBs) which describe the mode of each row of pixels (including which palette to use and whether they're using 320 or 640 mode), and 16 palettes.&#xD;&#xA;&#xD;&#xA;That memory is slow. It's designed to support the 8-bit emulation of the Mega II chip, so writes into it are slowed down to 1 MHz whether you like it or not. There is a workaround, however. The clever people that designed the Apple IIgs included a technology called **shadowing**; this is the ability to have the hardware mirror writes to bank $01 into bank $E1. The writes into bank $01 execute at the computer's regular 2.8 MHz speed, which is obviously much better.&#xD;&#xA;&#xD;&#xA;Shadowing is controlled by bit 3 in the `SHADOW` softswitch at $E0/C035. When 0, shadowing is enabled. When 1, it's disabled.&#xD;&#xA;&#xD;&#xA;So the first step is to allocate the bank $01 SHR buffer. It has to be located at $01/2000-$01/9FFF or it won't work, for obvious reasons — shadowing mirrors writes to the same address in bank $E1.&#xD;&#xA;&#xD;&#xA;Make sure you own the bank $01 SHR buffer! Either use `NewHandle` to allocate it (be sure to set the flag that allows it to allocate special memory, since all of bank $01 is special) or, for GS/OS applications, set the auxtype bit which tells GS/OS to use shadowing so that GS/OS allocates it for you.&#xD;&#xA;&#xD;&#xA;Bytes already located in the bank $01 SHR buffer, however, do not get copied over automatically. You have to write any bytes you want to be copied after shadowing is turned on. That means you either need to track exactly what's changed and redraw those bytes, or redraw the all or most of the frame every refresh cycle. Which you do is up to you (and likely depends on how much you expect to change each refresh).&#xD;&#xA;&#xD;&#xA;You could of course use your typical `LDA`/`STA` loops or similar to do the refresh, but there's a much, much faster way.&#xD;&#xA;&#xD;&#xA;###Stacking the deck: Direct page tricks&#xD;&#xA;&#xD;&#xA;On the 6502 and 65C02, the zero page and stack are fixed in memory; the zero page is always located at $0000-$00FF, and the stack is always in $0100-$01FF. The 65816 changes all that. The direct page (previously known as the zero page) can be moved to any location in bank $00 by changing the value in the Direct register. This can be done using instructions such as `TCD` (Transfer aCcumulator to Direct register), like this:&#xD;&#xA;&#xD;&#xA;	            lda #$2000&#xD;&#xA;	            tcd                   ; Set the direct page to $2000&#xD;&#xA;&#xD;&#xA;Similarly, the 65816 allows you to move the stack by expanding the stack pointer register, previously an 8-bit offset from $0100, to be a 16-bit pointer within bank $00. You use instructions such as `TCS` (Transfer aCcumulator to Stack pointer) to move the stack.&#xD;&#xA;&#xD;&#xA;The nice thing about stack and direct page operations is that you can use instructions which use fewer cycles to access them. In fact, it gets even better, as we'll see shortly.&#xD;&#xA;&#xD;&#xA;But how does this help us? The shadow SHR buffer is in bank $01, and the direct page and stack are trapped in bank $00. Right?&#xD;&#xA;&#xD;&#xA;Not so fast!&#xD;&#xA;&#xD;&#xA;The Apple IIgs was designed to be able to emulate an enhanced 8-bit Apple II; that is, an Apple II with at least 128K of memory. Because 8-bit Apple IIs can't access more than 64K directly, a mechanism called bank switching allowed you to select which 64K bank of memory you wanted to use by swapping them into the same 64K address space. This was done by using softswitches to toggle between main and &quot;auxiliary&quot; memory, often called &quot;auxmem.&quot;&#xD;&#xA;&#xD;&#xA;There is a set of softswitches for selecting whether you wish to read from auxmem or main memory, and write to auxmem or main memory:&#xD;&#xA;&#xD;&#xA;	$E0C002     equ RDMAINRAM         ; Read from main memory&#xD;&#xA;	$E0C003     equ RDCARDRAM         ; Read from auxiliary memory&#xD;&#xA;	$E0C004     equ WRMAINRAM         ; Write to main memory&#xD;&#xA;	$E0C005     equ WRCARDRAM         ; Write to auxiliary memory&#xD;&#xA;&#xD;&#xA;The Apple IIgs emulates this mechanism by using bank $00 as main memory and bank $01 as auxmem; writing to `RDCARDRAM` and `WRCARDRAM` causes bank $01 to take bank $00's place, so that any accesses to bank $00 actually access bank $01.  Now things get interesting: by selecting auxiliary memory in this way, accesses to the stack and direct page actually access bank $01, which is where our SHR buffer is!&#xD;&#xA;&#xD;&#xA;Now we have a way to use higher-performance direct page and stack instructions to read and write the SHR buffer.&#xD;&#xA;&#xD;&#xA;Now we need to figure out the best way to use them.&#xD;&#xA;&#xD;&#xA;###Putting it together&#xD;&#xA;&#xD;&#xA;The first thing you need to do is turn off shadowing. You don't want writes to the SHR buffer in bank $01 to be duplicated to bank $E1 until you're ready.&#xD;&#xA;&#xD;&#xA;	          sep #$20&#xD;&#xA;	          lda &gt;SHADOW             ; Get the current shadow register&#xD;&#xA;	          ora #$08                ; Turn on the &quot;stop SHR shadowing&quot; bit&#xD;&#xA;	          sta &gt;SHADOW             ; Save the updated value&#xD;&#xA;	          rep #$20&#xD;&#xA;&#xD;&#xA;This code ensures shadowing is disabled while not changing the values of any of the other bits in the `SHADOW` register (there are bits for controlling shadowing of various parts of bank $00; all we care about is the SHR buffer, though).&#xD;&#xA;&#xD;&#xA;Now you should draw your graphics into the SHR buffer in bank $01, starting at $2000. You can either redraw the whole thing or, preferably, update just the areas that need to change. This doesn't affect what's on the screen, so it can be done in pieces or in strange ways that would look weird if immediately reflected on the screen. However you like.&#xD;&#xA;&#xD;&#xA;This is the point where you decide when it's time to update the display. Maybe you do it immediately every time a screen update routine finishes running. Maybe you wait until the vertical scan has passed the first scan line you plan to refresh. Either way, the process is roughly the same. Wolfenstein 3D just draws, without worrying about the vertical scan, because it cares more about speed than about possible tearing effects caused by vertical refresh collisions.&#xD;&#xA;&#xD;&#xA;When the time comes to refresh the display, the first step is to turn shadowing back on so that writes to the bank $01 SHR buffer are mirrored to bank $E1:&#xD;&#xA;&#xD;&#xA;	          sep #$20&#xD;&#xA;	          lda &gt;SHADOW             ; Get the current shadow register&#xD;&#xA;	          and #$F7                ; Turn off the &quot;stop SHR shadowing&quot; bit&#xD;&#xA;	          sta &gt;SHADOW             ; Save the updated value&#xD;&#xA;	          rep #$20&#xD;&#xA;&#xD;&#xA;Now shadowing of the SHR buffer has been enabled. Our job now is to take the contents of the bank $01 buffer — at least the parts of it which have changed — and draw them right on top of themselves to update the bank $E1 buffer.&#xD;&#xA;&#xD;&#xA;Think about it for a moment. The contents of the bank $01 buffer are only shadowed to bank $E1 when changed, but it contains the image we want to display already. So we just need to read the changed data and write it right back on top of itself to mirror it to the displayed screen. It sounds a little crazy, but only until you think about it a bit.&#xD;&#xA;&#xD;&#xA;Since we're going to be fiddling with the stack and direct registers, we need to save those so we can restore them later. We also need to disable interrupts:&#xD;&#xA;&#xD;&#xA;	          sei                     ; Disable interrupts&#xD;&#xA;	          tdc                     ; Copy direct register to accumulator&#xD;&#xA;	          sta savedDP             ; Save it locally&#xD;&#xA;	          tsc                     ; Copy stack pointer to accumulator&#xD;&#xA;	          sta savedStack          ; Save that too&#xD;&#xA;&#xD;&#xA;Why did we disable interrupts? Because if bank $01 is occupying the space normally used by bank $00 when an interrupt fires, the interrupt handler will almost certainly blow up.&#xD;&#xA;&#xD;&#xA;Imagine this scenario: AppleTalk is enabled, and the AppleTalk interrupt fires, causing AppleTalk code to get control of the system briefly. It restores its stack and direct page pointers so it can access the data it expects to access, but because bank $01 is now occupying the space normally taken by bank $00, it gets the wrong data (and writes over other programs' data), and things rapidly fall apart.&#xD;&#xA;&#xD;&#xA;Now we complete the preparations by swapping bank $01 to replace bank $00:&#xD;&#xA;&#xD;&#xA;	          sep #$20&#xD;&#xA;	          sta &gt;WRCARDRAM          ; Writes to bank $00 go to bank $01&#xD;&#xA;	          sta &gt;RDCARDRAM          ; Reads from bank $00 to go bank $01&#xD;&#xA;	          rep #$20&#xD;&#xA;&#xD;&#xA;From now on, all accesses to bank $00 actually access bank $01. We're going to use stack and direct page instructions exclusively, for maximum performance.&#xD;&#xA;&#xD;&#xA;It's time to start drawing. We're going to draw the entire screen each frame for this example. It's what Wolf 3D does, because it's pretty typical for most or all of the screen to change, or at least enough of it that trying to update only parts of it wasn't worth the effort. But you might find ways to do better.&#xD;&#xA;&#xD;&#xA;The first step is to set the Direct register to point to $2000, the first byte of the SHR buffer:&#xD;&#xA;&#xD;&#xA;	          lda #$2000&#xD;&#xA;	          tcd&#xD;&#xA;&#xD;&#xA;Now we can use direct page instructions (which typically use one cycle less than their absolute equivalents) to access the first page (256 bytes) of the buffer. That alone sounds like a win, and it is, but we can do better.&#xD;&#xA;&#xD;&#xA;The next step is to point the stack pointer at $20FF, which is the last byte in the first page of the SHR buffer:&#xD;&#xA;&#xD;&#xA;	          clc&#xD;&#xA;	          adc #$00FF&#xD;&#xA;	          tcs&#xD;&#xA;&#xD;&#xA;This takes the $2000 already in the accumulator, adds $FF, and stores the result ($20FF) into the stack pointer. We calculate the value because we'll be looping back up here later.&#xD;&#xA;&#xD;&#xA;Now it's time to copy a page of screen data on top of itself, so that that page of data is shadowed to the main SHR buffer in bank $E1. By default, you think that you'll need a loop of reading a word, then writing a word, over and over. But it turns out that with our direct page and stack configured the way we have them, there's a way to combine reading and writing into a single instruction!&#xD;&#xA;&#xD;&#xA;The `PEI` (Push Effective Indirect) instruction isn't used as often as it should be. It fetches a word from the direct page and pushes it onto the stack in one smooth operation.&#xD;&#xA;&#xD;&#xA;So consider this: our stack now starts at $20FF and works backward toward $2000 with each push. The direct page starts at $2000 and extends up to $20FF. That means they overlap, occupying exactly the same memory. So `PEI` can be used to copy a value on top of itself in this space, if we use it just right. Here's how:&#xD;&#xA;&#xD;&#xA;	          pei $FE&#xD;&#xA;&#xD;&#xA;This one instruction takes the value located at offset $FE on the direct page (that is, at $01/20FE-20FF) and pushes it onto the stack. Since the stack pointer is at $20FF, the result is that the value is written on top of itself, using a two-byte, 6-cycle operation to refresh two bytes of the screen.&#xD;&#xA;&#xD;&#xA;So all we need to do to copy the entire page over is to have a series of 128 `PEI`s in a row. We do this instead of using a loop because a loop just adds overhead, and every cycle counts when you're doing this — especially since interrupts are disabled, and we can only leave them disabled for so long. This code looks like this:&#xD;&#xA;&#xD;&#xA;	          pei $FE&#xD;&#xA;	          pei $FC&#xD;&#xA;	          pei $FA&#xD;&#xA;	          pei $F8&#xD;&#xA;	          ...&#xD;&#xA;	          pei $06&#xD;&#xA;	          pei $04&#xD;&#xA;	          pei $02&#xD;&#xA;	          pei $00&#xD;&#xA;&#xD;&#xA;Once you've finished copying the page, update the Direct register and Stack pointer (to $2100 and $21FF) and do it over and over, adding $0100 to each register every time a page finishes copying.&#xD;&#xA;&#xD;&#xA;There are two tricks.&#xD;&#xA;&#xD;&#xA;**Trick 1: Periodically enable interrupts**&#xD;&#xA;&#xD;&#xA;First, you need to periodically switch bank $00 back into place and re-enable interrupts so that MIDISynth, GS/OS, and other users of interrupts have an opportunity to be serviced. The operating system cannot keep functioning properly if you don't allow it to periodically handle interrupts, and music and sound effects will not play correctly if their interrupts aren't processed.&#xD;&#xA;&#xD;&#xA;Also, AppleTalk networks will be disconnected if interrupts are disabled for more than 104.167µsec — another reason to be careful with how long you leave interrupts disabled.&#xD;&#xA;&#xD;&#xA;Wolfenstein 3D re-enables interrupts after every seventh page is copied), like this:&#xD;&#xA;&#xD;&#xA;	          sep #$20&#xD;&#xA;	          sta &gt;RDMAINRAM          ; Read from bank $00&#xD;&#xA;	          sta &gt;WRMAINRAM          ; Write to bank $00&#xD;&#xA;	          rep #$20&#xD;&#xA;	          lda entryStack          ; Retrieve the original stack pointer&#xD;&#xA;	          tcs                     ; Then restore the stack to there&#xD;&#xA;	          lda entryDP             ; Then do the same thing for the direct page&#xD;&#xA;	          tcd&#xD;&#xA;	          cli                     ; Enable interrupts&#xD;&#xA;&#xD;&#xA;As soon as that `CLI` (CLear Interrupt disable) instruction is executed, any pending interrupts are processed before our code continues to execute. That means we can immediately disable interrupts again and restore our work environment to continue to copy the screen:&#xD;&#xA;&#xD;&#xA;	          sei                     ; Disable interrupts&#xD;&#xA;	          sep #$20&#xD;&#xA;	          sta &gt;RDCARDRAM          ; Read from bank $01&#xD;&#xA;	          sta &gt;WRCARDRAM          ; Write to bank $01&#xD;&#xA;	          rep #$20&#xD;&#xA;&#xD;&#xA;Now all you have to do is restore the stack and direct page to where you left off and pick up where you left off. Keep going until you reach $9D00 (or $A000 if you need to update the palettes and SCBs). You can of course also stop sooner if you only need to update certain rows.&#xD;&#xA;&#xD;&#xA;**Trick 2: Insert NOPs**&#xD;&#xA;&#xD;&#xA;Due to the intricacies of how the 65816's cycle timing works, you can actually improve the performance of your PEI-slamming code by inserting a `NOP` instruction after each 8th `PEI`. _There are some sources that say to put it after every 13th `PEI`. It's unclear which is correct; Wolfenstein 3D does it every 8th one, however._&#xD;&#xA;&#xD;&#xA;##Conclusion&#xD;&#xA;&#xD;&#xA;This technique takes some getting used to, and has a lot of ways you can mess it up (by failing to toggle a softswitch at the right point, usually, or by imbalance between the stack and direct page locations you're using). But once you get it down, it's among the fastest, if not the very fastest, ways to blit to the Apple IIgs screen using a back buffer.&#xD;&#xA;" />
  <row Id="1018" PostHistoryTypeId="2" PostId="367" RevisionGUID="a2a9ef84-3413-47d8-ae20-ca3e79011447" CreationDate="2016-05-01T11:57:48.353" UserId="105" Text="Following in the line of this question&#xD;&#xA;http://retrocomputing.stackexchange.com/questions/269/how-can-you-measure-time-using-basic-on-atari-xl-computers&#xD;&#xA;&#xD;&#xA;I'd like to ask how can you do the same (measuring time, with a resolution of frames or better if possible, on an Oric Atmos 48K. There is no TIME or TIMER function as I can see, and I haven't had much luck finding a list of system variables.&#xD;&#xA;&#xD;&#xA;So I tried reading the Oric ROM disassmbly searching for clues (available here: http://www.defence-force.org/ftp/oric/documentation/v1.1_rom_disassembly.pdf ), and I've reached this:&#xD;&#xA;&#xD;&#xA;    EDFC 29 7F      AND #$7F      This section sets up the 6522&#xD;&#xA;    EDFE 09 40      ORA #$40      to generate interrupts from&#xD;&#xA;    EE00 8D 0B 03   STA $030B     timer 1 every 10mS (in its&#xD;&#xA;    EE03 A9 C0      LDA #$C0      free running mode).&#xD;&#xA;&#xD;&#xA;A while after, in a code section titled as &quot;IRQ handler&quot;, I've come to this code:&#xD;&#xA;&#xD;&#xA;    EE39 A0 00      LDY #$00      This section decrements each&#xD;&#xA;    EE3B B9 72 02   LDA $0272,Y   of the three 16 bit counters&#xD;&#xA;    EE3E 38         SEC           in page 2 by 1.&#xD;&#xA;    EE3F E9 01      SBC #$01&#xD;&#xA;    EE41 99 72 02   STA $0272,Y&#xD;&#xA;    EE44 C8         INY&#xD;&#xA;    EE45 B9 72 02   LDA $0272,Y&#xD;&#xA;    EE48 E9 00      SBC #$00&#xD;&#xA;    EE4A 99 72 02   STA $0272,Y&#xD;&#xA;    EE4D C8         INY&#xD;&#xA;    EE4E C0 06      CPY #$06&#xD;&#xA;    EE50 D0 E9      BNE $EE3B&#xD;&#xA;&#xD;&#xA;So I thought there was a 10ms free running timer which caused a 16-bit counter located at `$0272` to decrement by 1. I tried to `PEEK` that location (`626` in decimal) to see if it changes, but it doesn't. It may be a hardware counter located in a CIA or something. I'm not sure.&#xD;&#xA;&#xD;&#xA;After all this, I'm in the same point as I started, so... does anyone know how to measure time from BASIC in a Oric Atmos 48K? Thanks!" />
  <row Id="1019" PostHistoryTypeId="1" PostId="367" RevisionGUID="a2a9ef84-3413-47d8-ae20-ca3e79011447" CreationDate="2016-05-01T11:57:48.353" UserId="105" Text="How to measure time with frame resolution or better using BASIC in an Oric Atmos 48K" />
  <row Id="1020" PostHistoryTypeId="3" PostId="367" RevisionGUID="a2a9ef84-3413-47d8-ae20-ca3e79011447" CreationDate="2016-05-01T11:57:48.353" UserId="105" Text="&lt;oric-atmos&gt;" />
  <row Id="1021" PostHistoryTypeId="5" PostId="352" RevisionGUID="f79d5f38-26de-4c2d-b921-dfde72a628be" CreationDate="2016-05-01T18:58:51.917" UserId="130" Comment="Typo correction" Text="You can, provided that you have a cartridge reader that you can plug to the computer that runs the emulator. One such reader is [Retrode](https://en.wikipedia.org/wiki/Retrode); if you google &quot;nes cartridge reader&quot; you will find references to more similar products, even DIY kits. " />
  <row Id="1022" PostHistoryTypeId="2" PostId="368" RevisionGUID="7058b44e-4e8f-4bab-aa22-119acb9d5b34" CreationDate="2016-05-01T20:10:17.750" UserId="29" Text="I've seen several mentions of a &quot;Stack Blasting&quot; technique for copying memory quickly on the 6809. What is it? How does it work?" />
  <row Id="1023" PostHistoryTypeId="1" PostId="368" RevisionGUID="7058b44e-4e8f-4bab-aa22-119acb9d5b34" CreationDate="2016-05-01T20:10:17.750" UserId="29" Text="Motorola 6809 Stack Blasting" />
  <row Id="1024" PostHistoryTypeId="3" PostId="368" RevisionGUID="7058b44e-4e8f-4bab-aa22-119acb9d5b34" CreationDate="2016-05-01T20:10:17.750" UserId="29" Text="&lt;6809&gt;" />
  <row Id="1025" PostHistoryTypeId="2" PostId="369" RevisionGUID="221e195e-e64c-4085-96b3-1fbfab636b28" CreationDate="2016-05-01T21:19:53.270" UserId="79" Text="The 6809 has a couple of instructions which provide very quick ways of pulling (popping) and pushing registers off and onto the stack, `PULS`/`PULU` and `PSHS`/`PSHU`. `PSHx` only takes 5 cycles plus one per byte, which is much faster than other methods of writing to memory. So by pointing the stack registers (`U` and/or `S`) at the area of memory you want to read from and/or write to, you can quickly access memory.&#xD;&#xA;&#xD;&#xA;This works particularly well for copying memory: read into as many registers as possible using `PULS` or `PULU` (you get to specify which registers are used, the CPU doesn't force you to push or pull all of them), and write using `PULU` or `PULS`. You'd set `S` to point to the memory to be read, and `U` to the address to write to, or vice versa; the pull and push instructions increment the stack registers as appropriate. The 6809 has three general-purpose 16-bit registers, `D` (also known as `A` and `B` combined), `X` and `Y`, and one register that can often be spared in these kinds of loops, `DP`; using this technique you can copy 7 bytes in 24 cycles.&#xD;&#xA;&#xD;&#xA;There are of course some caveats; in particular, any interrupts which occur during this stack blast will affect the values being copied, since the interrupt will use the &quot;stack&quot; that's been set up for the copy.&#xD;&#xA;&#xD;&#xA;Tom Moertel has a [great write-up](http://blog.moertel.com/posts/2013-12-14-great-old-timey-game-programming-hack.html) of this technique." />
  <row Id="1026" PostHistoryTypeId="5" PostId="369" RevisionGUID="a656f7d1-3fdb-4805-b676-95163295daa5" CreationDate="2016-05-01T21:29:51.503" UserId="79" Comment="Add a code example and mention the increment/decrement issue." Text="The 6809 has a couple of instructions which provide very quick ways of pulling (popping) and pushing registers off and onto the stack, `PULS`/`PULU` and `PSHS`/`PSHU`. `PSHx` only takes 5 cycles plus one per byte, which is much faster than other methods of writing to memory. So by pointing the stack registers (`U` and/or `S`) at the area of memory you want to read from and/or write to, you can quickly access memory.&#xD;&#xA;&#xD;&#xA;This works particularly well for copying memory: read into as many registers as possible using `PULS` or `PULU` (you get to specify which registers are used, the CPU doesn't force you to push or pull all of them), and write using `PSHU` or `PSHS`. You'd set `S` to point to the memory to be read, and `U` to the address to write to, or vice versa; the pull and push instructions increment and decrement the stack registers as appropriate. The 6809 has three general-purpose 16-bit registers, `D` (also known as `A` and `B` combined), `X` and `Y`, and one register that can often be spared in these kinds of loops, `DP`; using this technique you can copy 7 bytes in 24 cycles:&#xD;&#xA;&#xD;&#xA;    ; point S at the memory to be read&#xD;&#xA;    ; point U at the target&#xD;&#xA;    PULS D,X,Y,DP     ; read 7 bytes into D, X, Y, DP, and increment S&#xD;&#xA;    PSHU D,X,Y,DP     ; write D, X, Y, DP to memory and decrement U&#xD;&#xA;&#xD;&#xA;There are of course some caveats. In particular, any interrupts which occur during this stack blast will affect the values being copied, since the interrupt will use the &quot;stack&quot; that's been set up for the copy. And since this is stack-based, reads and writes move in opposite directions...&#xD;&#xA;&#xD;&#xA;Tom Moertel has a [great write-up](http://blog.moertel.com/posts/2013-12-14-great-old-timey-game-programming-hack.html) of this technique." />
  <row Id="1027" PostHistoryTypeId="5" PostId="369" RevisionGUID="312ad8af-c654-4e1f-ad83-ce7f53d4fbce" CreationDate="2016-05-01T21:51:03.123" UserId="79" Comment="Compare with LDU/STU." Text="The 6809 has a couple of instructions which provide very quick ways of pulling (popping) and pushing registers off and onto the stack, `PULS`/`PULU` and `PSHS`/`PSHU`. `PSHx` only takes 5 cycles plus one per byte, which is much faster than other methods of writing to memory. So by pointing the stack registers (`U` and/or `S`) at the area of memory you want to read from and/or write to, you can quickly access memory.&#xD;&#xA;&#xD;&#xA;This works particularly well for copying memory: read into as many registers as possible using `PULS` or `PULU` (you get to specify which registers are used, the CPU doesn't force you to push or pull all of them), and write using `PSHU` or `PSHS`. You'd set `S` to point to the memory to be read, and `U` to the address to write to, or vice versa; the pull and push instructions increment and decrement the stack registers as appropriate. The 6809 has three general-purpose 16-bit registers, `D` (also known as `A` and `B` combined), `X` and `Y`, and one register that can often be spared in these kinds of loops, `DP`; using this technique you can copy 7 bytes in 24 cycles:&#xD;&#xA;&#xD;&#xA;    ; point S at the memory to be read&#xD;&#xA;    ; point U at the target&#xD;&#xA;    PULS D,X,Y,DP     ; read 7 bytes into D, X, Y, DP, and increment S&#xD;&#xA;    PSHU D,X,Y,DP     ; write D, X, Y, DP to memory and decrement U&#xD;&#xA;&#xD;&#xA;This compares to the basic memory copying technique, via the `U` stack pointer, which takes 16 cycles per word (two bytes) — five cycles per load/store, and three cycles per index increment:&#xD;&#xA;&#xD;&#xA;    ; point X at the memory to be read&#xD;&#xA;    ; point Y at the target&#xD;&#xA;    LDU ,X++          ; read 2 bytes into U and increment X&#xD;&#xA;    STU ,Y++          ; write U to memory and increment Y&#xD;&#xA;&#xD;&#xA;So stack blasting takes less than 4 cycles per byte, whereas `LDU`/`STU` takes 8 cycles per byte... Furthermore, since stack blasting copies more memory per instruction pair, there's less overhead involved with loops or loop unrolling!&#xD;&#xA;&#xD;&#xA;There are of course some caveats. In particular, any interrupts which occur during this stack blast will affect the values being copied, since the interrupt will use the &quot;stack&quot; that's been set up for the copy. And since this is stack-based, reads and writes move in opposite directions...&#xD;&#xA;&#xD;&#xA;Tom Moertel has a [great write-up](http://blog.moertel.com/posts/2013-12-14-great-old-timey-game-programming-hack.html) of this technique, including more detailed comparisons with other memory-copying techniques (offset load/stores instead of incrementing load/stores for example)." />
  <row Id="1028" PostHistoryTypeId="5" PostId="369" RevisionGUID="854741da-e5c2-40e7-b5c3-174c64685444" CreationDate="2016-05-01T21:56:36.497" UserId="79" Comment="Compare with LDU/STU." Text="The 6809 has a couple of instructions which provide very quick ways of pulling (popping) and pushing registers off and onto the stack, `PULS`/`PULU` and `PSHS`/`PSHU`. `PSHx` only takes 5 cycles plus one per byte, which is much faster than other methods of writing to memory. So by pointing the stack registers (`U` and/or `S`) at the area of memory you want to read from and/or write to, you can quickly access memory.&#xD;&#xA;&#xD;&#xA;This works particularly well for copying memory: read into as many registers as possible using `PULS` or `PULU` (you get to specify which registers are used, the CPU doesn't force you to push or pull all of them), and write using `PSHU` or `PSHS`. You'd set `S` to point to the memory to be read, and `U` to the address to write to, or vice versa; the pull and push instructions increment and decrement the stack registers as appropriate. The 6809 has three general-purpose 16-bit registers, `D` (also known as `A` and `B` combined), `X` and `Y`, and one register that can often be spared in these kinds of loops, `DP`; using this technique you can copy 7 bytes in 24 cycles:&#xD;&#xA;&#xD;&#xA;    ; point S at the memory to be read&#xD;&#xA;    ; point U at the target&#xD;&#xA;    PULS D,X,Y,DP     ; read 7 bytes into D, X, Y, DP, and increment S&#xD;&#xA;    PSHU D,X,Y,DP     ; write D, X, Y, DP to memory and decrement U&#xD;&#xA;&#xD;&#xA;This compares to the basic memory copying technique, via the `U` stack pointer, which takes 16 cycles per word (two bytes) — five cycles per load/store, and three cycles per index increment:&#xD;&#xA;&#xD;&#xA;    ; point X at the memory to be read&#xD;&#xA;    ; point Y at the target&#xD;&#xA;    LDU ,X++          ; read 2 bytes into U and increment X&#xD;&#xA;    STU ,Y++          ; write U to memory and increment Y&#xD;&#xA;&#xD;&#xA;So stack blasting takes less than 4 cycles per byte, whereas `LDU`/`STU` takes 8 cycles per byte... Furthermore, since stack blasting copies more memory per instruction pair, there's less overhead involved with loops or loop unrolling!&#xD;&#xA;&#xD;&#xA;There are of course some caveats. In particular, any interrupts which occur during this stack blast will affect the values being copied, since the interrupt will use the &quot;stack&quot; that's been set up for the copy. And since this is stack-based, reads and writes move in opposite directions...&#xD;&#xA;&#xD;&#xA;Tom Moertel has a [great write-up](http://blog.moertel.com/posts/2013-12-14-great-old-timey-game-programming-hack.html) of this technique, including more detailed comparisons with other memory-copying techniques (offset load/stores instead of incrementing load/stores for example). He shows how he went from 157 cycles to copy 14 bytes using a typical loop, to 120 cycles with an unrolled loop, to 98 cycles with an unrolled, fixed-offset copy, down to 56 cycles using stack blasting." />
  <row Id="1029" PostHistoryTypeId="6" PostId="269" RevisionGUID="c131b346-cc40-4a82-b828-51f495436e84" CreationDate="2016-05-01T22:00:14.683" UserId="79" Comment="Remove the Oric tag." Text="&lt;atari-basic&gt;&lt;benchmarking&gt;" />
  <row Id="1030" PostHistoryTypeId="5" PostId="369" RevisionGUID="d7b7bc34-d4cd-4f43-b7b7-5831153b0514" CreationDate="2016-05-01T22:06:12.527" UserId="79" Comment="Explain LDU." Text="The 6809 has a couple of instructions which provide very quick ways of pulling (popping) and pushing registers off and onto the stack, `PULS`/`PULU` and `PSHS`/`PSHU`. `PSHx` only takes 5 cycles plus one per byte, which is much faster than other methods of writing to memory. So by pointing the stack registers (`U` and/or `S`) at the area of memory you want to read from and/or write to, you can quickly access memory.&#xD;&#xA;&#xD;&#xA;This works particularly well for copying memory: read into as many registers as possible using `PULS` or `PULU` (you get to specify which registers are used, the CPU doesn't force you to push or pull all of them), and write using `PSHU` or `PSHS`. You'd set `S` to point to the memory to be read, and `U` to the address to write to, or vice versa; the pull and push instructions increment and decrement the stack registers as appropriate. The 6809 has three general-purpose 16-bit registers, `D` (also known as `A` and `B` combined), `X` and `Y`, and one register that can often be spared in these kinds of loops, `DP`; using this technique you can copy 7 bytes in 24 cycles:&#xD;&#xA;&#xD;&#xA;    ; point S at the memory to be read&#xD;&#xA;    ; point U at the target&#xD;&#xA;    PULS D,X,Y,DP     ; read 7 bytes into D, X, Y, DP, and increment S&#xD;&#xA;    PSHU D,X,Y,DP     ; write D, X, Y, DP to memory and decrement U&#xD;&#xA;&#xD;&#xA;This compares to the basic memory copying technique, via the `U` stack pointer, which takes 16 cycles per word (two bytes) — five cycles per load/store, and three cycles per index increment:&#xD;&#xA;&#xD;&#xA;    ; point X at the memory to be read&#xD;&#xA;    ; point Y at the target&#xD;&#xA;    LDU ,X++          ; read 2 bytes into U and increment X&#xD;&#xA;    STU ,Y++          ; write U to memory and increment Y&#xD;&#xA;&#xD;&#xA;So stack blasting takes less than 4 cycles per byte, whereas `LDU`/`STU` takes 8 cycles per byte... Furthermore, since stack blasting copies more memory per instruction pair, there's less overhead involved with loops or loop unrolling!&#xD;&#xA;&#xD;&#xA;There are of course some caveats. In particular, any interrupts which occur during this stack blast will affect the values being copied, since the interrupt will use the &quot;stack&quot; that's been set up for the copy. And since this is stack-based, reads and writes move in opposite directions...&#xD;&#xA;&#xD;&#xA;Tom Moertel has a [great write-up](http://blog.moertel.com/posts/2013-12-14-great-old-timey-game-programming-hack.html) of this technique, including more detailed comparisons with other memory-copying techniques (offset load/stores instead of incrementing load/stores for example). He shows how he went from 157 cycles to copy 14 bytes using a typical loop, to 120 cycles with an unrolled loop, to 98 cycles with an unrolled, fixed-offset copy, down to 56 cycles using stack blasting.&#xD;&#xA;&#xD;&#xA;(Incidentally, copying via `U`, a stack register, may seem strange, but it's the best compromise on the 6809 which has few instructions for loading registers from memory: only `LDA`/`LDB`, which read one byte at a time, `LDX`/`LDY`, which would overwrite the index registers we want to use for addressing, and `LDS`/`LDU`. Using `S` isn't safe because that's the stack interrupts use.)" />
  <row Id="1031" PostHistoryTypeId="2" PostId="370" RevisionGUID="62b45795-167e-4114-9827-e8f5a3b974fa" CreationDate="2016-05-01T22:32:14.233" UserId="105" Text="It turns out that the information about system variables were at the end of the disassembly document. This is an excerpt from it:&#xD;&#xA;&#xD;&#xA;    $272,$273    Keyboard timer.&#xD;&#xA;    $274,$275    Cursor timer.&#xD;&#xA;    $276,$277    Spare counter — also used by WAIT (and printer in V1.0).&#xD;&#xA;&#xD;&#xA;And the argument for the `WAIT` command is a multiple of `10 ms`, so `WAIT 100` waits for 1 second. &#xD;&#xA;&#xD;&#xA;So the resolution of the spare counter used by `WAIT` is `10 ms`. More than enough for me!&#xD;&#xA;&#xD;&#xA;To get the current value of this spare counter, which is a 16 bit number, I have to use the `DEEK` function, a variant of `PEEK` to retrieve a 16-bit number from memory, like this: `DEEK(#276)` `#276` is an hexadecimal number.&#xD;&#xA;&#xD;&#xA;Counters in the Oric Atmos computer count backwards, so the number retrieved when the measurement starts will be greater than the one retrieved when the measurement ends.&#xD;&#xA;&#xD;&#xA;So, this is the SAXPY benchmark applied to the Oric Atmos 48K:&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/S0kjy.png&#xD;&#xA;" />
  <row Id="1032" PostHistoryTypeId="2" PostId="371" RevisionGUID="6c1097b1-a963-48da-9881-564bf4cd76a5" CreationDate="2016-05-02T04:11:48.107" UserId="4" Text="My Zire 21 PDA's battery won't hold a charge for more than a few minutes.  How do I replace it?" />
  <row Id="1033" PostHistoryTypeId="1" PostId="371" RevisionGUID="6c1097b1-a963-48da-9881-564bf4cd76a5" CreationDate="2016-05-02T04:11:48.107" UserId="4" Text="How do I replace the battery on my Palm Zire 21?" />
  <row Id="1034" PostHistoryTypeId="3" PostId="371" RevisionGUID="6c1097b1-a963-48da-9881-564bf4cd76a5" CreationDate="2016-05-02T04:11:48.107" UserId="4" Text="&lt;zire&gt;&lt;battery&gt;&lt;pda&gt;" />
  <row Id="1035" PostHistoryTypeId="5" PostId="196" RevisionGUID="12ca3cb4-71da-4812-ae25-d98cfafd55ba" CreationDate="2016-05-02T07:38:46.237" UserId="92" Comment="Fix the GIF animation for Chrome users." Text="EHB&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;For example, a game that uses EHB (Extra HalfBrite) mode during the game action (i. e. ingame) is _Pinball Dreams_. In my example run of the _Beat Box_ table I can find the following in the copper list:&#xD;&#xA;&#xD;&#xA;    $00D6EA WAIT $4211FFFE&#xD;&#xA;    $00D6EE MOVE #$6200,BPLCON0&#xD;&#xA;&#xD;&#xA;I. e. it waits for raster line $42 (66) and uses BPLCON0 to set the number of bitplanes to 6 without the HAM bit set, which means EHB mode.&#xD;&#xA;&#xD;&#xA;_Cannon Fodder_ uses EHB for some of its still pictures. I'm not sure if it uses it ingame, but I consider it unlikely.&#xD;&#xA;&#xD;&#xA;A newer game, _Nemac IV_, presents you with a screen mode selection at the beginning, offering EHB mode as an option. It can then render its ingame 3D graphics to an EHB mode display. However, it requires a machine more powerful than a stock Amiga 500.&#xD;&#xA;&#xD;&#xA;HAM&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;The way HAM (Hold And Modify) mode works makes it unsuitable for ingame animation in most cases. I'm unaware of a game that uses it for its game action, however, that doesn't necessarily mean that none exists.&#xD;&#xA;&#xD;&#xA;_Fury of the Furries_ uses HAM for its still images, for example the title image and the images that are displayed before entering a new world (each consisting of a set of levels).&#xD;&#xA;&#xD;&#xA;The reason why it is unfeasible to use HAM for animated action is that you will either have to tolerate so-called color bleeding to the right of pixels or you will need to employ sophisticated algorithms to counteract the color bleeding, which timing constraints may forbid or which are just not worth it to come up with.&#xD;&#xA;&#xD;&#xA;In HAM mode you usually use 6 bitplanes (you can also use it with 5 bitplanes, but there's not much point to that). That's 64 possible values per pixel. Values 0 to 15 select a full RGB color from the 16 color palette, the same way other normal screen modes would. However, value sets 16 to 31 (modify blue component), 32 to 47 (modify red component) and 48 to 63 (modify green component), respectively, each just change one of the color components relative to the color of the previous pixel. The other two color components remain unchanged from the previous pixel.&#xD;&#xA;&#xD;&#xA;Say you set the color to palette entry 8 in column 100. Say also that this palette entry is $0333, i. e. a very dark gray. So the pixel in column 100 will appear gray.&#xD;&#xA;&#xD;&#xA; 1. Then, lacking a matching color in the palette, you modify the red component in column 101 to $6 (using a pixel value of $26 = 38). The resulting pixel in column 101 will now have a color equivalent to $0633, which is a dark unsaturated red.&#xD;&#xA;&#xD;&#xA; 2. Next, again lacking a matching color in the palette, you modify the green component in column 102 to $7 (using a pixel value of $37 = 55). The resulting pixel in column 102 will now have a color equivalent to $0673, which is a brown-greenish color.&#xD;&#xA;&#xD;&#xA; 3. Finally, lacking a matching color in the palette once more, you modify the blue component in column 103 to $6 (using a pixel value of $16 = 22). The resulting pixel in column 103 will now have a color equivalent to $0676, which is a dark gray with a very slight shimmer of green.&#xD;&#xA;&#xD;&#xA; [![HAM pixels before blitting][1]][1]  &#xD;&#xA; *note that each differently colored square represents 1 pixel*&#xD;&#xA;&#xD;&#xA;So far so good, but say you now want to blit an animated character onto the bitmap. Say the rightmost pixel of that character ends up in column 100 and it is a bright white, palette value $0FFF. What this means is that the white will bleed into the next 2 pixels:&#xD;&#xA;&#xD;&#xA; 1. Due to modifying just the red component, the visible color in column 101 will be $06FF, a bright cyan.&#xD;&#xA;&#xD;&#xA; 2. Due to modifying just the green component, the visible color in column 102 will be $067F, a bright blue.&#xD;&#xA;&#xD;&#xA; 3. Only in column 103 will you have modified all three color components and the apparent pixel color will be the same $0676 as the original one before blitting.&#xD;&#xA;&#xD;&#xA; [![HAM pixels after blitting][2]][2]  &#xD;&#xA; *note that each differently colored square represents 1 pixel*&#xD;&#xA;&#xD;&#xA;Depending on how many and which color components you consecutively modify, the color bleeding can affect more or less pixels and depending on how different the colors are to the originally intended colors, the artifacts can be more or less visible.&#xD;&#xA;&#xD;&#xA; [![uncorrected HAM color bleeding when naively blitting][3]][3]&#xD;&#xA; *note that I scaled the image by a factor of 2 to make the artifacts easier to see*&#xD;&#xA;&#xD;&#xA;To counteract the bleeding, you would have to design a routine that figures out which pixels to the right of a blit to adjust and which pixel values are the optimal ones that let the apparent pixel colors match the original ones as closely as possible. You won't get completely rid of the artifacts, but they might now be unnoticeable unless you take a closer look.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/xGlsK.png&#xD;&#xA;  [2]: http://i.stack.imgur.com/OTbAq.png&#xD;&#xA;  [3]: http://i.stack.imgur.com/ngFDc.gif" />
  <row Id="1036" PostHistoryTypeId="2" PostId="372" RevisionGUID="fb720233-ae9d-41ba-b8ce-1f01ff17fdbf" CreationDate="2016-05-02T10:41:02.843" UserId="149" Text="The Kickstart 1.3 ROM file that is supplied with Cloanto's Amiga Forever (`amiga-os-130.rom`) is very slightly different to that which you'd get by dumping a real 1.3 ROM from an Amiga 500.&#xD;&#xA;&#xD;&#xA;Specifically:&#xD;&#xA;&#xD;&#xA;- Byte at 0x0019d changes from 0x08 to 0x20 (this appears to be in exec.library)&#xD;&#xA;- Byte at 0x2af9d changes from 0xb9 to 0xbc (this appears to be in trackdisk.device)&#xD;&#xA;- The checksum at 0x3ffe8 is updated accordingly&#xD;&#xA;&#xD;&#xA;In both cases the ROM version is 34.5.&#xD;&#xA;&#xD;&#xA;What is the purpose of these changes? Why would AmigaForever supply an altered ROM file? It appears that this is the only AmigaForever ROM which has been altered." />
  <row Id="1037" PostHistoryTypeId="1" PostId="372" RevisionGUID="fb720233-ae9d-41ba-b8ce-1f01ff17fdbf" CreationDate="2016-05-02T10:41:02.843" UserId="149" Text="Why is the AmigaForever Kickstart 1.3 ROM slightly different to a real 1.3 ROM?" />
  <row Id="1038" PostHistoryTypeId="3" PostId="372" RevisionGUID="fb720233-ae9d-41ba-b8ce-1f01ff17fdbf" CreationDate="2016-05-02T10:41:02.843" UserId="149" Text="&lt;amiga&gt;&lt;emulation&gt;" />
  <row Id="1040" PostHistoryTypeId="2" PostId="373" RevisionGUID="b11c5bf3-b824-4c73-aaf7-7cd07b2091eb" CreationDate="2016-05-02T15:25:54.477" UserId="-1" Text="" />
  <row Id="1041" PostHistoryTypeId="2" PostId="374" RevisionGUID="bb0431cd-53b8-446b-9ac2-71bed279f21e" CreationDate="2016-05-02T15:25:54.477" UserId="-1" Text="" />
  <row Id="1042" PostHistoryTypeId="5" PostId="369" RevisionGUID="0b74a7be-79bf-4a12-b6f7-af163d4c869f" CreationDate="2016-05-02T16:28:12.407" UserId="79" Comment="Clarify that this only really works for graphics, and drop the LDU explanation which is probably incomplete." Text="The 6809 has a couple of instructions which provide very quick ways of pulling (popping) and pushing registers off and onto the stack, `PULS`/`PULU` and `PSHS`/`PSHU`. `PSHx` only takes 5 cycles plus one per byte, which is much faster than other methods of writing to memory. So by pointing the stack registers (`U` and/or `S`) at the area of memory you want to read from and/or write to, you can quickly access memory.&#xD;&#xA;&#xD;&#xA;This works particularly well for copying memory, at least in cases where the layout is amenable: read into as many registers as possible using `PULS` or `PULU` (you get to specify which registers are used, the CPU doesn't force you to push or pull all of them), and write using `PSHU` or `PSHS`. You'd set `S` to point to the memory to be read, and `U` to the address to write to, or vice versa; the pull and push instructions increment and decrement the stack registers as appropriate. The 6809 has three general-purpose 16-bit registers, `D` (also known as `A` and `B` combined), `X` and `Y`, and one register that can often be spared in these kinds of loops, `DP`; using this technique you can copy 7 bytes in 24 cycles:&#xD;&#xA;&#xD;&#xA;    ; point S at the memory to be read&#xD;&#xA;    ; point U at the target&#xD;&#xA;    PULS D,X,Y,DP     ; read 7 bytes into D, X, Y, DP, and increment S&#xD;&#xA;    PSHU D,X,Y,DP     ; write D, X, Y, DP to memory and decrement U&#xD;&#xA;&#xD;&#xA;This compares to the basic memory copying technique, via the `U` stack pointer, which takes 16 cycles per word (two bytes) — five cycles per load/store, and three cycles per index increment:&#xD;&#xA;&#xD;&#xA;    ; point X at the memory to be read&#xD;&#xA;    ; point Y at the target&#xD;&#xA;    LDU ,X++          ; read 2 bytes into U and increment X&#xD;&#xA;    STU ,Y++          ; write U to memory and increment Y&#xD;&#xA;&#xD;&#xA;So stack blasting takes less than 4 cycles per byte, whereas `LDU`/`STU` takes 8 cycles per byte... Furthermore, since stack blasting copies more memory per instruction pair, there's less overhead involved with loops or loop unrolling!&#xD;&#xA;&#xD;&#xA;There are of course some caveats. In particular, any interrupts which occur during this stack blast will affect the values being copied, since the interrupt will use the &quot;stack&quot; that's been set up for the copy. And since this is stack-based, reads and writes move in opposite directions... These two factors mean that stack blasting is only really useful for writing graphics to the screen: the source material can be laid out appropriately in advance, and changes caused by interrupts would only result in temporary artifacts on screen.&#xD;&#xA;&#xD;&#xA;Tom Moertel has a [great write-up](http://blog.moertel.com/posts/2013-12-14-great-old-timey-game-programming-hack.html) of this technique, including more detailed comparisons with other memory-copying techniques (offset load/stores instead of incrementing load/stores for example). He shows how he went from 157 cycles to copy 14 bytes using a typical loop, to 120 cycles with an unrolled loop, to 98 cycles with an unrolled, fixed-offset copy, down to 56 cycles using stack blasting." />
  <row Id="1043" PostHistoryTypeId="6" PostId="371" RevisionGUID="2eb02787-c012-483c-8c50-1d5bdec3cd24" CreationDate="2016-05-02T18:27:06.510" UserId="4" Comment="edited tags" Text="&lt;battery&gt;&lt;pda&gt;&lt;palm-zire&gt;" />
  <row Id="1044" PostHistoryTypeId="6" PostId="371" RevisionGUID="88226fb1-3bd9-405c-805f-bb6a0f210190" CreationDate="2016-05-02T19:33:03.800" UserId="175" Comment="There should be a general palm tag on this post since Palm was a platform with multiple devices" Text="&lt;battery&gt;&lt;pda&gt;&lt;palm-zire&gt;&lt;palm&gt;" />
  <row Id="1045" PostHistoryTypeId="24" PostId="371" RevisionGUID="88226fb1-3bd9-405c-805f-bb6a0f210190" CreationDate="2016-05-02T19:33:03.800" Comment="Proposed by 175 approved by 4 edit id of 124" />
  <row Id="1046" PostHistoryTypeId="2" PostId="375" RevisionGUID="757b1329-b698-421e-86da-54c66c0faa75" CreationDate="2016-05-02T19:42:21.747" UserId="110" Text="[This PDF][1] by Darren Atkinson gives you everything you want to know about programming differences between the two.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.coco3.com/community/wp-content/uploads/2010/03/6x09_Instruction_Sets.pdf" />
  <row Id="1047" PostHistoryTypeId="2" PostId="376" RevisionGUID="6f7d325f-ef7b-4afb-bad5-171735dbc353" CreationDate="2016-05-02T20:31:30.920" UserId="74" Text="Currently about all of &quot;8-bit micro&quot; games that I know is either abandonware (which is a gray area) or free fan works. But is there some kind of shop, market, some place where you can purchase these games, or other software fully legally for money? Some kind of retro-shop, or such?" />
  <row Id="1048" PostHistoryTypeId="1" PostId="376" RevisionGUID="6f7d325f-ef7b-4afb-bad5-171735dbc353" CreationDate="2016-05-02T20:31:30.920" UserId="74" Text="Does a market/shop with fully legal 8-bit software/games exist?" />
  <row Id="1049" PostHistoryTypeId="3" PostId="376" RevisionGUID="6f7d325f-ef7b-4afb-bad5-171735dbc353" CreationDate="2016-05-02T20:31:30.920" UserId="74" Text="&lt;software&gt;&lt;8-bit-microcomputers&gt;" />
  <row Id="1050" PostHistoryTypeId="2" PostId="377" RevisionGUID="f3174eeb-4f49-4a9d-bc2b-ad628c52b67a" CreationDate="2016-05-02T20:43:31.493" UserId="79" Text="There are quite a few... On the homebrew front for example, the [AtariAge store](https://www.atariage.com/store/) sells packaged homebrew games for 8-bit Ataris (and now Intellivision), as does [pro(c)](https://proc-atari.de/en/software-boardgames) (along with its magazine). You can also find stores which still have &quot;old new&quot; stock of games, computers and accessories; for example [Best Electronics](http://best-electronics-ca.com/text.htm) for Atari computers and consoles. There are no doubt others for other platforms!" />
  <row Id="1051" PostHistoryTypeId="5" PostId="375" RevisionGUID="da224505-9391-404f-9230-133c61fa16f7" CreationDate="2016-05-02T21:05:37.997" UserId="110" Comment="More detail, as suggested by commenter" Text="[This PDF][1] by Darren Atkinson gives you everything you want to know about programming differences between the two.&#xD;&#xA;&#xD;&#xA;It begins with a very thorough Leventhal-style instruction set reference, with everything 6309-specific clearly marked, then an in-depth article about the differences, then an opcode map, then a chart of undefined opcode behavior.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.coco3.com/community/wp-content/uploads/2010/03/6x09_Instruction_Sets.pdf" />
  <row Id="1052" PostHistoryTypeId="2" PostId="378" RevisionGUID="13d5be1e-50a5-40c7-9de0-84243bd61468" CreationDate="2016-05-02T21:12:30.407" UserId="105" Text="For the ZX Spectrum and MSX there is Matranet, which sells physical versions (e.g. tapes and cartridges) of recent releases.&#xD;&#xA;http://www.matranet.net/boutique/boutique.php&#xD;&#xA;&#xD;&#xA;" />
  <row Id="1053" PostHistoryTypeId="2" PostId="379" RevisionGUID="73f2f0d9-9873-4b88-9908-f5ec0850ca10" CreationDate="2016-05-02T21:33:53.267" UserId="75" Text="I have some old electronics with white plastic that's starting to turn yellow. I know it's caused by [flame retardants, UV rays, and so on][1]. How can I restore my electronics to their former color?&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://retrocomputing.stackexchange.com/questions/168/why-do-older-computer-cases-turn-yellow" />
  <row Id="1054" PostHistoryTypeId="1" PostId="379" RevisionGUID="73f2f0d9-9873-4b88-9908-f5ec0850ca10" CreationDate="2016-05-02T21:33:53.267" UserId="75" Text="How to get rid of yellowing in plastics?" />
  <row Id="1055" PostHistoryTypeId="3" PostId="379" RevisionGUID="73f2f0d9-9873-4b88-9908-f5ec0850ca10" CreationDate="2016-05-02T21:33:53.267" UserId="75" Text="&lt;maintenance&gt;&lt;restoration&gt;&lt;plastic&gt;" />
  <row Id="1056" PostHistoryTypeId="5" PostId="366" RevisionGUID="baf16957-69c0-47b7-866f-5bf872d04ca4" CreationDate="2016-05-03T00:30:01.010" UserId="56" Comment="Added note about ProDOS checksum" Text="The way to identify different Apple IIs is described in Apple II [Miscellaneous Tech Note #7][1].  Excerpting from that document:&#xD;&#xA;&#xD;&#xA;&gt; To identify which computer of the Apple II family is executing your program, you must check the following identification bytes. These bytes are in the main bank of main ROM (shadowed on the Apple IIgs), and you should make sure that this bank is switched in before making decisions based on the contents of these locations.&#xD;&#xA;&#xD;&#xA;    Machine                    $FBB3    $FB1E    $FBC0    $FBDD    $FBBE    $FBBF&#xD;&#xA;    -----------------------------------------------------------------------------&#xD;&#xA;    Apple ][                    $38              [$60]                      [$2F]&#xD;&#xA;    Apple ][+                   $EA      $AD     [$EA]                      [$EA]&#xD;&#xA;    Apple /// (emulation)       $EA      $8A&#xD;&#xA;    Apple IIe                   $06               $EA                       [$C1]&#xD;&#xA;    Apple IIe (enhanced)        $06               $E0                       [$00]&#xD;&#xA;    Apple IIe Option Card       $06               $E0      $02      $00&#xD;&#xA;    Apple IIc                   $06               $00                        $FF&#xD;&#xA;    Apple IIc (3.5 ROM)         $06               $00                        $00&#xD;&#xA;    Apple IIc (Org. Mem. Exp.)  $06               $00                        $03&#xD;&#xA;    Apple IIc (Rev. Mem. Exp.)  $06               $00                        $04 &#xD;&#xA;    Apple IIc Plus              $06               $00                        $05&#xD;&#xA;    Apple IIgs                  (see below)&#xD;&#xA;&#xD;&#xA;&gt; The Apple IIe Card for Macintosh LC uses the same identification bytes ($FBB3 and $FBC0) as an enhanced Apple IIe. Location $FBDD allows you to tell the difference between the Apple IIe Card and an enhanced Apple IIe because $FBDD will always contain the value $02 on the Apple IIe Card. Location $FBBE is the version byte for the Apple IIe Card (just as $FBBF is the version byte for the Apple IIc family) and is $00 for the first release of the Apple IIe Card.&#xD;&#xA;&#xD;&#xA;&gt; The ID bytes for an Apple IIgs are not listed in the table since they match those of an enhanced Apple IIe. Future 16-bit Apple II products may match different Apple II identification bytes for compatibility reasons, so to identify a machine as a IIgs or other 16-bit Apple II, you must make the following ROM call:&#xD;&#xA;&#xD;&#xA;    SEC               ;Set carry bit (flag)&#xD;&#xA;    JSR $FE1F         ;Call to the monitor&#xD;&#xA;    BCS OLDMACHINE    ;If carry is still set, then old machine&#xD;&#xA;    BCC NEWMACHINE    ;If carry is clear, then new machine&#xD;&#xA;&#xD;&#xA;The IIgs ROM version information can be determined from the contents of the A/X/Y registers set by `$FE1F` when the carry is clear.  (The ROM versions are described in [IIgs Tech Note #26][2].)&#xD;&#xA;&#xD;&#xA;    Bit      Accumulator                       X Register  Y Register&#xD;&#xA;    ------------------------------------------------------------------------&#xD;&#xA;    Bit 15   Reserved                          Reserved    Machine ID Number &#xD;&#xA;                                                           (0 = Apple IIgs)&#xD;&#xA;    Bit 14   Reserved                          Reserved    Machine ID Number&#xD;&#xA;    Bit 13   Reserved                          Reserved    Machine ID Number&#xD;&#xA;    Bit 12   Reserved                          Reserved    Machine ID Number &#xD;&#xA;    Bit 11   Reserved                          Reserved    Machine ID Number&#xD;&#xA;    Bit 10   Reserved                          Reserved    Machine ID Number&#xD;&#xA;    Bit 9    Reserved                          Reserved    Machine ID Number&#xD;&#xA;    Bit 8    Reserved                          Reserved    Machine ID Number&#xD;&#xA;    Bit 7    Reserved                          Reserved    ROM version number&#xD;&#xA;    Bit 6    1 if system has memory expansion slot&#xD;&#xA;                                               Reserved    ROM version number&#xD;&#xA;    Bit 5    1 if system has IWM port          Reserved    ROM version number&#xD;&#xA;    Bit 4    1 if system has a built-in clock  Reserved    ROM version number&#xD;&#xA;    Bit 3    1 if system has desktop bus       Reserved    ROM version number&#xD;&#xA;    Bit 2    1 if system has SCC built-in      Reserved    ROM version number&#xD;&#xA;    Bit 1    1 if system has external slots    Reserved    ROM version number&#xD;&#xA;    Bit 0    1 if system has internal ports    Reserved    ROM version number&#xD;&#xA;&#xD;&#xA;&gt; Note: In emulation or eight-bit mode, only the lower eight bits are returned.&#xD;&#xA;&#xD;&#xA;The value in A will be slightly wrong if Y is zero (i.e. ROM 0), reporting $xx1F when it should be $xx7F.&#xD;&#xA;&#xD;&#xA;Code that does all of the checks, as well as identifying the memory configuration, can be found in [Miscellaneous Tech Note #2][3].&#xD;&#xA;&#xD;&#xA;One thing not covered by the tech notes is how to tell the difference between a real Apple II and one of the not-quite-clones, such as the Franklin Ace.  Some versions of ProDOS had a sort of [ROM checksum][4], and if the number came up wrong the OS would freeze during boot.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.1000bit.it/support/manuali/apple/technotes/misc/tn.misc.07.html&#xD;&#xA;  [2]: http://www.1000bit.it/support/manuali/apple/technotes/iigs/tn.iigs.026.html&#xD;&#xA;  [3]: http://www.1000bit.it/support/manuali/apple/technotes/misc/tn.misc.02.html&#xD;&#xA;  [4]: http://umich.edu/~archive/apple2/misc/programmers/prodos.checksum.asm" />
  <row Id="1057" PostHistoryTypeId="2" PostId="380" RevisionGUID="51c6a3a6-3aea-43f9-99a5-ec7b41e963bf" CreationDate="2016-05-03T02:37:42.540" UserId="64" Text="I have an Amiga that has the Kickstart 3.0 ROMs installed.  What advantages are there to replacing the Kickstart ROMs with 3.1?  Is there any software that requires Kickstart 3.1 to function?&#xD;&#xA;" />
  <row Id="1058" PostHistoryTypeId="1" PostId="380" RevisionGUID="51c6a3a6-3aea-43f9-99a5-ec7b41e963bf" CreationDate="2016-05-03T02:37:42.540" UserId="64" Text="What advantages are there to replacing Kickstart 3.0 with Kickstart 3.1?" />
  <row Id="1059" PostHistoryTypeId="3" PostId="380" RevisionGUID="51c6a3a6-3aea-43f9-99a5-ec7b41e963bf" CreationDate="2016-05-03T02:37:42.540" UserId="64" Text="&lt;amiga&gt;" />
  <row Id="1061" PostHistoryTypeId="2" PostId="382" RevisionGUID="41aebdc1-2003-41bc-ba8e-6cfb0c729bd4" CreationDate="2016-05-03T05:03:54.970" UserId="4" Text="I'm attempting to install *Sid Meyer's Colonization* in DosBox from the original floppies, and it gives me the error message &quot;You have specified a drive that doesn't physically exist!&quot; when I try to run &quot;install.exe&quot;.&#xD;&#xA;&#xD;&#xA;I'm running DosBox 0.74 on 64-bit Gentoo Linux.  I've got the first floppy of the set mounted in Linux at `/mnt/floppy`, and I've mounted that directory in DosBox as drive `A:`.  I've verified that the floppy disk isn't corrupted." />
  <row Id="1062" PostHistoryTypeId="1" PostId="382" RevisionGUID="41aebdc1-2003-41bc-ba8e-6cfb0c729bd4" CreationDate="2016-05-03T05:03:54.970" UserId="4" Text="Unable to install Colonization in DosBox" />
  <row Id="1063" PostHistoryTypeId="3" PostId="382" RevisionGUID="41aebdc1-2003-41bc-ba8e-6cfb0c729bd4" CreationDate="2016-05-03T05:03:54.970" UserId="4" Text="&lt;emulation&gt;&lt;dosbox&gt;" />
  <row Id="1064" PostHistoryTypeId="6" PostId="367" RevisionGUID="705a5a51-ebaa-44a1-ae2c-9e9c516f22f7" CreationDate="2016-05-03T05:54:42.433" UserId="115" Comment="Add 'benchmarking' tag" Text="&lt;oric-atmos&gt;&lt;benchmarking&gt;" />
  <row Id="1065" PostHistoryTypeId="24" PostId="367" RevisionGUID="705a5a51-ebaa-44a1-ae2c-9e9c516f22f7" CreationDate="2016-05-03T05:54:42.433" Comment="Proposed by 115 approved by 105 edit id of 125" />
  <row Id="1066" PostHistoryTypeId="2" PostId="383" RevisionGUID="8aed81a5-27dd-49d8-b9e6-821702da7029" CreationDate="2016-05-03T07:23:44.200" UserId="75" Text="[Kickstart 3.1 can detect some memory expansions automatically][1] so that AddMem is not needed in your startup sequence, and it has [a few other improvements][2] that are required for Workbench (AmigaOS) 3.5 and 3.9.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://wiki.icomp.de/wiki/ACA1232#Memory&#xD;&#xA;  [2]: http://www.gregdonner.org/workbench/wb_31.html" />
  <row Id="1067" PostHistoryTypeId="2" PostId="384" RevisionGUID="e1979c5a-04a5-48c1-b6dc-c64681c44b29" CreationDate="2016-05-03T13:58:49.783" UserId="175" Text="Apple did make some changes to AppleSoft BASIC over the years between the first version on the Apple II and the last version on the Enhanced IIe and IIe card. What are the differences between the versions of AppleSoft BASIC? " />
  <row Id="1068" PostHistoryTypeId="1" PostId="384" RevisionGUID="e1979c5a-04a5-48c1-b6dc-c64681c44b29" CreationDate="2016-05-03T13:58:49.783" UserId="175" Text="What are the differences between the versions of AppleSoft BASIC?" />
  <row Id="1069" PostHistoryTypeId="3" PostId="384" RevisionGUID="e1979c5a-04a5-48c1-b6dc-c64681c44b29" CreationDate="2016-05-03T13:58:49.783" UserId="175" Text="&lt;apple-ii&gt;&lt;apple&gt;&lt;applesoft-basic&gt;" />
  <row Id="1070" PostHistoryTypeId="2" PostId="385" RevisionGUID="e734b36f-5169-43fd-aa25-6eeaa1a21fd9" CreationDate="2016-05-03T14:57:11.063" UserId="29" Text="In this video:&#xD;&#xA;&#xD;&#xA;https://youtu.be/SO4mjEasdTM&#xD;&#xA;&#xD;&#xA;The producer uses hydrogen peroxide and sunlight to de-yellow his plastics. The results look really good, but there is not much detail for his formula." />
  <row Id="1071" PostHistoryTypeId="2" PostId="386" RevisionGUID="04f7a5a9-24f6-4946-b061-301d933c29c7" CreationDate="2016-05-03T15:53:50.627" UserId="-1" Text="" />
  <row Id="1072" PostHistoryTypeId="2" PostId="387" RevisionGUID="b49a76e8-0f36-48cd-ade9-caa749d54191" CreationDate="2016-05-03T15:53:50.627" UserId="-1" Text="" />
  <row Id="1075" PostHistoryTypeId="2" PostId="388" RevisionGUID="390789df-9d13-4657-a068-af893076e267" CreationDate="2016-05-03T18:14:28.457" UserId="80" Text="The first change is to patch this code:&#xD;&#xA;&#xD;&#xA;    00fc0196 266E003E                        movea.l         $3e(a6), a3&#xD;&#xA;    00fc019a B7FC00080000                    cmpa.l          #$80000, a3&#xD;&#xA;    00fc01a0 622C                            bhi.s           $fc01ce.l&#xD;&#xA;    00fc01a2 B7FC00040000                    cmpa.l          #$40000, a3&#xD;&#xA;    00fc01a8 6524                            bcs.s           $fc01ce.l&#xD;&#xA;&#xD;&#xA;This code reads the size of Chip RAM from execbase and checks that it is no greater than 512kiB ($80000) and no less than 256kiB ($40000). If the value is outside the expected range, a full reinitialisation occurs because it's assumed that execbase has become corrupted. This is the source of the bug where reset-proof RAM disks did not survive a reset on machines with more than 512kiB of Chip RAM. The patch changes the maximum expected size to 2MiB ($200000).&#xD;&#xA;&#xD;&#xA;I'm not familiar with the code patched in the second change, but it updates the *opcode* of this instruction:&#xD;&#xA;&#xD;&#xA;    00feaf9c B0B900008000                    cmp.l           $8000.l, d0&#xD;&#xA;&#xD;&#xA;... from B0B9 to B0BC:&#xD;&#xA;&#xD;&#xA;    00feaf9c B0BC00008000                    cmp.l           #$8000.l, d0&#xD;&#xA;&#xD;&#xA;This is clearly fixing a bug where the wrong instruction was used because the value at location $8000 will be random and it makes much more sense to compare against a constant than a random number." />
  <row Id="1076" PostHistoryTypeId="2" PostId="389" RevisionGUID="4211b5c0-44d5-49c1-93b1-fff812c2a2b7" CreationDate="2016-05-03T18:45:57.243" UserId="300" Text="Google the term &quot;Retrobrite&quot;.  You will find numerous sources (including Youtube) for recipes and how-to's using OxyClean and other sodium percarbonate-based products which yield hydrogen peroxide in solution or in a paste form.  These techniques are very popular for whitening cases with the Apple ][ and Atari communities.  You can expect to do some experimenting with solution concentrations and light exposure to get the best possible effect.  Good luck." />
  <row Id="1077" PostHistoryTypeId="5" PostId="389" RevisionGUID="5843c540-35a9-4a7b-a503-8d9b8990895a" CreationDate="2016-05-03T19:04:29.100" UserId="12" Comment="Put the trademarked name in for clarity,  a little formatting" Text="Search the web for the term &quot;Retrobrite&quot; or &quot;Retr0bright&quot;. You will also find numerous sources (including YouTube) for recipes and how-to's using OxyClean and other sodium percarbonate-based products which yield hydrogen peroxide in solution or in a paste form.&#xD;&#xA;&#xD;&#xA;These techniques are very popular for whitening cases with the Apple ][ and Atari communities. You can expect to do some experimenting with solution concentrations and light exposure to get the best possible effect.  Good luck." />
  <row Id="1078" PostHistoryTypeId="2" PostId="390" RevisionGUID="afafc84e-3471-42a0-a8bf-43fa185d90ef" CreationDate="2016-05-03T19:25:22.250" UserId="300" Text="A *very good* first answer however I would also like to note that any data rates above 300bps could not be acoustically coupled and were direct connect modems only.  And anything 33.6K and above basically demands at least one digital endpoint.  By that I mean that the modem access concentrator would connect to the Public Switched Telephone Network via data-grade T-1 or larger (see also AT&amp;T T-Carrier) data trunks.  The DS-1 that rides the T-1 is channelized and the DS-0s are 64K clear channels and thus suitable for data rates up to 57.6K plus some protocol overhead and error correction.  The end user has significantly lower upload speeds because they're using analog (voice) lines.  This is also the genesis of today's asymmetric residential data model.&#xD;&#xA;&#xD;&#xA;But it all comes back to baud rate.  Bit rate is a measure of the number of data bits transmitted in one second.  Baud rate is the number of times a signal in a communications channel *can change state* in one second.  Regardless of the techniques used to encode bits in a carrier, the baud rate was always a limiting factor and was determined by the dynamic range of the signal processors available in the PSTN at the time.  110 Baud was safe.  300 Baud was pushing the limits of signal processing available in the 60s and 70s.  And from there we were able to stack new methods of line coding and framing on top of that 300 Baud to make it almost up to 64Kbps.  Amazing, huh?" />
  <row Id="1079" PostHistoryTypeId="2" PostId="391" RevisionGUID="375b57e4-6d7e-453e-af2a-ad23f47f55c2" CreationDate="2016-05-03T19:53:36.237" UserId="125" Text="The [AppleSoft BASIC Wikipedia page][1] has quite a bit of info on this:&#xD;&#xA;&#xD;&#xA;Not really a feature, but the RAM footprint changed between the 1 &amp; 2.&#xD;&#xA;&#xD;&#xA; - AppleSoft I - 8.5 kb&#xD;&#xA; - AppleSoft II - 10 kb&#xD;&#xA;&#xD;&#xA;**AppleSoft I** had these features over the &quot;Integer BASIC&quot; (which Woz had written):&#xD;&#xA;&#xD;&#xA;&gt;  - Atomic strings: A string is no longer an array of characters (as in Integer BASIC and C); it is instead a garbage-collected object (as in&#xD;&#xA;&gt; Scheme and Java).  - This allows for string arrays; `DIM A$(10)`&#xD;&#xA;&gt; resulted in a vector of eleven string variables numbered 0–10.&#xD;&#xA;&gt;  - Multidimensional arrays (numbers or strings)&#xD;&#xA;&gt;  - Single-precision floating point variables with an 8-bit exponent and a 31-bit significand and improved math capabilities, including&#xD;&#xA;&gt; trigonometry and logarithmic functions&#xD;&#xA;&gt;  - Commands for high-resolution graphics&#xD;&#xA;&gt;  - `DATA` statements, with `READ` and `RESTORE` commands, for representing numerical and string values in quantity&#xD;&#xA;&gt;  - `CHR$`, `STR$`, and `VAL` functions for converting between string and numeric types (both languages did have the `ASC` function)&#xD;&#xA;&gt;  - User-defined functions: simple one-line functions written in BASIC, with a single parameter&#xD;&#xA;&gt;  - Error-trapping, allowing BASIC programs to handle unexpected errors by means of a subroutine written in BASIC&#xD;&#xA;&#xD;&#xA;Additionally, **AppleSoft II** had these feature improvements over AppleSoft I:&#xD;&#xA;&#xD;&#xA;&gt;  - All commands supporting Apple's &quot;high resolution&quot; graphics (9 total)&#xD;&#xA;&gt;  - Error-trapping with `ONERR...GOTO` and `RESUME`&#xD;&#xA;&gt;  - Machine-routine shorthand call `&amp;`&#xD;&#xA;&gt;  - Screen-clearing `HOME` (a call to a system ROM routine)&#xD;&#xA;&gt;  - Text-output control `NORMAL`, `INVERSE`, `FLASH` and `SPEED=`&#xD;&#xA;&gt;  - The print-space function `SPC()` is listed among reserved words in the manual, but  - is not otherwise documented (the `TAB()`&#xD;&#xA;&gt; print-function is documented)&#xD;&#xA;&gt;  - Cassette tape storage of numerical arrays: `STORE` and `RECALL`&#xD;&#xA;&gt;  - Device response: `WAIT`&#xD;&#xA;&#xD;&#xA;**Apple III Microsoft BASIC** added:&#xD;&#xA;&#xD;&#xA;&gt;  - `INPUT$()` function to replace Applesoft's `GET` command.&#xD;&#xA;&gt;  - `LINE INPUT` statement to input an entire line of text, regardless of punctuation, into a single string variable.&#xD;&#xA;&gt;  - `LPRINT` and `LPRINT USING` statements to automatically direct output to paper.&#xD;&#xA;&gt;  - `LSET` and `RSET` statements to left- or right-justify a string expression within a given string variable's character length.&#xD;&#xA;&gt;  - `OCT$()` function for output, and `&amp;`- or `&amp;O`-formatted expressions, for manipulating octal notation.&#xD;&#xA;&gt;  - `SPACE$()` function for generating blank spaces outside of a `PRINT` statement, and `STRING$()` function to do likewise with any&#xD;&#xA;&gt; character.&#xD;&#xA;&gt;  - `WHILE`...`WEND` statements, for loop structures built on general Boolean conditions without an index variable.&#xD;&#xA;&gt;  - Bitwise Boolean (16-bit) operations (`AND`, `OR`, `NOT`), with additional operators `XOR`, `EQV`, `IMP`.&#xD;&#xA;&gt;  - Line number specification in the `RESTORE` command.&#xD;&#xA;&gt;  - `RESUME` options of `NEXT` (to skip to the statement after that which caused the error) or a specified line number (which replaces the&#xD;&#xA;&gt; idea of exiting error-handling by `GOTO`-line, thus avoiding Applesoft&#xD;&#xA;&gt; II's stack error problem).&#xD;&#xA;&gt;  - Multiple parameters in user-defined (`DEF FN`) functions.&#xD;&#xA;&gt;  - A return to the old Applesoft One concept of having multiple `USR()` functions at different addresses, by establishing ten&#xD;&#xA;&gt; different `USR` functions, numbered `USR0` to `USR9`, with separate&#xD;&#xA;&gt; `DEF` `USRx` statements to define the address of each. The argument&#xD;&#xA;&gt; passed to a `USRx` function can be of any specific type, including&#xD;&#xA;&gt; string. The returned value can also be of any type, by default the&#xD;&#xA;&gt; same type as the argument passed.&#xD;&#xA;&#xD;&#xA;**Apple Business BASIC** had big changes around direct memory access, and even removed `PEEK` and `POKE` from the language.  Their provided functionality was replaced with functions like:&#xD;&#xA;&#xD;&#xA;&gt; - `BUTTON()` function to read game-controller buttons.&#xD;&#xA;&gt; - `WINDOW` statement to define the active window of the text screen by its coordinates.&#xD;&#xA;&gt; - Use of the `KBD`, `HPOS`, and `VPOS` system variables.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://en.wikipedia.org/wiki/Applesoft_BASIC" />
  <row Id="1080" PostHistoryTypeId="2" PostId="392" RevisionGUID="a34c3865-78b8-4b31-bbd7-0b6dc8749cda" CreationDate="2016-05-03T20:07:06.183" UserId="10" Text="C64 wise, you have [RGCD](http://rgcd.co.uk/) who sell new cartridge releases, along with [Psytronik Software](http://psytronik.net) and [Protovision](http://www.protovision-online.com) who both have releases on disk, whilst Psytronik also offer tape copies as well.&#xD;&#xA;&#xD;&#xA;For the BBC Micro/Electron, there's [Retro Software](http://www.retrosoftware.co.uk), who offer some as well." />
  <row Id="1081" PostHistoryTypeId="2" PostId="393" RevisionGUID="e1390968-53ab-4438-84ee-b735674f4cdb" CreationDate="2016-05-03T20:25:52.350" UserId="10" Text="I've not actually played it to confirm how well it does it, but [Pioneer Plague](http://hol.abime.net/1068) claims to run in HAM mode, but I've not actually given it a whirl to see how well it runs in comparison.&#xD;&#xA;&#xD;&#xA;Someone has recorded some gameplay footage and put it up [here](https://www.youtube.com/watch?v=JSLcN6GBzO0) though, so you can get an idea - though I believe to be emulated, so YMMV :)" />
  <row Id="1082" PostHistoryTypeId="2" PostId="394" RevisionGUID="427d780c-8732-46a6-9222-5a00cc1880bf" CreationDate="2016-05-03T22:43:11.370" UserId="293" Text="Shadow of the Beast uses dual play field mode (of 3 bitplanes each) and some crazy sprite reuse to get its color on the screen. Have a look at this breakdown:&#xD;&#xA;&#xD;&#xA;http://www.codetapper.com/amiga/sprite-tricks/shadow-of-the-beast/" />
  <row Id="1083" PostHistoryTypeId="2" PostId="395" RevisionGUID="aa57a2aa-6e57-4e02-aeba-c821ee4784d8" CreationDate="2016-05-04T00:39:27.880" UserId="71" Text="The [Wikipedia entry][1] is a bit jumbled, ambiguous, and in some cases wrong.&#xD;&#xA;&#xD;&#xA;Perhaps it makes more sense to list changes by Apple II model, as documented by the fantastic [Apple II History][2] site. (The book has even more detail.)&#xD;&#xA;&#xD;&#xA;**Apple II (1977)**&#xD;&#xA;&#xD;&#xA; - APPLESOFT I, based on Microsoft 6502 BASIC version 1.1&#xD;&#xA; - Documented in the November 1977 &quot;Blue Book&quot;&#xD;&#xA; - Available on tape&#xD;&#xA; - Loaded into memory at $800-$29FF (8.5k)&#xD;&#xA; - Program and variables at $2A00 up&#xD;&#xA; - No built-in commands to manage hi-res graphics&#xD;&#xA; - Option of allowing either LET and REM statements or the use of lo-res graphics&#xD;&#xA; - Lo-res graphics commands: PLTG, TEX, PLTC, PLTP, PLTH, PLTV&#xD;&#xA; - AND, OR and NOT perform bitwise operations&#xD;&#xA;&#xD;&#xA;**Apple II Plus (1979)**&#xD;&#xA;&#xD;&#xA; - APPLESOFT II, based on Microsoft 6502 BASIC version 2&#xD;&#xA; - Documented in the August 1978 &quot;Blue Book&quot;&#xD;&#xA; - In mainboard ROM (also available on tape, disk, firware card ROM)&#xD;&#xA; - Tape version loaded into memory at $800-$2FFF (10k)&#xD;&#xA; - Tape version programs and variables at $3000 up&#xD;&#xA; - ROM version in memory at $D000-$F7FF (10k)&#xD;&#xA; - ROM version program and variables at $800 up&#xD;&#xA; - Added commands for hi-res graphics: HGR, HPLOT ETC&#xD;&#xA; - Lo-res graphics commands renamed to Integer BASIC keywords: GR, PLOT etc&#xD;&#xA; - AND, OR and NOT perform boolean operations&#xD;&#xA; - Many new commands:&#xD;&#xA;  - Error-trapping: ONERR...GOTO and RESUME&#xD;&#xA;  - Machine-routine shorthand call: &amp;&#xD;&#xA;  - Screen-clearing: HOME&#xD;&#xA;  - Text-output control: NORMAL, INVERSE, FLASH and SPEED=&#xD;&#xA;  - The print-space function: SPC()&#xD;&#xA;  - Cassette tape storage of numerical arrays: STORE and RECALL&#xD;&#xA;  - Device response: WAIT&#xD;&#xA;  - Program-line deletion: DEL&#xD;&#xA;  - Machine-routine access: CALL&#xD;&#xA;  - Peripheral device access: IN# and PR#&#xD;&#xA;  - Memory range control: HIMEM: and LOMEM:&#xD;&#xA;  - Execution tracking for debugging: TRACE and NOTRACE&#xD;&#xA;  - Screen-positioning: HTAB and VTAB&#xD;&#xA;  - Subroutine aborting: POP&#xD;&#xA;  - Read the analog controllers: PDL()&#xD;&#xA;  - Read the low-resolution graphics screen: SCRN()&#xD;&#xA;&#xD;&#xA;**Apple //e (1983)**&#xD;&#xA;&#xD;&#xA;Same as the Apple II Plus version&#xD;&#xA;&#xD;&#xA;**Apple //e Enhanced (1985)**&#xD;&#xA;&#xD;&#xA;Same as the Apple //e version, except:&#xD;&#xA;&#xD;&#xA; - Allowed entry of lowercase commands&#xD;&#xA; - Screen output commands (PRINT, TAB, HTAB, etc.) more properly handle the 80-column screen&#xD;&#xA; - Program listings were changed to begin in column 2, making screen editing easier&#xD;&#xA;&#xD;&#xA;**Apple //c (1984) and //c Plus (1988)**&#xD;&#xA;&#xD;&#xA;Same as the Apple //e enhanced version, except:&#xD;&#xA;&#xD;&#xA; - All of the cassette tape routines (LOAD, SAVE, SHLOAD, STORE, and RECALL) were removed&#xD;&#xA; - The lo-res graphics commands (GR, HLIN, VLIN, PLOT, and SCRN) work with double lo-res&#xD;&#xA; - PLOT had a destructive range bug&#xD;&#xA;&#xD;&#xA;**Apple IIgs (1986)**&#xD;&#xA;&#xD;&#xA;Same as the Apple //c version, except:&#xD;&#xA;&#xD;&#xA; - Fixed the PLOT range bug&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://en.wikipedia.org/wiki/Applesoft_BASIC&#xD;&#xA;  [2]: http://apple2history.org/history/ah16/" />
  <row Id="1084" PostHistoryTypeId="2" PostId="396" RevisionGUID="dd3397db-b4d3-41c2-b239-5fd2d03d7060" CreationDate="2016-05-04T02:56:19.103" UserId="72" Text="For the Apple II, there aren't any one-stop shop type places for software, but if you go to the big sites like A2Central.com, you'll find links to companies still selling their software, and to shareware vendors still kicking (like myself)." />
  <row Id="1085" PostHistoryTypeId="5" PostId="230" RevisionGUID="5c6db87f-0a2b-48fa-8f9f-223c8068a2d8" CreationDate="2016-05-04T03:02:02.383" UserId="72" Comment="Note that bit 3 in SHADOW is for SHR shadowing and that other bits need to be untouched" Text="Fast Screen Refresh With PEI Slamming&#xD;&#xA;=====================================&#xD;&#xA;(Or: Dirty Tricks With the Direct Page)&#xD;&#xA;---------------------------------------&#xD;&#xA;&#xD;&#xA;*This article is based on my KansasFest 2004 presentation &quot;Code Secrets of Wolf 3D.&quot;*&#xD;&#xA;&#xD;&#xA;###Introduction&#xD;&#xA;&#xD;&#xA;Drawing super high-resolution (SHR) graphics on the Apple IIgs is slow. Unfortunately, the SHR screen's memory in bank $E1 is located in &quot;slow RAM&quot; — that is, memory controlled by the Mega II chip which emulates 1 MHz 8-bit Apple IIs. Access to this memory is gated to that 1 MHz speed instead of the 2.8 MHz of the rest of memory. This has plagued Apple IIgs graphics developers since the beginning.&#xD;&#xA;&#xD;&#xA;Fortunately, a number of hardware quirks of the Apple IIgs can be used in tandem to help ease the pain:&#xD;&#xA;&#xD;&#xA;* Shadowing allows bank $01 to be shadowed into bank $E1; that means that whatever is written into bank $01 is automatically mirrored into bank $E1 without slowing you down.&#xD;&#xA;&#xD;&#xA;* You can use the main/auxmem toggle softswitches ($C003 and $C005) to use bank $01 instead of bank $00 for the direct page and stack.&#xD;&#xA;&#xD;&#xA;* The stack and direct page can both be moved around within the bank they're located in by changing the values of the stack pointer and direct register.&#xD;&#xA;&#xD;&#xA;Let's see how this works!&#xD;&#xA;&#xD;&#xA;###Shadowing&#xD;&#xA;&#xD;&#xA;You probably know that the Apple IIgs has a single super high-resolution graphics buffer, located in bank $E1 from $2000-$9FFF. This SHR buffer consists of the pixel data, a set of scanline control bytes (SCBs) which describe the mode of each row of pixels (including which palette to use and whether they're using 320 or 640 mode), and 16 palettes.&#xD;&#xA;&#xD;&#xA;That memory is slow. It's designed to support the 8-bit emulation of the Mega II chip, so writes into it are slowed down to 1 MHz whether you like it or not. There is a workaround, however. The clever people that designed the Apple IIgs included a technology called **shadowing**; this is the ability to have the hardware mirror writes to bank $01 into bank $E1. The writes into bank $01 execute at the computer's regular 2.8 MHz speed, which is obviously much better.&#xD;&#xA;&#xD;&#xA;Shadowing of SHR memory in bank $01 into bank $E1 is controlled by bit 3 in the `SHADOW` softswitch at $E0/C035. When 0, shadowing is enabled. When 1, it's disabled. Other bits in that softswitch control other aspects of shadowing, so be sure not to change those by mistake (use a read/modify/write operation sequence).&#xD;&#xA;&#xD;&#xA;So the first step is to allocate the bank $01 SHR buffer. It has to be located at $01/2000-$01/9FFF or it won't work, for obvious reasons — shadowing mirrors writes to the same address in bank $E1.&#xD;&#xA;&#xD;&#xA;Make sure you own the bank $01 SHR buffer! Either use `NewHandle` to allocate it (be sure to set the flag that allows it to allocate special memory, since all of bank $01 is special) or, for GS/OS applications, set the auxtype bit which tells GS/OS to use shadowing so that GS/OS allocates it for you.&#xD;&#xA;&#xD;&#xA;Bytes already located in the bank $01 SHR buffer, however, do not get copied over automatically. You have to write any bytes you want to be copied after shadowing is turned on. That means you either need to track exactly what's changed and redraw those bytes, or redraw the all or most of the frame every refresh cycle. Which you do is up to you (and likely depends on how much you expect to change each refresh).&#xD;&#xA;&#xD;&#xA;You could of course use your typical `LDA`/`STA` loops or similar to do the refresh, but there's a much, much faster way.&#xD;&#xA;&#xD;&#xA;###Stacking the deck: Direct page tricks&#xD;&#xA;&#xD;&#xA;On the 6502 and 65C02, the zero page and stack are fixed in memory; the zero page is always located at $0000-$00FF, and the stack is always in $0100-$01FF. The 65816 changes all that. The direct page (previously known as the zero page) can be moved to any location in bank $00 by changing the value in the Direct register. This can be done using instructions such as `TCD` (Transfer aCcumulator to Direct register), like this:&#xD;&#xA;&#xD;&#xA;	            lda #$2000&#xD;&#xA;	            tcd                   ; Set the direct page to $2000&#xD;&#xA;&#xD;&#xA;Similarly, the 65816 allows you to move the stack by expanding the stack pointer register, previously an 8-bit offset from $0100, to be a 16-bit pointer within bank $00. You use instructions such as `TCS` (Transfer aCcumulator to Stack pointer) to move the stack.&#xD;&#xA;&#xD;&#xA;The nice thing about stack and direct page operations is that you can use instructions which use fewer cycles to access them. In fact, it gets even better, as we'll see shortly.&#xD;&#xA;&#xD;&#xA;But how does this help us? The shadow SHR buffer is in bank $01, and the direct page and stack are trapped in bank $00. Right?&#xD;&#xA;&#xD;&#xA;Not so fast!&#xD;&#xA;&#xD;&#xA;The Apple IIgs was designed to be able to emulate an enhanced 8-bit Apple II; that is, an Apple II with at least 128K of memory. Because 8-bit Apple IIs can't access more than 64K directly, a mechanism called bank switching allowed you to select which 64K bank of memory you wanted to use by swapping them into the same 64K address space. This was done by using softswitches to toggle between main and &quot;auxiliary&quot; memory, often called &quot;auxmem.&quot;&#xD;&#xA;&#xD;&#xA;There is a set of softswitches for selecting whether you wish to read from auxmem or main memory, and write to auxmem or main memory:&#xD;&#xA;&#xD;&#xA;	$E0C002     equ RDMAINRAM         ; Read from main memory&#xD;&#xA;	$E0C003     equ RDCARDRAM         ; Read from auxiliary memory&#xD;&#xA;	$E0C004     equ WRMAINRAM         ; Write to main memory&#xD;&#xA;	$E0C005     equ WRCARDRAM         ; Write to auxiliary memory&#xD;&#xA;&#xD;&#xA;The Apple IIgs emulates this mechanism by using bank $00 as main memory and bank $01 as auxmem; writing to `RDCARDRAM` and `WRCARDRAM` causes bank $01 to take bank $00's place, so that any accesses to bank $00 actually access bank $01.  Now things get interesting: by selecting auxiliary memory in this way, accesses to the stack and direct page actually access bank $01, which is where our SHR buffer is!&#xD;&#xA;&#xD;&#xA;Now we have a way to use higher-performance direct page and stack instructions to read and write the SHR buffer.&#xD;&#xA;&#xD;&#xA;Now we need to figure out the best way to use them.&#xD;&#xA;&#xD;&#xA;###Putting it together&#xD;&#xA;&#xD;&#xA;The first thing you need to do is turn off shadowing. You don't want writes to the SHR buffer in bank $01 to be duplicated to bank $E1 until you're ready.&#xD;&#xA;&#xD;&#xA;	          sep #$20&#xD;&#xA;	          lda &gt;SHADOW             ; Get the current shadow register&#xD;&#xA;	          ora #$08                ; Turn on the &quot;stop SHR shadowing&quot; bit&#xD;&#xA;	          sta &gt;SHADOW             ; Save the updated value&#xD;&#xA;	          rep #$20&#xD;&#xA;&#xD;&#xA;This code ensures shadowing is disabled while not changing the values of any of the other bits in the `SHADOW` register (there are bits for controlling shadowing of various parts of bank $00; all we care about is the SHR buffer, though).&#xD;&#xA;&#xD;&#xA;Now you should draw your graphics into the SHR buffer in bank $01, starting at $2000. You can either redraw the whole thing or, preferably, update just the areas that need to change. This doesn't affect what's on the screen, so it can be done in pieces or in strange ways that would look weird if immediately reflected on the screen. However you like.&#xD;&#xA;&#xD;&#xA;This is the point where you decide when it's time to update the display. Maybe you do it immediately every time a screen update routine finishes running. Maybe you wait until the vertical scan has passed the first scan line you plan to refresh. Either way, the process is roughly the same. Wolfenstein 3D just draws, without worrying about the vertical scan, because it cares more about speed than about possible tearing effects caused by vertical refresh collisions.&#xD;&#xA;&#xD;&#xA;When the time comes to refresh the display, the first step is to turn shadowing back on so that writes to the bank $01 SHR buffer are mirrored to bank $E1:&#xD;&#xA;&#xD;&#xA;	          sep #$20&#xD;&#xA;	          lda &gt;SHADOW             ; Get the current shadow register&#xD;&#xA;	          and #$F7                ; Turn off the &quot;stop SHR shadowing&quot; bit&#xD;&#xA;	          sta &gt;SHADOW             ; Save the updated value&#xD;&#xA;	          rep #$20&#xD;&#xA;&#xD;&#xA;Now shadowing of the SHR buffer has been enabled. Our job now is to take the contents of the bank $01 buffer — at least the parts of it which have changed — and draw them right on top of themselves to update the bank $E1 buffer.&#xD;&#xA;&#xD;&#xA;Think about it for a moment. The contents of the bank $01 buffer are only shadowed to bank $E1 when changed, but it contains the image we want to display already. So we just need to read the changed data and write it right back on top of itself to mirror it to the displayed screen. It sounds a little crazy, but only until you think about it a bit.&#xD;&#xA;&#xD;&#xA;Since we're going to be fiddling with the stack and direct registers, we need to save those so we can restore them later. We also need to disable interrupts:&#xD;&#xA;&#xD;&#xA;	          sei                     ; Disable interrupts&#xD;&#xA;	          tdc                     ; Copy direct register to accumulator&#xD;&#xA;	          sta savedDP             ; Save it locally&#xD;&#xA;	          tsc                     ; Copy stack pointer to accumulator&#xD;&#xA;	          sta savedStack          ; Save that too&#xD;&#xA;&#xD;&#xA;Why did we disable interrupts? Because if bank $01 is occupying the space normally used by bank $00 when an interrupt fires, the interrupt handler will almost certainly blow up.&#xD;&#xA;&#xD;&#xA;Imagine this scenario: AppleTalk is enabled, and the AppleTalk interrupt fires, causing AppleTalk code to get control of the system briefly. It restores its stack and direct page pointers so it can access the data it expects to access, but because bank $01 is now occupying the space normally taken by bank $00, it gets the wrong data (and writes over other programs' data), and things rapidly fall apart.&#xD;&#xA;&#xD;&#xA;Now we complete the preparations by swapping bank $01 to replace bank $00:&#xD;&#xA;&#xD;&#xA;	          sep #$20&#xD;&#xA;	          sta &gt;WRCARDRAM          ; Writes to bank $00 go to bank $01&#xD;&#xA;	          sta &gt;RDCARDRAM          ; Reads from bank $00 to go bank $01&#xD;&#xA;	          rep #$20&#xD;&#xA;&#xD;&#xA;From now on, all accesses to bank $00 actually access bank $01. We're going to use stack and direct page instructions exclusively, for maximum performance.&#xD;&#xA;&#xD;&#xA;It's time to start drawing. We're going to draw the entire screen each frame for this example. It's what Wolf 3D does, because it's pretty typical for most or all of the screen to change, or at least enough of it that trying to update only parts of it wasn't worth the effort. But you might find ways to do better.&#xD;&#xA;&#xD;&#xA;The first step is to set the Direct register to point to $2000, the first byte of the SHR buffer:&#xD;&#xA;&#xD;&#xA;	          lda #$2000&#xD;&#xA;	          tcd&#xD;&#xA;&#xD;&#xA;Now we can use direct page instructions (which typically use one cycle less than their absolute equivalents) to access the first page (256 bytes) of the buffer. That alone sounds like a win, and it is, but we can do better.&#xD;&#xA;&#xD;&#xA;The next step is to point the stack pointer at $20FF, which is the last byte in the first page of the SHR buffer:&#xD;&#xA;&#xD;&#xA;	          clc&#xD;&#xA;	          adc #$00FF&#xD;&#xA;	          tcs&#xD;&#xA;&#xD;&#xA;This takes the $2000 already in the accumulator, adds $FF, and stores the result ($20FF) into the stack pointer. We calculate the value because we'll be looping back up here later.&#xD;&#xA;&#xD;&#xA;Now it's time to copy a page of screen data on top of itself, so that that page of data is shadowed to the main SHR buffer in bank $E1. By default, you think that you'll need a loop of reading a word, then writing a word, over and over. But it turns out that with our direct page and stack configured the way we have them, there's a way to combine reading and writing into a single instruction!&#xD;&#xA;&#xD;&#xA;The `PEI` (Push Effective Indirect) instruction isn't used as often as it should be. It fetches a word from the direct page and pushes it onto the stack in one smooth operation.&#xD;&#xA;&#xD;&#xA;So consider this: our stack now starts at $20FF and works backward toward $2000 with each push. The direct page starts at $2000 and extends up to $20FF. That means they overlap, occupying exactly the same memory. So `PEI` can be used to copy a value on top of itself in this space, if we use it just right. Here's how:&#xD;&#xA;&#xD;&#xA;	          pei $FE&#xD;&#xA;&#xD;&#xA;This one instruction takes the value located at offset $FE on the direct page (that is, at $01/20FE-20FF) and pushes it onto the stack. Since the stack pointer is at $20FF, the result is that the value is written on top of itself, using a two-byte, 6-cycle operation to refresh two bytes of the screen.&#xD;&#xA;&#xD;&#xA;So all we need to do to copy the entire page over is to have a series of 128 `PEI`s in a row. We do this instead of using a loop because a loop just adds overhead, and every cycle counts when you're doing this — especially since interrupts are disabled, and we can only leave them disabled for so long. This code looks like this:&#xD;&#xA;&#xD;&#xA;	          pei $FE&#xD;&#xA;	          pei $FC&#xD;&#xA;	          pei $FA&#xD;&#xA;	          pei $F8&#xD;&#xA;	          ...&#xD;&#xA;	          pei $06&#xD;&#xA;	          pei $04&#xD;&#xA;	          pei $02&#xD;&#xA;	          pei $00&#xD;&#xA;&#xD;&#xA;Once you've finished copying the page, update the Direct register and Stack pointer (to $2100 and $21FF) and do it over and over, adding $0100 to each register every time a page finishes copying.&#xD;&#xA;&#xD;&#xA;There are two tricks.&#xD;&#xA;&#xD;&#xA;**Trick 1: Periodically enable interrupts**&#xD;&#xA;&#xD;&#xA;First, you need to periodically switch bank $00 back into place and re-enable interrupts so that MIDISynth, GS/OS, and other users of interrupts have an opportunity to be serviced. The operating system cannot keep functioning properly if you don't allow it to periodically handle interrupts, and music and sound effects will not play correctly if their interrupts aren't processed.&#xD;&#xA;&#xD;&#xA;Also, AppleTalk networks will be disconnected if interrupts are disabled for more than 104.167µsec — another reason to be careful with how long you leave interrupts disabled.&#xD;&#xA;&#xD;&#xA;Wolfenstein 3D re-enables interrupts after every seventh page is copied), like this:&#xD;&#xA;&#xD;&#xA;	          sep #$20&#xD;&#xA;	          sta &gt;RDMAINRAM          ; Read from bank $00&#xD;&#xA;	          sta &gt;WRMAINRAM          ; Write to bank $00&#xD;&#xA;	          rep #$20&#xD;&#xA;	          lda entryStack          ; Retrieve the original stack pointer&#xD;&#xA;	          tcs                     ; Then restore the stack to there&#xD;&#xA;	          lda entryDP             ; Then do the same thing for the direct page&#xD;&#xA;	          tcd&#xD;&#xA;	          cli                     ; Enable interrupts&#xD;&#xA;&#xD;&#xA;As soon as that `CLI` (CLear Interrupt disable) instruction is executed, any pending interrupts are processed before our code continues to execute. That means we can immediately disable interrupts again and restore our work environment to continue to copy the screen:&#xD;&#xA;&#xD;&#xA;	          sei                     ; Disable interrupts&#xD;&#xA;	          sep #$20&#xD;&#xA;	          sta &gt;RDCARDRAM          ; Read from bank $01&#xD;&#xA;	          sta &gt;WRCARDRAM          ; Write to bank $01&#xD;&#xA;	          rep #$20&#xD;&#xA;&#xD;&#xA;Now all you have to do is restore the stack and direct page to where you left off and pick up where you left off. Keep going until you reach $9D00 (or $A000 if you need to update the palettes and SCBs). You can of course also stop sooner if you only need to update certain rows.&#xD;&#xA;&#xD;&#xA;**Trick 2: Insert NOPs**&#xD;&#xA;&#xD;&#xA;Due to the intricacies of how the 65816's cycle timing works, you can actually improve the performance of your PEI-slamming code by inserting a `NOP` instruction after each 8th `PEI`. _There are some sources that say to put it after every 13th `PEI`. It's unclear which is correct; Wolfenstein 3D does it every 8th one, however._&#xD;&#xA;&#xD;&#xA;##Conclusion&#xD;&#xA;&#xD;&#xA;This technique takes some getting used to, and has a lot of ways you can mess it up (by failing to toggle a softswitch at the right point, usually, or by imbalance between the stack and direct page locations you're using). But once you get it down, it's among the fastest, if not the very fastest, ways to blit to the Apple IIgs screen using a back buffer.&#xD;&#xA;" />
  <row Id="1086" PostHistoryTypeId="5" PostId="196" RevisionGUID="03f15a89-68f2-4c9c-afe1-2fb055fff4b0" CreationDate="2016-05-04T03:33:43.650" UserId="92" Comment="More specifically say &quot;animated action&quot; instead of &quot;ingame&quot;." Text="EHB&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;For example, a game that uses EHB (Extra HalfBrite) mode during the game action (i. e. ingame) is _Pinball Dreams_. In my example run of the _Beat Box_ table I can find the following in the copper list:&#xD;&#xA;&#xD;&#xA;    $00D6EA WAIT $4211FFFE&#xD;&#xA;    $00D6EE MOVE #$6200,BPLCON0&#xD;&#xA;&#xD;&#xA;I. e. it waits for raster line $42 (66) and uses BPLCON0 to set the number of bitplanes to 6 without the HAM bit set, which means EHB mode.&#xD;&#xA;&#xD;&#xA;_Cannon Fodder_ uses EHB for some of its still pictures. I'm not sure if it uses it ingame, but I consider it unlikely.&#xD;&#xA;&#xD;&#xA;A newer game, _Nemac IV_, presents you with a screen mode selection at the beginning, offering EHB mode as an option. It can then render its ingame 3D graphics to an EHB mode display. However, it requires a machine more powerful than a stock Amiga 500.&#xD;&#xA;&#xD;&#xA;HAM&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;The way HAM (Hold And Modify) mode works makes it unsuitable for ingame animation in most cases. I used to be unaware of any game that uses it for its game action. (**Update**: There were at least 2 games using HAM for their animated action. See [robc's answer](http://retrocomputing.stackexchange.com/a/393/92).)&#xD;&#xA;&#xD;&#xA;_Fury of the Furries_ uses HAM for its still images, for example the title image and the images that are displayed before entering a new world (each consisting of a set of levels).&#xD;&#xA;&#xD;&#xA;The reason why it is unfeasible to use HAM for animated action is that you will either have to tolerate so-called color bleeding to the right of pixels or you will need to employ sophisticated algorithms to counteract the color bleeding, which timing constraints may forbid or which are just not worth it to come up with.&#xD;&#xA;&#xD;&#xA;In HAM mode you usually use 6 bitplanes (you can also use it with 5 bitplanes, but there's not much point to that). That's 64 possible values per pixel. Values 0 to 15 select a full RGB color from the 16 color palette, the same way other normal screen modes would. However, value sets 16 to 31 (modify blue component), 32 to 47 (modify red component) and 48 to 63 (modify green component), respectively, each just change one of the color components relative to the color of the previous pixel. The other two color components remain unchanged from the previous pixel.&#xD;&#xA;&#xD;&#xA;Say you set the color to palette entry 8 in column 100. Say also that this palette entry is $0333, i. e. a very dark gray. So the pixel in column 100 will appear gray.&#xD;&#xA;&#xD;&#xA; 1. Then, lacking a matching color in the palette, you modify the red component in column 101 to $6 (using a pixel value of $26 = 38). The resulting pixel in column 101 will now have a color equivalent to $0633, which is a dark unsaturated red.&#xD;&#xA;&#xD;&#xA; 2. Next, again lacking a matching color in the palette, you modify the green component in column 102 to $7 (using a pixel value of $37 = 55). The resulting pixel in column 102 will now have a color equivalent to $0673, which is a brown-greenish color.&#xD;&#xA;&#xD;&#xA; 3. Finally, lacking a matching color in the palette once more, you modify the blue component in column 103 to $6 (using a pixel value of $16 = 22). The resulting pixel in column 103 will now have a color equivalent to $0676, which is a dark gray with a very slight shimmer of green.&#xD;&#xA;&#xD;&#xA; [![HAM pixels before blitting][1]][1]  &#xD;&#xA; *note that each differently colored square represents 1 pixel*&#xD;&#xA;&#xD;&#xA;So far so good, but say you now want to blit an animated character onto the bitmap. Say the rightmost pixel of that character ends up in column 100 and it is a bright white, palette value $0FFF. What this means is that the white will bleed into the next 2 pixels:&#xD;&#xA;&#xD;&#xA; 1. Due to modifying just the red component, the visible color in column 101 will be $06FF, a bright cyan.&#xD;&#xA;&#xD;&#xA; 2. Due to modifying just the green component, the visible color in column 102 will be $067F, a bright blue.&#xD;&#xA;&#xD;&#xA; 3. Only in column 103 will you have modified all three color components and the apparent pixel color will be the same $0676 as the original one before blitting.&#xD;&#xA;&#xD;&#xA; [![HAM pixels after blitting][2]][2]  &#xD;&#xA; *note that each differently colored square represents 1 pixel*&#xD;&#xA;&#xD;&#xA;Depending on how many and which color components you consecutively modify, the color bleeding can affect more or less pixels and depending on how different the colors are to the originally intended colors, the artifacts can be more or less visible.&#xD;&#xA;&#xD;&#xA; [![uncorrected HAM color bleeding when naively blitting][3]][3]&#xD;&#xA; *note that I scaled the image by a factor of 2 to make the artifacts easier to see*&#xD;&#xA;&#xD;&#xA;To counteract the bleeding, you would have to design a routine that figures out which pixels to the right of a blit to adjust and which pixel values are the optimal ones that let the apparent pixel colors match the original ones as closely as possible. You won't get completely rid of the artifacts, but they might now be unnoticeable unless you take a closer look.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/xGlsK.png&#xD;&#xA;  [2]: http://i.stack.imgur.com/OTbAq.png&#xD;&#xA;  [3]: http://i.stack.imgur.com/ngFDc.gif" />
  <row Id="1087" PostHistoryTypeId="5" PostId="196" RevisionGUID="bae79fbb-2d1f-4728-996b-c23304e0e32e" CreationDate="2016-05-04T03:40:25.313" UserId="92" Comment="Point to robc's answer for games actually using HAM for its animated action." Text="EHB&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;For example, a game that uses EHB (Extra HalfBrite) mode during the game action (i. e. ingame) is _Pinball Dreams_. In my example run of the _Beat Box_ table I can find the following in the copper list:&#xD;&#xA;&#xD;&#xA;    $00D6EA WAIT $4211FFFE&#xD;&#xA;    $00D6EE MOVE #$6200,BPLCON0&#xD;&#xA;&#xD;&#xA;I. e. it waits for raster line $42 (66) and uses BPLCON0 to set the number of bitplanes to 6 without the HAM bit set, which means EHB mode.&#xD;&#xA;&#xD;&#xA;_Cannon Fodder_ uses EHB for some of its still pictures. I'm not sure if it uses it ingame, but I consider it unlikely.&#xD;&#xA;&#xD;&#xA;A newer game, _Nemac IV_, presents you with a screen mode selection at the beginning, offering EHB mode as an option. It can then render its ingame 3D graphics to an EHB mode display. However, it requires a machine more powerful than a stock Amiga 500.&#xD;&#xA;&#xD;&#xA;HAM&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;The way HAM (Hold And Modify) mode works makes it unsuitable for ingame animation in most cases. I used to be unaware of any game that uses it for gameplay. (**Update**: There were at least 2 games using HAM for their animated action. See [robc's answer](http://retrocomputing.stackexchange.com/a/393/92).)&#xD;&#xA;&#xD;&#xA;_Fury of the Furries_ uses HAM for its still images, for example the title image and the images that are displayed before entering a new world (each consisting of a set of levels).&#xD;&#xA;&#xD;&#xA;The reason why it is unfeasible to use HAM for animated action is that you will either have to tolerate so-called color bleeding to the right of pixels or you will need to employ sophisticated algorithms to counteract the color bleeding, which timing constraints may forbid or which are just not worth it to come up with.&#xD;&#xA;&#xD;&#xA;In HAM mode you usually use 6 bitplanes (you can also use it with 5 bitplanes, but there's not much point to that). That's 64 possible values per pixel. Values 0 to 15 select a full RGB color from the 16 color palette, the same way other normal screen modes would. However, value sets 16 to 31 (modify blue component), 32 to 47 (modify red component) and 48 to 63 (modify green component), respectively, each just change one of the color components relative to the color of the previous pixel. The other two color components remain unchanged from the previous pixel.&#xD;&#xA;&#xD;&#xA;Say you set the color to palette entry 8 in column 100. Say also that this palette entry is $0333, i. e. a very dark gray. So the pixel in column 100 will appear gray.&#xD;&#xA;&#xD;&#xA; 1. Then, lacking a matching color in the palette, you modify the red component in column 101 to $6 (using a pixel value of $26 = 38). The resulting pixel in column 101 will now have a color equivalent to $0633, which is a dark unsaturated red.&#xD;&#xA;&#xD;&#xA; 2. Next, again lacking a matching color in the palette, you modify the green component in column 102 to $7 (using a pixel value of $37 = 55). The resulting pixel in column 102 will now have a color equivalent to $0673, which is a brown-greenish color.&#xD;&#xA;&#xD;&#xA; 3. Finally, lacking a matching color in the palette once more, you modify the blue component in column 103 to $6 (using a pixel value of $16 = 22). The resulting pixel in column 103 will now have a color equivalent to $0676, which is a dark gray with a very slight shimmer of green.&#xD;&#xA;&#xD;&#xA; [![HAM pixels before blitting][1]][1]  &#xD;&#xA; *note that each differently colored square represents 1 pixel*&#xD;&#xA;&#xD;&#xA;So far so good, but say you now want to blit an animated character onto the bitmap. Say the rightmost pixel of that character ends up in column 100 and it is a bright white, palette value $0FFF. What this means is that the white will bleed into the next 2 pixels:&#xD;&#xA;&#xD;&#xA; 1. Due to modifying just the red component, the visible color in column 101 will be $06FF, a bright cyan.&#xD;&#xA;&#xD;&#xA; 2. Due to modifying just the green component, the visible color in column 102 will be $067F, a bright blue.&#xD;&#xA;&#xD;&#xA; 3. Only in column 103 will you have modified all three color components and the apparent pixel color will be the same $0676 as the original one before blitting.&#xD;&#xA;&#xD;&#xA; [![HAM pixels after blitting][2]][2]  &#xD;&#xA; *note that each differently colored square represents 1 pixel*&#xD;&#xA;&#xD;&#xA;Depending on how many and which color components you consecutively modify, the color bleeding can affect more or less pixels and depending on how different the colors are to the originally intended colors, the artifacts can be more or less visible.&#xD;&#xA;&#xD;&#xA; [![uncorrected HAM color bleeding when naively blitting][3]][3]&#xD;&#xA; *note that I scaled the image by a factor of 2 to make the artifacts easier to see*&#xD;&#xA;&#xD;&#xA;To counteract the bleeding, you would have to design a routine that figures out which pixels to the right of a blit to adjust and which pixel values are the optimal ones that let the apparent pixel colors match the original ones as closely as possible. You won't get completely rid of the artifacts, but they might now be unnoticeable unless you take a closer look.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/xGlsK.png&#xD;&#xA;  [2]: http://i.stack.imgur.com/OTbAq.png&#xD;&#xA;  [3]: http://i.stack.imgur.com/ngFDc.gif" />
  <row Id="1088" PostHistoryTypeId="5" PostId="318" RevisionGUID="df4b08fc-a8f9-4716-a542-e992791807c1" CreationDate="2016-05-04T04:44:13.857" UserId="72" Comment="note that changing the screen holes is actually not just unneeded but a bad idea since they're used for other stuff" Text="If you look at the screen clear code in the Applesoft BASIC ROM, you'll find this:&#xD;&#xA;&#xD;&#xA;    f3f6    lda $e6        ;put base address of current hi-res page&#xD;&#xA;            sta $1b        ; into $1a/1b (will be $2000 or $4000)&#xD;&#xA;            ldy #$00&#xD;&#xA;            sty $1a&#xD;&#xA;    f3fe    lda $1c        ;get color value&#xD;&#xA;            sta ($1a),y    ;store it in frame buffer&#xD;&#xA;            jsr $f47e      ;update color value&#xD;&#xA;            iny            ;advance, looping...&#xD;&#xA;            bne $f3fe&#xD;&#xA;            inc $1b&#xD;&#xA;            lda $1b&#xD;&#xA;            and #$1f&#xD;&#xA;            bne $f3fe      ;...until we get to $4000/$6000&#xD;&#xA;            rts&#xD;&#xA;&#xD;&#xA;    f47e    asl            ;lose the hi bit, now $00/$fe for black/white,&#xD;&#xA;            cmp #$c0       ; or $54/$aa for green/purple/orange/blue&#xD;&#xA;            bpl $f489      ;branch if black or white&#xD;&#xA;            lda $1c&#xD;&#xA;            eor #$7f       ;invert color bits for odd/even&#xD;&#xA;            sta $1c&#xD;&#xA;    f489    rts&#xD;&#xA;&#xD;&#xA;This is a ROM routine, so size is at a premium, and self-modifying code is not allowed.  It's optimized for space, not speed.&#xD;&#xA;&#xD;&#xA;The most significant impact of this optimization choice is the code at $f47e, which tests the color value and potentially updates it for every byte.  This code is necessary because of the rather strange hi-res graphics layout, which (among other oddities) represents an odd number of pixels with each byte.  So while a solid black line is `00 00 00 00 ...`, a solid green line is `2a 55 2a 55 ...`.  The high bit doesn't change, hence the exclusive-OR with $7f.  (The code at $f47e is shared with other routines, e.g. the line-drawing code, that must update the color when moving across the screen.)&#xD;&#xA;&#xD;&#xA;The total time required to erase the screen to black is 271,121 cycles.  Clearing to green would require 328,465 cycles.&#xD;&#xA;&#xD;&#xA;The fastest possible screen clear would write a byte to 7680 addresses -- it's not 8192 because we don't need to (and shouldn't, since they're used for other purposes) overwrite the &quot;screen holes&quot;.  On a 6502, that requires 4 cycles per byte, or about 30720 cycles.  The code to do that would fill about half of available RAM on an Apple II though.&#xD;&#xA;&#xD;&#xA;A 192-byte unrolled loop can do it in about 39480 cycles.  That's ~5x the code, for ~8x the speed.&#xD;&#xA;&#xD;&#xA;While these approaches are faster, they still have the &quot;Venetian blind&quot; look.  While that's something of an Apple II hallmark, not everyone wants that, and it may not be possible to simply show page 2 while you're erasing page 1.  In a mere 127 bytes, for ~41,300 cycles you can erase the screen from right to left, using a [clever function written by John Brooks][1].&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://groups.google.com/d/msg/comp.sys.apple2/Jkb6V4v-65k/7Lqg6o7QCQAJ" />
  <row Id="1089" PostHistoryTypeId="24" PostId="318" RevisionGUID="df4b08fc-a8f9-4716-a542-e992791807c1" CreationDate="2016-05-04T04:44:13.857" Comment="Proposed by 72 approved by 92, 29 edit id of 128" />
  <row Id="1090" PostHistoryTypeId="2" PostId="397" RevisionGUID="749bf107-2784-49f9-beba-968762cd135f" CreationDate="2016-05-04T05:20:39.267" UserId="29" Text="What is the max size for a cartridge based app on the Coco 3?&#xD;&#xA;&#xD;&#xA;I believe the Coco 1 &amp; 2 cartridge maxes at 16K, while the Coco 3 is 32K. However, I know there have been cart based games for the Coco 3 that exceed 32K and I'm unclear on how this is accomplished. Let's say I want to have a 256K cart, is that possible and how might it be accomplished?" />
  <row Id="1091" PostHistoryTypeId="1" PostId="397" RevisionGUID="749bf107-2784-49f9-beba-968762cd135f" CreationDate="2016-05-04T05:20:39.267" UserId="29" Text="Breaking the CoCo 3 32K Cartridge Barrier" />
  <row Id="1092" PostHistoryTypeId="3" PostId="397" RevisionGUID="749bf107-2784-49f9-beba-968762cd135f" CreationDate="2016-05-04T05:20:39.267" UserId="29" Text="&lt;color-computer&gt;" />
  <row Id="1093" PostHistoryTypeId="5" PostId="373" RevisionGUID="622ef009-f78d-4a61-90a4-e2173667d34a" CreationDate="2016-05-04T05:50:42.147" UserId="29" Comment="added 245 characters in body" Text="The 6809 was designed by Terry Ritter and Joel Boney at Motorola's Austin Texas facility.&#xD;&#xA;&#xD;&#xA;It can be considered a second generation 8 bit microprocessor built by studying the short falls and programming experiences from the 6800 line of chips." />
  <row Id="1094" PostHistoryTypeId="24" PostId="373" RevisionGUID="622ef009-f78d-4a61-90a4-e2173667d34a" CreationDate="2016-05-04T05:50:42.147" Comment="Proposed by 29 approved by 56, 105 edit id of 122" />
  <row Id="1095" PostHistoryTypeId="2" PostId="398" RevisionGUID="5a6c4d06-7ee9-4ab2-addb-7ba36df03ae9" CreationDate="2016-05-04T07:15:21.053" UserId="308" Text="This very topic is currently being debated on the Cocolist - the answer is 'a little less than 32K' on a Coco3, unless (as Cactus states above) you resort to bank switching:&#xD;&#xA;&#xD;&#xA;https://pairlist5.pair.net/pipermail/coco/2016-May/153680.html" />
  <row Id="1097" PostHistoryTypeId="2" PostId="399" RevisionGUID="77f3824b-f2b2-4d01-a9a9-724be2ff7550" CreationDate="2016-05-04T11:17:02.053" UserId="148" Text="I recently acquired a [Thomson TO7/70](https://en.wikipedia.org/wiki/Thomson_TO7/70) home computer. It came without any MEMO7 cartridges (ROM cartridges) that are necessary to properly use it. I found [images](http://dcmoto.free.fr/programmes/_html/support_memo7.html) of the ROMS, and a [schematic](http://dcmoto.free.fr/documentation/schemas/to770.html), so in principle it should be possible to make your own cartridge and program with the images.&#xD;&#xA;&#xD;&#xA;Ideally I'd like something that can be easily programmed from a PC (maybe through serial or USB). One can still buy parallel EEPROMs, but I don't own an EEPROM programmer.&#xD;&#xA;&#xD;&#xA;Has anyone every done something similar before? Maybe for a different computer? Any suggestions, tips, recommendations for parts?" />
  <row Id="1098" PostHistoryTypeId="1" PostId="399" RevisionGUID="77f3824b-f2b2-4d01-a9a9-724be2ff7550" CreationDate="2016-05-04T11:17:02.053" UserId="148" Text="Homemade ROM cartridge for Thomson TO7/70 home computer" />
  <row Id="1099" PostHistoryTypeId="3" PostId="399" RevisionGUID="77f3824b-f2b2-4d01-a9a9-724be2ff7550" CreationDate="2016-05-04T11:17:02.053" UserId="148" Text="&lt;thomson&gt;&lt;rom&gt;&lt;homemade&gt;" />
  <row Id="1100" PostHistoryTypeId="2" PostId="400" RevisionGUID="566d110c-f4eb-4ea7-8c11-8ce6c8402024" CreationDate="2016-05-04T11:58:11.983" UserId="79" Text="It's funny you should ask this now, Daniel (who runs the site you found the ROMs and schematic on) and Phil (another 8-bit enthusiast) recently produced an EEPROM-based PCB for exactly this purpose. You can find out more about it on [the system.cfg forum](http://forum.system-cfg.com/viewtopic.php?f=10&amp;t=7086) (in French).&#xD;&#xA;&#xD;&#xA;Daniel has many other [Thomson hardware projects](http://dcmoto.free.fr/bricolage/index.html), including [an SD card reader](http://dcmoto.free.fr/bricolage/sdmoto/index.html) and [associated controller](http://dcmoto.free.fr/bricolage/cs91-280/index.html) (which would allow you to use any [floppy-based Thomson software](http://dcmoto.free.fr/programmes/_html/support_to_fd.html)).&#xD;&#xA;&#xD;&#xA;You can find cartridge-based systems which meet your requirements on other platforms; the [ABBUC USB cartridge](http://www.atarimax.com/usbcart/documentation/) is a recent example for 8-bit Ataris." />
  <row Id="1101" PostHistoryTypeId="5" PostId="387" RevisionGUID="5d588c4a-8d99-4da6-9ded-5c496da30cab" CreationDate="2016-05-04T13:32:14.640" UserId="56" Comment="added 38 characters in body" Text="Discussions about the DOSBox emulator." />
  <row Id="1102" PostHistoryTypeId="24" PostId="387" RevisionGUID="5d588c4a-8d99-4da6-9ded-5c496da30cab" CreationDate="2016-05-04T13:32:14.640" Comment="Proposed by 56 approved by 79, 47 edit id of 127" />
  <row Id="1103" PostHistoryTypeId="5" PostId="386" RevisionGUID="0cd697ec-9d47-4b94-8d47-3fff4967934b" CreationDate="2016-05-04T13:32:16.957" UserId="56" Comment="added 272 characters in body" Text="[DOSBox][1] is an x86 emulator intended for use with DOS-era software.  It provides emulation of 386, 486, and Pentium CPUs.&#xD;&#xA;&#xD;&#xA;The emulator is widely used for older games that won't run (or run poorly) under modern versions of Windows.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://www.dosbox.com/" />
  <row Id="1104" PostHistoryTypeId="24" PostId="386" RevisionGUID="0cd697ec-9d47-4b94-8d47-3fff4967934b" CreationDate="2016-05-04T13:32:16.957" Comment="Proposed by 56 approved by 105, 47 edit id of 126" />
  <row Id="1105" PostHistoryTypeId="5" PostId="400" RevisionGUID="77a832ae-7173-45ee-8301-d6febb594a9d" CreationDate="2016-05-04T13:44:45.647" UserId="79" Comment="The relevant Atari product is the Maxflash cartridge, not the USB cartridge." Text="It's funny you should ask this now, Daniel (who runs the site you found the ROMs and schematic on) and Phil (another 8-bit enthusiast) recently produced an EEPROM-based PCB for exactly this purpose. You can find out more about it on [the system.cfg forum](http://forum.system-cfg.com/viewtopic.php?f=10&amp;t=7086) (in French).&#xD;&#xA;&#xD;&#xA;Daniel has many other [Thomson hardware projects](http://dcmoto.free.fr/bricolage/index.html), including [an SD card reader](http://dcmoto.free.fr/bricolage/sdmoto/index.html) and [associated controller](http://dcmoto.free.fr/bricolage/cs91-280/index.html) (which would allow you to use any [floppy-based Thomson software](http://dcmoto.free.fr/programmes/_html/support_to_fd.html)).&#xD;&#xA;&#xD;&#xA;You can find cartridge-based systems which meet your requirements on other platforms; the [Atarimax Maxflash cartridge](http://www.atarimax.com/flashcart/documentation/) is one example for 8-bit Ataris." />
  <row Id="1106" PostHistoryTypeId="2" PostId="401" RevisionGUID="5d551354-5aae-4d3f-9ba9-401648c80e5a" CreationDate="2016-05-04T18:53:58.283" UserId="173" Text="I know I've tagged to CoCo for this, but, I'm sure the answer may apply to other retro-computers as well. I've heard BASIC teaches one bad habits. I've heard 6809/6309 Assembly might be too tough for beginners since there is much more to learn (memory maps, etc..). I know it's true that real performance will come from an Assembly program, while simplicity is BASIC's main benefit.&#xD;&#xA;&#xD;&#xA;But what is the BEST approach to learning to code on a retro-computer (in this case the CoCo)?&#xD;&#xA;&#xD;&#xA;BASIC then Assembly?&#xD;&#xA;&#xD;&#xA;Assembly then BASIC?" />
  <row Id="1107" PostHistoryTypeId="1" PostId="401" RevisionGUID="5d551354-5aae-4d3f-9ba9-401648c80e5a" CreationDate="2016-05-04T18:53:58.283" UserId="173" Text="Is it better to learn BASIC or Assembly first?" />
  <row Id="1108" PostHistoryTypeId="3" PostId="401" RevisionGUID="5d551354-5aae-4d3f-9ba9-401648c80e5a" CreationDate="2016-05-04T18:53:58.283" UserId="173" Text="&lt;color-computer&gt;" />
  <row Id="1109" PostHistoryTypeId="2" PostId="402" RevisionGUID="a1a0004a-ad39-4f03-a560-149f86b4ef28" CreationDate="2016-05-04T19:09:36.137" UserId="173" Text="I would make the assumption that, in the CoCo 3's case, a 32k, 64k or 128k ROM can be created. &#xD;&#xA;&#xD;&#xA;According to the discussion on the CoCo Mailing list, the normal size is a little less than 16k or 32k. Any carts that require larger ROMS need to have hardware MMU's to take advantage of a bank-switching scheme. There's a seller on eBay who sells a 512k cart with a control pad, to determine which bank on the ROM the CoCo will boot to. The same could be done with software to read the data from the different banks, in effect creating a larger game or application.&#xD;&#xA;&#xD;&#xA;Additionally, if you get to a point where you need a larger ROM, you could look at the content of the code; if there's a lot of graphics or constant data, you could compress the code, and decompress it in memory. Not much different than some disk games load the data and then decompress in memory (Sock Master's Donkey Kong for example).&#xD;&#xA;&#xD;&#xA;Your fictitious 256k cart could be done with an add-on MMU (like Robocop used for it's 128k) to handle the bank switching. As one list member said, there doesn't appear to be any such hardware under development for this right now, but, it has been done." />
  <row Id="1111" PostHistoryTypeId="2" PostId="403" RevisionGUID="f7a2a5d0-5a96-4117-b95b-ad12ff5f0331" CreationDate="2016-05-04T19:40:25.783" UserId="228" Text="BASIC is probably a better choice because even though Assembly is more efficient, BASIC is more accessible to new programmers and teaches you the basics of programming until you're ready to move on to Assembly." />
  <row Id="1112" PostHistoryTypeId="10" PostId="401" RevisionGUID="18a6cf91-8209-457f-8b36-801fc6301bcc" CreationDate="2016-05-04T21:14:40.217" UserId="47" Comment="105" Text="{&quot;Voters&quot;:[{&quot;Id&quot;:4,&quot;DisplayName&quot;:&quot;Mark&quot;},{&quot;Id&quot;:79,&quot;DisplayName&quot;:&quot;Stephen Kitt&quot;},{&quot;Id&quot;:47,&quot;DisplayName&quot;:&quot;Robert Cartaino&quot;}]}" />
  <row Id="1114" PostHistoryTypeId="2" PostId="404" RevisionGUID="a6c1e4d8-6d6c-4bab-87e3-209a41f2ec0f" CreationDate="2016-05-05T03:46:27.443" UserId="4" Text="Microprose tried to be clever in using BIOS calls to detect which disk is present in the floppy drive.  However, the information that `install.exe` is looking for gets lost somewhere in the many filesystem layers between it and the actual disk.  This is not a problem unique to emulation; CD-ROM-based installation sometimes had trouble, as did some not-quite-IBM-compatible PCs.&#xD;&#xA;&#xD;&#xA;There are two ways to work around this:&#xD;&#xA;&#xD;&#xA;First, you can make images of the disks, and mount those images in DosBox.  You'll need to specify the disk geometry when mounting the image:&#xD;&#xA;&#xD;&#xA;    imgmount -size 512,18,2,80 a: /path/to/your/disk/image&#xD;&#xA;&#xD;&#xA;This is not the recommended method, as there's no easy way to switch out disk images during the installation process.&#xD;&#xA;&#xD;&#xA;Second, you can bypass the installer entirely: the `mpscopy.exe` utility on the first disk does the actual work of installation, and all it cares about is that the files it's looking for are present.  You can copy the files from all three floppies into a single directory somewhere (the easy way) or switch out the floppies as-needed (the harder way).  Run it directly:&#xD;&#xA;&#xD;&#xA;    mpscopy -c a: c:\colonize&#xD;&#xA;&#xD;&#xA;If you're switching out floppies, you may need to use &lt;kbd&gt;CTRL&lt;/kbd&gt;+&lt;kbd&gt;F4&lt;/kbd&gt; to inform DosBox that you've done so.  Once the files are copied, run the configuration program to set up sound:&#xD;&#xA;&#xD;&#xA;    c:&#xD;&#xA;    cd colonize&#xD;&#xA;    install&#xD;&#xA;&#xD;&#xA;`mpscopy.exe` and the floppy-detection issues are not unique to *Colonization*; the issue and its fixes may also apply to other DOS-based Microprose games." />
  <row Id="1115" PostHistoryTypeId="2" PostId="405" RevisionGUID="db158d86-9a46-4b2d-840c-6dd064b83038" CreationDate="2016-05-05T11:07:57.963" UserId="130" Text="[Relevo](http://www.relevovideogames.com/) is a Spanish company that develops videogames for both modern game consoles [and 8 bit computers](http://www.relevovideogames.com/retrogames-2/) (especially MSX). Although they offer the games as free downloads, there is also the option to purchase them as physical cartridges from [Matranet](http://www.matranet.net/boutique/buy.php)." />
  <row Id="1116" PostHistoryTypeId="4" PostId="401" RevisionGUID="30b0e79e-c1d5-4d2c-bea8-eac743fb6c93" CreationDate="2016-05-05T12:26:48.340" UserId="173" Comment="edited title" Text="For game and graphic programming, is it better to learn BASIC or Assembly first?" />
  <row Id="1117" PostHistoryTypeId="5" PostId="234" RevisionGUID="4b9c50c1-f6e8-468b-a7f7-e436bd486237" CreationDate="2016-05-05T13:17:13.803" UserId="141" Comment="Added missing links!" Text="The capacity in Amiga Old File System format (OFS, OS version 1.x) was 840KB, with the Fast File System (&quot;FFS&quot; (!)) introduced for OS 2.x onwards able to store 880KB. The PC format stored 720KB on the same density disks.&#xD;&#xA;&#xD;&#xA;Amigas had the same 3.5&quot; disks and disk drives as PCs with Dual Density (DD) disk drives (or at least the same capability with respect to physical data density; see [this post][1] and [this link][2] for more details).&#xD;&#xA;&#xD;&#xA;I think the capacity increase from OFS to FFS came from taking 24 bytes per 512 byte sector into use for data storage instead of redundancy/CRC/future use. I am guessing the difference between PC and Amiga formats is similarly down to differing amounts of disk space for housekeeping/error redundancy.&#xD;&#xA;&#xD;&#xA;(For example, PC drives were notably faster at listing directories, except when compared to the Directory Cache mode introduced for the Amiga (D)OS 3.x, which gave comparable listing speed at some storage cost.)&#xD;&#xA;&#xD;&#xA;Does anyone know in more detail what the differences are?&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://retrocomputing.stackexchange.com/questions/104/what-modification-is-required-from-a-pc-floppy-for-use-in-amiga?rq=1&#xD;&#xA;  [2]: https://en.wikipedia.org/wiki/Floppy_disk_variants#Commodore_Amiga" />
  <row Id="1118" PostHistoryTypeId="8" PostId="318" RevisionGUID="3c52ffd9-7ef4-4d9c-a671-bca4e6bc1122" CreationDate="2016-05-05T13:53:10.717" UserId="56" Comment="Rollback to [556187e1-7190-487f-b942-8ec26154f0c0]" Text="If you look at the screen clear code in the Applesoft BASIC ROM, you'll find this:&#xD;&#xA;&#xD;&#xA;    f3f6    lda $e6        ;put base address of current hi-res page&#xD;&#xA;            sta $1b        ; into $1a/1b (will be $2000 or $4000)&#xD;&#xA;            ldy #$00&#xD;&#xA;            sty $1a&#xD;&#xA;    f3fe    lda $1c        ;get color value&#xD;&#xA;            sta ($1a),y    ;store it in frame buffer&#xD;&#xA;            jsr $f47e      ;update color value&#xD;&#xA;            iny            ;advance, looping...&#xD;&#xA;            bne $f3fe&#xD;&#xA;            inc $1b&#xD;&#xA;            lda $1b&#xD;&#xA;            and #$1f&#xD;&#xA;            bne $f3fe      ;...until we get to $4000/$6000&#xD;&#xA;            rts&#xD;&#xA;&#xD;&#xA;    f47e    asl            ;lose the hi bit, now $00/$fe for black/white,&#xD;&#xA;            cmp #$c0       ; or $54/$aa for green/purple/orange/blue&#xD;&#xA;            bpl $f489      ;branch if black or white&#xD;&#xA;            lda $1c&#xD;&#xA;            eor #$7f       ;invert color bits for odd/even&#xD;&#xA;            sta $1c&#xD;&#xA;    f489    rts&#xD;&#xA;&#xD;&#xA;This is a ROM routine, so size is at a premium, and self-modifying code is not allowed.  It's optimized for space, not speed.&#xD;&#xA;&#xD;&#xA;The most significant impact of this optimization choice is the code at $f47e, which tests the color value and potentially updates it for every byte.  This code is necessary because of the rather strange hi-res graphics layout, which (among other oddities) represents an odd number of pixels with each byte.  So while a solid black line is `00 00 00 00 ...`, a solid green line is `2a 55 2a 55 ...`.  The high bit doesn't change, hence the exclusive-OR with $7f.  (The code at $f47e is shared with other routines, e.g. the line-drawing code, that must update the color when moving across the screen.)&#xD;&#xA;&#xD;&#xA;The total time required to erase the screen to black is 271,121 cycles.  Clearing to green would require 328,465 cycles.&#xD;&#xA;&#xD;&#xA;The fastest possible screen clear would write a byte to 7680 addresses -- it's not 8192 because we don't need to overwrite the &quot;screen holes&quot;.  On a 6502, that requires 4 cycles per byte, or about 30720 cycles.  The code to do that would fill about half of available RAM on an Apple II though.&#xD;&#xA;&#xD;&#xA;A 192-byte unrolled loop can do it in about 39480 cycles.  That's ~5x the code, for ~8x the speed.&#xD;&#xA;&#xD;&#xA;While these approaches are faster, they still have the &quot;Venetian blind&quot; look.  While that's something of an Apple II hallmark, not everyone wants that, and it may not be possible to simply show page 2 while you're erasing page 1.  In a mere 127 bytes, for ~41,300 cycles you can erase the screen from right to left, using a [clever function written by John Brooks][1].&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://groups.google.com/d/msg/comp.sys.apple2/Jkb6V4v-65k/7Lqg6o7QCQAJ" />
  <row Id="1119" PostHistoryTypeId="2" PostId="406" RevisionGUID="86036932-d121-4173-849f-cdf46fe8985d" CreationDate="2016-05-05T16:00:26.993" UserId="105" Text="Although it is widely known that the ZX Spectrum ULA answers to any request to an even I/O address, all documentation state that the official port number to use should be `$xxFE` (where `xx` is any 8 bit number).&#xD;&#xA;&#xD;&#xA;I'm now updating my ULA core to add the Timex MMU memory manager, and this MMU uses I/O port `$F4`, which would conflict with the current implemented ULA. So I'm thinking about performing a more restrictive decoding so that the ULA reacts only to I/O port `$FE`, but I'm concerned about the possible consequences of this in existing games and applications.&#xD;&#xA;&#xD;&#xA;So:&#xD;&#xA;&#xD;&#xA;- Do any of you know of a game, demoscene app, or actually, anything, that uses another even port than `$FE` to access the ULA?&#xD;&#xA;- Alternatively, is there any Spectrum emulator which I could parametrize/customize in a way that I can run it from a shell script to execute a list of game snapshots, and log the first time it accesses an even addressed I/O port other than `$FE`?" />
  <row Id="1120" PostHistoryTypeId="1" PostId="406" RevisionGUID="86036932-d121-4173-849f-cdf46fe8985d" CreationDate="2016-05-05T16:00:26.993" UserId="105" Text="Are there any ZX Spectrum application (mainly games or demoscene productions) that use a different port than $FE to access to the ULA?" />
  <row Id="1121" PostHistoryTypeId="3" PostId="406" RevisionGUID="86036932-d121-4173-849f-cdf46fe8985d" CreationDate="2016-05-05T16:00:26.993" UserId="105" Text="&lt;zx-spectrum&gt;" />
  <row Id="1123" PostHistoryTypeId="4" PostId="406" RevisionGUID="7fd39e5b-ff49-4481-849f-5bf15f6b19ef" CreationDate="2016-05-05T22:08:56.370" UserId="105" Comment="edited title" Text="Are there any ZX Spectrum application (mainly games or demoscene productions) that use a port other than $FE to access the ULA?" />
  <row Id="1124" PostHistoryTypeId="2" PostId="407" RevisionGUID="d0d158f1-b15c-446c-bc5b-840d6488c43b" CreationDate="2016-05-06T06:05:25.527" UserId="320" Text="You need the 3.1 ROM if you want to use OS3.9, and more importantly OS3.9's support for the use of larger than 4GB of HDD space by the Amiga OS.&#xD;&#xA;&#xD;&#xA;Without 3.1 ROM and OS3.9 you can still use larger HDDs but the Amiga OS can only access the first 4GB (so you could use the rest for linux partitions, for example.)" />
  <row Id="1125" PostHistoryTypeId="5" PostId="407" RevisionGUID="ea27f0ba-cab4-45e8-8aef-a6e87e676742" CreationDate="2016-05-06T06:11:32.563" UserId="320" Comment="Additional clarifying information." Text="You need the 3.1 ROM if you want to use OS3.9, and more importantly OS3.9's support for the use of larger than 4GB of HDD space by the Amiga OS.&#xD;&#xA;&#xD;&#xA;Without 3.1 ROM and OS3.9 you can still use larger HDDs but the Amiga OS can only access the first 4GB (so you could use the rest for linux partitions, for example.)&#xD;&#xA;&#xD;&#xA;Note that even with the 3.1 ROM and OS3.9 there is still a max partition size limit of 8GB, but you can use however many partitions you like to map out the whole drive.  The boot partition however must be allocated entirely within the first 4GBs of space." />
  <row Id="1126" PostHistoryTypeId="10" PostId="376" RevisionGUID="d1de7b9b-25ec-4a44-be93-1560e56aa288" CreationDate="2016-05-06T07:23:49.673" UserId="-1" Comment="104" Text="{&quot;Voters&quot;:[{&quot;Id&quot;:12,&quot;DisplayName&quot;:&quot;jdv&quot;},{&quot;Id&quot;:111,&quot;DisplayName&quot;:&quot;user3169&quot;},{&quot;Id&quot;:4,&quot;DisplayName&quot;:&quot;Mark&quot;},{&quot;Id&quot;:92,&quot;DisplayName&quot;:&quot;blubberdiblub&quot;},{&quot;Id&quot;:276,&quot;DisplayName&quot;:&quot;Chenmunka&quot;}]}" />
  <row Id="1127" PostHistoryTypeId="5" PostId="401" RevisionGUID="8e96ffcd-1524-42a7-8101-2f5e69d42b3b" CreationDate="2016-05-06T15:15:17.187" UserId="173" Comment="added 186 characters in body" Text="I know I've tagged the CoCo for this, but, I'm sure the answer may apply to other retro-computers as well. I'm interested in learning to code for the CoCo, and I've heard BASIC might teach a new programmer bad habits. &#xD;&#xA;&#xD;&#xA;I've also heard 6809/6309 Assembly, or Assembly language in general, might be too tough for beginners since there is much more to learn (memory maps, HEX addressing, etc..). &#xD;&#xA;&#xD;&#xA;I know it's true that real performance will come from an Assembly program, while simplicity is BASIC's main benefit.&#xD;&#xA;&#xD;&#xA;But, for someone who hasn't written a line of code, what would be a good approach to learning to code on a retro-computer (in this case the CoCo)?&#xD;&#xA;&#xD;&#xA;BASIC then Assembly?&#xD;&#xA;&#xD;&#xA;Assembly then BASIC?" />
  <row Id="1128" PostHistoryTypeId="2" PostId="408" RevisionGUID="f3b2400d-39e3-45cc-8675-80190970aeec" CreationDate="2016-05-06T15:35:53.927" UserId="173" Text="Microware released the versions of the OS-9 DOS for the CoCo. A few years later, former employees (I believe) released NitrOS-9. Both appear to be multiuser/multi-tasking OS's.&#xD;&#xA;&#xD;&#xA;What are the advantages to using NitrOS-9 instead of OS-9? Does the documentation for OS-9 apply to NitrOS-9? " />
  <row Id="1129" PostHistoryTypeId="1" PostId="408" RevisionGUID="f3b2400d-39e3-45cc-8675-80190970aeec" CreationDate="2016-05-06T15:35:53.927" UserId="173" Text="What are the advantages of NitrOS-9 over OS-9?" />
  <row Id="1130" PostHistoryTypeId="3" PostId="408" RevisionGUID="f3b2400d-39e3-45cc-8675-80190970aeec" CreationDate="2016-05-06T15:35:53.927" UserId="173" Text="&lt;color-computer&gt;" />
  <row Id="1131" PostHistoryTypeId="6" PostId="408" RevisionGUID="1161a09d-a7cd-4f0c-9dc8-d476972fdaf1" CreationDate="2016-05-06T16:00:38.090" UserId="29" Comment="edited tags" Text="&lt;color-computer&gt;&lt;os-9&gt;" />
  <row Id="1132" PostHistoryTypeId="5" PostId="198" RevisionGUID="cd7ad28e-f16b-494e-aa40-db42ec2060ba" CreationDate="2016-05-06T16:39:45.047" UserId="181" Comment="c't Magazin's Turbo Card works only at 4 MHz" Text="To get a faster operation there are several &quot;extensions&quot; around, which are either connected to the extension slot or replacing the CPU on its socket working like a co-processor. CMD's SuperCPU, Flash 8, one project from the &quot;c't Magazin&quot; (a german one). They have all in common using a WDC 65C816 CPU, a 16 bit expanded version of a 65C02. With some luck a program or game runs even on such a plain 6502 (without any dirty 6510 opcodes) and can handle the faster timing. In hard cases you can switch back to the 6510-only mode.&#xD;&#xA;The above mentioned problem with VIC and IO access is solved differently. However, they have to slow down the clock for access the &quot;lower&quot; address space (VIC accessed RAM). Some optimization with making this window smaller and using a pipeling method or caching is often implemented to minimize slow down phases. The 16-bit CPU with 4 to 20 MHz is running on its own memory with fast access. ROM/Eprom is usually copied into a shadow RAM area simulating a ROM.&#xD;&#xA;&#xD;&#xA;There are some other extension, based on FPGA architecture, replacing the whole C64 on an extension card (Turbo Cameleon 64) allowing to speed up the stuff into a 10 MHz region. Here you have all illegal opcode, too. The compatibility to existing software is much better.&#xD;&#xA;" />
  <row Id="1133" PostHistoryTypeId="5" PostId="401" RevisionGUID="8f5837c6-faff-4dfc-9fc3-cad2529a8965" CreationDate="2016-05-06T20:45:43.683" UserId="12" Comment="Keep the question clear" Text="I know I've tagged the CoCo for this, but, I'm sure the answer may apply to other retro-computers as well. I'm interested in learning to code for the CoCo, and I've heard BASIC might teach a new programmer bad habits. &#xD;&#xA;&#xD;&#xA;I've also heard 6809/6309 Assembly, or Assembly language in general, might be too tough for beginners since there is much more to learn (memory maps, HEX addressing, etc..). &#xD;&#xA;&#xD;&#xA;I know it's true that real performance will come from an Assembly program, while simplicity is BASIC's main benefit.&#xD;&#xA;&#xD;&#xA;But, for someone who hasn't written a line of code, what would be a good approach to learning to code on a retro-computer (in this case the CoCo)?" />
  <row Id="1134" PostHistoryTypeId="2" PostId="409" RevisionGUID="cd1c9ae2-02fe-480d-88b7-e138bc5e565e" CreationDate="2016-05-07T05:21:11.640" UserId="254" Text="I have an old IDE hard drive from a Windows 98 HP computer.It has some on it but I do not know how to access it" />
  <row Id="1135" PostHistoryTypeId="1" PostId="409" RevisionGUID="cd1c9ae2-02fe-480d-88b7-e138bc5e565e" CreationDate="2016-05-07T05:21:11.640" UserId="254" Text="How to access old IDE hard drive from laptop" />
  <row Id="1136" PostHistoryTypeId="3" PostId="409" RevisionGUID="cd1c9ae2-02fe-480d-88b7-e138bc5e565e" CreationDate="2016-05-07T05:21:11.640" UserId="254" Text="&lt;hard-disk&gt;&lt;ide&gt;&lt;hp&gt;" />
  <row Id="1137" PostHistoryTypeId="2" PostId="410" RevisionGUID="98a8a4b7-41aa-4786-888c-8ec1033bcbec" CreationDate="2016-05-07T05:27:22.560" UserId="254" Text="I bought a IDE to USB converter from a local store.There were two extra pins on my hard drive so I had to do some fiddling and connect the AC power supply &#xD;&#xA;&#xD;&#xA;I connect the adapter to my Linux laptop (also works on Windows) and I could see the files stored on the FAT32 filesystem.&#xD;&#xA;&#xD;&#xA;The disk is almost full (The thing is 4GB and has 100MB left , my laptop has 500GB :) has errors , noisy and slow. I copied all the files off the disk including 1GB of music.I&#xD;&#xA;&#xD;&#xA;I also booted the disk from a virtual machine and it works perfectly (after installing driver and repairing system files).I am considering creating a full disk image using dd but will it fail if I try to copy from it too much?&#xD;&#xA;&#xD;&#xA;Also Kaspersky found a virus on it" />
  <row Id="1138" PostHistoryTypeId="2" PostId="411" RevisionGUID="9a3fbd45-b746-4fb6-8054-e4e0472886a1" CreationDate="2016-05-07T05:58:04.163" UserId="4" Text="The easiest way is to get an external USB enclosure or USB-to-IDE adapter.  IDE-to-SATA adapters exist, but they require opening up your computer to install.&#xD;&#xA;&#xD;&#xA;When selecting hardware, keep in mind that IDE (PATA) hard drives come in two common varieties: &quot;desktop&quot; (usually 3.5&quot; form factor, with a 40-pin data cable and a 4-pin power cable), and &quot;laptop&quot; (usually 2.5&quot; form factor, with a 44-pin combined power and data cable).  You'll need to make sure you get one compatible with your drive; &quot;universal&quot; adapters/enclosures are rare.&#xD;&#xA;&#xD;&#xA;IDE drives were designed to let two of them be attached to a single data cable, with one in the &quot;master&quot; role and the other in the &quot;slave&quot; role.  A jumper near the power and data connections is used to set the role; with just a single drive attached to an adapter, it should be set to &quot;master&quot; or &quot;cable select&quot; (CS).&#xD;&#xA;&#xD;&#xA;Software-wise, a hard drive from a Windows 98 will be formatted in the &quot;FAT32&quot; format.  This is as close to a universal hard drive format as you can get, so virtually every modern computer can read it, regardless of operating system." />
  <row Id="1139" PostHistoryTypeId="2" PostId="412" RevisionGUID="2ca39d7b-7b54-46c3-9452-e8f8e3e085ee" CreationDate="2016-05-07T06:04:01.803" UserId="320" Text="Someone at a local Commodore Users Group might be able to help you archive them since you don't have access to a working floppy drive.  Many of the old user's groups still exist.  The Global Commodore User's Group would be a good place to ask if you're not sure if there is one in your area.  Their main purpose is to keep the local groups connected and help users find the closest group.  They maintain a presence on Facebook and Google+.&#xD;&#xA;[Global Commodore User's Group Facebook][1]&#xD;&#xA;[Global Commodore User's Group Google+][2]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://www.facebook.com/groups/gcug1/&#xD;&#xA;  [2]: https://plus.google.com/communities/104829882792024324416" />
  <row Id="1140" PostHistoryTypeId="6" PostId="208" RevisionGUID="e1b8a9c5-6807-453b-a6a1-15efe01b26a9" CreationDate="2016-05-07T08:50:17.410" UserId="4" Comment="Retagging as &quot;emulation&quot;" Text="&lt;emulation&gt;&lt;apple-macintosh&gt;&lt;software-recommendation&gt;" />
  <row Id="1141" PostHistoryTypeId="2" PostId="413" RevisionGUID="c0829aee-b0cf-4f68-9a03-bbb0ce624aa8" CreationDate="2016-05-07T16:08:48.043" UserId="29" Text="I found a lovely answer [here][1].&#xD;&#xA;&#xD;&#xA;The joystick and button values are found by reading addresses $FF60 - $FF63.&#xD;&#xA;&#xD;&#xA;The first time an address on the Color Computer 1/2/3 is accessed (read), it sets up an A/D conversion cycle for the channel as you specify above. THEN the next read is the value converted from the previous read access. By doing a read on the next channel, you set up the A/D conversion cycle for the channel read, but read the previous channel's data. Here's another way to look at it.&#xD;&#xA;&#xD;&#xA;If read in the following order:&#xD;&#xA;&#xD;&#xA; 1. $FF60 Whatever channel was set up last. Initiate A2D for X Axis&#xD;&#xA; 2. $FF61 Data from channel #0 (X pos). Initiate A2D for Y Axis.&#xD;&#xA; 3. $FF62 Data from channel #1 (Y pos). Initiate A2D for Button 1.&#xD;&#xA; 4. $FF63 Data from channel #2 (button #1). Initiate A2D for Button 2.&#xD;&#xA; 5. $FF60 any Data from channel #3 (button #2). Initiate A2D for X Axis&#xD;&#xA; 6. Etc.&#xD;&#xA;&#xD;&#xA;  [1]: http://www.lomont.org/Software/Misc/CoCo/Lomont_CoCoHardware.pdf" />
  <row Id="1142" PostHistoryTypeId="2" PostId="414" RevisionGUID="7b2161fe-98ca-4554-ba3c-643457fd5b6c" CreationDate="2016-05-07T16:29:45.283" UserId="326" Text="I recently found an old Satellite 4015cds laptop that I wanted to play around with. I have cleaned all the plastic and it looks really good except for two places. The rubber touchpads and the rubber mouse pointer in the middle of the keyboard.&#xD;&#xA;&#xD;&#xA;Both of these rubber pieces are extremely sticky for some reason. I have tried scrubbing them to no avail. I am not sure at this point whether there is something sticky on the rubber, or if the rubber itself has just degraded and become sticky or something. Does anyone know what has made these pieces so sticky? is there a way to restore or replace them?" />
  <row Id="1143" PostHistoryTypeId="1" PostId="414" RevisionGUID="7b2161fe-98ca-4554-ba3c-643457fd5b6c" CreationDate="2016-05-07T16:29:45.283" UserId="326" Text="Rubber restoration or replacement?" />
  <row Id="1144" PostHistoryTypeId="3" PostId="414" RevisionGUID="7b2161fe-98ca-4554-ba3c-643457fd5b6c" CreationDate="2016-05-07T16:29:45.283" UserId="326" Text="&lt;cleaning&gt;&lt;rubber&gt;&lt;mouse&gt;&lt;touchpad&gt;" />
  <row Id="1145" PostHistoryTypeId="2" PostId="415" RevisionGUID="63d56c33-fedc-4f8a-b935-00f87c1ca1c6" CreationDate="2016-05-07T16:43:57.723" UserId="29" Text="The documentation generally does apply correctly between OS-9 and NitrOS-9.&#xD;&#xA;&#xD;&#xA;To understand the advantages over OS-9, it is good to look back that the different eras of the project.&#xD;&#xA;&#xD;&#xA;In the beginning, Bill Nobel, Curtis Boyle, and Wes Gale decided to rewrite parts of the operating system to support to newly discovered features of the 6309 microprocessor. OS-9 is **very** modular and this kind of updating is possible even without the original source code.&#xD;&#xA;&#xD;&#xA;Then Alan Dekok added to the project to use better, smaller algorithms in other parts of the OS (speciffically: GrfDrv).&#xD;&#xA;&#xD;&#xA;Later still, Boisy Pitre bought the project online with source code control and added more features.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;" />
  <row Id="1146" PostHistoryTypeId="2" PostId="416" RevisionGUID="3a1d3427-e499-4807-8424-14b84955f2bb" CreationDate="2016-05-07T21:13:26.287" UserId="320" Text="Many soft-touch rubberized plastics break down quickly with age (especially parts that come into contact with skin oils) and become gooey or sticky.  Unfortunately there's not much you can do to reverse the process.&#xD;&#xA;&#xD;&#xA;The rubber &quot;mouse&quot; nipple is usually just a friction fit piece that can be wiggled loose, but try to find the service manual for your laptop to verify first.  If you're lucky, the shaft underneath will be the same diameter as the IBM / Lenovo nipples and you'll be able to get a brand new replacement easily and cheaply.  You'd be looking for &quot;Trackpoint&quot; replacement caps.&#xD;&#xA;&#xD;&#xA;The buttons might be more problematic.  If its just a thin coating over hard plastic you can remove the goo with denatured alcohol, however this obviously won't work if the entire piece is made of the same material.  In that case your only option would be to track down some replacement buttons, or possibly trying to seal the surface with something hard like a clear epoxy." />
  <row Id="1148" PostHistoryTypeId="2" PostId="417" RevisionGUID="288e719f-28f4-4d4d-bf4b-8ca1802f5ace" CreationDate="2016-05-07T22:11:58.727" UserId="74" Text="I'm not sure how efficient or safe this is in your case, so if you have a better method, go with it - but I found a good way to &quot;neutralize&quot; any permanently sticky surfaces is application of some kind of insoluble fine inorganic dust, e.g. chalk, fine sand, talc etc.&#xD;&#xA;&#xD;&#xA;It just binds with whatever &quot;glue&quot; you deal with, forming either easy to remove crud, or just staying there permanently, soaking up the goo.&#xD;&#xA;&#xD;&#xA;Of course it will get dirty and look ugly really fast, and the dust - free or bound with the sticky substance - may cause problems with other parts around, plus you may need to reapply it periodically if the &quot;glue&quot; continues to perspire and saturates the current supply of dust - the method has many disadvantages. But hey, it works - the thing in question ceases to be sticky." />
  <row Id="1149" PostHistoryTypeId="5" PostId="407" RevisionGUID="a4c991f9-5d36-4e98-9717-239915bcb511" CreationDate="2016-05-07T22:36:46.203" UserId="320" Comment="Additional clarifying information." Text="You need the 3.1 ROM if you want to use OS3.9, and more importantly OS3.9's support for the use of larger than 4GB of HDD space by the Amiga OS.&#xD;&#xA;&#xD;&#xA;Without 3.1 ROM and OS3.9 you can still use larger HDDs but the Amiga OS can only access the first 4GB (so you could use the rest for linux partitions, for example.)&#xD;&#xA;&#xD;&#xA;Note that even with the 3.1 ROM and OS3.9 there is still a max partition size limit of 8GB, but you can use however many partitions you like to map out the whole drive.  The boot partition however must be allocated entirely within the first 4GBs of space.&#xD;&#xA;&#xD;&#xA;Additional Note:  Some software that came with a utility to install it to a hard disk may refuse to install to partitions greater than 2GB (as that was the original partition size limit) after failing a free space check due to an insufficiently sized variable." />
  <row Id="1150" PostHistoryTypeId="2" PostId="418" RevisionGUID="11236f95-0384-4ae7-a53e-7e017ad67035" CreationDate="2016-05-08T02:44:59.470" UserId="81" Text="Is it possible (and if so, how) to tell if a drive has JiffyDOS installed without opening it and looking for the chip?" />
  <row Id="1151" PostHistoryTypeId="1" PostId="418" RevisionGUID="11236f95-0384-4ae7-a53e-7e017ad67035" CreationDate="2016-05-08T02:44:59.470" UserId="81" Text="How can you tell if JiffyDOS is installed on a drive without opening it?" />
  <row Id="1152" PostHistoryTypeId="3" PostId="418" RevisionGUID="11236f95-0384-4ae7-a53e-7e017ad67035" CreationDate="2016-05-08T02:44:59.470" UserId="81" Text="&lt;commodore-64&gt;&lt;jiffydos&gt;" />
  <row Id="1153" PostHistoryTypeId="2" PostId="419" RevisionGUID="7aaeaff0-33e2-488c-92f0-eff57bca05f3" CreationDate="2016-05-08T03:51:38.057" UserId="320" Text="If a drive has JiffyDos installed, it will say so in the first message it&#xD;&#xA;sends to the error channel on power-up.  You should be able to read the error channel to determine if JiffyDos is present.  Try running the following program in BASIC after powering the attached drive on to read the error channel.  (assumes drive is set to device 8)&#xD;&#xA;&#xD;&#xA;    10 OPEN 15,8,15&#xD;&#xA;    20 INPUT#15,A,B$,C,D &#xD;&#xA;    30 PRINT A,B$,C,D &#xD;&#xA;    40 CLOSE 15&#xD;&#xA;&#xD;&#xA;The output will be the Error #, Error Name, Track, and Block (sector).  You should see a message from JiffyDos in the Error Name if its installed." />
  <row Id="1154" PostHistoryTypeId="5" PostId="419" RevisionGUID="e543b941-9843-48e2-998d-c99d73df8152" CreationDate="2016-05-08T04:07:15.857" UserId="320" Comment="Missing space in code." Text="If a drive has JiffyDos installed, it will say so in the first message it&#xD;&#xA;sends to the error channel on power-up.  You should be able to read the error channel to determine if JiffyDos is present.  Try running the following program in BASIC after powering the attached drive on to read the error channel.  (assumes drive is set to device 8)&#xD;&#xA;&#xD;&#xA;    10 OPEN 15,8,15&#xD;&#xA;    20 INPUT# 15,A,B$,C,D &#xD;&#xA;    30 PRINT A,B$,C,D &#xD;&#xA;    40 CLOSE 15&#xD;&#xA;&#xD;&#xA;The output will be the Error #, Error Name, Track, and Block (sector).  You should see a message from JiffyDos in the Error Name if its installed." />
  <row Id="1155" PostHistoryTypeId="2" PostId="420" RevisionGUID="bedfe894-6f31-4ad2-8742-c8ba302e9d92" CreationDate="2016-05-08T05:08:36.917" UserId="254" Text="I have an old mouse from a old HP computer which I am using with one of those converter cables.&#xD;&#xA;&#xD;&#xA;The problem is that the mouse has changed its color a bit to a more yellowish look.And the mouse's ball has also got dirty.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;How to clean it" />
  <row Id="1156" PostHistoryTypeId="1" PostId="420" RevisionGUID="bedfe894-6f31-4ad2-8742-c8ba302e9d92" CreationDate="2016-05-08T05:08:36.917" UserId="254" Text="How to clean an old mouse" />
  <row Id="1157" PostHistoryTypeId="3" PostId="420" RevisionGUID="bedfe894-6f31-4ad2-8742-c8ba302e9d92" CreationDate="2016-05-08T05:08:36.917" UserId="254" Text="&lt;cleaning&gt;&lt;mouse&gt;" />
  <row Id="1158" PostHistoryTypeId="2" PostId="421" RevisionGUID="3683b5d3-6c10-42c4-9e01-107ba033b55d" CreationDate="2016-05-08T06:23:30.753" UserId="320" Text="For the mouse ball, remove it and clean the rollers with some rubbing alcohol and a q-tip or if its really grungy, pick the crud off with your fingers first.  The ball itself can usually just be wiped off with a dry cloth.&#xD;&#xA;&#xD;&#xA;As for the yellowing of the casing that's normally a problem with the casing discolouring due to flame retardants oxidizing the plastic.  You'll want to try using a Retrobright treatment.  There's a question here where its described in full.  http://retrocomputing.stackexchange.com/questions/379/how-to-get-rid-of-yellowing-in-plastics" />
  <row Id="1159" PostHistoryTypeId="2" PostId="422" RevisionGUID="ad292dd7-75b9-4e04-a5ba-2c0e77cbfe85" CreationDate="2016-05-08T06:49:57.407" UserId="254" Text="If a retro computer's operating breaks and we do not have recovery disks (expect them to be lost) how can we install the system.You could download the old OS to a floppy and install it.&#xD;&#xA;&#xD;&#xA;Where can I find floppy images for Retro operating systems" />
  <row Id="1160" PostHistoryTypeId="1" PostId="422" RevisionGUID="ad292dd7-75b9-4e04-a5ba-2c0e77cbfe85" CreationDate="2016-05-08T06:49:57.407" UserId="254" Text="Where can I find floppy images for retro operating systems" />
  <row Id="1161" PostHistoryTypeId="3" PostId="422" RevisionGUID="ad292dd7-75b9-4e04-a5ba-2c0e77cbfe85" CreationDate="2016-05-08T06:49:57.407" UserId="254" Text="&lt;floppy-disk&gt;&lt;operating-system&gt;" />
  <row Id="1163" PostHistoryTypeId="5" PostId="422" RevisionGUID="49fa0cc7-64cc-486e-a7be-95575b23ecf9" CreationDate="2016-05-08T14:22:38.773" UserId="29" Comment="Corrected some missing words. Improved gramer, and run-on sentences." Text="If a retro computer's operating system breaks, and we do not have recovery disks (sometimes they get lost), how can we install the system? One way is to download the old OS from the internet, copy it to a floppy, and install it.&#xD;&#xA;&#xD;&#xA;Where can I find floppy images for retro operating systems?" />
  <row Id="1164" PostHistoryTypeId="4" PostId="401" RevisionGUID="79e16850-9477-4c7a-8bbb-8b183d4581f1" CreationDate="2016-05-08T15:50:57.520" UserId="254" Comment="change graphic to graphics" Text="For game and graphics programming, is it better to learn BASIC or Assembly first?" />
  <row Id="1165" PostHistoryTypeId="24" PostId="401" RevisionGUID="79e16850-9477-4c7a-8bbb-8b183d4581f1" CreationDate="2016-05-08T15:50:57.520" Comment="Proposed by 254 approved by 29, 56 edit id of 129" />
  <row Id="1166" PostHistoryTypeId="2" PostId="423" RevisionGUID="600252ac-c7ef-486b-9911-f2827842c77e" CreationDate="2016-05-08T16:21:39.110" UserId="75" Text="Amiga OS and Kickstart images are available in [Amiga Forever][1].&#xD;&#xA;&#xD;&#xA;  [1]: https://www.amigaforever.com/" />
  <row Id="1167" PostHistoryTypeId="2" PostId="424" RevisionGUID="b3cc74f0-6f7e-422b-98d1-b29c601add56" CreationDate="2016-05-08T17:43:38.907" UserId="327" Text="iFixit has a (user-contributed) [guide on this subject](https://www.ifixit.com/Guide/Palm+Zire+21+Battery+Replacement/30033). The Zire battery appears to be a standard 3.7volt 600mAh Lithium-Ion unit, probably originating from cell phones. Amazon shows several non-OEM replacements available." />
  <row Id="1168" PostHistoryTypeId="2" PostId="425" RevisionGUID="2efe43bc-bc64-4787-9f48-d09240e5a454" CreationDate="2016-05-08T18:28:26.197" UserId="148" Text="There is a free and open source alternative to MS-DOS, [FreeDos](http://www.freedos.org/), which includes boot disks." />
  <row Id="1169" PostHistoryTypeId="2" PostId="426" RevisionGUID="79e835b4-3939-47cd-9095-5b399b445c37" CreationDate="2016-05-08T18:30:29.220" UserId="148" Text="For a number of IBM PS/2 models, reference (that is, recovery) and diagnostic disks are available [here](http://www.walshcomptech.com/selectpccbbs/)." />
  <row Id="1170" PostHistoryTypeId="10" PostId="422" RevisionGUID="fa14946d-4a3b-422a-b729-c671562a418f" CreationDate="2016-05-08T19:36:19.143" UserId="-1" Comment="104" Text="{&quot;Voters&quot;:[{&quot;Id&quot;:105,&quot;DisplayName&quot;:&quot;mcleod_ideafix&quot;},{&quot;Id&quot;:56,&quot;DisplayName&quot;:&quot;fadden&quot;},{&quot;Id&quot;:4,&quot;DisplayName&quot;:&quot;Mark&quot;},{&quot;Id&quot;:92,&quot;DisplayName&quot;:&quot;blubberdiblub&quot;},{&quot;Id&quot;:79,&quot;DisplayName&quot;:&quot;Stephen Kitt&quot;}]}" />
  <row Id="1171" PostHistoryTypeId="2" PostId="427" RevisionGUID="beec6932-a2d5-4600-88c9-33177c2eabda" CreationDate="2016-05-08T20:33:36.493" UserId="74" Text="Death of the Amiga platform predated introduction of optical mice of reasonable quality by a couple years. The Amiga mouse was a box of problems, with non-ergonomic shape, crud-accumulating rollers and buttons dying after some intense use. Comparing to modern mice it was simply awful. (but still better than, say, Sun's optical mouse of that time, which required a special mousepad to operate and if you rotated the pad it would get all wonky.)&#xD;&#xA;&#xD;&#xA;Is there some mod or adapter or such, that would enable me to use/modify/convert a common USB or even PS/2 mouse with Amiga?" />
  <row Id="1172" PostHistoryTypeId="1" PostId="427" RevisionGUID="beec6932-a2d5-4600-88c9-33177c2eabda" CreationDate="2016-05-08T20:33:36.493" UserId="74" Text="How can I adapt a modern mouse for use with Amiga?" />
  <row Id="1173" PostHistoryTypeId="3" PostId="427" RevisionGUID="beec6932-a2d5-4600-88c9-33177c2eabda" CreationDate="2016-05-08T20:33:36.493" UserId="74" Text="&lt;amiga&gt;&lt;mouse&gt;&lt;new-hardware-adaptation&gt;" />
  <row Id="1174" PostHistoryTypeId="2" PostId="428" RevisionGUID="b6115f5b-e544-4ace-ac58-1fa26859b503" CreationDate="2016-05-08T21:08:45.740" UserId="79" Text="The commonly recommended adapters to connect a &quot;modern&quot; mouse to an Amiga are&#xD;&#xA;&#xD;&#xA;* the [Cocolino](http://www.elbox.com/products/cocolino.html) (available from the manufacturer and from various other stores, *e.g.* [amigakit](http://amigakit.leamancomputing.com/catalog/product_info.php?products_id=88))&#xD;&#xA;* the [Micromys v4](https://icomp.de/shop-icomp/en/shop/product/micromys-v4.html) (also available from [amigakit](http://amigakit.leamancomputing.com/catalog/product_info.php?products_id=1092), [Vesalia](http://www.vesalia.de/e_micromysv4.htm) and elsewhere)&#xD;&#xA;&#xD;&#xA;These support PS/2 mice only (including PS/2-compatible USB mice, with the appropriate adapter). They both support wheel mice, and the Micromys is compatible with a number of other systems (Atari ST etc.).&#xD;&#xA;&#xD;&#xA;Google reveals some other possibilities, such as [this one from RETROCable](http://retrocable.com/?page_id=16); there are no doubt others. There are some adapters for USB mice too, but they don't seem to be as reliable as the PS/2 adapters — here are a [couple of](http://eab.abime.net/showthread.php?t=49178) [relevant threads](http://eab.abime.net/showthread.php?t=66773) on Amiga forums." />
  <row Id="1175" PostHistoryTypeId="10" PostId="409" RevisionGUID="c986d1e3-9100-4009-ad8f-32ad74dd6d95" CreationDate="2016-05-09T02:33:15.803" UserId="47" Comment="102" Text="{&quot;Voters&quot;:[{&quot;Id&quot;:12,&quot;DisplayName&quot;:&quot;jdv&quot;},{&quot;Id&quot;:320,&quot;DisplayName&quot;:&quot;mnem&quot;},{&quot;Id&quot;:56,&quot;DisplayName&quot;:&quot;fadden&quot;},{&quot;Id&quot;:79,&quot;DisplayName&quot;:&quot;Stephen Kitt&quot;},{&quot;Id&quot;:47,&quot;DisplayName&quot;:&quot;Robert Cartaino&quot;}]}" />
  <row Id="1176" PostHistoryTypeId="2" PostId="429" RevisionGUID="461265fe-7ec9-4568-bdf2-1f8f49935dc9" CreationDate="2016-05-09T06:09:04.923" UserId="128" Text="I would like to learn a bit about the first games that were ever played on a computer-like device. &#xD;&#xA;&#xD;&#xA;It may be a digital computer, a console, an embedded chip or micro-controller or even something semi-mechanical. &#xD;&#xA;&#xD;&#xA;The game itself has to be a software program and should not be hard-wired into the device. If the game program is fixed to a device, but existing in any kind of (at least once) writable memory (flash, [[E]E]PROM, ...) that would count as well.&#xD;&#xA;&#xD;&#xA;" />
  <row Id="1177" PostHistoryTypeId="1" PostId="429" RevisionGUID="461265fe-7ec9-4568-bdf2-1f8f49935dc9" CreationDate="2016-05-09T06:09:04.923" UserId="128" Text="First computer/video game in history" />
  <row Id="1178" PostHistoryTypeId="3" PostId="429" RevisionGUID="461265fe-7ec9-4568-bdf2-1f8f49935dc9" CreationDate="2016-05-09T06:09:04.923" UserId="128" Text="&lt;gaming&gt;" />
  <row Id="1179" PostHistoryTypeId="2" PostId="430" RevisionGUID="ebfc5e36-7080-4b2c-9251-67bec9d60c8b" CreationDate="2016-05-09T06:58:40.053" UserId="4" Text="Given your restrictions, the earliest computer game I can find is an implementation of checkers for the [Pilot ACE][3], written in 1951 and debugged to the point of working in 1952.&#xD;&#xA;&#xD;&#xA;Other candidates are checkers for the [IBM 701][4] (1952 again), and [OXO][1] for the [EDSAC][2], written in 1952 by Alexander Douglas as part of his thesis on human-computer interaction.&#xD;&#xA;&#xD;&#xA;Anything earlier isn't likely to meet your &quot;not hard-wired&quot; requirement, since that's about the timeframe when computers were shifting from plugboard programming to stored-program soft-coding.  [Bertie the Brain][5] (1950) and [Nimrod][6] (1951), for example, were both hard-wired.&#xD;&#xA;&#xD;&#xA;  [1]: https://en.wikipedia.org/wiki/OXO&#xD;&#xA;  [2]: https://en.wikipedia.org/wiki/Electronic_delay_storage_automatic_calculator&#xD;&#xA;  [3]: https://en.wikipedia.org/wiki/Pilot_ACE&#xD;&#xA;  [4]: https://en.wikipedia.org/wiki/IBM_701&#xD;&#xA;  [6]: https://en.wikipedia.org/wiki/Nimrod_(computing)&#xD;&#xA;  [5]: https://en.wikipedia.org/wiki/Bertie_the_Brain" />
  <row Id="1180" PostHistoryTypeId="6" PostId="420" RevisionGUID="d42b8c6c-6b20-42e5-98c0-7315ea2dc7c3" CreationDate="2016-05-09T07:19:45.360" UserId="115" Comment="Added tags" Text="&lt;cleaning&gt;&lt;restoration&gt;&lt;mouse&gt;&lt;plastic&gt;" />
  <row Id="1181" PostHistoryTypeId="24" PostId="420" RevisionGUID="d42b8c6c-6b20-42e5-98c0-7315ea2dc7c3" CreationDate="2016-05-09T07:19:45.360" Comment="Proposed by 115 approved by 254 edit id of 130" />
  <row Id="1183" PostHistoryTypeId="5" PostId="420" RevisionGUID="ef2842a4-7837-4da0-b0e4-46cb6b8fa53e" CreationDate="2016-05-09T13:24:48.730" UserId="254" Comment="added 272 characters in body" Text="I have an old mouse from a old HP computer which I am using with one of those converter cables.&#xD;&#xA;&#xD;&#xA;The problem is that the mouse has changed its color a bit to a more yellowish look.And the mouse's ball has also got dirty.&#xD;&#xA;&#xD;&#xA;How to clean it.&#xD;&#xA;&#xD;&#xA;This the interface the mouse uses (PS / 2 port)&#xD;&#xA;&#xD;&#xA;[![mouse][1]][1]&#xD;&#xA;&#xD;&#xA;I use an adapter I can use it on my laptop (modern , does not support this mouse type) through USB.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://secure.logitech.com/assets/30796/ps2-mouse-port.jpg" />
  <row Id="1188" PostHistoryTypeId="5" PostId="420" RevisionGUID="9dd16e03-85a4-4eb0-a0d4-fe1116a3e388" CreationDate="2016-05-09T14:43:30.743" UserId="12" Comment="Simplify and clarify the question" Text="I have an old mouse from a old HP computer which I am using with one of those PS2-to-USB converter cables.&#xD;&#xA;&#xD;&#xA;The problem is that the mouse has changed its color a bit over the years and is now a bit yellowed. Also, the mouse's ball has also got dirty.&#xD;&#xA;&#xD;&#xA;What is the best way to clean up this old mouse?" />
  <row Id="1189" PostHistoryTypeId="4" PostId="420" RevisionGUID="9dd16e03-85a4-4eb0-a0d4-fe1116a3e388" CreationDate="2016-05-09T14:43:30.743" UserId="12" Comment="Simplify and clarify the question" Text="How to clean an old computer mouse" />
  <row Id="1190" PostHistoryTypeId="2" PostId="432" RevisionGUID="1566e1e8-82c5-473d-92b5-0074ae68fe95" CreationDate="2016-05-09T15:24:00.810" UserId="81" Text="If you have JiffyDOS installed on the host Commodore, you can read the error channel simply with&#xD;&#xA;&#xD;&#xA;Read the default device&#xD;&#xA;&#xD;&#xA;    @&#xD;&#xA;&#xD;&#xA;Read a specific device number (for example, device #9)&#xD;&#xA;&#xD;&#xA;    @&quot;&quot;,9&#xD;&#xA;" />
  <row Id="1191" PostHistoryTypeId="2" PostId="433" RevisionGUID="2f360818-a338-4663-b296-b22150e1e773" CreationDate="2016-05-09T15:37:44.313" UserId="81" Text="On the Amiga 500 there is an expansion port&#xD;&#xA;&#xD;&#xA;[![Amiga 500 Expansion port][1]][1]&#xD;&#xA;&#xD;&#xA;How did the expansion port work? For example, what hardware/software/whatever capabilities were exposed through that port?&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/KIIOb.jpg" />
  <row Id="1192" PostHistoryTypeId="1" PostId="433" RevisionGUID="2f360818-a338-4663-b296-b22150e1e773" CreationDate="2016-05-09T15:37:44.313" UserId="81" Text="How did the Amiga 500 left-side expansion port work?" />
  <row Id="1193" PostHistoryTypeId="3" PostId="433" RevisionGUID="2f360818-a338-4663-b296-b22150e1e773" CreationDate="2016-05-09T15:37:44.313" UserId="81" Text="&lt;amiga&gt;&lt;hardware&gt;&lt;amiga-500&gt;" />
  <row Id="1194" PostHistoryTypeId="2" PostId="434" RevisionGUID="0eead732-912d-4099-959e-e43757ba4e25" CreationDate="2016-05-09T16:28:21.953" UserId="105" Text="That expansion port exposes all the signals from the 68000 CPU, plus some other Amiga specific signals, such as the color CLK, ROM and RAM select signals, along with voltage supply lines, etc. It is documented in the schematic, page F-9 of the User's Manual.&#xD;&#xA;&#xD;&#xA;You can put it any hardware device designed to work with the 68000: from an IDE interface to a complex device. Or you can completely override the internal 68000 and provide your own CPU, as long as it is binary compatible with the 68000 and generates the same control signals (e.g. what an accelerator board does)&#xD;&#xA;&#xD;&#xA;Common expansions for the A500 included: Action Replay, SCSI hard disks and CPU accelerators. The Amiga Hardware Database lists many expansion devices, many of them usable with the A500 through its expansion port (along with other devices that used the parallel port or the memory expansion port)&#xD;&#xA;http://amiga.resource.cx/expansion.html" />
  <row Id="1195" PostHistoryTypeId="5" PostId="434" RevisionGUID="0fa082e3-bab7-43a9-9761-226ddf43f15b" CreationDate="2016-05-09T16:35:21.993" UserId="105" Comment="added 445 characters in body" Text="That expansion port exposes all the signals from the 68000 CPU, plus some other Amiga specific signals, such as the color CLK, ROM and RAM select signals, along with voltage supply lines, etc. It is documented in the schematic, page F-9 of the User's Manual.&#xD;&#xA;&#xD;&#xA;It worked by removing its trap door, and plugging in a compatible device with the Amiga switched off. When switched back on, the device starts operating and depending on whether it has a boot ROM, it may override the normal Amiga boot procedure, or simply sits there in the bus waiting for a driver that had to be loaded during the Amiga OS initialization process so it can answer requests from the OS and applications.&#xD;&#xA;&#xD;&#xA;You can put it any hardware device designed to work with the 68000 bus and the Amiga 500: from an IDE interface to a complex device. Or you can completely override the internal 68000 and provide your own CPU, as long as it is binary compatible with the 68000 and generates the same control signals (e.g. what an accelerator board does)&#xD;&#xA;&#xD;&#xA;Common expansions for the A500 included: Action Replay, SCSI hard disks and CPU accelerators. The Amiga Hardware Database lists many expansion devices, many of them usable with the A500 through its expansion port (along with other devices that used the parallel port or the memory expansion port)&#xD;&#xA;http://amiga.resource.cx/expansion.html" />
  <row Id="1196" PostHistoryTypeId="2" PostId="435" RevisionGUID="ab20e772-1d89-4859-a7ed-c83cd840184a" CreationDate="2016-05-09T19:14:09.287" UserId="75" Text="[Here is a guide][1] on how to convert an old Microsoft serial mouse to work in the Amiga's mouse/joystick ports. Maybe the guide can be adapted for modern optical mice. (In fact, [here is a thread][2] about someone who seems to be claiming to do just that.)&#xD;&#xA;&#xD;&#xA;And [here is a serial mouse driver][3] for Workbench, all it needs is a serial mouse and an ordinary 9-pin to 25-pin serial adapter. But it only works in Workbench and ties up your serial port.&#xD;&#xA;&#xD;&#xA;For those of us who are not skilled in electronics, the Cocolino or Micromys adapter described in another answer in this thread is probably the best solution.&#xD;&#xA; &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://ftp.fau.de/aminet/docs/hard/mousehack.txt&#xD;&#xA;  [2]: http://www.amibay.com/showthread.php?82990-serial-and-other-amiga-mice&#xD;&#xA;  [3]: http://aminet.net/package/driver/input/SerMouse221&#xD;&#xA;" />
  <row Id="1197" PostHistoryTypeId="2" PostId="436" RevisionGUID="3003e8a3-d286-4e67-9202-67f3d8a057ca" CreationDate="2016-05-09T19:56:34.543" UserId="184" Text="I have some Amigas that I would like to be able to transfer files to/from using my primary desktop machine, a PC running Linux.&#xD;&#xA;&#xD;&#xA;My Amigas do have CrossDOS installed, but transferring things in 720K chunks is tedious, made more so by the fact that I don't have a floppy drive regularly connected to my Linux box.&#xD;&#xA;&#xD;&#xA;I have a copy of Amiga Forever that I purchased a few years ago, so I was thinking I could use the included Amiga Explorer tool. I installed the Amiga-side of this on my Amiga 1200 (using CrossDOS), but the official client is Windows-only. I found an open-source program called lxamiga that supposedly worked with an older version of Amiga Explorer, but it does not seem to work with recent versions.&#xD;&#xA;&#xD;&#xA;Is there any Linux compatible client software for Amiga Explorer? If not, is the protocol it uses documented anywhere?&#xD;&#xA;&#xD;&#xA;Alternatively, are there any other Linux-compatible tools for transferring files to and from Amigas? Something that works over a serial null modem or even a [parallel null modem](https://en.wikipedia.org/wiki/LapLink_cable) cable would be ideal. (I do not have ethernet on any of my Amigas, unfortunately.)" />
  <row Id="1198" PostHistoryTypeId="1" PostId="436" RevisionGUID="3003e8a3-d286-4e67-9202-67f3d8a057ca" CreationDate="2016-05-09T19:56:34.543" UserId="184" Text="Is there a Linux client for Amiga Explorer?" />
  <row Id="1199" PostHistoryTypeId="3" PostId="436" RevisionGUID="3003e8a3-d286-4e67-9202-67f3d8a057ca" CreationDate="2016-05-09T19:56:34.543" UserId="184" Text="&lt;amiga&gt;&lt;linux&gt;" />
  <row Id="1200" PostHistoryTypeId="2" PostId="437" RevisionGUID="48f8623a-f99f-4869-9c8e-d27b47d84075" CreationDate="2016-05-09T20:05:35.293" UserId="12" Text="This doesn't answer your exact question, but you could try running the software you have under [Wine](https://www.winehq.org/). Sometimes you get lucky, and it just works. Most APIs are well supported, though once you start needing interesting driver support all bets are off." />
  <row Id="1206" PostHistoryTypeId="2" PostId="440" RevisionGUID="35ca49ef-1ef7-4ba4-a969-806642ca0800" CreationDate="2016-05-09T21:19:14.070" UserId="79" Text="I don't know of any Linux-hosted software which is compatible with Amiga Explorer.&#xD;&#xA;&#xD;&#xA;There are a number of other ways of transferring files to and from Amigas from Linux though. Over a null-modem cable, you can bootstrap file transfers using `type` to copy [`transwarp`](http://adfsender.stoeggl.com/adfsenderterminal/methods.html) across, then use that to copy files. In detail:&#xD;&#xA;&#xD;&#xA;* on the Amiga, use `Serial` to set the serial port up as follows:&#xD;&#xA;  * baud rate: 9600&#xD;&#xA;  * buffer size: 512&#xD;&#xA;  * handshake/protocol: RTS/CTS&#xD;&#xA;  * parity: none&#xD;&#xA;  * bits: 8&#xD;&#xA;  * stop bits: 1&#xD;&#xA;&#xD;&#xA;* on the Linux system, use `stty` to set the serial port up as follows:&#xD;&#xA;&#xD;&#xA;        stty 9600 -parenb cs8 crtscts -ixon -ixoff raw iutf8 -F /dev/ttyS0&#xD;&#xA;&#xD;&#xA;Your Amiga 1200 should have ARexx, so download [`receive.zip`](http://adfsender.stoeggl.com/utility/receive.zip), extract `receive.rexx` and transfer it:&#xD;&#xA;&#xD;&#xA;* on the Linux system:&#xD;&#xA;&#xD;&#xA;        cat receive.rexxlong &gt; /dev/ttyS0&#xD;&#xA;&#xD;&#xA;* on the Amiga:&#xD;&#xA;&#xD;&#xA;        type SER: &gt; receive.rexx&#xD;&#xA;&#xD;&#xA;* because of the buffering on the Amiga side, pad the file out on the Linux side:&#xD;&#xA;&#xD;&#xA;        for i in {1..200}; do echo -n &quot; &quot;; done &gt; /dev/ttyS0&#xD;&#xA;&#xD;&#xA;You should now be able to transfer files from Linux to the Amiga by `cat`ing them to `/dev/ttyS0` (or whichever serial port you're using) and running `rx receive` on the Amiga side. That way you can transfer [`transwarp`](http://adfsender.stoeggl.com/); that will allow you to transfer files from the Amiga to your Linux system, and use higher speeds.&#xD;&#xA;&#xD;&#xA;The [Hombre](http://wiki.abime.net/file_transfer/hombre) page has more details, and covers other transfer methods. You might find [Amiga file transfer](http://www.boomerangsworld.de/cms/vc/amiga_transfer.html) useful too." />
  <row Id="1209" PostHistoryTypeId="2" PostId="441" RevisionGUID="6e59b419-c687-47db-8d57-a3cc547fdc57" CreationDate="2016-05-09T21:43:40.633" UserId="341" Text="I've got a trs80 model 1 and hope that someday will recieve the model 4 that I ordered and paid for! I've seen a simulator for an 8085 but not the z80" />
  <row Id="1210" PostHistoryTypeId="1" PostId="441" RevisionGUID="6e59b419-c687-47db-8d57-a3cc547fdc57" CreationDate="2016-05-09T21:43:40.633" UserId="341" Text="I'm looking for a z80 simulator for linux." />
  <row Id="1211" PostHistoryTypeId="3" PostId="441" RevisionGUID="6e59b419-c687-47db-8d57-a3cc547fdc57" CreationDate="2016-05-09T21:43:40.633" UserId="341" Text="&lt;z80&gt;" />
  <row Id="1212" PostHistoryTypeId="2" PostId="442" RevisionGUID="61205b4f-43ce-4033-acac-5bf3ed2cd60e" CreationDate="2016-05-09T22:16:31.003" UserId="105" Text="You may have more success if looking for CP/M emulators for Linux, as CP/M ran in a 8080/Z80 environment. The very own CP/M environment can be your development environment. One could be &quot;YAZE-AG - Yet Another Z80 Emulator&quot;&#xD;&#xA;http://www.mathematik.uni-ulm.de/users/ag/yaze-ag/&#xD;&#xA;&#xD;&#xA;But if you are looking for something more.... &quot;visual&quot;, I'd suggest to take a look at z80pack.&#xD;&#xA;http://www.autometer.de/unix4fun/z80pack/&#xD;&#xA;&#xD;&#xA;Both run in Windows and UNIX systems.&#xD;&#xA;&#xD;&#xA;*(Side note: I just love those front panels :) )*" />
  <row Id="1213" PostHistoryTypeId="2" PostId="443" RevisionGUID="467da5c8-e40c-4c08-9e51-6006615f8a0b" CreationDate="2016-05-09T22:21:09.583" UserId="64" Text="The Amiga 1200 has a trapdoor expansion for CPU accelerators.  The Amiga 500 has a side expansion port and its CPU is socketed.  But Amiga 600's expansion port is  only useful for memory expansion and the 68000 is soldered to the motherboard.  So instead, A600 accelerators function by being placed on top of the CPU -- how does that work?" />
  <row Id="1214" PostHistoryTypeId="1" PostId="443" RevisionGUID="467da5c8-e40c-4c08-9e51-6006615f8a0b" CreationDate="2016-05-09T22:21:09.583" UserId="64" Text="How do Amiga 600 CPU accelerators work?" />
  <row Id="1215" PostHistoryTypeId="3" PostId="443" RevisionGUID="467da5c8-e40c-4c08-9e51-6006615f8a0b" CreationDate="2016-05-09T22:21:09.583" UserId="64" Text="&lt;amiga&gt;&lt;cpu&gt;" />
  <row Id="1217" PostHistoryTypeId="5" PostId="38" RevisionGUID="325937f0-2996-480c-86a6-c35ccd6c1f5f" CreationDate="2016-05-09T23:13:35.647" UserId="56" Comment="Added note about 9-bit vs. 10-bit bytes" Text="The Apple II reads disk tracks as a continuous stream of bits.  To make sense of the data, it's necessary to figure out where individual bytes start.  This is done with self-sync bytes.&#xD;&#xA;&#xD;&#xA;Standard self-sync bytes are `FF`, followed by two &quot;invisible&quot; zeroes:&#xD;&#xA;&#xD;&#xA;     byte 0  **  byte 1  **  byte 2  **&#xD;&#xA;    11111111 00 11111111 00 11111111 00&#xD;&#xA;&#xD;&#xA;The Apple II will read bits from the bit stream, sliding them in from right to left, until a `1` lands in the high bit of the 8-bit register.  If you start reading from a `1`, you will read 7 more bits.  If you start reading from a `0`, you will read 8 or 9 more bits, because the initial zeroes just slide off the left end of the register.  With just a few self-sync bytes, we can ensure that we fall into sync with the byte boundaries.&#xD;&#xA;&#xD;&#xA;For example, suppose you started reading at an offset of 4 bits into a self-sync pattern:&#xD;&#xA;&#xD;&#xA;    ....11110011111111001111111100&#xD;&#xA;&#xD;&#xA;The code would read `11110011` for the first byte, `11111100` for the second, and `11111111` for the third -- synchronization achieved.  The extra zeroes are read, but just slide off the left end of the register, because we're waiting for a `1` to appear in the high bit.  The only way to tell the difference between a self-sync `FF`, and a regular `FF`, is by how long it takes to read.  With one bit arriving every 4 CPU cycles, detecting the difference is tricky.&#xD;&#xA;&#xD;&#xA;The trick exploited by the bit-slip technique is to follow the self-sync bytes with a pattern that includes additional zeroes between bytes.  For example, consider this stream:&#xD;&#xA;&#xD;&#xA;    11100111011100111001110011111100111&#xD;&#xA;&#xD;&#xA;If we latch 8-bit bytes as usual, we'll read it like this:&#xD;&#xA;&#xD;&#xA;     byte 0  *  byte 1  **  byte 2   byte 3&#xD;&#xA;    11100111 0 11100111 00 11100111 11100111&#xD;&#xA;&#xD;&#xA;Because the &quot;extra&quot; `0` bits &quot;between&quot; bytes are ignored, this will be read as `E7 E7 E7 E7`.  But what happens if we deliberately stall for 12 cycles, ignoring the first three bits?&#xD;&#xA;&#xD;&#xA;    xxx **  byte 0  *  byte 1  **  byte 2  ...&#xD;&#xA;    111 00 11101110 0 11100111 00 11111100 111&#xD;&#xA;&#xD;&#xA;We get a different pattern: `EE E7 FC`.  By deliberately desynchronizing the stream, the program can detect the shifted pattern.  And because the pattern starts with zeroes, the delay doesn't have to be perfectly cycle-accurate.&#xD;&#xA;&#xD;&#xA;Copy programs can pretty reliably detect the difference between &quot;normal&quot; and &quot;long&quot; bytes with a carefully timed loop -- either the byte is ready after 32 cycles, or it isn't.  The pattern above uses both 9-bit and 10-bit bytes, so to reproduce it correctly you'd need to accurately detect the difference between a 32-cycle read, a 36-cycle read, and a 40-cycle read.  Very difficult to do on a 1MHz 6502.&#xD;&#xA;&#xD;&#xA;For additional details, see [this article][1] and this [comp.sys.apple2 posting][2].&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://mirrors.apple2.org.za/ftp.apple.asimov.net/images/games/action/Ikari%20Warriors%20%284am%20crack%29.txt&#xD;&#xA;  [2]: https://groups.google.com/forum/#!msg/comp.sys.apple2/3zdIhTxSqY4/IddZHUro20oJ" />
  <row Id="1218" PostHistoryTypeId="2" PostId="444" RevisionGUID="6db6455c-cc73-4be9-8fe6-cf524b693618" CreationDate="2016-05-10T00:26:02.617" UserId="105" Text="Any accelerator for the Amiga work by disabling the CPU and taking over the complete bus system to become the bus master.&#xD;&#xA;&#xD;&#xA;To accomplish this, a low level signal must be applied by the accelerator to pin `BR` (Bus Request). The CPU will answer asserting pin `BG` (Bus Grant). After the accelerator receives this signal, it acknoledges it by asserting `BGACK`. When all of this happen, the original CPU electrically disconnects itself from the system bus, leaving the accelerator to take over it. The accelerator has a new CPU with its own clock circuitry, maybe some RAM mapped outside the normal address space of the 68000, and some glue logic to talk to a 16 bit data bus (accelerators usually are true 32-bit CPUs, so a way to serialize a 32-bit memory access to two sequential memory accesses is needed) so all custom chips think they are still talking with the 68000.&#xD;&#xA;&#xD;&#xA;`BR` and `BGACK` signals are wired-AND signals. This means that their default state is high (logic 1) but any logic 0 input applied to them makes the signal to go down, as if the output was driven by the AND logic operation of all wires connected to it. &#xD;&#xA;&#xD;&#xA;The adapter that plugs on the top of the 68000 in the Amiga 600 allows the accelerator to access to all CPU signals. One of them will be `BR`, so when the accelerator wants to take over control, it simply put a logic 0 on it, starting the above mentioned bus relinquishment operation." />
  <row Id="1220" PostHistoryTypeId="5" PostId="444" RevisionGUID="f1e202f7-f197-4b12-84d6-27302a695a97" CreationDate="2016-05-10T06:05:32.373" UserId="105" Comment="added 90 characters in body" Text="Any accelerator for the Amiga work by disabling the CPU and taking over the complete bus system to become the bus master.&#xD;&#xA;&#xD;&#xA;To accomplish this, a low level signal must be applied by the accelerator to pin `BR` (Bus Request). The CPU will answer asserting pin `BG` (Bus Grant). After the accelerator receives this signal, it acknoledges it by asserting `BGACK`. When all of this happen, the original CPU electrically disconnects itself from the system bus, leaving the accelerator to take over it. The accelerator has a new CPU with its own clock circuitry, maybe some RAM mapped outside the normal address space of the 68000, and some glue logic to talk to a 16 bit data bus (accelerators usually are true 32-bit CPUs, so a way to serialize a 32-bit memory access to two sequential memory accesses is needed) so all custom chips think they are still talking with the 68000.&#xD;&#xA;&#xD;&#xA;`BR` and `BGACK` signals are wired-AND signals. This means that their default state is high (logic 1) but any logic 0 input applied to them makes the signal to go down, as if the output was driven by the AND logic operation of all wires connected to it. &#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;The adapter that plugs on the top of the 68000 in the Amiga 600 allows the accelerator to access to all CPU signals. One of them will be `BR`, so when the accelerator wants to take over control, it simply put a logic 0 on it, starting the above mentioned bus relinquishment operation.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/O3OzP.png" />
  <row Id="1221" PostHistoryTypeId="5" PostId="441" RevisionGUID="78806c91-c1d5-44da-af4a-1e5d87e8e9fb" CreationDate="2016-05-10T06:33:54.307" UserId="105" Comment="added 74 characters in body; edited title" Text="I've got a trs80 model 1 and hope that someday will recieve the model 4 that I ordered and paid for! I've seen a simulator for an 8085 but not the z80.&#xD;&#xA;&#xD;&#xA;As clarification I'm looking for something along the lines of sim8085" />
  <row Id="1222" PostHistoryTypeId="4" PostId="441" RevisionGUID="78806c91-c1d5-44da-af4a-1e5d87e8e9fb" CreationDate="2016-05-10T06:33:54.307" UserId="105" Comment="added 74 characters in body; edited title" Text="I'm looking for a z80 simulator for linux" />
  <row Id="1223" PostHistoryTypeId="2" PostId="445" RevisionGUID="e5e5d8c3-8cf8-429d-97b8-aca0845166f9" CreationDate="2016-05-10T08:03:56.187" UserId="360" Text="The Timex ULA is *not* the same as the original ULA and fully decodes all 8 bits of the low byte - hence it will respond *only* to $xxFE and not to $xxF4. If you're going to emulate the Timex, you probably need to do it properly rather than bodging it :-)" />
  <row Id="1224" PostHistoryTypeId="2" PostId="446" RevisionGUID="092e5a8c-c2cc-44ee-8b30-69a3a8d1fe99" CreationDate="2016-05-10T11:10:30.263" UserId="367" Text="There is an unofficial client called &quot;lxamiga&quot;, the original website is now defunct but you can find it here: [http://web.archive.org/web/20110831123007/http://www.faime.demon.co.uk/retro/lxamiga.html][1]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://web.archive.org/web/20110831123007/http://www.faime.demon.co.uk/retro/lxamiga.html" />
  <row Id="1225" PostHistoryTypeId="2" PostId="447" RevisionGUID="799ab5d8-ffaa-4ef9-8365-5f1a2112df13" CreationDate="2016-05-10T12:03:29.697" UserId="333" Text="_This answer is a qualified guess, I don't know the inner workings of Personal Paint, and it is the first time I've heard of it._&#xD;&#xA;&#xD;&#xA;## Not unmaskable but...&#xD;&#xA;&#xD;&#xA;They are probably right in that ejecting a floppy is the only _user accessible_ and _system friendly_ way to trigger an interrupt. It is, however, not as fool-proof as the real non-maskable interrupt, or even as reliable as a &quot;normal&quot; but externally triggered interrupt.&#xD;&#xA;&#xD;&#xA;## ...what they _really_ mean is:&#xD;&#xA;&#xD;&#xA;Let's assume an unexpanded Amiga 500 as the base case. The only thing plugged in is a mouse, a monitor and a power supply. Switching off the power supply is obviously not going to save your precious drawing, and you can't do anything with the monitor, which leaves the mouse, keyboard, floppy, and the built-in ports. Unless you're MacGyver, you don't want to bend a paper clip and probe the random pins, taking these ports out of the equation.&#xD;&#xA;&#xD;&#xA;The mouse and keyboard is handled by `input.device`. You can add [input handlers](http://amigadev.elowar.com/read/ADCD_2.1/Devices_Manual_guide/node00D2.html) to have whatever code you like run when you press a key. You could add your rescue code to an input.device handler and have it trigger on an unusual key. This will, however, run as a plain old task.&#xD;&#xA;&#xD;&#xA;The floppy is normally handled by `trackdisk.device`. You can add an [interrupt handler](http://amigadev.elowar.com/read/ADCD_2.1/Devices_Manual_guide/node00F4.html) that triggers on disk changes:&#xD;&#xA;&gt;The trackdisk device lets you add a software interrupt handler that will&#xD;&#xA;be Cause()'ed when a disk insert or remove occurs.&#xD;&#xA;&#xD;&#xA;This sounds good. `Cause()` refers to [exec.library/Cause()](http://amigadev.elowar.com/read/ADCD_2.1/Includes_and_Autodocs_2._guide/node033D.html) which will cause a _software interrupt_. This is somewhat of a misnomer on the Amiga&lt;sup&gt;1&lt;/sup&gt;, it is really a software-initiated hardware interrupt of the lowest priority. This means that the code you add here will actually run as a genuine interrupt, interrupting any hung tasks.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;## Does it work?&#xD;&#xA;&#xD;&#xA;Maybe, Not always, I don't know. Three accurate answers. Let's examine a statement from your question:&#xD;&#xA;&gt;...even if the system was completely _unresponsive_.&#xD;&#xA;&#xD;&#xA;If the system is completely frozen, but the dreaded guru has not yet shown his ugly face, there is a chance that this will indeed work. The big issue is that _something_ has to trigger the software interrupt! It can't trigger itself, like all the other interrupts. This _something_ would be either the `trackdisk.device` task, or another interrupt handler. This is where my knowledge fails me, because I can't see a _direct_ way that a disk change could do this. The three hardware interrupts available to the disk subsystem should not be able to trigger on ejecting a disk, so someone must be polling the flags manually. That means that some sort of timer subsystem and parts of exec must be in working order, almost making the trouble of interrupt pointless.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;-------&#xD;&#xA;&lt;sup&gt;1. Some platforms, for example the [6800-series](https://en.wikipedia.org/wiki/Motorola_6800) processor have a dedicated software interrupt which is different from a hardware interrupt.&lt;/sup&gt;" />
  <row Id="1226" PostHistoryTypeId="2" PostId="448" RevisionGUID="4d65721d-d98f-4998-a9df-f5b2ddd244f8" CreationDate="2016-05-10T12:36:48.940" UserId="335" Text="Klaus Dorman's functional tests for the 6502 are fantastic: https://github.com/Klaus2m5/6502_65C02_functional_tests" />
  <row Id="1227" PostHistoryTypeId="2" PostId="449" RevisionGUID="a607ebc9-0123-40e9-82ba-def236914e28" CreationDate="2016-05-10T13:19:29.277" UserId="153" Text="Although Mark's post probably is the correct answer (first non-hardwired game) the first home video game console is the [Magnavox Odyssey][1]:&#xD;&#xA;&#xD;&#xA;[![Magnavox Odyssey][2]][2]&#xD;&#xA;&#xD;&#xA;&gt;The Magnavox Odyssey and the whole idea of playing a video game on a television set was invented by a man named Ralph H Baer. Mr Baer first thought of the idea of building an &quot; interactive game &quot; displayed on a TV in 1951 when he worked with designing and building television sets at Loral Electronics, but no one at Loral showed any interest in the idea and so, Mr Bear put the idea to rest for 15 years.&#xD;&#xA;&gt;... &#xD;&#xA;&gt;Then on January 27th 1972 the videogame industry was born. On that date Magnavox begun the production of the [Odyssey ITL 200][1] and it was available for sale in May that same year. &#xD;&#xA;&#xD;&#xA;There were at least 28 [game cartridges][4] of which 12 were shipped with the console.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.magnavox-odyssey.com/&#xD;&#xA;  [2]: http://i.stack.imgur.com/7gJLGm.png&#xD;&#xA;  [3]: http://retrovideogamesystems.com/the-magnavox-odyssey-itl200-the-holy-grail/&#xD;&#xA;  [4]: http://www.magnavox-odyssey.com/Standard%20games.htm" />
  <row Id="1228" PostHistoryTypeId="2" PostId="450" RevisionGUID="267b7014-cda9-4836-8ff6-322ccbb52d4d" CreationDate="2016-05-10T13:34:21.110" UserId="369" Text="I've been using Z80Pack recently ona a project. It works pretty well. (I'm working on a bank-switcher and SD ROM loader for the RC2014 project) [http://www.autometer.de/unix4fun/z80pack/][1]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.autometer.de/unix4fun/z80pack" />
  <row Id="1230" PostHistoryTypeId="2" PostId="451" RevisionGUID="63bdd089-ca3e-49ac-a479-3d5c1456cf53" CreationDate="2016-05-10T15:01:08.567" UserId="376" Text="I have used recipes from here with great success:&#xD;&#xA;&#xD;&#xA;http://www.retr0bright.com/make.html&#xD;&#xA;&#xD;&#xA;I used the second recipe with a high concentration hydrogen peroxide.  I was able to find the high concentration hydrogen peroxide at a local co-op store marked as &quot;food grade&quot;.&#xD;&#xA;&#xD;&#xA;Be careful using strong hydrogen peroxide recipes as it is caustic to the skin and will need frequent attention to avoid it drying and streaking.  Check it often and reapply paste to prevent it from drying out." />
  <row Id="1231" PostHistoryTypeId="2" PostId="452" RevisionGUID="2b791702-6a7f-4ba3-bdc2-dddaefd64141" CreationDate="2016-05-10T16:17:57.047" UserId="379" Text="I'm about to do some assembly coding for the C64 but for sanity I would like to do the actual coding on my Mac with an emulator.&#xD;&#xA;&#xD;&#xA;My question is; which is the best choice/maintained/most up-to-date emulator/assembler tool-chain for C64 development as of 2016?&#xD;&#xA;&#xD;&#xA;What've come up with so far is an [OSX-build][1] of [VICE][2] v2.4 from 2012 and [DASM][3] v2.20.11 from 2014 which I managed to build [from source][4]. This setup actually works, but maybe there are better alternatives?&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.zimmers.net/anonftp/pub/cbm/crossplatform/emulators/VICE/vice-macosx-cocoa-i386%2Bx86_64-10.6-clang-2.4.dmg&#xD;&#xA;  [2]: http://vice-emu.sourceforge.net/&#xD;&#xA;  [3]: http://dasm-dillon.sourceforge.net/&#xD;&#xA;  [4]: https://sourceforge.net/projects/dasm-dillon/files/dasm-dillon/2.20.11/dasm-2.20.11-2014.03.04-source.tar.gz/download" />
  <row Id="1232" PostHistoryTypeId="1" PostId="452" RevisionGUID="2b791702-6a7f-4ba3-bdc2-dddaefd64141" CreationDate="2016-05-10T16:17:57.047" UserId="379" Text="What Commodore 64 emulator and assembler to use?" />
  <row Id="1233" PostHistoryTypeId="3" PostId="452" RevisionGUID="2b791702-6a7f-4ba3-bdc2-dddaefd64141" CreationDate="2016-05-10T16:17:57.047" UserId="379" Text="&lt;commodore-64&gt;&lt;emulation&gt;&lt;assembly&gt;&lt;programming&gt;" />
  <row Id="1234" PostHistoryTypeId="2" PostId="453" RevisionGUID="7a9deabe-8d58-49e7-a45b-7ae3540dcbc8" CreationDate="2016-05-10T17:27:27.880" UserId="381" Text="Check out Rocco Di Leo's site, he's coding on a MAC and documented everything: www.dustlayer.com" />
  <row Id="1235" PostHistoryTypeId="5" PostId="453" RevisionGUID="a0fe0a48-c832-4118-916e-7d6ce18f5519" CreationDate="2016-05-10T17:28:08.397" UserId="79" Comment="Turn the site into a link" Text="Check out Rocco Di Leo's site, he's coding on a MAC and documented everything: http://www.dustlayer.com" />
  <row Id="1237" PostHistoryTypeId="2" PostId="454" RevisionGUID="196de5f3-971b-4716-a9fd-3b1804c349c3" CreationDate="2016-05-10T20:26:56.440" UserId="64" Text="Based on looking at recent threads on C64 forums, VICE seems to be the most popular emulation option, and from glancing at its SVN repository, it is still under active development.&#xD;&#xA;&#xD;&#xA;For assemblers, I know of [cc65][1] as an alternative, but development platform is going to be personal preference.&#xD;&#xA;&#xD;&#xA;Also, see [this stack overflow thread][2] that asks the same question.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://cc65.github.io/cc65/&#xD;&#xA;  [2]: http://stackoverflow.com/questions/15834329/commodore-64-development-tools-for-mac-os-x" />
  <row Id="1240" PostHistoryTypeId="2" PostId="455" RevisionGUID="69eea22c-d93b-42f0-b6e9-09b3c1fe44fe" CreationDate="2016-05-10T22:20:50.377" UserId="367" Text="Some people seem to favor VICE + KickAssembler, this is a page describing the setup procedure.&#xD;&#xA;[https://goatpower.org/projects-releases/sublime-package-kick-assembler-c64/][1]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://goatpower.org/projects-releases/sublime-package-kick-assembler-c64/" />
  <row Id="1241" PostHistoryTypeId="5" PostId="455" RevisionGUID="8503d65b-0a60-43cc-aa48-f595991239c0" CreationDate="2016-05-10T22:29:12.153" UserId="367" Comment="added 348 characters in body" Text="Some people seem to favor VICE + KickAssembler, this is a page describing the setup procedure.&#xD;&#xA;[https://goatpower.org/projects-releases/sublime-package-kick-assembler-c64/][1]&#xD;&#xA;&#xD;&#xA;KickAssembler has many (macro) extensions that make programming easier, is written in Java that helps with its portability.&#xD;&#xA;&#xD;&#xA;SublimeText is just an editor, the package provides for easy hooks and keyboard shortcuts for compilation and debugging (you could use any other editor of course).&#xD;&#xA;&#xD;&#xA;As for emulation, VICE has virtually no competition.&#xD;&#xA;&#xD;&#xA;  [1]: https://goatpower.org/projects-releases/sublime-package-kick-assembler-c64/" />
  <row Id="1245" PostHistoryTypeId="2" PostId="457" RevisionGUID="dc17d19e-d6e8-42fb-93a5-992cd72c644a" CreationDate="2016-05-11T01:09:14.487" UserId="394" Text="&#xD;&#xA;**[Z80.info][1]** have a HUGE list of emulators for many platforms. Some links may be broken, though - but just because the website was moved or non-existent anymore. Either way, a googling with the name of the emulator itself will solve the problem.&#xD;&#xA;&#xD;&#xA;I think you should favorite this page. I did!&#xD;&#xA;&#xD;&#xA;Suggestions&#xD;&#xA;-----------&#xD;&#xA;&#xD;&#xA;I like this [**Toledo**][2] - a CP/M emulator; it considers the  Intel 8080, not the Z80. But I like it and it won the IOCCC! You will need to compile it and maybe adjust something.  But not much of what you want.&#xD;&#xA;&#xD;&#xA;There is also this one that can be used in a JVM. It fastens the use because it just need Java VM installed. It is called **[ZIM][3]**.&#xD;&#xA;&#xD;&#xA;ZIM also works within the browser if the Java Web Start plugin is available. I think it is very handy! Will work on a wide variety of modern OSes! :P&#xD;&#xA;&#xD;&#xA;ZIM ***should be*** something along *SIM8085*. So I hope it helped!&#xD;&#xA;&#xD;&#xA;  [1]: http://goo.gl/jdw0cy&#xD;&#xA;  [2]: http://goo.gl/xEKYkf&#xD;&#xA;  [3]: http://www.natmac.net/zim/" />
  <row Id="1247" PostHistoryTypeId="2" PostId="458" RevisionGUID="0c424d9f-8883-45df-aca9-fd762146e5d3" CreationDate="2016-05-11T04:11:57.450" UserId="179" Text="In addition to mcleod_ideafix' answer above: Commodore also made a CD-ROM drive that plugged in the slot (unfortunately without a feed-through slot on the other side): the [A570][1] turned the Amiga 500 into a [CDTV][2].&#xD;&#xA;&#xD;&#xA;Unfortunately, the A570 was released after the A500 was discontinued and replaced with the A600, it had a caddy (not a tray) and it ran at single-speed. So it wasn't very popular.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://en.wikipedia.org/wiki/Amiga_A570&#xD;&#xA;  [2]: https://en.wikipedia.org/wiki/Commodore_CDTV" />
  <row Id="1248" PostHistoryTypeId="5" PostId="452" RevisionGUID="f8225a01-12ae-4e41-93d7-c9a069e96004" CreationDate="2016-05-11T04:17:41.857" UserId="379" Comment="added 51 characters in body" Text="I'm about to do some assembly coding for the C64 but for sanity I would like to do the actual coding on my Mac with an emulator.&#xD;&#xA;&#xD;&#xA;My question is; which is the most maintained/up-to-date emulator/assembler tool-chain for C64 development as of 2016?&#xD;&#xA;&#xD;&#xA;What've come up with so far is an [OSX-build][1] of [VICE][2] v2.4 from 2012 and [DASM][3] v2.20.11 from 2014 which I managed to build [from source][4]. This setup actually works, but maybe there are more contemporary alternatives which is regarded as the defacto tools of use today?&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.zimmers.net/anonftp/pub/cbm/crossplatform/emulators/VICE/vice-macosx-cocoa-i386%2Bx86_64-10.6-clang-2.4.dmg&#xD;&#xA;  [2]: http://vice-emu.sourceforge.net/&#xD;&#xA;  [3]: http://dasm-dillon.sourceforge.net/&#xD;&#xA;  [4]: https://sourceforge.net/projects/dasm-dillon/files/dasm-dillon/2.20.11/dasm-2.20.11-2014.03.04-source.tar.gz/download" />
  <row Id="1249" PostHistoryTypeId="6" PostId="452" RevisionGUID="17d6499f-ead8-4c4e-966b-a502e3e1fdb2" CreationDate="2016-05-11T04:23:13.683" UserId="4" Comment="edited tags" Text="&lt;commodore-64&gt;&lt;emulation&gt;&lt;assembly&gt;&lt;programming&gt;&lt;software-recommendation&gt;" />
  <row Id="1250" PostHistoryTypeId="2" PostId="459" RevisionGUID="59bfa587-0281-4e39-adde-30049ad2e7a0" CreationDate="2016-05-11T07:19:24.937" UserId="393" Text="It would be nice to break it down by model if possible." />
  <row Id="1251" PostHistoryTypeId="1" PostId="459" RevisionGUID="59bfa587-0281-4e39-adde-30049ad2e7a0" CreationDate="2016-05-11T07:19:24.937" UserId="393" Text="Over it's lifetime, how many Apple 2's were sold?" />
  <row Id="1252" PostHistoryTypeId="3" PostId="459" RevisionGUID="59bfa587-0281-4e39-adde-30049ad2e7a0" CreationDate="2016-05-11T07:19:24.937" UserId="393" Text="&lt;apple-ii&gt;" />
  <row Id="1254" PostHistoryTypeId="4" PostId="459" RevisionGUID="047276ca-224b-4635-a121-fac550d04df8" CreationDate="2016-05-11T09:23:24.783" UserId="130" Comment="Fixed typo in title" Text="Over its lifetime, how many Apple 2's were sold?" />
  <row Id="1255" PostHistoryTypeId="2" PostId="460" RevisionGUID="e754c997-9a04-4392-bd80-1d469022ffc2" CreationDate="2016-05-11T10:23:33.113" UserId="89" Text="[According to Wikipedia](https://en.wikipedia.org/wiki/Apple_II_series), somewhere between 5 and 6 million Apple II series computers were sold between launch in 1977 and discontinuation in 1993. Apparently around 1.25 million of these were models of Apple IIGS.&#xD;&#xA;&#xD;&#xA;More information might be available in [the referenced book](https://en.wikipedia.org/wiki/Apple_II_series#cite_note-autogenerated1-4), but I haven't got a copy." />
  <row Id="1256" PostHistoryTypeId="2" PostId="461" RevisionGUID="630b5039-5970-407a-b24a-e78bd70e5ee3" CreationDate="2016-05-11T14:50:00.560" UserId="398" Text="I used the method outlined here on my Apple IIc Plus and it worked fine. &#xD;&#xA;&#xD;&#xA;http://www.callapple.org/vintage-apple-computers/apple-ii/shining-a-light-on-retrobrite/&#xD;&#xA;&#xD;&#xA;Javier Rivera does a TON of Retrobrite projects in Miami and hasn't notice any of the side-effects that have been mentioned over the years. " />
  <row Id="1257" PostHistoryTypeId="2" PostId="462" RevisionGUID="a83e3e0e-bd3b-491e-ba2e-e3a6721037d9" CreationDate="2016-05-11T15:34:22.237" UserId="177" Text="An excellent description of the cassette storage format, along with the monitor and ROM codes that store and retrieve data, are outlined in Apple II Monitors Peeled (start at page 81):&#xD;&#xA;ftp://ftp.apple.asimov.net/pub/apple_II/documentation/misc/Apple%20II%20Monitors%20Peeled.pdf&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;The Apple II Circuit Description (W. Gayler) has a great technical breakdown as well (page 92): http://mirrors.apple2.org.za/Apple%20II%20Documentation%20Project/Books/W.%20Gayler%20-%20The%20Apple%20II%20Circuit%20Description.pdf, " />
  <row Id="1258" PostHistoryTypeId="5" PostId="451" RevisionGUID="a83c7420-f617-48d0-8b7c-8f6d77648fba" CreationDate="2016-05-11T15:50:07.953" UserId="376" Comment="added 973 characters in body" Text="I have used recipes from here with great success:&#xD;&#xA;&#xD;&#xA;http://www.retr0bright.com/make.html&#xD;&#xA;&#xD;&#xA;I used the second recipe with a high concentration hydrogen peroxide.  I was able to find the high concentration hydrogen peroxide at a local co-op store marked as &quot;food grade&quot;.&#xD;&#xA;&#xD;&#xA;Here is that recipe:&#xD;&#xA;&#xD;&#xA;&gt; **Lorne's Variant Recipe**&#xD;&#xA;&gt; &#xD;&#xA;&gt; Lorne at Vintage Computer Forums prefers to use stronger Hydrogen&#xD;&#xA;&gt; Peroxide and his variant recipe is below.&#xD;&#xA;&gt; &#xD;&#xA;&gt;  - 1/2 pint (200ml) Hydrogen Peroxide, 30% strength&#xD;&#xA;&gt;  - 2 level teaspoons of Xanthan Gum&#xD;&#xA;&gt;  - 1 level teaspoon of Glycerine&#xD;&#xA;&gt;  - 1/4 teaspoonful of Oxy laundry booster&#xD;&#xA;&gt;  - 1 teaspoonful hot (not boiling) water&#xD;&#xA;&gt; &#xD;&#xA;&gt; In a very small ceramic or plastic bowl/dish, dissolve the Oxy in the&#xD;&#xA;&gt; hot water. Lorne found that the Oxy doesn't want to dissolve in the&#xD;&#xA;&gt; paste/gel very well - this premixture of the Oxy fixed that problem.&#xD;&#xA;&gt; While the Oxy is dissolving, mix the Hydrogen Peroxide and Xanthan gum&#xD;&#xA;&gt; in the blender for five seconds. Add the Glycerine to that mixture and&#xD;&#xA;&gt; blend for another five seconds. Let this mixture sit for five&#xD;&#xA;&gt; minutes.Blend for another five seconds.&#xD;&#xA;&gt; &#xD;&#xA;&gt; Just before you apply the gel, thoroughly stir in by hand, the&#xD;&#xA;&gt; dissolved Oxy/water mix.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Be careful using strong hydrogen peroxide recipes as it is caustic to the skin and will need frequent attention to avoid it drying and streaking.  Check it often and reapply paste to prevent it from drying out." />
  <row Id="1259" PostHistoryTypeId="5" PostId="461" RevisionGUID="b0ec6cbb-e587-490e-b7a8-a19591699a8e" CreationDate="2016-05-11T16:01:49.033" UserId="398" Comment="Gave credit to Javier for picture and recipe. Expanded on who Javier is." Text="I used the method outlined here by Javier Rivera on my Apple IIc Plus and it worked fine. Javier does a lot of RetroBrite projects and posts a number of results to the Apple II Enthusiasts Facebook group. He also gave a presentation on methods at KansasFest 2015 and did a live session with anyone who wanted to go through the process with him. &#xD;&#xA;&#xD;&#xA;http://www.callapple.org/vintage-apple-computers/apple-ii/shining-a-light-on-retrobrite/&#xD;&#xA;&#xD;&#xA;In case the link dies, I'll explain my experience a bit.&#xD;&#xA;&#xD;&#xA;I went to Sally Beauty Supply. Not sure where you are, but that's a U.S. national chain. If you have a place that sells to consumer and/or professional hair-stylists and barbers, you can find a lot of the same supplies. I found the Peroxide 40 there. I also picked up the latex gloves and a couple of smaller items that are used to mix hair coloring agents. This consisted of a small plastic well with handle and a brush. This is what I used to mix everything up and paint the mixture onto the IIc Plus.&#xD;&#xA;&#xD;&#xA;&gt; From Javier's recipe:&#xD;&#xA;&gt; &#xD;&#xA;&gt; 100 ml of liquid Peroxide 40, found in beauty supply shops&#xD;&#xA;&gt;&#xD;&#xA;&gt; One teaspoon of Arrowroot powder&#xD;&#xA;&gt; &#xD;&#xA;&gt; One teaspoon of OxyClean powder&#xD;&#xA;&#xD;&#xA;Here's a picture from Javier's post. &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;[![Picture from the recipe.][1]][1]&#xD;&#xA;&#xD;&#xA;I actually found Arrowroot and OxyClean at a grocery store. &#xD;&#xA;&#xD;&#xA;Mixing everything together was a bit challenging. The Oxyclean had a tendency to clump in the arrowroot but I just kept mixing until I couldn't seem to make a difference with it any longer. Probably a good five minutes, honestly. I imagine a blender could be used for this, but I didn't try it.&#xD;&#xA;&#xD;&#xA;Once done, I had a flat piece of wood that I covered with aluminum foil to try to point UV at sides and things that weren't actually facing the sky.&#xD;&#xA;&#xD;&#xA;I dismantled the IIc Plus, removing the mainboard, the floppy, the power supply, the keyboard. This is a lot easier on a IIc Plus than what you might find on other retrocomputers but I imagine you don't want vintage electronics out in the sun.&#xD;&#xA;&#xD;&#xA;I pushed out the multi-color Apple logo from the case and used masking tape to cover up the &quot;Apple IIc&quot; on the cover. I don't know that I really needed to cover that up, but I figured it couldn't hurt. Most recipes I've read mention that the procedure will damage the Apple logo so that's why I pushed it out. It was glued in place so it came out pretty easily and there was enough adhesive to re-stick it when I was done.&#xD;&#xA;&#xD;&#xA;With the brush, I painted as smooth a coat as I could on the IIc Plus, the top and side surfaces. The mixture would foam up and every 45 minutes or so I would go back out and smooth out the covering again occasionally adding some more of the mixture. The IIc Plus is mostly large, flat pieces so I didn't have to do a lot of rotating. It was fairly challenging to cover it up well. The brush and arrowroot had a tendency to streak and I needed to keep working it until it was smooth.&#xD;&#xA;&#xD;&#xA;I think I did this for about four hours, maybe less. Once done, I literally took a garden hose and rinsed off the pieces. After that, I brought everything in and dried it all then left it out for an hour to so to dry further.&#xD;&#xA;&#xD;&#xA;The original color was definitely brought back on the surfaces that faced the sky. The sides are still a little darker but it doesn't bother me. I think if I had something that would bend the UV to more directly to hit the sides I probably would have had a better effect there. The option is always there to go back and do it again concentrating on the sides, but there is a measurable difference from before I started so I haven't worried about it.&#xD;&#xA;&#xD;&#xA;I would really like to do the keys, especially the spacebar which is more browned than anything else. I haven't done this myself. Here's what a member of the Apple II Enthusiasts group on Facebook posted:&#xD;&#xA;&#xD;&#xA;&gt; Eduardo Correa Lima May 8 at 9:03pm · Vancouver, BC, Canada&#xD;&#xA;&gt; &#xD;&#xA;&gt; First retrobrite attempt. Set of //c keys.&#xD;&#xA;&gt; &#xD;&#xA;&gt; 3 teaspoons of Oxyclean 3% Hydrogen Peroxide Put all key caps in a&#xD;&#xA;&gt; glass jar with enough peroxide to cover the keys. Put in the Oxyclean,&#xD;&#xA;&gt; then agitate the jar.&#xD;&#xA;&gt; &#xD;&#xA;&gt; Leave in sunlight for 3 hours, agitating every hour.&#xD;&#xA;&#xD;&#xA;The results are great!&#xD;&#xA;&#xD;&#xA;[![IIc Keys][2]][2]&#xD;&#xA;&#xD;&#xA;Hope this helps.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/83I8j.jpg&#xD;&#xA;  [2]: http://i.stack.imgur.com/aK2vA.jpg" />
  <row Id="1260" PostHistoryTypeId="5" PostId="461" RevisionGUID="676595d3-9cf3-40a7-ba0d-cc60927b1a4b" CreationDate="2016-05-11T16:08:16.580" UserId="398" Comment="Pointed out that the keys results are actually Eduardo's, not mine. I don't think I was clear. " Text="I used the method outlined here by Javier Rivera on my Apple IIc Plus and it worked fine. Javier does a lot of RetroBrite projects and posts a number of results to the Apple II Enthusiasts Facebook group. He also gave a presentation on methods at KansasFest 2015 and did a live session with anyone who wanted to go through the process with him. &#xD;&#xA;&#xD;&#xA;http://www.callapple.org/vintage-apple-computers/apple-ii/shining-a-light-on-retrobrite/&#xD;&#xA;&#xD;&#xA;In case the link dies, I'll explain my experience a bit.&#xD;&#xA;&#xD;&#xA;I went to Sally Beauty Supply. Not sure where you are, but that's a U.S. national chain. If you have a place that sells to consumer and/or professional hair-stylists and barbers, you can find a lot of the same supplies. I found the Peroxide 40 there. I also picked up the latex gloves and a couple of smaller items that are used to mix hair coloring agents. This consisted of a small plastic well with handle and a brush. This is what I used to mix everything up and paint the mixture onto the IIc Plus.&#xD;&#xA;&#xD;&#xA;&gt; From Javier's recipe:&#xD;&#xA;&gt; &#xD;&#xA;&gt; 100 ml of liquid Peroxide 40, found in beauty supply shops&#xD;&#xA;&gt;&#xD;&#xA;&gt; One teaspoon of Arrowroot powder&#xD;&#xA;&gt; &#xD;&#xA;&gt; One teaspoon of OxyClean powder&#xD;&#xA;&#xD;&#xA;Here's a picture from Javier's post. &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;[![Picture from the recipe.][1]][1]&#xD;&#xA;&#xD;&#xA;I actually found Arrowroot and OxyClean at a grocery store. &#xD;&#xA;&#xD;&#xA;Mixing everything together was a bit challenging. The Oxyclean had a tendency to clump in the arrowroot but I just kept mixing until I couldn't seem to make a difference with it any longer. Probably a good five minutes, honestly. I imagine a blender could be used for this, but I didn't try it.&#xD;&#xA;&#xD;&#xA;Once done, I had a flat piece of wood that I covered with aluminum foil to try to point UV at sides and things that weren't actually facing the sky.&#xD;&#xA;&#xD;&#xA;I dismantled the IIc Plus, removing the mainboard, the floppy, the power supply, the keyboard. This is a lot easier on a IIc Plus than what you might find on other retrocomputers but I imagine you don't want vintage electronics out in the sun.&#xD;&#xA;&#xD;&#xA;I pushed out the multi-color Apple logo from the case and used masking tape to cover up the &quot;Apple IIc&quot; on the cover. I don't know that I really needed to cover that up, but I figured it couldn't hurt. Most recipes I've read mention that the procedure will damage the Apple logo so that's why I pushed it out. It was glued in place so it came out pretty easily and there was enough adhesive to re-stick it when I was done.&#xD;&#xA;&#xD;&#xA;With the brush, I painted as smooth a coat as I could on the IIc Plus, the top and side surfaces. The mixture would foam up and every 45 minutes or so I would go back out and smooth out the covering again occasionally adding some more of the mixture. The IIc Plus is mostly large, flat pieces so I didn't have to do a lot of rotating. It was fairly challenging to cover it up well. The brush and arrowroot had a tendency to streak and I needed to keep working it until it was smooth.&#xD;&#xA;&#xD;&#xA;I think I did this for about four hours, maybe less. Once done, I literally took a garden hose and rinsed off the pieces. After that, I brought everything in and dried it all then left it out for an hour to so to dry further.&#xD;&#xA;&#xD;&#xA;The original color was definitely brought back on the surfaces that faced the sky. The sides are still a little darker but it doesn't bother me. I think if I had something that would bend the UV to more directly to hit the sides I probably would have had a better effect there. The option is always there to go back and do it again concentrating on the sides, but there is a measurable difference from before I started so I haven't worried about it.&#xD;&#xA;&#xD;&#xA;I would really like to do the keys, especially the spacebar which is more browned than anything else. I haven't done this myself. Here's what a member of the Apple II Enthusiasts group on Facebook posted:&#xD;&#xA;&#xD;&#xA;&gt; Eduardo Correa Lima May 8 at 9:03pm · Vancouver, BC, Canada&#xD;&#xA;&gt; &#xD;&#xA;&gt; First retrobrite attempt. Set of //c keys.&#xD;&#xA;&gt; &#xD;&#xA;&gt; 3 teaspoons of Oxyclean 3% Hydrogen Peroxide Put all key caps in a&#xD;&#xA;&gt; glass jar with enough peroxide to cover the keys. Put in the Oxyclean,&#xD;&#xA;&gt; then agitate the jar.&#xD;&#xA;&gt; &#xD;&#xA;&gt; Leave in sunlight for 3 hours, agitating every hour.&#xD;&#xA;&#xD;&#xA;His results are great!&#xD;&#xA;&#xD;&#xA;[![IIc Keys][2]][2]&#xD;&#xA;&#xD;&#xA;Hope this helps.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/83I8j.jpg&#xD;&#xA;  [2]: http://i.stack.imgur.com/aK2vA.jpg" />
  <row Id="1261" PostHistoryTypeId="5" PostId="461" RevisionGUID="88b55a4b-a1f8-48b3-a39a-9c1829491684" CreationDate="2016-05-11T16:28:36.773" UserId="398" Comment="added 2 characters in body" Text="I used the method outlined here by Javier Rivera on my Apple IIc Plus and it worked fine. Javier does a lot of RetroBrite projects and posts a number of results to the Apple II Enthusiasts Facebook group. He also gave a presentation on methods at KansasFest 2015 and did a live session with anyone who wanted to go through the process with him. &#xD;&#xA;&#xD;&#xA;http://www.callapple.org/vintage-apple-computers/apple-ii/shining-a-light-on-retrobrite/&#xD;&#xA;&#xD;&#xA;In case the link dies, I'll explain my experience a bit.&#xD;&#xA;&#xD;&#xA;I went to Sally Beauty Supply. Not sure where you are, but that's a U.S. national chain. If you have a place that sells to consumer and/or professional hair-stylists and barbers, you can find a lot of the same supplies. I found the Peroxide 40 there. I also picked up the latex gloves and a couple of smaller items that are used to mix hair coloring agents. This consisted of a small plastic well with handle and a brush. This is what I used to mix everything up and paint the mixture onto the IIc Plus.&#xD;&#xA;&#xD;&#xA;&gt; From Javier's recipe:&#xD;&#xA;&gt; &#xD;&#xA;&gt; 100 ml of liquid Peroxide 40, found in beauty supply shops&#xD;&#xA;&gt;&#xD;&#xA;&gt; One teaspoon of Arrowroot powder&#xD;&#xA;&gt; &#xD;&#xA;&gt; One teaspoon of OxyClean powder&#xD;&#xA;&#xD;&#xA;Here's a picture from Javier's post. &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;[![Picture from the recipe.][1]][1]&#xD;&#xA;&#xD;&#xA;I actually found Arrowroot and OxyClean at a grocery store. &#xD;&#xA;&#xD;&#xA;Mixing everything together was a bit challenging. The Oxyclean had a tendency to clump in the arrowroot but I just kept mixing until I couldn't seem to make a difference with it any longer. Probably a good five minutes, honestly. I imagine a blender could be used for this, but I didn't try it.&#xD;&#xA;&#xD;&#xA;Once done, I had a flat piece of wood that I covered with aluminum foil to try to point UV at sides and things that weren't actually facing the sky.&#xD;&#xA;&#xD;&#xA;I dismantled the IIc Plus, removing the mainboard, the floppy, the power supply, the keyboard. This is a lot easier on a IIc Plus than what you might find on other retrocomputers but I imagine you don't want vintage electronics out in the sun.&#xD;&#xA;&#xD;&#xA;I pushed out the multi-color Apple logo from the case and used masking tape to cover up the &quot;Apple IIc&quot; on the cover. I don't know that I really needed to cover that up, but I figured it couldn't hurt. Most recipes I've read mention that the procedure will damage the Apple logo so that's why I pushed it out. It was glued in place so it came out pretty easily and there was enough adhesive to re-stick it when I was done.&#xD;&#xA;&#xD;&#xA;With the brush, I painted as smooth a coat as I could on the IIc Plus, the top and side surfaces. The mixture would foam up and every 45 minutes or so I would go back out and smooth out the covering again occasionally adding some more of the mixture. The IIc Plus is mostly large, flat pieces so I didn't have to do a lot of rotating. It was fairly challenging to cover it up well. The brush and arrowroot had a tendency to streak and I needed to keep working it until it was smooth.&#xD;&#xA;&#xD;&#xA;I think I did this for about four hours, maybe less. Once done, I literally took a garden hose and rinsed off the pieces. After that, I brought everything in and dried it all then left it out for an hour to so to dry further.&#xD;&#xA;&#xD;&#xA;The original color was definitely brought back on the surfaces that faced the sky. The sides are still a little darker but it doesn't bother me. I think if I had something that would bend the UV to more directly to hit the sides I probably would have had a better effect there. The option is always there to go back and do it again concentrating on the sides, but there is a measurable difference from before I started so I haven't worried about it.&#xD;&#xA;&#xD;&#xA;I would really like to do the keys, especially the spacebar which is more browned than anything else. I haven't done this myself. Here's what a member of the Apple II Enthusiasts group on Facebook posted:&#xD;&#xA;&#xD;&#xA;&gt; Eduardo Correa Lima May 8 at 9:03pm · Vancouver, BC, Canada&#xD;&#xA;&gt; &#xD;&#xA;&gt; First retrobrite attempt. Set of //c keys.&#xD;&#xA;&gt; &#xD;&#xA;&gt; 3 teaspoons of Oxyclean, 3% Hydrogen Peroxide. Put all key caps in a&#xD;&#xA;&gt; glass jar with enough peroxide to cover the keys. Put in the Oxyclean,&#xD;&#xA;&gt; then agitate the jar.&#xD;&#xA;&gt; &#xD;&#xA;&gt; Leave in sunlight for 3 hours, agitating every hour.&#xD;&#xA;&#xD;&#xA;His results are great!&#xD;&#xA;&#xD;&#xA;[![IIc Keys][2]][2]&#xD;&#xA;&#xD;&#xA;Hope this helps.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/83I8j.jpg&#xD;&#xA;  [2]: http://i.stack.imgur.com/aK2vA.jpg" />
  <row Id="1262" PostHistoryTypeId="5" PostId="457" RevisionGUID="c9894888-3c27-469f-9455-727438310eee" CreationDate="2016-05-11T19:55:47.767" UserId="394" Comment="correct spelling, improoved explanation, grammar" Text="**[Z80.info][1]** have a HUGE list of emulators for many platforms. Some links may be broken, though - but just because the website was moved or non-existent anymore. Either way, a googling with the name of the emulator itself will solve the problem.&#xD;&#xA;&#xD;&#xA;I think you should favorite this page (I did!). Has useful information regarding the subject.&#xD;&#xA;&#xD;&#xA;Suggestions&#xD;&#xA;-----------&#xD;&#xA;&#xD;&#xA;I like this [**Toledo**][2] - a CP/M emulator; it considers the  Intel 8080, not the Z80. But I like it and it won the IOCCC! You will need to compile it and maybe adjust something. But not much of what you want (simulates the system not the processor).&#xD;&#xA;&#xD;&#xA;There is also this one that can be used in a Java Virtual Machine (JVM). It speeds the use of the tool because it just need the JVM installed, not requiring compiling or installation of other tools (Java is usually used by multiple applications for your PC). It's called **[ZIM][3]**.&#xD;&#xA;&#xD;&#xA;ZIM also works within the browser if the Java Web Start plugin is available to your browser (Firefox and IE; Chrome doesn't support Java anymore). I think it's very handy! Will work on a wide variety of modern OSes and within the browser! :P&#xD;&#xA;&#xD;&#xA;ZIM ***should be*** something along *SIM8085*. So I hope it helped!&#xD;&#xA;&#xD;&#xA;  [1]: http://goo.gl/jdw0cy&#xD;&#xA;  [2]: http://goo.gl/xEKYkf&#xD;&#xA;  [3]: http://www.natmac.net/zim/" />
  <row Id="1263" PostHistoryTypeId="2" PostId="463" RevisionGUID="d054d9f1-08e2-4331-8a83-7741c81643cc" CreationDate="2016-05-11T20:20:20.267" UserId="278" Text="There are a lot of retro-computers with BASIC as an integral part of the operating system. The IBM 5100 was one of the first computers with a separate memory space for BASIC, followed by the Commodore PET, Apple II and TRS-80.&#xD;&#xA;&#xD;&#xA;But why was BASIC built into their operating systems, using memory? From [this memory map](http://sta.c64.org/cbm64mem.html), the Commodore 64 had memory completely reserved for BASIC. There were computers, like the Altair 8800, that provided BASIC as software that could be loaded into memory when necessary, and these computers both worked and sold well.&#xD;&#xA;&#xD;&#xA;So why was BASIC built into so many computers' operating systems?" />
  <row Id="1264" PostHistoryTypeId="1" PostId="463" RevisionGUID="d054d9f1-08e2-4331-8a83-7741c81643cc" CreationDate="2016-05-11T20:20:20.267" UserId="278" Text="Why was BASIC built into so many operating systems?" />
  <row Id="1265" PostHistoryTypeId="3" PostId="463" RevisionGUID="d054d9f1-08e2-4331-8a83-7741c81643cc" CreationDate="2016-05-11T20:20:20.267" UserId="278" Text="&lt;atari-basic&gt;&lt;color-basic&gt;&lt;applesoft-basic&gt;&lt;operating-system&gt;" />
  <row Id="1266" PostHistoryTypeId="2" PostId="464" RevisionGUID="cd43aad4-5c32-4ed5-9f84-9f8f4ffbd285" CreationDate="2016-05-11T21:33:31.877" UserId="81" Text="As far as I know it was included because it was essentially the operating system interface. When you installed MS-DOS on a PC it provided you with commands and allowed you to run programs that executed machine code on the machine. &#xD;&#xA;&#xD;&#xA;BASIC back then was similar. It provided you with a command prompt, operating system-level commands like reading/writing data to disk, a printer, tape, do simple things like print to the screen, and read in user input.&#xD;&#xA;&#xD;&#xA;This way you had a general set of commands with an interpreter that could be ported to other CPUs and memory configurations with minimal changes. You just needed to setup which commands were available and what machine specific code was run for those command.&#xD;&#xA;&#xD;&#xA;Essentially a portable, programmable, operating system." />
  <row Id="1267" PostHistoryTypeId="2" PostId="465" RevisionGUID="7454ba39-4f04-4b07-ab72-1648854f8af7" CreationDate="2016-05-11T21:59:25.133" UserId="75" Text="Having BASIC available for the machine was a selling point so early adopters wouldn't have to wait for software to become available--they could write what they need themselves, and they wouldn't need to learn machine language to do it.&#xD;&#xA;&#xD;&#xA;&gt; [Bill] Gates [believed][1] that, by providing a BASIC interpreter for&#xD;&#xA;&gt; the new [MITS Altair] computer, they could make it more attractive to&#xD;&#xA;&gt; hobbyists.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://en.wikipedia.org/wiki/Altair_BASIC#Origin_and_development" />
  <row Id="1268" PostHistoryTypeId="2" PostId="466" RevisionGUID="6a81d326-218d-429c-840b-d1bef43e1aaf" CreationDate="2016-05-11T22:17:35.973" UserId="111" Text="As it says in Wikipedia [BASIC](https://en.wikipedia.org/wiki/BASIC):&#xD;&#xA;&gt;The introduction of the first microcomputers in the mid-1970s was the start of explosive growth for BASIC. It had the advantage that it was fairly well known to the young designers and computer hobbyists who took an interest in microcomputers.  &#xD;&#xA;... BASIC was one of the few languages that was both high-level enough to be usable by those without training and small enough to fit into the microcomputers of the day, making it the de facto standard programming language on early microcomputers.&#xD;&#xA;&#xD;&#xA;In other words, it was easy to learn even for those with no programming experience, and the interpreter memory footprint was small, which was important due to the cost of memory.  &#xD;&#xA;(I don't exactly recall, but back in the 80s an 8k bit RAM chip in C64 cost several dollars.)" />
  <row Id="1269" PostHistoryTypeId="2" PostId="467" RevisionGUID="6913535e-e5c4-4edd-a6ba-6ad696433748" CreationDate="2016-05-11T22:19:49.553" UserId="92" Text="Having a programming language built-in gave you a multi-purpose tool into your hands at the flick of a switch (power on).&#xD;&#xA;&#xD;&#xA;As to the choice of BASIC vs. other programming languages, microcomputer BASIC dialects are - despite some of their shortcomings - quite accessible to novice programmers. They are a bit like using English in an imperative style (&quot;PRINT this&quot;, &quot;DO that&quot;), so not hard to learn. There was a lot of BASIC literature around at that time and sufficiently general example programs could be ported to different systems without too much work. Many other languages are more cryptic to someone not used to it.&#xD;&#xA;&#xD;&#xA;As they were usually included on the ROM chips, they didn't take away any RAM if you chose not to use BASIC.&#xD;&#xA;" />
  <row Id="1270" PostHistoryTypeId="2" PostId="468" RevisionGUID="8b897ab3-8ca3-4d78-9404-679b4f38a6c9" CreationDate="2016-05-11T23:41:07.347" UserId="26" Text="Looking at other sources, it seems the BASIC for the C64 was burned into a D2364 ROM chip (8192 bytes). This 8k was mapped into the memory address region at 0xA000-0xBFFF.  &#xD;&#xA;&#xD;&#xA;This was typical of machines at the time: processors like the 6502 and Z80 could only address a 64k range (addresses 0 to 0xFFFF), and within that memory map, some would be RAM, some ROM, some would be empty space, and perhaps some would refer to I/O ports on chips mapped into the memory space.&#xD;&#xA;&#xD;&#xA;In many cases the supplied RAM would be much less than 64k anyway (although this seems inconceivably small by modern standards), so if 8k of the mapped space was taken up a ROM, then this wouldn't necessarily cause any problem to the owner.&#xD;&#xA;&#xD;&#xA;As to why BASIC was supplied with a lot of machines: firstly we should say BASICs, since the implementations were wildly incompatible in machines from different vendors, but they all shared some common characteristics that gave some familiarity: GOTO, GOSUB, IF, PRINT, INPUT and so on. &#xD;&#xA;&#xD;&#xA;At the time machines had limited memory space, and a language was needed that could fit in a small ROM, and that had a low overhead in RAM when executing programs. It needed to be an interpreter (rather than a compiler) due to limited RAM and typically no secondary storage (hard disk, floppy disk etc) that provided a file system. Also, it needed to be a simple language so that people could succeed in some basic programming tasks. There weren't anything like as many languages to choose from back then, and BASIC emerged as a soft-of standard that became a selling-point and perhaps even a requirement.&#xD;&#xA;" />
  <row Id="1271" PostHistoryTypeId="2" PostId="469" RevisionGUID="9817da10-4007-4cac-94c1-59a157135de6" CreationDate="2016-05-11T23:52:03.877" UserId="123" Text="An attempt is being made by Antoine at [Brutal Deluxe Software][1]  to estimate IIgs production figures based on serial numbers.&#xA;&#xA;This work is using the fact that the serial number encodes the machine's position within a week's production run at a particular factory. Decode for each factory and week, look for the maximum value reported and you have a method of estimating total production over the product's life cycle.&#xA;&#xA;Antoine is trying to cross-reference this with IIgs keyboard serial numbers (as the computers shipped with a keyboard), but the figures derived from IIgs vs keyboard serial numbers are currently (May '16) way out of sync (~2.6M IIgs's, ~0.9M keyboards).&#xA;&#xA;The ~2.6M figure seems higher than other estimates.&#xA;&#xA;I don't believe Apple ever released definitive numbers of all Apple II's sold, let alone by model.&#xA;&#xA;&#xA;  [1]: http://www.brutaldeluxe.fr &quot;Brutal Deluxe Software&quot;" />
  <row Id="1272" PostHistoryTypeId="2" PostId="470" RevisionGUID="f531630c-2b99-4aea-a52b-07908934b03d" CreationDate="2016-05-12T04:21:53.493" UserId="417" Text="Nobody so far has said the magic words, which is **[Microsoft BASIC](https://en.wikipedia.org/wiki/Microsoft_BASIC)**. First developed for the Altair 8800 (the first commercially successful personal computer!), Microsoft spent a lot of energy making sure their BASIC would work on every personal computer in the 1970s and licensing it widely. It ran on [CP/M](https://en.wikipedia.org/wiki/CP/M), it ran on the [TRS-80](https://en.wikipedia.org/wiki/TRS-80#BASIC), and -- of course -- the [IBM PC](https://en.wikipedia.org/wiki/IBM_Personal_Computer). Apple's [AppleSoft BASIC](https://en.wikipedia.org/wiki/Applesoft_BASIC#Background), [Commodore BASIC](https://en.wikipedia.org/wiki/Commodore_BASIC) and [Amiga BASIC](https://en.wikipedia.org/wiki/AmigaBASIC) were all originally licensed from Microsoft. This meant that if you were manufacturing a personal computer in the 1970s, the first question any customer would ask was whether their existing Microsoft BASIC programs would work on it -- essentially, the first standardized programming language/execution platform!" />
  <row Id="1275" PostHistoryTypeId="2" PostId="471" RevisionGUID="62ae6d16-2492-4666-9943-dcf2580da206" CreationDate="2016-05-12T07:38:49.427" UserId="424" Text="BASIC was first used at Dartmouth College in 1964.  It was the first readily available programming language on time-share systems (the predecessor of cloud computing).  In 1975 Microsoft released a version of Basic for the first consumer level microcomputer, the MITS Altair 8800.  Apple, Commodore, Tandy and then IBM PC (in 1981) followed suit with their microcomputers. By the time IBM released the PC, Apple had already acquired considerable marketshare in schools and thus acquired lots of young budding programmers who mostly only knew BASIC. &#xD;&#xA;&#xD;&#xA;In its day, BASIC was as indispensable as a web browser is today. " />
  <row Id="1276" PostHistoryTypeId="2" PostId="472" RevisionGUID="39f2e785-5157-4ee1-8209-f3e3c7d30b55" CreationDate="2016-05-12T08:16:37.767" UserId="74" Text="Thraka is right that BASIC served the role of operating system on many 8-bit micros. *Some* OS was needed, that was beyond doubt. But at the time dedicated operating systems were either very limited (say, Atari DOS), overly complex, big and expensive for the tiny computers (Unix), or - for the middle ground, that was &quot;just right&quot; - in their infancy (CP/M).&#xD;&#xA;&#xD;&#xA;BASIC, on the other hand, was touted THE beginner's programming language. &#xD;&#xA;&#xD;&#xA;At the time - 8-bit micros were primarily aimed at the kids and teens market. They were &quot;home computers&quot;, where the dad could write and print letters, mom could design crosstitch images, but 90% of the time kids would be playing games. But if the computer was to be more than a glorified gaming console with hardly-used extra functions, it needed a marketing point that would set it apart from the consoles: **&quot;It Teaches Your Kids Programming&quot;** was the critical sales point. And so it needed a kid-friendly programming language.&#xD;&#xA;&#xD;&#xA;BASIC had only one serious competitor for that position at the time: [Logo](https://en.wikipedia.org/wiki/Logo_%28programming_language%29), and while Logo was generally considered a much better learning tool&lt;sup&gt;*&lt;/sup&gt; but it hardly yielded towards &quot;general use&quot; - you could do some quite fancy stuff easily (drawing a [Koch Snowflake](https://en.wikipedia.org/wiki/Koch_snowflake) was less than a screen long program; not a packed screen too) but didn't yield well towards &quot;common use&quot;, and was considerably slower. Other languages than the two either employed concepts too advanced for kids, or were too complex to implement on 8-bit micros (leaving enough memory for actual software too!).&#xD;&#xA;&#xD;&#xA;...also - Microsoft Basic was an important language for &quot;professional environment&quot;. Learning its simpler variants was considered (usually by clueless parents) an important building block towards building a career of using it professionally. Nobody ever wrote serious business software in Logo. Therefore the marketing appeal of Basic - despite its factual shortcomings - overshadowed Logo as THE language for learning.&#xD;&#xA;&#xD;&#xA;On top of that, implementing OS procedures as BASIC commands was simple, natural and took little effort, little memory and allowed to integrate or script them as BASIC programs easily. Logo didn't yield itself to that purpose nearly as well.&#xD;&#xA;&#xD;&#xA;And so, BASIC being simultaneously a comfortable OS environment, a scripting tool, a teaching tool, and - above all - an important marketing point - became the language of choice.&#xD;&#xA;&#xD;&#xA;&lt;sub&gt;* (e.g. providing recursion, which was between very difficult and impossible in Basic, lacking local variables, parametric function calls and rarely implementing easy to access arrays which could serve as a crutch for these). Also, the Turtle Graphics, which was excellent for teaching the concept of &quot;giving commands&quot;, and building a library of procedures, but made utilizing the gfx as &quot;pixel canvas&quot; difficult.&lt;/sub&gt;" />
  <row Id="1279" PostHistoryTypeId="2" PostId="473" RevisionGUID="5d65dccb-47c3-4444-b42c-96a61a56e456" CreationDate="2016-05-12T12:36:16.347" UserId="382" Text="Short answer: so you could actually DO something *useful* with the machine out of the box.&#xD;&#xA;&#xD;&#xA;Considering when these machines arrived in the mid-to-late 1970's, they were not only expensive &quot;hobby toys&quot; but software was hard to come by and peripherals were costly. If you compare this to the Altair 8800, you paid a lot of money for a machine that when you plugged it in it really did *nothing*.&#xD;&#xA;&#xD;&#xA;Though Microsoft BASIC had been popular because it was easier to use than machine language, I've read things over the years that suggested that people wanted to use BASIC because the learning curve was smaller and could fit in the small memory of these machines; MS wasn't quite creating the trend, but going along with it. Yes, they did port it to 808x/6502/etc. chips at the time, but note that the original Apple I and II shipped with Integer BASIC which was written by Woz, not Microsoft (and based on HP basic, not Dartmouth). Given the relative ease of BASIC, you could write your simple recipe or checking account balance program while the world waited for VisiCalc to appear in 1979." />
  <row Id="1280" PostHistoryTypeId="2" PostId="474" RevisionGUID="4c3e6810-c45e-4779-a1da-473e4955e9f4" CreationDate="2016-05-12T13:17:08.353" UserId="393" Text="Is there a list somewhere? Might be nice to compile a list here.&#xD;&#xA;&#xD;&#xA;I'm assuming mostly games but also music and educational software made use of it." />
  <row Id="1281" PostHistoryTypeId="1" PostId="474" RevisionGUID="4c3e6810-c45e-4779-a1da-473e4955e9f4" CreationDate="2016-05-12T13:17:08.353" UserId="393" Text="What software supported the Mockingboard on the Apple II?" />
  <row Id="1282" PostHistoryTypeId="3" PostId="474" RevisionGUID="4c3e6810-c45e-4779-a1da-473e4955e9f4" CreationDate="2016-05-12T13:17:08.353" UserId="393" Text="&lt;apple-ii&gt;&lt;hardware&gt;" />
  <row Id="1283" PostHistoryTypeId="2" PostId="475" RevisionGUID="b082dbf7-ab82-4050-9548-7fb664c61b7f" CreationDate="2016-05-12T13:42:45.703" UserId="433" Text="We considered BASIC interpreters essential in the 1970's and early 1980's  because the modern concept of the personal computer as a machine on which one runs ready-made application programs was only beginning to emerge. BASIC was invented in 1964. Microsoft BASIC was released in 1975. Wordstar was released in 1978, Visicalc in 1979, Wordperfect in 1979, Microsoft Word in 1983, Lotus 123 in 1983. You might have heard of some of these programs, you might be able to get a copy of one of them, and it might run on your computer (but probably would not).&#xD;&#xA;&#xD;&#xA;Making practical use of a computer without programming was still very much a new idea. BASIC was seen as a language which end users would use to solve problems. I learned it from the 1975 book &quot;Making BASIC Work For You&quot;. It is all about how to solve business accounting and record-keeping problems. The examples are things which today would be done using spreadsheets and other office applications.&#xD;&#xA;&#xD;&#xA;The computer buyer was also different. The average person did not think that he ever would or ever could operate a computer. They were bought by hobbyists who valiantly tried to show their friends that the machines had some practical value (which was hard since most tasks took two or three times as long on a computer) and by parents who realized that computers, even if useless now, were the wave of the future and wanted their children to &quot;learn programming&quot;. In both cases it was essential that the computer be programmable.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;" />
  <row Id="1284" PostHistoryTypeId="5" PostId="475" RevisionGUID="86e6cabd-5253-4f94-9efe-036e5939b285" CreationDate="2016-05-12T13:48:10.413" UserId="433" Comment="added summary sentence at top" Text="Because at the time a personal computer without BASIC was a total non-starter.&#xD;&#xA;&#xD;&#xA;We considered BASIC interpreters essential in the 1970's and early 1980's  because the modern concept of the personal computer as a machine on which one runs ready-made application programs was only beginning to emerge. BASIC was invented in 1964. Microsoft BASIC was released in 1975. Wordstar was released in 1978, Visicalc in 1979, Wordperfect in 1979, Microsoft Word in 1983, Lotus 123 in 1983. You might have heard of some of these programs, you might be able to get a copy of one of them, and it might run on your computer (but probably would not).&#xD;&#xA;&#xD;&#xA;Making practical use of a computer without programming was still very much a new idea. BASIC was seen as a language which end users would use to solve problems. I learned it from the 1975 book &quot;Making BASIC Work For You&quot;. It is all about how to solve business accounting and record-keeping problems. The examples are things which today would be done using spreadsheets and other office applications.&#xD;&#xA;&#xD;&#xA;The computer buyer was also different. The average person did not think that he ever would or ever could operate a computer. They were bought by hobbyists who valiantly tried to show their friends that the machines had some practical value (which was hard since most tasks took two or three times as long on a computer) and by parents who realized that computers, even if useless now, were the wave of the future and wanted their children to &quot;learn programming&quot;. In both cases it was essential that the computer be programmable.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;" />
  <row Id="1285" PostHistoryTypeId="5" PostId="475" RevisionGUID="2579593a-6baa-4f35-8225-289fe07f0da6" CreationDate="2016-05-12T13:53:31.770" UserId="433" Comment="added web-browser comparison" Text="Because at the time a personal computer without BASIC was a total non-starter. A personal computer without BASIC would seem as silly then as a computer without a web browser would seem today.&#xD;&#xA;&#xD;&#xA;We considered BASIC interpreters essential in the 1970's and early 1980's  because the modern concept of the personal computer as a machine on which one runs ready-made application programs was only beginning to emerge. BASIC was invented in 1964. Microsoft BASIC was released in 1975. Wordstar was released in 1978, Visicalc in 1979, Wordperfect in 1979, Microsoft Word in 1983, Lotus 123 in 1983. You might have heard of some of these programs, you might be able to get a copy of one of them, and it might run on your computer (but probably would not).&#xD;&#xA;&#xD;&#xA;Making practical use of a computer without programming was still very much a new idea. BASIC was seen as a language which end users would use to solve problems. I learned it from the 1975 book &quot;Making BASIC Work For You&quot;. It is all about how to solve business accounting and record-keeping problems. The examples are things which today would be done using spreadsheets and other office applications.&#xD;&#xA;&#xD;&#xA;The computer buyer was also different. The average person did not think that he ever would or ever could operate a computer. They were bought by hobbyists who valiantly tried to show their friends that the machines had some practical value (which was hard since most tasks took two or three times as long on a computer) and by parents who realized that computers, even if useless now, were the wave of the future and wanted their children to &quot;learn programming&quot;. In both cases it was essential that the computer be programmable.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;" />
  <row Id="1286" PostHistoryTypeId="2" PostId="476" RevisionGUID="44fca134-bb1f-4014-b3aa-5bf8175e225c" CreationDate="2016-05-12T14:16:13.123" UserId="125" Text="Most major computer manufacturers/distributors in the 70's and 80's included BASIC with their computers.  Some (as answers to this great question have detailed: http://retrocomputing.stackexchange.com/questions/463/why-was-basic-built-into-so-many-operating-systems) even dropped you into a BASIC prompt immediately upon turning the computer.  However, there were some slight differences between BASIC that was shipped with Atari, Apple, Commodore, and Tandy computers (for example).&#xD;&#xA;&#xD;&#xA;Why did these different dialects of BASIC evolve?&#xD;&#xA;&#xD;&#xA;During that time, the underlying hardware for each model of personal computer did vary greatly.  But is it unreasonable to think that BASIC should have been able to abstract those differences?  Or was each version different for other reasons (hobbyist vs. business, etc.)?" />
  <row Id="1287" PostHistoryTypeId="1" PostId="476" RevisionGUID="44fca134-bb1f-4014-b3aa-5bf8175e225c" CreationDate="2016-05-12T14:16:13.123" UserId="125" Text="Why were early versions of BASIC different?" />
  <row Id="1288" PostHistoryTypeId="3" PostId="476" RevisionGUID="44fca134-bb1f-4014-b3aa-5bf8175e225c" CreationDate="2016-05-12T14:16:13.123" UserId="125" Text="&lt;programming&gt;" />
  <row Id="1289" PostHistoryTypeId="2" PostId="477" RevisionGUID="e43e0af6-e485-481f-a740-8a79f5f1c3c0" CreationDate="2016-05-12T15:15:04.983" UserId="173" Text="A popular, but, much aligned bus expansion device for the CoCo was the venerable MPI. There were several companies who made bus expasion devices for the CoCo, however, this question is related specifically to the Tandy version.&#xD;&#xA;&#xD;&#xA;There were three model numbers listed for the MPI:&#xD;&#xA;&#xD;&#xA; - 26-3024 - in both grey and white colors; &#xD;&#xA; - 26-3124 - in white, released about the same time the restyled CoCo 2&#xD;&#xA;   was;&#xD;&#xA; - 26-3124A - in white, released about the same time as the CoCo 3 was;&#xD;&#xA;&#xD;&#xA;It's pretty well known that the second two devices (3124 &amp; 3124A) were electronically identical with the original, but, used more circuit integration. However, there is a compatibility issue with the 3024 and 3124A when used with the CoCo 3.&#xD;&#xA;&#xD;&#xA;Three questions:&#xD;&#xA;&#xD;&#xA;1. What is the problem with using the 3024 and 3124 with the CoCo 3?&#xD;&#xA;2. Is there a method to fix the problem on either device?&#xD;&#xA;" />
  <row Id="1290" PostHistoryTypeId="1" PostId="477" RevisionGUID="e43e0af6-e485-481f-a740-8a79f5f1c3c0" CreationDate="2016-05-12T15:15:04.983" UserId="173" Text="The Tandy/TRS-80 Multipack Interface (MPI)" />
  <row Id="1291" PostHistoryTypeId="3" PostId="477" RevisionGUID="e43e0af6-e485-481f-a740-8a79f5f1c3c0" CreationDate="2016-05-12T15:15:04.983" UserId="173" Text="&lt;color-computer&gt;" />
  <row Id="1292" PostHistoryTypeId="5" PostId="477" RevisionGUID="731dc083-dd1e-4ba7-ac28-89134580d82e" CreationDate="2016-05-12T15:26:31.897" UserId="173" Comment="added 1 character in body" Text="A popular, but, much maligned bus expansion device for the CoCo was the venerable MPI. There were several companies who made bus expasion devices for the CoCo, however, this question is related specifically to the Tandy version.&#xD;&#xA;&#xD;&#xA;There were three model numbers listed for the MPI:&#xD;&#xA;&#xD;&#xA; - 26-3024 - in both grey and white colors; &#xD;&#xA; - 26-3124 - in white, released about the same time the restyled CoCo 2&#xD;&#xA;   was;&#xD;&#xA; - 26-3124A - in white, released about the same time as the CoCo 3 was;&#xD;&#xA;&#xD;&#xA;It's pretty well known that the second two devices (3124 &amp; 3124A) were electronically identical with the original, but, used more circuit integration. However, there is a compatibility issue with the 3024 and 3124A when used with the CoCo 3.&#xD;&#xA;&#xD;&#xA;Three questions:&#xD;&#xA;&#xD;&#xA;1. What is the problem with using the 3024 and 3124 with the CoCo 3?&#xD;&#xA;2. Is there a method to fix the problem on either device?&#xD;&#xA;" />
  <row Id="1293" PostHistoryTypeId="2" PostId="478" RevisionGUID="2df19007-2c3d-487b-8357-aaf8905ebe29" CreationDate="2016-05-12T15:48:26.870" UserId="70" Text="There are multiple reasons.&#xD;&#xA;&#xD;&#xA;First, there was no standards body publishing an official definition of the BASIC language (initially the closest thing to a standard was the Dartmouth version for mainframe computers, eventually the 'de-facto' standard became Microsoft's version simply due to market share).  This left people free to fill in perceived gaps in the language however they liked.&#xD;&#xA;&#xD;&#xA;Second, different computers had different I/O systems and capabilities and therefore required at least some adjustment to be made.  Because of the differences, and the fact that different people/groups were making the adjustments, you ended up with different commands being added (or the same command being added in different ways).  This was especially obvious in commands like LOAD and SAVE (e.g. CLOAD &quot;x&quot; versus LOAD &quot;x&quot;,1 to load from cassette) but could also be seen elsewhere, such as in graphics commands or record-based I/O features.&#xD;&#xA;&#xD;&#xA;Third, different computers operated under different design constraints.  If you are trying to fit BASIC into a 4KB ROM you are going to have to leave some things out (like floating-point arithmetic).  If you have 8KB or 16KB available you can include more of the standard BASIC features and even have room left to add your own manufacturer-specific enhancements.&#xD;&#xA;&#xD;&#xA;There are many other reasons but these are among the more significant.&#xD;&#xA;&#xD;&#xA;Regarding abstraction: it turns out to be very difficult to do unless you already know in advance what the future direction of the language will be and can plan for it.  When a language grows 'organically' (as BASIC did) you often discover too late that your initial approach wasn't the best, but for compatibility reasons you can't go back and change it.&#xD;&#xA;&#xD;&#xA;" />
  <row Id="1294" PostHistoryTypeId="2" PostId="479" RevisionGUID="b7c29eb9-b9ec-4924-bfc8-a1b28366fb60" CreationDate="2016-05-12T16:12:51.540" UserId="446" Text="In addition to the answers above, something to keep in mind is that there wasn't a ton of commercial software available at the time compared to today and computers were not yet things that everyone needed or even found useful for their jobs. It's not like today where you could buy a computer, load it with Office and other software, use it to do your job, maybe even run your business and turn it into a multimillion dollar operation, and never touch a line of code. &#xD;&#xA;&#xD;&#xA;Meanwhile when I went to college in 1995 I had fellow freshmen who could barely get their PC turned on but they knew how to program in Pascal because the American school system at the time taught programming because they didn't know what else to do with these computer things everyone is buying, but they knew that it was going to be a &quot;thing&quot; in the future. &#xD;&#xA;&#xD;&#xA;So one of the reasons a lot of these old toy computers came with BASIC built in was because, compared to today, they didn't do much else. And they also tended to not run the software from the previous generation or any other computers (if you think about it, Apple's never completely shaken this mindset - they have few qualms about breaking backwards compatibility for machines more than a few years old and they sell a computer that can't run the software from the competition's platforms). Notice how it wasn't until the DOS/Windows cycle started happening that backwards compatibility became a big thing and then sales of computer took off. There were other factors too, like price, but it inspired a lot of consumer confidence when you could be reasonably certain your stuff could come along for the ride." />
  <row Id="1295" PostHistoryTypeId="2" PostId="480" RevisionGUID="f8fc5f20-c32b-4682-8be7-90ceea333fce" CreationDate="2016-05-12T16:17:32.170" UserId="29" Text="From Marty Goodman, writing in [The Rainbow, January 1987][1], page 102:&#xD;&#xA;&#xD;&#xA;&gt; The reason for the Multi-Pak fix for the CoCo 3 is at least twofold.&#xD;&#xA;&#xD;&#xA;&gt; First, the older PAL chips used to decode the software slot select port for the Multi-Pak “ghosted” from $FF7F to $FF9F. That is, when a value was written to $FF7F, it appeared at $FF9F also, and vice versa. This ghosting caused no problems with the CoCo 2, but it plays havoc with the CoCo 3, which occasionally wants to write to $FF9F when talking to its GIME chip. Similarly, any attempt at slot selection with a ghosting Multi-Pak will send spurious data to the GIME chip. Thus, the decoding of the software slot selection port had to be made more complete.&#xD;&#xA;&#xD;&#xA;&gt; Second, Tandy felt it necessary to lock out the $FF80 through $FF9F range ($FFA0 and up are already locked out by the programming of the old Multi-Pak PAL chips). This was to protect the GIME chip from conflicts with information from other external devices that might be addressed in that range.&#xD;&#xA;&#xD;&#xA;The article goes on to explain the hardware upgrades necessary to fix the Multi-Paks.&#xD;&#xA;&#xD;&#xA;  [1]: http://www.colorcomputerarchive.com/coco/Documents/Magazines/Rainbow,%20The%20(Searchable%20image)/The%20Rainbow%20Vol.%2006%20No.%2006%20-%20January%201987.pdf" />
  <row Id="1297" PostHistoryTypeId="2" PostId="481" RevisionGUID="92cafcc0-36e5-4645-8df2-f1acdd3f878d" CreationDate="2016-05-12T16:41:57.447" UserId="448" Text="I want to play nethack, a old game based on Rogue, on my OS X 10.11 machine. I can play it already, but I am interested in playing it on the original system, MS-DOS.&#xD;&#xA;&#xD;&#xA;Are there any free emulators for MS-DOS that run on an Apple machine with OS X?" />
  <row Id="1298" PostHistoryTypeId="1" PostId="481" RevisionGUID="92cafcc0-36e5-4645-8df2-f1acdd3f878d" CreationDate="2016-05-12T16:41:57.447" UserId="448" Text="How can I emulate MS-DOS on OS X?" />
  <row Id="1299" PostHistoryTypeId="3" PostId="481" RevisionGUID="92cafcc0-36e5-4645-8df2-f1acdd3f878d" CreationDate="2016-05-12T16:41:57.447" UserId="448" Text="&lt;ms-dos&gt;&lt;gaming&gt;" />
  <row Id="1300" PostHistoryTypeId="2" PostId="482" RevisionGUID="053918ce-6598-43f0-8bd6-ebe043d67ed7" CreationDate="2016-05-12T16:43:50.537" UserId="79" Text="The nicest DOS emulator for Mac OS X is [Boxer](http://boxerapp.com/), which is an OS X-specific version of [DOSBox](http://www.dosbox.com/). Not only is it free, it's free software (or open source if you prefer); its [source code](https://github.com/alunbestor/Boxer) is available and freely modifiable." />
  <row Id="1301" PostHistoryTypeId="2" PostId="483" RevisionGUID="b20f9ac5-aa3a-4227-adf6-b77c381ee4fa" CreationDate="2016-05-12T17:10:35.573" UserId="451" Text="A lot of great information has been given.&#xD;&#xA;&#xD;&#xA;One more thing to consider is what the machines were like. Most had no decent non-volatile storage - no hard drives, many didn't have diskette drives either. &#xD;&#xA;&#xD;&#xA;Even the original IBM-PC came with a cassette tape interface - they used a standard audio cassette recorder/player. Even when they had a diskette drive, the drive was often painfully slow. (Looking at you, Commodore 64.)&#xD;&#xA;&#xD;&#xA;Having a programming language built in meant that you only needed to save/load the very small program, and it meant that every instance of a given computer (ie, C64, TRS-80 Model III, TI/99, etc) had the exact same language available on it.&#xD;&#xA;&#xD;&#xA;This had value because computer magazines actually had programs printed in them, and the readers would laboriously type them in, debug the typos, and run them.&#xD;&#xA;&#xD;&#xA;" />
  <row Id="1302" PostHistoryTypeId="5" PostId="480" RevisionGUID="40121d0c-14c6-426c-b004-f2902a2eb231" CreationDate="2016-05-12T17:15:32.727" UserId="29" Comment="Added information on the actual upgrades." Text="From Marty Goodman, writing in [The Rainbow, January 1987][1], page 102:&#xD;&#xA;&#xD;&#xA;&gt; The reason for the Multi-Pak fix for the CoCo 3 is at least twofold.&#xD;&#xA;&#xD;&#xA;&gt; First, the older PAL chips used to decode the software slot select port for the Multi-Pak “ghosted” from $FF7F to $FF9F. That is, when a value was written to $FF7F, it appeared at $FF9F also, and vice versa. This ghosting caused no problems with the CoCo 2, but it plays havoc with the CoCo 3, which occasionally wants to write to $FF9F when talking to its GIME chip. Similarly, any attempt at slot selection with a ghosting Multi-Pak will send spurious data to the GIME chip. Thus, the decoding of the software slot selection port had to be made more complete.&#xD;&#xA;&#xD;&#xA;&gt; Second, Tandy felt it necessary to lock out the $FF80 through $FF9F range ($FFA0 and up are already locked out by the programming of the old Multi-Pak PAL chips). This was to protect the GIME chip from conflicts with information from other external devices that might be addressed in that range.&#xD;&#xA;&#xD;&#xA;The article goes on to explain the hardware upgrades necessary to fix the Multi-Paks:&#xD;&#xA;&#xD;&#xA;On the older Multi-Pak (26-3024) all that is necessary is to replace the PAL chip, U8, with updated PAL chip.&#xD;&#xA;&#xD;&#xA;On the newer Multi-Pak (26-3124), Marty makes the case to have the upgrade done by a professional:&#xD;&#xA;&#xD;&#xA;&gt; If you own one of the newer MPIs (Catalog No. 26-3124), I recommend you take your MPI to Tandy and have them upgrade it for you. This is because the upgrade involves cutting a trace on the circuit board, and then delicately soldering seven wires of the new satellite board to various integrated circuit chip pins on the board. If you feel totally comfortable with doing such work, what follows is a brief outline of the upgrade process.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.colorcomputerarchive.com/coco/Documents/Magazines/Rainbow,%20The%20(Searchable%20image)/The%20Rainbow%20Vol.%2006%20No.%2006%20-%20January%201987.pdf" />
  <row Id="1303" PostHistoryTypeId="2" PostId="484" RevisionGUID="6bb76119-3d0b-46d5-97d8-aa47f72de767" CreationDate="2016-05-12T17:25:01.770" UserId="81" Text="I would say no. I've never heard of anything like that ever. That would require dumping all of the memory of the actual Gameboy and the state of CPU, and then reading that information on startup. Highly unlikely anyone ever made anything like that as a device addon. " />
  <row Id="1304" PostHistoryTypeId="10" PostId="452" RevisionGUID="833df4bf-2f86-47ae-b424-25b09a99417e" CreationDate="2016-05-12T17:31:47.917" UserId="-1" Comment="105" Text="{&quot;Voters&quot;:[{&quot;Id&quot;:79,&quot;DisplayName&quot;:&quot;Stephen Kitt&quot;},{&quot;Id&quot;:4,&quot;DisplayName&quot;:&quot;Mark&quot;},{&quot;Id&quot;:92,&quot;DisplayName&quot;:&quot;blubberdiblub&quot;},{&quot;Id&quot;:56,&quot;DisplayName&quot;:&quot;fadden&quot;},{&quot;Id&quot;:81,&quot;DisplayName&quot;:&quot;Thraka&quot;}]}" />
  <row Id="1305" PostHistoryTypeId="5" PostId="481" RevisionGUID="7047b01b-8979-43a9-8d5e-1e6b43671bd8" CreationDate="2016-05-12T17:33:24.263" UserId="448" Comment="added 98 characters in body" Text="I want to play nethack, a old game based on Rogue, on my OS X 10.11 machine. I can play it already, but I am interested in playing it on the original system, MS-DOS.&#xD;&#xA;&#xD;&#xA;Are there any free emulators for MS-DOS that run on an Apple machine with OS X?&#xD;&#xA;&#xD;&#xA;I am also interested in checking out the older OSes, but nethack is one of the bigger reasons." />
  <row Id="1306" PostHistoryTypeId="2" PostId="485" RevisionGUID="e4cb7913-d63e-4bc2-ac01-9457ae057605" CreationDate="2016-05-12T17:43:52.310" UserId="125" Text="The [Apple Vault][1] has a fairly comprehensive [list of software titles which supported the Mockingboard][2].&#xD;&#xA;&#xD;&#xA;I do see several music programs in the list:&#xD;&#xA;&#xD;&#xA;    Bank Street Music Writer&#xD;&#xA;    Clarinet Master&#xD;&#xA;    Flute Master&#xD;&#xA;    GuitarMaster&#xD;&#xA;    Music Construction Set&#xD;&#xA;    Music Star&#xD;&#xA;    Saxophone Master&#xD;&#xA;    Trumpet Master&#xD;&#xA;&#xD;&#xA;And of course the list of games is quite long:&#xD;&#xA;&#xD;&#xA;    Adventure Construction Set&#xD;&#xA;    Airsim-3&#xD;&#xA;    Apple Cider Spider&#xD;&#xA;    At the Gates of Moscow 1941&#xD;&#xA;    Auto Gyro&#xD;&#xA;    Battle Cruiser SMS-2000&#xD;&#xA;    BerZap!&#xD;&#xA;    Bouncing Kamungas&#xD;&#xA;    Broadside&#xD;&#xA;    Crime Wave&#xD;&#xA;    Crowther and Woods Adventure&#xD;&#xA;    Crypt of Medea&#xD;&#xA;    GI-Joe&#xD;&#xA;    Lady Tut&#xD;&#xA;    Lancaster&#xD;&#xA;    Legionnaire&#xD;&#xA;    Lethal Labyrinth&#xD;&#xA;    Maze Craze&#xD;&#xA;    Microbe&#xD;&#xA;    Night Flight&#xD;&#xA;    One on One&#xD;&#xA;    Operation: Obliteration&#xD;&#xA;    Pitfall II&#xD;&#xA;    Popeye&#xD;&#xA;    Rescue Raiders&#xD;&#xA;    Silent Service&#xD;&#xA;    Singing Master&#xD;&#xA;    Skyfox&#xD;&#xA;    Spy Strikes Back&#xD;&#xA;    Tactical Armor Command&#xD;&#xA;    Thunderbombs&#xD;&#xA;    Ultima III&#xD;&#xA;    Ultima IV&#xD;&#xA;    Ultima V&#xD;&#xA;    Under Fire&#xD;&#xA;    Willy Byte&#xD;&#xA;    Window&#xD;&#xA;    Zaxxon&#xD;&#xA;    ZooKeeper &#xD;&#xA;&#xD;&#xA;Although based on [this Atari Age discussion thread][3], some of these games work better than others, and some of them (G.I. Joe, Lancaster) not at all.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.applevault.com&#xD;&#xA;  [2]: http://www.applevault.com/hardware/sweet_micro_systems/mockingboard/&#xD;&#xA;  [3]: http://atariage.com/forums/topic/228710-games-with-mockingboard-support/" />
  <row Id="1307" PostHistoryTypeId="6" PostId="481" RevisionGUID="7e19dea1-9547-4ffa-bda8-da9c3b48f4c4" CreationDate="2016-05-12T17:48:32.507" UserId="125" Comment="retagging with emulation" Text="&lt;emulation&gt;&lt;ms-dos&gt;&lt;gaming&gt;" />
  <row Id="1308" PostHistoryTypeId="24" PostId="481" RevisionGUID="7e19dea1-9547-4ffa-bda8-da9c3b48f4c4" CreationDate="2016-05-12T17:48:32.507" Comment="Proposed by 125 approved by 448 edit id of 137" />
  <row Id="1309" PostHistoryTypeId="5" PostId="477" RevisionGUID="9d997c1a-1042-4d99-886a-451b64d240e5" CreationDate="2016-05-12T17:56:46.487" UserId="29" Comment="You say you have three questions, but only pose two." Text="A popular, but, much maligned bus expansion device for the CoCo was the venerable MPI. There were several companies who made bus expasion devices for the CoCo, however, this question is related specifically to the Tandy version.&#xD;&#xA;&#xD;&#xA;There were three model numbers listed for the MPI:&#xD;&#xA;&#xD;&#xA; - 26-3024 - in both grey and white colors; &#xD;&#xA; - 26-3124 - in white, released about the same time the restyled CoCo 2&#xD;&#xA;   was;&#xD;&#xA; - 26-3124A - in white, released about the same time as the CoCo 3 was;&#xD;&#xA;&#xD;&#xA;It's pretty well known that the second two devices (3124 &amp; 3124A) were electronically identical with the original, but, used more circuit integration. However, there is a compatibility issue with the 3024 and 3124A when used with the CoCo 3.&#xD;&#xA;&#xD;&#xA;Two questions:&#xD;&#xA;&#xD;&#xA;1. What is the problem with using the 3024 and 3124 with the CoCo 3?&#xD;&#xA;2. Is there a method to fix the problem on either device?&#xD;&#xA;" />
  <row Id="1310" PostHistoryTypeId="24" PostId="477" RevisionGUID="9d997c1a-1042-4d99-886a-451b64d240e5" CreationDate="2016-05-12T17:56:46.487" Comment="Proposed by 29 approved by 173 edit id of 136" />
  <row Id="1311" PostHistoryTypeId="2" PostId="486" RevisionGUID="f0c5b9a0-a289-4c22-8695-163b7782f040" CreationDate="2016-05-12T18:06:42.680" UserId="452" Text="In short, it was because computers in the early age such as Apple ][ didn't come with OS and the BASIC was the INTERFACE you control your computer. You could access (read/write) files in the cassette tape via BASIC command such as load/save. Later OSs were introduced with Floppy disk drive. " />
  <row Id="1313" PostHistoryTypeId="5" PostId="482" RevisionGUID="331ce093-d612-4186-916e-a490037e9287" CreationDate="2016-05-12T18:12:51.010" UserId="79" Comment="Add FreeDOS/VirtualBox." Text="The nicest DOS emulator for Mac OS X is [Boxer](http://boxerapp.com/), which is an OS X-specific version of [DOSBox](http://www.dosbox.com/). Not only is it free, it's free software (or open source if you prefer); its [source code](https://github.com/alunbestor/Boxer) is available and freely modifiable.&#xD;&#xA;&#xD;&#xA;Boxer or DOSBox are the best option nowadays for running old DOS games (it has pretty good hardware emulation for the kinds of peripherals used with games). If you want a full-blown DOS experience, you could install [FreeDOS](http://www.freedos.org) inside a [VirtualBox](http://www.virtualbox.org) virtual machine, but that's more complicated to set up." />
  <row Id="1314" PostHistoryTypeId="5" PostId="482" RevisionGUID="a1c1b481-fb9d-487e-ae5c-e52abe15b4e7" CreationDate="2016-05-12T18:14:36.887" UserId="79" Comment="added 7 characters in body" Text="The nicest DOS emulator for Mac OS X is [Boxer](http://boxerapp.com/), which is an OS X-specific version of [DOSBox](http://www.dosbox.com/). Not only is it free, it's free software (or open source if you prefer); its [source code](https://github.com/alunbestor/Boxer) is available and freely modifiable.&#xD;&#xA;&#xD;&#xA;Boxer or DOSBox are the best option nowadays for running old DOS games (it has pretty good hardware emulation for the kinds of peripherals used with games). If you want a full-blown, free, DOS experience, you could install [FreeDOS](http://www.freedos.org) inside a [VirtualBox](http://www.virtualbox.org) virtual machine, but that's more complicated to set up." />
  <row Id="1315" PostHistoryTypeId="6" PostId="481" RevisionGUID="0444adba-4d87-4933-a060-081453d0e9a3" CreationDate="2016-05-12T18:15:33.913" UserId="4" Comment="edited tags" Text="&lt;emulation&gt;&lt;software-recommendation&gt;&lt;ms-dos&gt;&lt;gaming&gt;" />
  <row Id="1319" PostHistoryTypeId="5" PostId="481" RevisionGUID="936a28bd-1ef3-4ff9-adc9-b6c98ac5bda7" CreationDate="2016-05-12T18:28:58.327" UserId="448" Comment="added 97 characters in body" Text="I want to play nethack, a old game based on Rogue, on my OS X 10.11 machine. I can play it already, but I am interested in playing it on the original system, MS-DOS.&#xD;&#xA;&#xD;&#xA;Are there any free emulators for MS-DOS that run on an Apple machine with OS X?&#xD;&#xA;&#xD;&#xA;I am also interested in checking a the older OS, but nethack is one of the bigger reasons. &#xD;&#xA;&#xD;&#xA;I want a full emulator though, not a version that only does some things, even if nethack is one." />
  <row Id="1320" PostHistoryTypeId="6" PostId="8" RevisionGUID="d37710aa-3d3b-4987-93fc-0c201c4eed3d" CreationDate="2016-05-12T18:38:06.100" UserId="278" Comment="Removed [tag:computer] as per http://meta.retrocomputing.stackexchange.com/a/91/278" Text="&lt;zx-spectrum&gt;&lt;power&gt;" />
  <row Id="1321" PostHistoryTypeId="24" PostId="8" RevisionGUID="d37710aa-3d3b-4987-93fc-0c201c4eed3d" CreationDate="2016-05-12T18:38:06.100" Comment="Proposed by 278 approved by 56, 79 edit id of 132" />
  <row Id="1322" PostHistoryTypeId="5" PostId="482" RevisionGUID="7cdddcd9-2546-476c-b0d7-5005d8fa5781" CreationDate="2016-05-12T18:41:13.693" UserId="79" Comment="Add DR-DOS and MS-DOS. Mention that real hardware is better." Text="The nicest DOS emulator for Mac OS X is [Boxer](http://boxerapp.com/), which is an OS X-specific version of [DOSBox](http://www.dosbox.com/). Not only is it free, it's free software (or open source if you prefer); its [source code](https://github.com/alunbestor/Boxer) is available and freely modifiable.&#xD;&#xA;&#xD;&#xA;Boxer or DOSBox are the best option nowadays for running old DOS games (it has pretty good hardware emulation for the kinds of peripherals used with games). If you want a full-blown, free, DOS experience, you could install [FreeDOS](http://www.freedos.org) inside a [VirtualBox](http://www.virtualbox.org) virtual machine, but that's more complicated to set up. Instead of FreeDOS, inside VirtualBox, you could also try [DR-DOS](http://drdos.net/download.htm), or MS-DOS if you have a license for it.&#xD;&#xA;&#xD;&#xA;If you're looking to really experience what the operating system was like back when it was still in widespread use, you'll need to find an old PC and run DOS directly on it — a lot of the quirks of daily DOS use are related to the hardware of the time (IRQ handling, memory management...), and emulation environments, be they DOS emulators such as DOSBox or full-blown virtual machines such as VirtualBox, don't allow you to relive that to the same extent." />
  <row Id="1323" PostHistoryTypeId="5" PostId="482" RevisionGUID="8027eebf-682a-418c-85c9-4afa69daca8f" CreationDate="2016-05-12T18:47:53.227" UserId="79" Comment="Mention the absence of VB GA." Text="The nicest DOS emulator for Mac OS X is [Boxer](http://boxerapp.com/), which is an OS X-specific version of [DOSBox](http://www.dosbox.com/). Not only is it free, it's free software (or open source if you prefer); its [source code](https://github.com/alunbestor/Boxer) is available and freely modifiable.&#xD;&#xA;&#xD;&#xA;Boxer or DOSBox are the best option nowadays for running old DOS games (it has pretty good hardware emulation for the kinds of peripherals used with games). If you want a full-blown, free, DOS experience, you could install [FreeDOS](http://www.freedos.org) inside a [VirtualBox](http://www.virtualbox.org) virtual machine, but that's more complicated to set up; in particular, VirtualBox's guest additions aren't available for DOS, so it's harder to transfer files from your OS X environment to your DOS environment than it is with Boxer. Instead of FreeDOS, inside VirtualBox, you could also try [DR-DOS](http://drdos.net/download.htm), or MS-DOS if you have a license for it.&#xD;&#xA;&#xD;&#xA;If you're looking to really experience what the operating system was like back when it was still in widespread use, you'll need to find an old PC and run DOS directly on it — a lot of the quirks of daily DOS use are related to the hardware of the time (IRQ handling, memory management...), and emulation environments, be they DOS emulators such as DOSBox or full-blown virtual machines such as VirtualBox, don't allow you to relive that to the same extent." />
  <row Id="1325" PostHistoryTypeId="5" PostId="485" RevisionGUID="b3036506-2ebe-4b74-b72e-dc27324e26f5" CreationDate="2016-05-12T19:18:25.913" UserId="125" Comment="added 1 character in body" Text="The [Apple Vault][1] has a fairly comprehensive [list of software titles which supported the Mockingboard][2].&#xD;&#xA;&#xD;&#xA;I do see several music programs in the list:&#xD;&#xA;&#xD;&#xA;    Bank Street Music Writer&#xD;&#xA;    Clarinet Master&#xD;&#xA;    Flute Master&#xD;&#xA;    GuitarMaster&#xD;&#xA;    Music Construction Set&#xD;&#xA;    Music Star&#xD;&#xA;    Saxophone Master&#xD;&#xA;    Trumpet Master&#xD;&#xA;&#xD;&#xA;And of course the list of games is quite long:&#xD;&#xA;&#xD;&#xA;    Adventure Construction Set&#xD;&#xA;    Airsim-3&#xD;&#xA;    Apple Cider Spider&#xD;&#xA;    At the Gates of Moscow 1941&#xD;&#xA;    Auto Gyro&#xD;&#xA;    Battle Cruiser SMS-2000&#xD;&#xA;    BerZap!&#xD;&#xA;    Bouncing Kamungas&#xD;&#xA;    Broadside&#xD;&#xA;    Crime Wave&#xD;&#xA;    Crowther and Woods Adventure&#xD;&#xA;    Crypt of Medea&#xD;&#xA;    GI-Joe&#xD;&#xA;    Lady Tut&#xD;&#xA;    Lancaster&#xD;&#xA;    Legionnaire&#xD;&#xA;    Lethal Labyrinth&#xD;&#xA;    Maze Craze&#xD;&#xA;    Microbe&#xD;&#xA;    Night Flight&#xD;&#xA;    One on One&#xD;&#xA;    Operation: Obliteration&#xD;&#xA;    Pitfall II&#xD;&#xA;    Popeye&#xD;&#xA;    Rescue Raiders&#xD;&#xA;    Silent Service&#xD;&#xA;    Singing Master&#xD;&#xA;    Skyfox&#xD;&#xA;    Spy Strikes Back&#xD;&#xA;    Tactical Armor Command&#xD;&#xA;    Thunderbombs&#xD;&#xA;    Ultima III&#xD;&#xA;    Ultima IV&#xD;&#xA;    Ultima V&#xD;&#xA;    Under Fire&#xD;&#xA;    Willy Byte&#xD;&#xA;    Window&#xD;&#xA;    Zaxxon&#xD;&#xA;    ZooKeeper &#xD;&#xA;&#xD;&#xA;Although based on [this Atari Age discussion thread][3], some of these titles work better than others, and some of them (G.I. Joe, Lancaster) not at all.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.applevault.com&#xD;&#xA;  [2]: http://www.applevault.com/hardware/sweet_micro_systems/mockingboard/&#xD;&#xA;  [3]: http://atariage.com/forums/topic/228710-games-with-mockingboard-support/" />
  <row Id="1326" PostHistoryTypeId="5" PostId="485" RevisionGUID="b4d8d077-ce85-42d0-96b2-99a8865ed53a" CreationDate="2016-05-12T19:24:41.757" UserId="125" Comment="added link to reactivemicro.com" Text="The [Apple Vault][1] has a fairly comprehensive [list of software titles which supported the Mockingboard][2].&#xD;&#xA;&#xD;&#xA;I do see several music programs in the list:&#xD;&#xA;&#xD;&#xA;    Bank Street Music Writer&#xD;&#xA;    Clarinet Master&#xD;&#xA;    Flute Master&#xD;&#xA;    GuitarMaster&#xD;&#xA;    Music Construction Set&#xD;&#xA;    Music Star&#xD;&#xA;    Saxophone Master&#xD;&#xA;    Trumpet Master&#xD;&#xA;&#xD;&#xA;And of course the list of games is quite long:&#xD;&#xA;&#xD;&#xA;    Adventure Construction Set&#xD;&#xA;    Airsim-3&#xD;&#xA;    Apple Cider Spider&#xD;&#xA;    At the Gates of Moscow 1941&#xD;&#xA;    Auto Gyro&#xD;&#xA;    Battle Cruiser SMS-2000&#xD;&#xA;    BerZap!&#xD;&#xA;    Bouncing Kamungas&#xD;&#xA;    Broadside&#xD;&#xA;    Crime Wave&#xD;&#xA;    Crowther and Woods Adventure&#xD;&#xA;    Crypt of Medea&#xD;&#xA;    GI-Joe&#xD;&#xA;    Lady Tut&#xD;&#xA;    Lancaster&#xD;&#xA;    Legionnaire&#xD;&#xA;    Lethal Labyrinth&#xD;&#xA;    Maze Craze&#xD;&#xA;    Microbe&#xD;&#xA;    Night Flight&#xD;&#xA;    One on One&#xD;&#xA;    Operation: Obliteration&#xD;&#xA;    Pitfall II&#xD;&#xA;    Popeye&#xD;&#xA;    Rescue Raiders&#xD;&#xA;    Silent Service&#xD;&#xA;    Singing Master&#xD;&#xA;    Skyfox&#xD;&#xA;    Spy Strikes Back&#xD;&#xA;    Tactical Armor Command&#xD;&#xA;    Thunderbombs&#xD;&#xA;    Ultima III&#xD;&#xA;    Ultima IV&#xD;&#xA;    Ultima V&#xD;&#xA;    Under Fire&#xD;&#xA;    Willy Byte&#xD;&#xA;    Window&#xD;&#xA;    Zaxxon&#xD;&#xA;    ZooKeeper &#xD;&#xA;&#xD;&#xA;Although based on [this Atari Age discussion thread][3], some of these titles work better than others, and some of them (G.I. Joe, Lancaster) not at all.&#xD;&#xA;&#xD;&#xA;In 2005 ReactiveMicro.com re-introduced the Mockingboard.  Their [manual can be found here][4], and has a similar list of supported titles.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.applevault.com&#xD;&#xA;  [2]: http://www.applevault.com/hardware/sweet_micro_systems/mockingboard/&#xD;&#xA;  [3]: http://atariage.com/forums/topic/228710-games-with-mockingboard-support/&#xD;&#xA;  [4]: http://www.downloads.reactivemicro.com/Public/Apple%20II%20Items/Hardware/Mockingboard_v1/Mockingboard-v1a-Docs.pdf" />
  <row Id="1327" PostHistoryTypeId="5" PostId="365" RevisionGUID="5ce55f16-cfb5-4f39-b4a9-01fd86f16f94" CreationDate="2016-05-12T20:34:50.220" UserId="173" Comment="Added a little more info that might help others with a similar problem." Text="[The same stuff used to clean electronics mentioned in this answer][1] (e.g., &quot;CRC QD Contact Cleaner&quot;) will also clean contacts in computer keyboards. As discussed there, do not get the type used to clean and _lubricate_ potentiometers, as this has a (surprise!) light lubricant in it. Still, an easy to make mistake.&#xD;&#xA;&#xD;&#xA;The plain old contact cleaner found at hardware and electronic supply stores will do. Remove the keyboard from the case, and spray spaces between the keys liberally, letting the liquid run and boil out the various holes at the bottom and sides.&#xD;&#xA;&#xD;&#xA;I've used this stuff to clean pop out of an original silver Color Computer in the 80s.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Additional info - I used the stuff you recommended and it worked - mostly. I had to add a thin piece of felt under the keyboard mylar to get the keyboard fully working. Being as this was a common type of keyboard for the day, this addition might be helpful to others.&#xD;&#xA;&#xD;&#xA;  [1]: http://retrocomputing.stackexchange.com/a/7/12" />
  <row Id="1328" PostHistoryTypeId="24" PostId="365" RevisionGUID="5ce55f16-cfb5-4f39-b4a9-01fd86f16f94" CreationDate="2016-05-12T20:34:50.220" Comment="Proposed by 173 approved by -1 edit id of 138" />
  <row Id="1329" PostHistoryTypeId="5" PostId="365" RevisionGUID="72b6bb56-a465-458a-9439-93fbaa6ddb5c" CreationDate="2016-05-12T20:34:50.220" UserId="12" Comment="Added a little more info that might help others with a similar problem." Text="[The same stuff used to clean electronics mentioned in this answer][1] (e.g., &quot;CRC QD Contact Cleaner&quot;) will also clean contacts in computer keyboards. As discussed there, do not get the type used to clean and _lubricate_ potentiometers, as this has a (surprise!) light lubricant in it. Still, an easy to make mistake.&#xD;&#xA;&#xD;&#xA;The plain old contact cleaner found at hardware and electronic supply stores will do. Remove the keyboard from the case, and spray spaces between the keys liberally, letting the liquid run and boil out the various holes at the bottom and sides.&#xD;&#xA;&#xD;&#xA;I've used this stuff to clean pop out of an original silver Color Computer in the 80s.&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;&#xD;&#xA;The OP used this stuff I recommended and it worked - mostly. He had to add a thin piece of felt under the keyboard mylar to get the keyboard fully working. Being as this was a common type of keyboard for the day, this addition might be helpful to others.&#xD;&#xA;&#xD;&#xA;  [1]: http://retrocomputing.stackexchange.com/a/7/12" />
  <row Id="1330" PostHistoryTypeId="5" PostId="466" RevisionGUID="7a84df71-7d92-465d-9ba7-93e0978de7c1" CreationDate="2016-05-12T20:36:41.267" UserId="111" Comment="additional explanation" Text="As it says in Wikipedia [BASIC](https://en.wikipedia.org/wiki/BASIC):&#xD;&#xA;&gt;The introduction of the first microcomputers in the mid-1970s was the start of explosive growth for BASIC. It had the advantage that it was fairly well known to the young designers and computer hobbyists who took an interest in microcomputers.  &#xD;&#xA;... BASIC was one of the few languages that was both high-level enough to be usable by those without training and small enough to fit into the microcomputers of the day, making it the de facto standard programming language on early microcomputers.&#xD;&#xA;&#xD;&#xA;In other words, it was easy to learn even for those with no programming experience, and the interpreter memory footprint was small, which was important due to the cost of memory.  &#xD;&#xA;(I don't exactly recall, but back in the 80s an 8k bit RAM chip in C64 cost several dollars.)&#xD;&#xA;&#xD;&#xA;The use of an interpreter was also important from an ease of use point. While other existing languages were similar and not so difficult to learn (for example FORTRAN), they had to be compiled.  &#xD;&#xA;&#xD;&#xA;This means that instead of getting instant results (or errors), you had to write the code, compile it (hopefully no errors otherwise you had to change the code again and compile again), and then run it. If any errors, back to square one you go.  " />
  <row Id="1331" PostHistoryTypeId="2" PostId="488" RevisionGUID="3f56cea1-d445-4aab-814a-ff6267dda617" CreationDate="2016-05-12T20:37:22.587" UserId="340" Text="During the late 1970s and early 1980s, ROM was cheaper than RAM.  The amount of useful work that can be accomplished with a BASIC program that occupies a certain amount of RAM will be often greater than the amount that could be accomplished with the same quantity of machine code, so a computer with 16K of ROM and 8K of RAM could be more useful than one with 2K of ROM and 16K of RAM, even though the latter computer would cost more.&#xD;&#xA;&#xD;&#xA;Further, editing a BASIC program &quot;in place&quot; is much more efficient than trying to do likewise with a machine-language program.  In-place editing of machine code is possible, but for the most part generating efficient machine code requires creating a text file and passing it through an assembler.  This in turn generally entails a long slow process every time one wants to modify the code and test it again.  By contrast, in-place editing of a BASIC program is easy, and for many kinds of programs cutting the edit-build-test cycle from five minutes to five seconds is a huge benefit which vastly outweighs the difference in execution speed.&#xD;&#xA;&#xD;&#xA;The need for BASIC largely disappeared when RAM got cheap enough that platforms like Turbo Pascal could allow the editor, compiler, source code, executable, and data to all be kept in memory simultaneously.  Basic's primary benefit was the ability to keep everything in RAM, and once such ability became available in a compiled language there was no longer a reason to tolerate the slowness or semantic limitations of interpreted BASIC." />
  <row Id="1332" PostHistoryTypeId="5" PostId="481" RevisionGUID="223bd2c9-bfa4-4d1e-9062-f9dfbc518922" CreationDate="2016-05-13T00:11:53.863" UserId="448" Comment="added 246 characters in body" Text="I am looking for a emulator for MS-DOS for OS X. I would like to try running it for various reasons, including playing nethack on a older OS and as a learning experience with old technology.&#xD;&#xA;&#xD;&#xA;Are there any free emulators for MS-DOS that run on an Apple machine with OS X?&#xD;&#xA;&#xD;&#xA;I am also interested in checking a the older OS, but nethack is one of the bigger reasons. &#xD;&#xA;&#xD;&#xA;I want a full emulator though, not a version that only does some things, even if nethack is one.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;##Because of confusion: I want the full emulator. Not to run nethack&lt;sup&gt;*&lt;/sup&gt;, but for the sake of the emulator.&#xD;&#xA;&#xD;&#xA;\* - Yeah, I want to run nethack. That isn't really the motivation behind getting this though." />
  <row Id="1336" PostHistoryTypeId="6" PostId="463" RevisionGUID="07a843bc-74b9-4bde-847e-3fe339ab23aa" CreationDate="2016-05-13T06:23:02.590" UserId="278" Comment="Replaced specific BASIC tags with general BASIC tag." Text="&lt;operating-system&gt;&lt;basic&gt;" />
  <row Id="1337" PostHistoryTypeId="6" PostId="64" RevisionGUID="0cfdb85a-0eae-4fde-8046-84c0dfde91ba" CreationDate="2016-05-13T09:35:02.140" UserId="448" Comment="We don't need 2 tags, [dos] and [ms-dos]" Text="&lt;display&gt;&lt;color&gt;&lt;ms-dos&gt;" />
  <row Id="1338" PostHistoryTypeId="24" PostId="64" RevisionGUID="0cfdb85a-0eae-4fde-8046-84c0dfde91ba" CreationDate="2016-05-13T09:35:02.140" Comment="Proposed by 448 approved by 56, 4 edit id of 133" />
  <row Id="1339" PostHistoryTypeId="5" PostId="161" RevisionGUID="7f4e41fb-4f39-4d3f-be42-072241ee5c7e" CreationDate="2016-05-13T11:19:53.453" UserId="74" Comment="added 67 characters in body" Text="Some small utilities, tools etc for Atari were distributed as BASIC programs that would consist of just one line, that looked something like this:&#xD;&#xA;&#xD;&#xA;    10 A=USR(ADR(&quot;p$PHHLéúÿÿÇEéúÿÿ@éüÿÿ2A$éòùÿÿE°U´è§øÿÿøÿÆûÿÿé`&quot;))&#xD;&#xA;&#xD;&#xA;Sometimes they would be split into two lines, but rarely more.&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;Essentially, the machine language program was encoded as a string (Atari could display all 256 characters of ATASCII even if typing some of them required some hoop-jumping), the string was wrapped into ADR (returning the address of the string) and USR (jumping to the address given).&#xD;&#xA;&#xD;&#xA;I can't quite imagine anyone converting the binary generated by the assembler into ATASCII by hand, especially if the program was longer. There had to be some utility to do this - emit a fragment of memory as string, wrap it into the commands, save as BASIC program. Is it obtainable somehow?&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/S8mUr.png" />
  <row Id="1340" PostHistoryTypeId="2" PostId="490" RevisionGUID="ed165fc6-6056-4c31-b56b-229a142e294c" CreationDate="2016-05-13T11:37:09.757" UserId="173" Text="Tim's answer referencing Marty Goodman offers a good explanation, but not really any options for users today who might need to make this upgrade.&#xA;&#xA;The 3024 model can be modified with a simple PAL upgrade, available from [Cloud9][1]&#xA;&#xA;If you have access to a programmer and the proper GAL, there's information on Coco3.con for another option:&#xA;&#xA; If you get a Gray or White Large MPI (both have cat # 26-3024), then the procedure is different – you simply replace the 14L4 PAL with a properly programmed 16V8. You can’t use the equations presented above for a 26-3024. Instead, use these:&#xA;Name 26-3024 M.P.I. Upgrade ;&#xA;PartNo GCC-3024.01 ;&#xA;Date 6/1/2010 ;&#xA;Revision 01 ;&#xA;Designer J&amp;R ;&#xA;Company GIMEchip.com ;&#xA;Assembly 26-3024 M.P.I. Upgrade PAL for CoCo 3 ;&#xA;Location U6 ;&#xA;Device g16v8 ;&#xA;/* ***************************************** INPUT PINS **********************************************/&#xA;PIN 01 = !FFXX; /* LOW For Any Address Between $FF00-$FFFF */&#xA;PIN [2..9] = [A7..0]; /* CPU A7 – A0 */&#xA;PIN 11 = RW; /* READ = 1, WRITE = 0 */&#xA;PIN 12 = E; /* E-Clock */&#xA;PIN 13 = Q; /* Q-Clock */&#xA;PIN 18 = !CTS; /* Cartridge Select Signal. */&#xA;PIN 19 = !SLENB; /* Input To Disable Device Selection. */&#xA;/* ***************************************** OUTPUT PINS *********************************************/&#xA;PIN 14 = !DBEN; /* Enables The Multi-Pak Interface Data Buffer */&#xA;PIN 15 = !IOR; /* Read the Slot Select Latch. */&#xA;PIN 16 = !IOW; /* Write the Slot Select Latch */&#xA;/* ***************************** LOGIC EQUATIONS &amp; VARIABLE DEFINITIONS ******************************/&#xA;FIELD ADDRESS = [A7..0]; /* */&#xA;LATCH = ADDRESS:[7F]; /* Slot Select Latch@$FF7F */&#xA;IOR = LATCH &amp; FFXX &amp; E &amp; RW; /* Active on $FF7F and E=1 and RW=1 */&#xA;IOW = LATCH &amp; FFXX &amp; E &amp; !RW &amp; !Q; /* Active on $FF7F and E=1 and RW=0 and Q=0 */&#xA;DBEN = (ADDRESS:[40..7F] &amp; FFXX) # SLENB # CTS;/* Active $FF40-$FF7F or SLENB or CTS */&#xA;/* ***************************************************************************************************/&#xA;&#xA;The 3124 model can be upgraded according to this image from coco3.com using a 74LS10 and some soldering skills:&#xA;&#xA;[![Little John's 74LS10 upgrade][2]][2]&#xA;&#xA;Once you make this upgrade, your MPI will only be address compatible with the CoCo 3.&#xA;&#xA;  [1]: http://www.frontiernet.net/~mmarlette/Cloud-9/Hardware/MPI%20PAL.html&#xA;  [2]: http://i.stack.imgur.com/gVXsS.jpg" />
  <row Id="1341" PostHistoryTypeId="2" PostId="491" RevisionGUID="c8ea2a36-18af-4718-9d19-f8612a3de8e4" CreationDate="2016-05-13T13:16:29.223" UserId="485" Text="The _CPU_ companies had contracts with the designers of BASIC (Bill Gates).&#xD;&#xA;For people designing computers it made sense to use the language they had already paid the license fee for (BASIC).  BASIC was good because it was small and predictable, exactly the thing for a ROM chip of the day.  Every computer needs start instructions, originally stored in ROM, at the lowest bootstrap addresses.&#xD;&#xA;Since peripheral storage was VERY expensive, and ROM was cheap, it made good sense to use BASIC, for basic programs.&#xD;&#xA; Also BASIC contained &quot;load&quot; and &quot;save&quot; commands, which could be used interactively by the user and the users permanent storage medium (tapes or drives).  This meant BASIC machines were very flexible, especially before WIMP technology became affordable.&#xD;&#xA;  Why was it memory addressed? Because that was the cheapest way to do it.  Even simple chips cost a fortune, and were very sensitive to timing and current/heat issues.  The less chips, the _far_ less difficulty getting a working computer off the production line.  Since early PC's and home computers were going for office desk and home desk market cost was a massive concern." />
  <row Id="1342" PostHistoryTypeId="2" PostId="492" RevisionGUID="66bb425c-3583-4002-bd4c-b9aff781d3a1" CreationDate="2016-05-13T14:49:05.933" UserId="439" Text="I use this — **though rewired for centre negative** — and it works well: [AC/DC Adapter - 9VDC 2.2A](http://www.circuittest.com/rpr-092a2-p5-ac-dc-adapter-9vdc-2-2a.html &quot;AC/DC Adapter - 9VDC 2.2A&quot;). Circuit-Test make a [9VDC 1.5A centre negative](http://www.circuittest.com/rpr-091a5-n5-ac-dc-adapter-9vdc-1-5a.html &quot;9VDC 1.5A&quot;) unit that should work without rewiring. Maybe get a [Barrel Jack Power Switch](https://www.sparkfun.com/products/11705 &quot;Barrel Jack Power Switch&quot;) while you're at it, since the Speccy has no power switch.&#xD;&#xA;&#xD;&#xA;I'm in Canada, so while these units are 110-240 V AC input, the plugs won't work well in the UK.&#xD;&#xA;&#xD;&#xA;Guitar pedals, although 9V centre negative, are often only 0.25-0.5 A, so wouldn't be able to power a ZX Spectrum reliably." />
  <row Id="1343" PostHistoryTypeId="5" PostId="477" RevisionGUID="b0408a63-128e-41cf-8d87-ea50be928b66" CreationDate="2016-05-13T15:03:38.400" UserId="173" Comment="deleted 1 character in body" Text="A popular, but, much maligned bus expansion device for the CoCo was the venerable MPI. There were several companies who made bus expasion devices for the CoCo, however, this question is related specifically to the Tandy version.&#xD;&#xA;&#xD;&#xA;There were three model numbers listed for the MPI:&#xD;&#xA;&#xD;&#xA; - 26-3024 - in both grey and white colors; &#xD;&#xA; - 26-3124 - in white, released about the same time the restyled CoCo 2&#xD;&#xA;   was;&#xD;&#xA; - 26-3124A - in white, released about the same time as the CoCo 3 was;&#xD;&#xA;&#xD;&#xA;It's pretty well known that the second two devices (3124 &amp; 3124A) were electronically identical with the original, but, used more circuit integration. However, there is a compatibility issue with the 3024 and 3124 when used with the CoCo 3.&#xD;&#xA;&#xD;&#xA;Two questions:&#xD;&#xA;&#xD;&#xA;1. What is the problem with using the 3024 and 3124 with the CoCo 3?&#xD;&#xA;2. Is there a method to fix the problem on either device?&#xD;&#xA;" />
  <row Id="1344" PostHistoryTypeId="2" PostId="493" RevisionGUID="9212d26e-344d-4c7f-9895-cf0c4efc27e0" CreationDate="2016-05-13T15:15:50.267" UserId="439" Text="Although there were standards for BASIC available — [ECMA-55, January 1978](http://www.ecma-international.org/publications/files/ECMA-ST-WITHDRAWN/ECMA-55,%201st%20Edition,%20January%201978.pdf &quot;ECMA-55, 1st Edition, January 1978.pdf&quot;) [PDF], ANSI X3.60-1978 — development timelines were so short for home computers that manufacturers had to scramble for what they could get, but also tweak a few features so a BASIC demo could show off *some* of the computer's new features in the showroom.&#xD;&#xA;&#xD;&#xA;Commodore's BASICs were notoriously feature-free, as Jack Tramiel didn't want to keep paying Microsoft for updates. In the UK, the BBC's education requirements meant that the Acorn BBC micro had to have a really solid BASIC. Millions of computers were sold on the convenient fantasy of &quot;being educational&quot;, so a solid BASIC was important. International projects such as [BASICODE](https://en.wikipedia.org/wiki/BASICODE &quot;BASICODE&quot;) attempted to standardize on top of all of the variants.&#xD;&#xA;&#xD;&#xA;The only home computer (that wasn't sold as a game console) I know of that didn't use BASIC was the [Jupiter Ace](https://en.wikipedia.org/wiki/Jupiter_Ace &quot;Jupiter Ace&quot;). It used [Forth](http://www.forth.org/ &quot;Forth&quot;)." />
  <row Id="1345" PostHistoryTypeId="2" PostId="494" RevisionGUID="c39d82ab-c7da-4a9d-8633-f6be665ca75e" CreationDate="2016-05-13T16:02:41.443" UserId="56" Text="Programs written in Apple's Integer BASIC sometimes had bits of machine code embedded in them.  This was more convenient than loading the code separately, especially when the program was loaded from tape.&#xD;&#xA;&#xD;&#xA;When the program is first loaded, it looks garbled.  For example, the classic APPLEVISION demo starts like this:&#xD;&#xA;&#xD;&#xA;        0 LOMEM:1800&#xD;&#xA;        1 HIMEM:8192: POKE 202,165: POKE 203,27:LOMEM:6144:CLR : GOTO 0&#xD;&#xA;     8264, RUN LOMEM:*2664439008, ^ , RUN , ? ABS *2664439008, ^ , RUN ABS *266438288; RUN ^ , RUN 6164,=58882/42004#2112 24576*&#xD;&#xA;&#xD;&#xA;The `LIST` command would sometimes go into an infinite loop.  But after the program is first run, the listing looks more normal:&#xD;&#xA;&#xD;&#xA;        0 REM  *** APPLE-VISION ***  WRITTEN BY R.J. BISHOP&#xD;&#xA;       20 DIM A$(51)&#xD;&#xA;       30 A$=&quot;       BOB BISHOP PRESENTS . . . APPLE-VISION!       &quot;&#xD;&#xA;       40 CALL -936&#xD;&#xA;&#xD;&#xA;How does this work, in terms of both the underlying mechanism and the mechanics of developing a program that hides code this way?  e.g. how does one combine the BASIC and machine code portions before saving to disk or tape?&#xD;&#xA;" />
  <row Id="1346" PostHistoryTypeId="1" PostId="494" RevisionGUID="c39d82ab-c7da-4a9d-8633-f6be665ca75e" CreationDate="2016-05-13T16:02:41.443" UserId="56" Text="How were binary subroutines embedded in Integer BASIC programs?" />
  <row Id="1347" PostHistoryTypeId="3" PostId="494" RevisionGUID="c39d82ab-c7da-4a9d-8633-f6be665ca75e" CreationDate="2016-05-13T16:02:41.443" UserId="56" Text="&lt;apple-ii&gt;&lt;integer-basic&gt;" />
  <row Id="1348" PostHistoryTypeId="2" PostId="495" RevisionGUID="d21cb2af-c89a-49c3-af41-6d5472b8afc3" CreationDate="2016-05-13T18:16:21.693" UserId="462" Text="Old keyboards like the one below seem to have contributed a lot to the design of modern keyboards. So, obviously, some of the keys are familiar because they are on my own average (modern Windows and Mac) keyboards, such as &lt;kbd&gt;space bar&lt;/kbd&gt;, &lt;kbd&gt;tab&lt;/kbd&gt;, &lt;kbd&gt;return&lt;/kbd&gt;, and so on. Assuming that they do the same thing as the keys on modern keyboards, I don't need them explained.&#xD;&#xA;&#xD;&#xA;But what do all the other keys do? And how would you type the other symbols (like &lt;kbd&gt;≥&lt;/kbd&gt; and &lt;kbd&gt;¬&lt;/kbd&gt;) on the main section of keys?&#xD;&#xA;&#xD;&#xA;![strange keys][1]&#xD;&#xA;&lt;sup&gt;https://en.wikipedia.org/wiki/Space-cadet_keyboard&lt;/sup&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/ww3Ff.jpg" />
  <row Id="1349" PostHistoryTypeId="1" PostId="495" RevisionGUID="d21cb2af-c89a-49c3-af41-6d5472b8afc3" CreationDate="2016-05-13T18:16:21.693" UserId="462" Text="What do the keys on this Symbolics Space Cadet keyboard do?" />
  <row Id="1350" PostHistoryTypeId="3" PostId="495" RevisionGUID="d21cb2af-c89a-49c3-af41-6d5472b8afc3" CreationDate="2016-05-13T18:16:21.693" UserId="462" Text="&lt;keyboards&gt;" />
  <row Id="1352" PostHistoryTypeId="2" PostId="496" RevisionGUID="26ea9f9a-0318-4a73-b073-a904eb28f095" CreationDate="2016-05-13T21:50:33.813" UserId="79" Text="The Space Cadet is a keyboard designed for use with Symbolics' [Lisp Machines][1], and many of the extra keys are specific to that use.&#xD;&#xA;&#xD;&#xA;Starting from the bottom row:&#xD;&#xA;&#xD;&#xA;* &lt;kbd&gt;Hyper&lt;/kbd&gt;, &lt;kbd&gt;Super&lt;/kbd&gt;, &lt;kbd&gt;Meta&lt;/kbd&gt; and &lt;kbd&gt;Ctrl&lt;/kbd&gt; are modifier keys, known as bucky keys; they are equivalent in use to the &lt;kbd&gt;Ctrl&lt;/kbd&gt;, &lt;kbd&gt;Alt&lt;/kbd&gt; and &lt;kbd&gt;Alt Gr&lt;/kbd&gt; on modern keyboards (and to the Windows, context menu, Apple and Option keys). They allow shortcuts to be built using the main keys. You can see their heritage in Emacs, with its many shortcuts involving &lt;kbd&gt;Ctrl&lt;/kbd&gt; and &lt;kbd&gt;Meta&lt;/kbd&gt; (&lt;kbd&gt;Alt&lt;/kbd&gt; or &lt;kbd&gt;Esc&lt;/kbd&gt; on modern keyboards). Many Linux systems use the Windows key as &lt;kbd&gt;Super&lt;/kbd&gt;.&#xD;&#xA;* &lt;kbd&gt;Top&lt;/kbd&gt;, &lt;kbd&gt;Greek&lt;/kbd&gt; (or &lt;kbd&gt;Front&lt;/kbd&gt; on some models) and &lt;kbd&gt;Shift&lt;/kbd&gt; allow the various symbols on the keycaps to be produced. Thus &lt;kbd&gt;M&lt;/kbd&gt; on its own produces &quot;m&quot;, &lt;kbd&gt;Shift&lt;/kbd&gt;&lt;kbd&gt;M&lt;/kbd&gt; produces &quot;M&quot;, &lt;kbd&gt;Top&lt;/kbd&gt;&lt;kbd&gt;M&lt;/kbd&gt; produces &quot;≥&quot;, &lt;kbd&gt;Greek&lt;/kbd&gt;&lt;kbd&gt;M&lt;/kbd&gt; produces &quot;µ&quot;. &lt;kbd&gt;Repeat&lt;/kbd&gt; allows keys to be repeated — they didn't repeat by default.&#xD;&#xA;* I'm not sure what &lt;kbd&gt;Mode Lock&lt;/kbd&gt; or &lt;kbd&gt;Line&lt;/kbd&gt; do. &lt;kbd&gt;Alt Mode&lt;/kbd&gt; was used on [ITS][2] and was considered obsolete even when the Space Cadet was designed. &lt;kbd&gt;Rub Out&lt;/kbd&gt; is the ancestor of our &lt;kbd&gt;Backspace&lt;/kbd&gt;. &lt;kbd&gt;Help&lt;/kbd&gt; was supposed to be handled by applications for on-line help (but rarely was).&#xD;&#xA;* &lt;kbd&gt;I&lt;/kbd&gt;, &lt;kbd&gt;II&lt;/kbd&gt;, &lt;kbd&gt;III&lt;/kbd&gt; and &lt;kbd&gt;IV&lt;/kbd&gt; were used for quick selection in menus.&#xD;&#xA;* &lt;kbd&gt;Network&lt;/kbd&gt;, &lt;kbd&gt;Terminal&lt;/kbd&gt; and &lt;kbd&gt;System&lt;/kbd&gt; sent escapes to specify which part of the system (as a whole) the user wanted to interact with.&#xD;&#xA;* &lt;kbd&gt;Status&lt;/kbd&gt; was supposed to ask the system to provide status information for the currently process.&#xD;&#xA;* &lt;kbd&gt;Macro&lt;/kbd&gt; was intended to provide a keyboard-based macro system, but it saw little use in practice.&#xD;&#xA;* &lt;kbd&gt;Quote&lt;/kbd&gt; was supposed to allow escaping other keys, so they could be sent — a bit like the &lt;kbd&gt;Esc&lt;/kbd&gt; key on Atari 8-bit keyboards.&#xD;&#xA;* I'm not sure what &lt;kbd&gt;Over Strike&lt;/kbd&gt; does.&#xD;&#xA;* The two &lt;kbd&gt;Clear&lt;/kbd&gt; keys clear the current input field and the whole screen respectively.&#xD;&#xA;* &lt;kbd&gt;Hold Output&lt;/kbd&gt; and &lt;kbd&gt;Stop Output&lt;/kbd&gt; provide output flow control (similar to &lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;Q&lt;/kbd&gt; and &lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;S&lt;/kbd&gt;).&#xD;&#xA;* &lt;kbd&gt;Abort&lt;/kbd&gt;, &lt;kbd&gt;Break&lt;/kbd&gt;, &lt;kbd&gt;Resume&lt;/kbd&gt; and &lt;kbd&gt;Call&lt;/kbd&gt; provide process and function control.&#xD;&#xA;&#xD;&#xA;With the &lt;kbd&gt;Greek&lt;/kbd&gt; key, these keyboards allow all of the [APL][3] character set to be entered easily.&#xD;&#xA;&#xD;&#xA;You'll find more information on [Mike McMahon's page on the Space Cadet][4] and in John Kulp's [design notes][5] for the keyboard.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://en.wikipedia.org/wiki/Lisp_machine&#xD;&#xA;  [2]: https://en.wikipedia.org/wiki/Incompatible_Timesharing_System&#xD;&#xA;  [3]: https://en.wikipedia.org/wiki/APL_%28programming_language%29&#xD;&#xA;  [4]: https://web.archive.org/web/20150112030657/http://home.comcast.net/~mmcm/kbd/SpaceCadet.html&#xD;&#xA;  [5]: https://web.archive.org/web/20150910154424/http://home.comcast.net/~mmcm/kbd/lmdoc_kbdpro.3.txt" />
  <row Id="1354" PostHistoryTypeId="2" PostId="497" RevisionGUID="c7509486-81cf-4103-a8ce-7a8fd79b6f96" CreationDate="2016-05-14T06:25:10.677" UserId="507" Text="Doxbox for Mac would work. I have Dosbox for PC (Windows 10). I love it and use it run everything from 1980 or later. I have GW-Basic, Turbo Pascal, Old games like Wheel of Fortune and Jeopardy from the early 90's. You can run off a flash drive or hard drive. &#xD;&#xA;&#xD;&#xA;DosBox 0.74" />
  <row Id="1356" PostHistoryTypeId="5" PostId="496" RevisionGUID="770f3e8a-ebd3-4828-86c0-b9e3c052f0de" CreationDate="2016-05-14T09:57:45.360" UserId="79" Comment="Add thumb and finger keys and merge the comments." Text="The Space Cadet is a keyboard designed for use with Symbolics' [Lisp Machines][1], and many of the extra keys are specific to that use.&#xD;&#xA;&#xD;&#xA;Starting from the bottom row:&#xD;&#xA;&#xD;&#xA;* &lt;kbd&gt;Hyper&lt;/kbd&gt;, &lt;kbd&gt;Super&lt;/kbd&gt;, &lt;kbd&gt;Meta&lt;/kbd&gt; and &lt;kbd&gt;Ctrl&lt;/kbd&gt; are modifier keys, known as bucky keys; they are equivalent in use to the &lt;kbd&gt;Ctrl&lt;/kbd&gt;, &lt;kbd&gt;Alt&lt;/kbd&gt; and &lt;kbd&gt;Alt Gr&lt;/kbd&gt; on modern keyboards (and to the Windows, context menu, Apple and Option keys). They allow shortcuts to be built using the main keys. You can see their heritage in Emacs, with its many shortcuts involving &lt;kbd&gt;Ctrl&lt;/kbd&gt; and &lt;kbd&gt;Meta&lt;/kbd&gt; (&lt;kbd&gt;Alt&lt;/kbd&gt; or &lt;kbd&gt;Esc&lt;/kbd&gt; on modern keyboards). Many Linux systems use the Windows key as &lt;kbd&gt;Super&lt;/kbd&gt;.&#xD;&#xA;* &lt;kbd&gt;Top&lt;/kbd&gt;, &lt;kbd&gt;Greek&lt;/kbd&gt; (or &lt;kbd&gt;Front&lt;/kbd&gt; on some models) and &lt;kbd&gt;Shift&lt;/kbd&gt; allow the various symbols on the keycaps to be produced. Thus &lt;kbd&gt;M&lt;/kbd&gt; on its own produces &quot;m&quot;, &lt;kbd&gt;Shift&lt;/kbd&gt;&lt;kbd&gt;M&lt;/kbd&gt; produces &quot;M&quot;, &lt;kbd&gt;Top&lt;/kbd&gt;&lt;kbd&gt;M&lt;/kbd&gt; produces &quot;≥&quot;, &lt;kbd&gt;Greek&lt;/kbd&gt;&lt;kbd&gt;M&lt;/kbd&gt; produces &quot;µ&quot;. &lt;kbd&gt;Repeat&lt;/kbd&gt; allows keys to be repeated — they didn't repeat by default.&#xD;&#xA;* I'm not sure what &lt;kbd&gt;Mode Lock&lt;/kbd&gt; or &lt;kbd&gt;Line&lt;/kbd&gt; do. &lt;kbd&gt;Alt Mode&lt;/kbd&gt; was used on [ITS][2] and was considered obsolete even when the Space Cadet was designed. &lt;kbd&gt;Rub Out&lt;/kbd&gt; is the ancestor of our &lt;kbd&gt;Backspace&lt;/kbd&gt;. &lt;kbd&gt;Help&lt;/kbd&gt; was supposed to be handled by applications for on-line help (but rarely was).&#xD;&#xA;* &lt;kbd&gt;I&lt;/kbd&gt;, &lt;kbd&gt;II&lt;/kbd&gt;, &lt;kbd&gt;III&lt;/kbd&gt; and &lt;kbd&gt;IV&lt;/kbd&gt; were used for quick selection in menus.&#xD;&#xA;* &lt;kbd&gt;Network&lt;/kbd&gt;, &lt;kbd&gt;Terminal&lt;/kbd&gt; and &lt;kbd&gt;System&lt;/kbd&gt; sent escapes to specify which part of the system (as a whole) the user wanted to interact with.&#xD;&#xA;* &lt;kbd&gt;Status&lt;/kbd&gt; was supposed to ask the system to provide status information for the currently process.&#xD;&#xA;* The thumb and finger keys are the ancestors of our arrow keys, but they weren't used much.&#xD;&#xA;* &lt;kbd&gt;Macro&lt;/kbd&gt; was intended to provide a keyboard-based macro system, but it saw little use in practice.&#xD;&#xA;* &lt;kbd&gt;Quote&lt;/kbd&gt; was supposed to allow escaping other keys, so they could be sent — a bit like the &lt;kbd&gt;Esc&lt;/kbd&gt; key on Atari 8-bit keyboards.&#xD;&#xA;* I'm not sure what &lt;kbd&gt;Over Strike&lt;/kbd&gt; does.&#xD;&#xA;* The two &lt;kbd&gt;Clear&lt;/kbd&gt; keys clear the current input field and the whole screen respectively.&#xD;&#xA;* &lt;kbd&gt;Hold Output&lt;/kbd&gt; and &lt;kbd&gt;Stop Output&lt;/kbd&gt; provide output flow control (similar to &lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;Q&lt;/kbd&gt; and &lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;S&lt;/kbd&gt;).&#xD;&#xA;* &lt;kbd&gt;Abort&lt;/kbd&gt;, &lt;kbd&gt;Break&lt;/kbd&gt;, &lt;kbd&gt;Resume&lt;/kbd&gt; and &lt;kbd&gt;Call&lt;/kbd&gt; provide process and function control.&#xD;&#xA;&#xD;&#xA;With the &lt;kbd&gt;Greek&lt;/kbd&gt; key, these keyboards allow all of the [APL][3] character set to be entered easily. The modifier keys can be combined: &lt;kbd&gt;Greek&lt;/kbd&gt;&lt;kbd&gt;L&lt;/kbd&gt; produces &quot;λ&quot; as you'd expect, and &lt;kbd&gt;Shift&lt;/kbd&gt;&lt;kbd&gt;Greek&lt;/kbd&gt;&lt;kbd&gt;L&lt;/kbd&gt; produces &quot;Λ&quot;. Likewise the bucky keys can be combined, so &lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;Alt&lt;/kbd&gt;&lt;kbd&gt;A&lt;/kbd&gt; is meaningful — this is still the case on modern keyboards, the obvious example being &lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;Alt&lt;/kbd&gt;&lt;kbd&gt;Delete&lt;/kbd&gt;. The Greek-style behaviour lives on too; on my Linux systems with a French keyboard layout, &lt;kbd&gt;Alt Gr&lt;/kbd&gt;&lt;kbd&gt;L&lt;/kbd&gt; produces &quot;ŀ&quot;, and &lt;kbd&gt;Shift&lt;/kbd&gt;&lt;kbd&gt;Alt Gr&lt;/kbd&gt;&lt;kbd&gt;L&lt;/kbd&gt; produces &quot;Ŀ&quot;. On the Space Cadet, the modifier keys were specifically laid out so they could be chorded single-handedly using either hand: you could press &lt;kbd&gt;Ctrl&lt;/kbd&gt; and &lt;kbd&gt;Alt&lt;/kbd&gt; with your left hand, and &lt;kbd&gt;L&lt;/kbd&gt; with your right, or vice-versa *e.g.* for &lt;kbd&gt;Q&lt;/kbd&gt;.&#xD;&#xA;&#xD;&#xA;You'll find more information on [Mike McMahon's page on the Space Cadet][4] and in John Kulp's [design notes][5] for the keyboard. Thanks to [Mark][6] and [mnem][7] for further information provided in the comments!&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://en.wikipedia.org/wiki/Lisp_machine&#xD;&#xA;  [2]: https://en.wikipedia.org/wiki/Incompatible_Timesharing_System&#xD;&#xA;  [3]: https://en.wikipedia.org/wiki/APL_%28programming_language%29&#xD;&#xA;  [4]: https://web.archive.org/web/20150112030657/http://home.comcast.net/~mmcm/kbd/SpaceCadet.html&#xD;&#xA;  [5]: https://web.archive.org/web/20150910154424/http://home.comcast.net/~mmcm/kbd/lmdoc_kbdpro.3.txt&#xD;&#xA;  [6]: http://retrocomputing.stackexchange.com/users/4/mark&#xD;&#xA;  [7]: http://retrocomputing.stackexchange.com/users/320/mnem" />
  <row Id="1358" PostHistoryTypeId="2" PostId="498" RevisionGUID="7c073ed4-9f4e-4620-a0a0-549c39250aa4" CreationDate="2016-05-14T15:26:05.343" UserId="71" Text="Apple has not released sales figures for their early systems, so your question cannot be answered accurately. I will therefore do so inaccurately. ; - )&#xD;&#xA;&#xD;&#xA;Jeremy Reimer published [historical computer sales data][1] for [an article he wrote][2].&#xD;&#xA;&#xD;&#xA;Starting with that data and using tidbits from other (often conflicting) sources, I derived the following highly questionable figures which I've also [shared in Google Docs][3].&#xD;&#xA;&#xD;&#xA;    Apple II          20,000&#xD;&#xA;    Apple II Plus    590,200&#xD;&#xA;    Apple //e      4,250,000&#xD;&#xA;    Apple //c        450,000&#xD;&#xA;    Apple //c Plus   200,000&#xD;&#xA;    Apple IIGS       979,000&#xD;&#xA;    Total          6,489,200&#xD;&#xA;&#xD;&#xA;The total is more than the [Wikipedia estimate][4] of between 5 - 6 million units. Some notes:&#xD;&#xA;&#xD;&#xA; - The Apple II / II Plus figures were calculated by plotting cumulative totals on a curve and using the II Plus release date (June 1st 1979) to split the 1979 total.&#xD;&#xA; - BYTE magazine states the II Plus sold [500,000 units][5], though 750,000 is given elsewhere.&#xD;&#xA; - A few morsels of //e sales data were provided by the always excellent [Digital Antiquarian][6].&#xD;&#xA; - The //c and //c Plus figures are perhaps the largest unknown. It's not clear if Reimer's data includes these systems. In particular 1990 and 1991 show no evidence of the //c Plus exit, so I've included them separately.&#xD;&#xA; - [Some][7] [sources][8] say the //c sold 400,000 in its first year, whereas the [Digital Antiquarian][9] states it &quot;averaged just 100,000 sales per year over its four years&quot;. This matches the tone of the book [&quot;West of Eden: The End of Innocence at Apple Computer&quot;][10] which chronicles that in summer 1984 &quot;Panic was building over the IIc's performance ... it was dead in the water&quot;.&#xD;&#xA; - I have no data on //c Plus sales so I've naively assumed it sold the same yearly as the //c.&#xD;&#xA; - The IIGS data comes from [Brutal Deluxe][11]'s [Apple IIgs Serial Number project][12]. Although their estimated total is 2.8 million, a former manager of the Apple II division has stated categorically that [no more than 1 million were sold][13]. Their data is useful for a rough [sales per year][14] pattern if scaled down to total no more than 1 million - which I have done. The yearly values have also been rounded down. Although the figures aren't accurate, they confirm the next point:&#xD;&#xA; - The IIGS is almost certainly not included in Reimer's data, as the estimated IIGS sales for 1988 exceed Reimer's total for that year.&#xD;&#xA; - You didn't ask, but &quot;[Two hundred Apple-1 computers were manufactured][15], and all except twenty-five of them sold over a period of ten months.&quot; Only 66 are known to [still exist][16].&#xD;&#xA; - Again not really relevant, but Apple III and III Plus sales estimates vary from [65,000][7] to [&quot;85,000 units by April 1984&quot;][10]. (The latter source is probably more credible.)&#xD;&#xA; - Reimer's figures obviously do not include the [Apple IIe Card][17] because it was sold until 1995.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://jeremyreimer.com/m-item.lsp?i=137&#xD;&#xA;  [2]: http://arstechnica.com/features/2005/12/total-share/&#xD;&#xA;  [3]: https://docs.google.com/spreadsheets/d/15XJi00e7uswygc_j6boZoR8C5hK6YoZwa8vBCxnwVFE/edit#gid=0&#xD;&#xA;  [4]: https://en.wikipedia.org/wiki/Apple_II_series&#xD;&#xA;  [5]: https://archive.org/stream/byte-magazine-1983-03-rescan/1983_03_BYTE_08-03_Mass_Storage_djvu.txt&#xD;&#xA;  [6]: http://www.filfre.net/2012/12/shiny-and-exciting-vs-dull-and-boring/&#xD;&#xA;  [7]: http://www.oldcomputers.net/appleii.html&#xD;&#xA;  [8]: http://www.macmothership.com/timeline.html&#xD;&#xA;  [9]: http://www.filfre.net/2013/07/a-computer-for-every-home/&#xD;&#xA;  [10]: http://www.amazon.com/West-Eden-Innocence-Apple-Computer/dp/0615278841/&#xD;&#xA;  [11]: http://www.brutaldeluxe.fr/&#xD;&#xA;  [12]: https://docs.google.com/spreadsheets/d/1UB9TyF1h3mDyUXQgGm3Z7gxENAGOTFwL1fwLySoBRyU/edit#gid=1&#xD;&#xA;  [13]: https://docs.google.com/spreadsheets/d/1UB9TyF1h3mDyUXQgGm3Z7gxENAGOTFwL1fwLySoBRyU/edit#gid=11&#xD;&#xA;  [14]: https://docs.google.com/spreadsheets/d/1UB9TyF1h3mDyUXQgGm3Z7gxENAGOTFwL1fwLySoBRyU/edit#gid=8&#xD;&#xA;  [15]: http://apple2history.org/history/ah02/&#xD;&#xA;  [16]: http://www.willegal.net/appleii/apple1-originals.htm&#xD;&#xA;  [17]: https://en.wikipedia.org/wiki/Apple_IIe_Card" />
  <row Id="1359" PostHistoryTypeId="2" PostId="499" RevisionGUID="a73ca0ed-442e-42cc-a5f1-f9ff1d1bc1dc" CreationDate="2016-05-14T16:04:32.897" UserId="340" Text="Many commonplace cassette recorders in the 1970s and 1980s were capable of reading or writing two tracks at once (stereo).  While that wasn't universal (portable cassette recorders were often monaural, and probably used a single-coil record/playback head) stereo recorders were hardly rare.  Further, at least one computer company (Atari) supplied a cassette recorder which used a stereo playback head.  Additionally, one of the primary limiting factors for cassette data rates is that the tape only moves at 1.875&quot;/second but the motor speed on many cassette drives could easily be increased merely by changing a resistor or other such component.&#xD;&#xA;&#xD;&#xA;It would seem, then, that cassette drives that were customized for, and sold by, computer manufacturers should easily have been capable of handling data much faster than would be possible recording a single track at 1.875&quot;/second, merely by adding some extra record/play electronics and by changing the value of a speed-control component.  I know the Coleco Adam used a rather fancy and sophisticated tape drive, but from what I understand that didn't use standard cassettes.  Were there any 1970s-1980s computers that used tape drives to record more than one data track, or record data at a speed faster than 1.875&quot;/second?&#xD;&#xA;" />
  <row Id="1360" PostHistoryTypeId="1" PostId="499" RevisionGUID="a73ca0ed-442e-42cc-a5f1-f9ff1d1bc1dc" CreationDate="2016-05-14T16:04:32.897" UserId="340" Text="Did any microcomputers back in the day accellerate standard-cassette performance" />
  <row Id="1361" PostHistoryTypeId="3" PostId="499" RevisionGUID="a73ca0ed-442e-42cc-a5f1-f9ff1d1bc1dc" CreationDate="2016-05-14T16:04:32.897" UserId="340" Text="&lt;cassette-tape&gt;&lt;8-bit-microcomputers&gt;" />
  <row Id="1362" PostHistoryTypeId="2" PostId="500" RevisionGUID="74edd413-480d-4651-8d27-db6c6af944b9" CreationDate="2016-05-14T16:24:19.670" UserId="340" Text="If one doesn't need particularly high data rates, it's possible to implement data-to-audio and audio-to-data routines in a very small amount of code.  To store a &quot;1&quot;, generate 250us of high followed by 250us (e.g.) of low; to store a &quot;0&quot;, store 500us of high followed by 500us of low.  Note that some tape-drives' electronics, which are designed for analog signals, will try to adjust the signal try receive so that it's high about half the time and low about half the time, and the signal may get badly distorted (and thus become illegible) if it doesn't start out with high and low times balanced.&#xD;&#xA;&#xD;&#xA;If one is willing to use more complicated code for recording and playback, it's possible to use a mixture of different pulse lengths, encoded in such a fashion that the high and low times remain balanced.  Such approaches can allow more than twice as much information to be stored as the simple straightforward technique, but require more code to read or write data.  For a computer to include built-in support would have required that manufacturers devote hundreds of bytes of ROM to that purpose that could otherwise be used for other things.&#xD;&#xA;&#xD;&#xA;For programs shipped on pre-recorded tapes, however, the size of the record/playback routines is not an issue.  The data can be written on the tape using specialized equipment, making the size of the record routines irrelevant [if the encoding is one that couldn't be written by a standard computer, that would actually be a bonus].  The size of playback code is also not much of an issue.  Even if playback code would take 1024 bytes, it could be used to load all but 1024 bytes of RAM; if it would be necessary to load even more than that, the last little bit could be loaded using a slower but smaller routine (or perhaps the built-in one)." />
  <row Id="1363" PostHistoryTypeId="2" PostId="501" RevisionGUID="6c1cf8af-c7b7-49dc-991d-2c3fdaf91d3d" CreationDate="2016-05-14T16:55:53.870" UserId="516" Text="On a DEC VT102, suppose you have a line where all 80 characters (in particular, the rightmost character) are in reverse video. You then move the cursor to the start of that line and use DCH (ESC [ P) to erase one character, thereby opening up a space at the right hand end of the line. Is that space reverse video or not? Does it matter what the current character attributes are?&#xD;&#xA;&#xD;&#xA;My reading of the VT102 user guide (http://vt100.net/docs/vt102-ug/chapter5.html) suggests the space opened up at the right hand end of the line should be reverse video, as the guide says: &quot;This creates a space character at right margin. This character has same character attribute as the last character moved left.&quot; and surely the last character moved left is the character which was formerly in the rightmost column, which was reverse video.&#xD;&#xA;&#xD;&#xA;My experiments show that xterm and gnome-terminal don't do this. What does a real VT102 do in this case?" />
  <row Id="1364" PostHistoryTypeId="1" PostId="501" RevisionGUID="6c1cf8af-c7b7-49dc-991d-2c3fdaf91d3d" CreationDate="2016-05-14T16:55:53.870" UserId="516" Text="What happens on a VT102 when you use delete character on a reverse video line?" />
  <row Id="1365" PostHistoryTypeId="3" PostId="501" RevisionGUID="6c1cf8af-c7b7-49dc-991d-2c3fdaf91d3d" CreationDate="2016-05-14T16:55:53.870" UserId="516" Text="&lt;dec&gt;&lt;terminal&gt;" />
  <row Id="1366" PostHistoryTypeId="2" PostId="502" RevisionGUID="7457e04b-0adb-4d99-8090-b05efc4deb8e" CreationDate="2016-05-14T17:03:26.093" UserId="75" Text="The Philips P2000's mini-cassette drives were [10x speed][1]. Do mini-cassettes count?&#xD;&#xA;&#xD;&#xA;Otherwise, there were tape recorder mods like the [RamBIT][2] for higher speeds. And on various computers you could POKE values or use special software to load and save at higher baud rates, usually up to 2400 baud (600 baud was standard), depending on the quality of the tape and what speed you've set your recorder to.&#xD;&#xA;&#xD;&#xA;And [here][3] is software that allows a Spectrum to load from the cassette port at up to 27,428 baud.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://computermuseum.50megs.com/brands/p2000.htm&#xD;&#xA;  [2]: http://www.page6.org/archive/issue_24/page_30.htm&#xD;&#xA;  [3]: http://web.archive.org/web/20071130010325/http://personal.auna.com/casariche/k7zx4/k7zx4.htm" />
  <row Id="1367" PostHistoryTypeId="2" PostId="503" RevisionGUID="a921d3a1-562c-4e2f-bcee-fac30bd06b92" CreationDate="2016-05-14T17:10:04.840" UserId="31" Text="The Apple 2's disk drive controller and 5¼&quot; floppy disks have the following metrics:&#xD;&#xA;&#xD;&#xA;* The disks is spun at (roughly) 300 RPM (Revolutions per Minute), which means it takes = 1000 ms/sec / (300 RPM / 60 sec/ms) = ~200 ms / revolution,&#xD;&#xA;* Beneath Apple DOS, Figure 3.3 states it takes 4 μs (microseconds) to read 2 consecutive bits off the disk. This [metafilter discussion](http://www.metafilter.com/114962/jmp-TRIGSPIKES#4301468) also mentions this.&#xD;&#xA;* Beneath Apple DOS, Figure 3.1, shows track zero is the outermost, but sadly doesn't give any dimensions. Loose empirical measurements show:&#xD;&#xA; * Track  0 (roughly) has a radius of 5&quot;/2 = ~ 2.5&quot;&#xD;&#xA; * Track 39 (roughly) has a radius of 1.5&quot;/2 = ~ 0.75&quot; (Center hole diameter measured at ~1½&quot;)&#xD;&#xA;&#xD;&#xA;I've seen 6,250 nibbles given as the (theoretical) maximum number of nibbles on a track (encoded with 6+2) but never an explanation of where this number comes from. (Beneath Apple DOS on page 3-7 briefly mentions 50,000 bits but doesn't provide any details oh this number was calculated.) It is straight forward to see that a track has = 200 ms/revolution * 1000 μs/ms / 4 μs/bit = 50,000 bits / (8 bits/byte) = 6,250 nibbles/track.&#xD;&#xA;&#xD;&#xA;**However**, since the _radius_ (and therefore the circumference) of the outermost and innermost track differ, shouldn't track 0 be able to hold more bits then track 39?  The circumference (C = 2 * π * r) for tracks:&#xD;&#xA;&#xD;&#xA;* Track 0 = 2*π*2.625 = ~15.7&quot;&#xD;&#xA;* Track 39 = 2*π*0.75 = ~4.7&quot; &#xD;&#xA;&#xD;&#xA;shows track 0 has a _whole_ lot more &quot;space&quot; then track 39.&#xD;&#xA;&#xD;&#xA;This naturally raises a few questions. Namely,&#xD;&#xA;&#xD;&#xA;* Does the Apple 2 disk utilize CLV (_Constant Linear Velocity_) or CAV (_Constant Angular Velocity_)? &#xD;&#xA;&#xD;&#xA;* Assuming the same 4  μs/bit but the _other_ speed type then what **would be** the maximum number of nibbles stored on an Apple II disk for:&#xD;&#xA;&#xD;&#xA; * Track 0, and&#xD;&#xA; * Track 39&#xD;&#xA;&#xD;&#xA;respectively?&#xD;&#xA;&#xD;&#xA;" />
  <row Id="1368" PostHistoryTypeId="1" PostId="503" RevisionGUID="a921d3a1-562c-4e2f-bcee-fac30bd06b92" CreationDate="2016-05-14T17:10:04.840" UserId="31" Text="Absolute maximum number of nibbles on an Apple II floppy disk track?" />
  <row Id="1369" PostHistoryTypeId="3" PostId="503" RevisionGUID="a921d3a1-562c-4e2f-bcee-fac30bd06b92" CreationDate="2016-05-14T17:10:04.840" UserId="31" Text="&lt;floppy-disk&gt;&lt;6502&gt;&lt;disk-drive&gt;" />
  <row Id="1372" PostHistoryTypeId="2" PostId="505" RevisionGUID="854daeac-94da-4e88-b40e-d32f69ea49f0" CreationDate="2016-05-14T19:06:58.517" UserId="495" Text="I can't speak directly to Apple Integer BASIC, but I know that TRS-80 BASIC programs could encode machine language in DATA statements (as in Leo Christopherson's [Android NIM][1]) or even in literal strings. A string containing machine code would include lots of non-printing characters that would do things like moving the cursor backward or up, or clearing the screen, so the listing would look garbled.&#xD;&#xA;&#xD;&#xA;If the program shows up normally after it's run, that probably indicates that it's self-modifying; again, the Android NIM page above mentions this.&#xD;&#xA;&#xD;&#xA;As for how to do it: You *could* write code in assembly language, run it through an assembler, and then insert the machine code into strings or data statements, but these machines were so small and simple that an ambitious programmer could compose machine code directly.&#xD;&#xA;&#xD;&#xA;  [1]: http://www.dnull.com/demon/" />
  <row Id="1373" PostHistoryTypeId="5" PostId="495" RevisionGUID="65245522-f88a-4a95-8660-43d21ac02f1a" CreationDate="2016-05-14T20:28:28.480" UserId="462" Comment="added 86 characters in body" Text="Old keyboards like the one below seem to have contributed a lot to the design of modern keyboards. So, obviously, some of the keys are familiar because they are on my own average (modern Windows and Mac) keyboards, such as &lt;kbd&gt;space bar&lt;/kbd&gt;, &lt;kbd&gt;tab&lt;/kbd&gt;, &lt;kbd&gt;return&lt;/kbd&gt;, and so on. Assuming that they do the same thing as the keys on modern keyboards, I don't need them explained.&#xD;&#xA;&#xD;&#xA;But what do all the other keys do? And how would you type the other symbols (like &lt;kbd&gt;≥&lt;/kbd&gt; and &lt;kbd&gt;¬&lt;/kbd&gt;) on the main section of keys?&#xD;&#xA;&#xD;&#xA;![strange keys][2]&#xD;&#xA;&lt;sup&gt;https://en.wikipedia.org/wiki/Space-cadet_keyboard&lt;/sup&gt;&#xD;&#xA;&#xD;&#xA;&lt;!--![enter image description here][1]--&gt;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/FzyUc.jpg&#xD;&#xA;  [2]: http://i.stack.imgur.com/ww3Ff.jpg" />
  <row Id="1374" PostHistoryTypeId="2" PostId="506" RevisionGUID="1525e357-f35d-4bfc-9b27-14ea3e67d05d" CreationDate="2016-05-14T20:31:08.640" UserId="105" Text="The Sprint cassette player/recorder, specially designed for the ZX Spectrum, allowed 4X load and save speeds.&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;It works by speeding up the tape four times the standard playing speed. It was meant to load programs originally recorded at the Spectrum ROM standard speed (1500 bps). It provides a shadow ROM that pages in when the CPU starts executing a SAVE or LOAD routine. The shadow ROM mimics the behaviour of a LOAD or SAVE, but using their own routines. Many units had an after-marked modification, that allowed the Sprint to be disconnected from the bus in order to improve compatibility with other peripherals, like the Interface 1.&#xD;&#xA;&#xD;&#xA;It doesn't use the audio connectors (EAR/MIC), but it talks directly to the CPU through the expansion port. Therefore, the Sprint has means to clean and digitize the signal, making a volume control not neccesary.&#xD;&#xA;&#xD;&#xA;Here you have the disassembly of the 512 byte Sprint ROM. &#xD;&#xA;&#xD;&#xA;http://www.zxprojects.com/images/stories/sprint/rom_sprint.html&#xD;&#xA;&#xD;&#xA;To ease the disassembly process, I have assumed that the 512 byte block is present at address 0400h to 05FFh. This is because the starting points of the original SAVE and LOAD routines are at 04C2h and 0556h respectively, so they fall entirely into this 512-byte block (as expected).&#xD;&#xA;&#xD;&#xA;There's a JP 4 instruction right at the beginning of the ROM (after an EI instruction). As this block is also at 0000h, the JP 4 instruction merely jumps to the next instruction, which OUT's a 0 into port BFh. I think this unpages the Sprint ROM, and the next instruction executed, already from the main ROM, begins at 0008h, the ERROR restart.&#xD;&#xA;&#xD;&#xA;By the way: this ROM (and thus, the device) uses these ports:&#xD;&#xA;&#xD;&#xA;* BFh. Write-only. The ROM only writes 00h here. I think it's for disabling the Sprint ROM&#xD;&#xA;* 7Fh. Write-only. The ROM writes 00h or 80h here. It's the new &quot;MIC&quot; port, bit 7.&#xD;&#xA;* FFh. Read-only. &quot;EAR&quot; port, bit 7. Decoded bit value, bit 0&#xD;&#xA;&#xD;&#xA;[![enter image description here][2]][2]&#xD;&#xA;&#xD;&#xA;The internals of the Sprint seem to work according to patent numer GB2164527A or &quot;High speed cassette tape player&quot;&#xD;&#xA;&#xD;&#xA;The device actually decodes FSK, so the value at bit 7 of port FFh is not the current state of the &quot;EAR&quot; input, as in normal loaders, but the actual bit of the current loading byte.&#xD;&#xA;&#xD;&#xA;So, as the patent states, there no need for tight loops, as the time measuring is performed by a monostable, which is reset to 0 on each positive edge of the incoming signal. The computer has to keep reading the monostable value while it waits until the next positive edge. A polarity correction circuit ensures that the edges are right regardless of the polarity the tape were recorded with.&#xD;&#xA;&#xD;&#xA;The monostable is configured so it turns to '1' after a specific period of time. Time that is roughly 3/4 times the period of a '1' bit in FSK (remember that the '1' bit lasts double the time than a '0' bit). So if a '1' is currently playing, the monostable will switch to '1' and that will be the value read by the computer, but if a '0' is playing, the next positive edge will happen long before the monostable switchs to '1', hence a '0' will be read.&#xD;&#xA;&#xD;&#xA;Reviewing the source code, I think that port FFh offers two things: the current state of the incoming signal, at bit 7, needed to track the pilot tone at the first part of the loading routine, and to detect edges in the second part. The current value of the monostable, that is, the bit after the FSK decoding process, seems to be at bit 0. The routine reads port FFh, stores bit 0 into the carry with a RRA instruction, some instructions after that, the routine retrieves the bit again into H using the instruction RL H.&#xD;&#xA;&#xD;&#xA;    ROM:0492 loc_492:&#xD;&#xA;    ROM:0492                 dec     l&#xD;&#xA;    ROM:0493                 jr      z, loc_4A8&#xD;&#xA;    ROM:0495                 in      a, (c)&#xD;&#xA;    ROM:0497                 jp      m, loc_492  &#xD;&#xA;    ;loops while the pulse is high, so it exits &#xD;&#xA;    ;just after a positive to negative edge has ocurred&#xD;&#xA;    &#xD;&#xA;    ROM:049A&#xD;&#xA;    ROM:049A loc_49A:&#xD;&#xA;    ROM:049A                 dec     l&#xD;&#xA;    ROM:049B                 jr      z, loc_4A8&#xD;&#xA;    ROM:049D                 rra&#xD;&#xA;    ROM:049E                 in      a, (c)&#xD;&#xA;    ROM:04A0                 jp      p, loc_49A  &#xD;&#xA;    ;loops while the pulse is low, so it exists just after &#xD;&#xA;    ;a negative to positive edge has ocurred. The carry&#xD;&#xA;    ;bit holds the value of bit 0 read in the previous IN&#xD;&#xA;    ;operation, as at the precise moment a falling edge&#xD;&#xA;    ;happens, the monostable is reset to 0.&#xD;&#xA;    &#xD;&#xA;    ROM:04A3                 rl      h  ;load the bit into the H register.&#xD;&#xA;    ROM:04A5                 jr      nc, loc_482&#xD;&#xA;&#xD;&#xA;This explains why I have seen no tight loops, but some NOP's inside the saving and loading loop. The computer uses timming loops to detect the pilot tone, but the monostable for actual byte loading.&#xD;&#xA;&#xD;&#xA;Finally, I'd like to give some details of what I think it's the very heart of the loading routine, and the code that shows all the magic that the SPRINT cassette offers:&#xD;&#xA;&#xD;&#xA;What this tape player implements is no more and no less than a converter from an asynchronous FSK coded signal to a synchronous 1-bit serial line. The DATA bit is the monostable bit (bit 0 of port FFh) and the CLOCK bit is what we have previously called the &quot;signal&quot; bit (bit 7 of port FFh, which gives us the actual pulses present into the tape). As we stated, the conversion is performed in hardware, and DATA is valid just before a negative to positive transition at CLOCK happens. The byte loading routine that follows, just have to wait for this situation, taking into account that the signal flow might be interrupted at any time, so timeouts have to be provided to not to hang the computer into an endless loop because of an interrupted operation.&#xD;&#xA;&#xD;&#xA;    ;Registers used:&#xD;&#xA;    ;C = 0FFh (for the IN instruction)&#xD;&#xA;    ;BC' = 1601h. C is xored with B at each loop. The result is &#xD;&#xA;    ;outputted to FEh, so these two values provides visual&#xD;&#xA;    ;and audio feedback of the loading process to the user.&#xD;&#xA;    ;H = holds the byte that is being read from tape. First bit&#xD;&#xA;    ;read is MSb.&#xD;&#xA;    ;L = timeout value for waiting an edge.&#xD;&#xA;    &#xD;&#xA;    ;On &quot;normal&quot; exit: H = byte loaded from tape. Carry set.&#xD;&#xA;    &#xD;&#xA;    ROM:0480 LoadOneByte:&#xD;&#xA;    ROM:0480                 ld      h, 1  ;Mark bit 0 with 1. When H is filled&#xD;&#xA;                                           ;this '1' goes to the carry bit,&#xD;&#xA;                                           ;signaling that the byte is completed.&#xD;&#xA;    ROM:0482 NextBit:&#xD;&#xA;    ;--------------------------------------------------------------&#xD;&#xA;    ; BREAK CHECKING&#xD;&#xA;    ROM:0482                 ld      a, 7Fh&#xD;&#xA;    ROM:0484                 in      a, (0FEh)  ;read SPACE.&#xD;&#xA;    ROM:0486                 rra&#xD;&#xA;    ROM:0487                 jr      nc, TotalExit  ;if pressed, early exit.&#xD;&#xA;    ;--------------------------------------------------------------&#xD;&#xA;    ; BORDER AND SPEAKER HANDLING&#xD;&#xA;    ROM:0489                 exx&#xD;&#xA;    ROM:048A                 ld      a, c&#xD;&#xA;    ROM:048B                 xor     b&#xD;&#xA;    ROM:048C                 ld      c, a&#xD;&#xA;    ROM:048D                 out     (0FEh), a&#xD;&#xA;    ROM:048F                 exx&#xD;&#xA;    &#xD;&#xA;    ROM:0490                 ld      l, 1Eh  ;timeout for waiting for an edge.&#xD;&#xA;    ;--------------------------------------------------------------&#xD;&#xA;    ; LOOP FOR WAITING A POSITIVE TO NEGATIVE EDGE.&#xD;&#xA;    ROM:0492 WaitFor0:&#xD;&#xA;    ROM:0492                 dec     l  ;update timeout value&#xD;&#xA;    ROM:0493                 jr      z, TotalExit  ;if timeout, early exit.&#xD;&#xA;    ROM:0495                 in      a, (c)  ;reads clock and monostable&#xD;&#xA;    ROM:0497                 jp      m, WaitFor0  ;loops while clock is '1'&#xD;&#xA;    ;--------------------------------------------------------------&#xD;&#xA;    ; LOOP FOR WAITING A NEGATIVE TO POSITIVE EDGE.&#xD;&#xA;    ROM:049A WaitFor1:&#xD;&#xA;    ROM:049A                 dec     l   &#xD;&#xA;    ROM:049B                 jr      z, TotalExit&#xD;&#xA;    ROM:049D                 rra   ;stores last monostable value read into carry.&#xD;&#xA;    ROM:049E                 in      a, (c)  ;reads clock and monostable&#xD;&#xA;    ROM:04A0                 jp      p, WaitFor1  ;loops while clock is '0'&#xD;&#xA;    ;--------------------------------------------------------------&#xD;&#xA;    &#xD;&#xA;    ROM:04A3                 rl      h  ;load monostable value into H&#xD;&#xA;    ROM:04A5                 jr      nc, NextBit  ;if H is not full, go &#xD;&#xA;                                                  ;for the next bit.&#xD;&#xA;    ROM:04A7                 ret&#xD;&#xA;    &#xD;&#xA;    ROM:0535 TotalExit:&#xD;&#xA;    ROM:0535                 pop     hl  ;discard return value for this routine&#xD;&#xA;    ROM:0536                 xor     h  ;clears carry?&#xD;&#xA;    ROM:0537                 ret  ;return to the caller of the main load routine.&#xD;&#xA;&#xD;&#xA;Here you have a live demonstration of the Sprint, loading a copy of Jet Pac, previously recorded in a standard cassette at the ROM speed:&#xD;&#xA;&#xD;&#xA;http://www.youtube.com/watch?v=ofBmvjuuIBg&#xD;&#xA;&#xD;&#xA;(this answer is a copy of an answer I gave at the WOS forums about 5 years ago. The pictures are from my own Sprint cassette. I've copied it for the sake of preservation, in case the forum vanishes or something. The link to my answer, along with comments from other fellow WOSers, is here: http://www.worldofspectrum.org/forums/discussion/comment/554708/#Comment_554708 )&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/bAomF.jpg&#xD;&#xA;  [2]: http://i.stack.imgur.com/lSTjH.jpg&#xD;&#xA;&#xD;&#xA;" />
  <row Id="1375" PostHistoryTypeId="5" PostId="495" RevisionGUID="47d206d8-9d5b-43b7-9a2c-c575ed00f4fa" CreationDate="2016-05-14T20:43:01.560" UserId="462" Comment="Added close up." Text="Old keyboards like the one below seem to have contributed a lot to the design of modern keyboards. So, obviously, some of the keys are familiar because they are on my own average (modern Windows and Mac) keyboards, such as &lt;kbd&gt;space bar&lt;/kbd&gt;, &lt;kbd&gt;tab&lt;/kbd&gt;, &lt;kbd&gt;return&lt;/kbd&gt;, and so on. Assuming that they do the same thing as the keys on modern keyboards, I don't need them explained.&#xD;&#xA;&#xD;&#xA;But what do all the other keys do? And how would you type the other symbols (like &lt;kbd&gt;≥&lt;/kbd&gt; and &lt;kbd&gt;¬&lt;/kbd&gt;) on the main section of keys?&#xD;&#xA;&#xD;&#xA;![strange keys][1]&#xD;&#xA;&lt;sup&gt;https://en.wikipedia.org/wiki/Space-cadet_keyboard&lt;/sup&gt;&#xD;&#xA;&#xD;&#xA;![key fronts][3]&#xD;&#xA;&#xD;&#xA;&lt;sup&gt;https://upload.wikimedia.org/wikipedia/commons/c/cd/Space-cadet-closeup.jpg&lt;/sup&gt;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/ww3Ff.jpg&#xD;&#xA;  [2]: http://i.stack.imgur.com/FzyUc.jpg&#xD;&#xA;  [3]: http://i.stack.imgur.com/clupA.jpg" />
  <row Id="1376" PostHistoryTypeId="2" PostId="507" RevisionGUID="47e5595f-3dde-477c-b105-1639020efc0a" CreationDate="2016-05-14T20:56:40.117" UserId="276" Text="I can only provide my memories of a dozen or so years of programming for these DEC terminals.&#xD;&#xA;&#xD;&#xA;The 'new' character at the right hand end of the screen *is* inverse video.&#xD;&#xA;&#xD;&#xA;If I recall correctly, on the VT320 onwards there was a configuration setting to change this, such that it would appear not inverted. &#xD;&#xA;&#xD;&#xA;" />
  <row Id="1378" PostHistoryTypeId="5" PostId="506" RevisionGUID="2fdba5e6-d5c4-4ca7-87fe-c8069ca83b64" CreationDate="2016-05-14T21:08:29.113" UserId="105" Comment="added 197 characters in body" Text="The Sprint cassette player/recorder, specially designed for the ZX Spectrum, allowed 4X load and save speeds.&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;It works by speeding up the tape four times the standard playing speed. It is meant to load programs originally recorded at the Spectrum ROM standard speed (1500 bps). It provides a shadow ROM that pages in when the CPU starts executing a SAVE or LOAD routine. The shadow ROM mimics the behaviour of a LOAD or SAVE, but using their own routines. Many units had an after-market modification, that allowed the Sprint to be disconnected from the bus in order to improve compatibility with other peripherals, like the Interface 1.&#xD;&#xA;&#xD;&#xA;It doesn't use the audio connectors (EAR/MIC), but it talks directly to the CPU through the expansion port. Therefore, the Sprint has to have electronics to clean and digitize the signal, making a volume control not neccesary.&#xD;&#xA;&#xD;&#xA;Here you have the disassembly of the 512 byte Sprint ROM. &#xD;&#xA;&#xD;&#xA;http://www.zxprojects.com/images/stories/sprint/rom_sprint.html&#xD;&#xA;&#xD;&#xA;To ease the disassembly process, I have assumed that the 512 byte block is present at address `0400h` to `05FFh`. This is because the starting points of the original `SAVE` and `LOAD` routines are at `04C2h` and `0556h` respectively, so they fall entirely into this 512-byte block (as expected).&#xD;&#xA;&#xD;&#xA;There's a `JP 4` instruction right at the beginning of the ROM (after an `EI` instruction). As this block is also at `0000h`, the `JP 4` instruction merely jumps to the next instruction, which outputs a 0 into port `BFh`. I think this unpages the Sprint ROM, and the next instruction executed, already from the main ROM, begins at `0008h`, the ERROR restart.&#xD;&#xA;&#xD;&#xA;By the way: this ROM (and thus, the device) uses these ports:&#xD;&#xA;&#xD;&#xA;* `BFh`. Write-only. The ROM only writes 00h here. I think it's for disabling the Sprint ROM&#xD;&#xA;* `7Fh`. Write-only. The ROM writes 00h or 80h here. It's the new &quot;MIC&quot; port, bit 7.&#xD;&#xA;* `FFh`. Read-only. &quot;EAR&quot; port, bit 7. Decoded bit value, bit 0&#xD;&#xA;&#xD;&#xA;[![enter image description here][2]][2]&#xD;&#xA;&#xD;&#xA;The internals of the Sprint seem to work according to patent number **GB2164527A** or &quot;High speed cassette tape player&quot;&#xD;&#xA;&#xD;&#xA;The device actually decodes FSK, so the value at bit 7 of port `FFh` is not the current state of the &quot;EAR&quot; input, as in normal loaders, but the actual bit of the current loading byte.&#xD;&#xA;&#xD;&#xA;So, as the patent states, there no need for tight loops, as the time measuring is performed by a monostable, which is reset to 0 on each positive edge of the incoming signal. The computer has to keep reading the monostable value while it waits until the next positive edge. A polarity correction circuit ensures that the edges are right regardless of the polarity the tape were recorded with.&#xD;&#xA;&#xD;&#xA;The monostable is configured so it turns to '1' after a specific period of time. Time that is roughly 3/4 times the period of a '1' bit in FSK (remember that the '1' bit lasts double the time than a '0' bit). So if a '1' is currently playing, the monostable will switch to '1' and that will be the value read by the computer, but if a '0' is playing, the next positive edge will happen long before the monostable switchs to '1', hence a '0' will be read.&#xD;&#xA;&#xD;&#xA;By analysing the source code, it is likely that port `FFh` offers two things: the current state of the incoming signal, at bit 7, needed to track the pilot tone at the first part of the loading routine, and to detect edges in the second part. The current value of the monostable, that is, the bit after the FSK decoding process, seems to be at bit 0. The routine reads port FFh, stores bit 0 into the carry with a RRA instruction, some instructions after that, the routine retrieves the bit again into H using the instruction RL H.&#xD;&#xA;&#xD;&#xA;    ROM:0492 loc_492:&#xD;&#xA;    ROM:0492                 dec     l&#xD;&#xA;    ROM:0493                 jr      z, loc_4A8&#xD;&#xA;    ROM:0495                 in      a, (c)&#xD;&#xA;    ROM:0497                 jp      m, loc_492  &#xD;&#xA;    ;loops while the pulse is high, so it exits &#xD;&#xA;    ;just after a positive to negative edge has ocurred&#xD;&#xA;    &#xD;&#xA;    ROM:049A&#xD;&#xA;    ROM:049A loc_49A:&#xD;&#xA;    ROM:049A                 dec     l&#xD;&#xA;    ROM:049B                 jr      z, loc_4A8&#xD;&#xA;    ROM:049D                 rra&#xD;&#xA;    ROM:049E                 in      a, (c)&#xD;&#xA;    ROM:04A0                 jp      p, loc_49A  &#xD;&#xA;    ;loops while the pulse is low, so it exists just after &#xD;&#xA;    ;a negative to positive edge has ocurred. The carry&#xD;&#xA;    ;bit holds the value of bit 0 read in the previous IN&#xD;&#xA;    ;operation, as at the precise moment a falling edge&#xD;&#xA;    ;happens, the monostable is reset to 0.&#xD;&#xA;    &#xD;&#xA;    ROM:04A3                 rl      h  ;load the bit into the H register.&#xD;&#xA;    ROM:04A5                 jr      nc, loc_482&#xD;&#xA;&#xD;&#xA;This explains why I have seen no tight loops, but some NOP's inside the saving and loading loop. The computer uses timming loops to detect the pilot tone, but the monostable for actual byte loading.&#xD;&#xA;&#xD;&#xA;***(the following parragraphs were written after a more careful read of the new `LOAD` routine was made)***&#xD;&#xA;&#xD;&#xA;Finally, I'd like to give some details of what I think it's the very heart of the loading routine, and the code that shows all the magic that the SPRINT cassette offers:&#xD;&#xA;&#xD;&#xA;What this tape player implements is no more and no less than a converter from an asynchronous FSK coded signal to a synchronous 1-bit serial line. The `DATA` bit is the monostable bit (bit 0 of port `FFh`) and the `CLOCK` bit is what we have previously called the &quot;signal&quot; bit (bit 7 of port FFh, which gives us the actual pulses present into the tape). As we stated, the conversion is performed in hardware, and `DATA` is valid just before a negative to positive transition at `CLOCK` happens. The byte loading routine that follows, just have to wait for this situation, taking into account that the signal flow might be interrupted at any time, so timeouts have to be provided to not to hang the computer into an endless loop because of an interrupted operation.&#xD;&#xA;&#xD;&#xA;    ;Registers used:&#xD;&#xA;    ;C = 0FFh (for the IN instruction)&#xD;&#xA;    ;BC' = 1601h. C is xored with B at each loop. The result is &#xD;&#xA;    ;outputted to FEh, so these two values provides visual&#xD;&#xA;    ;and audio feedback of the loading process to the user.&#xD;&#xA;    ;H = holds the byte that is being read from tape. First bit&#xD;&#xA;    ;read is MSb.&#xD;&#xA;    ;L = timeout value for waiting an edge.&#xD;&#xA;    &#xD;&#xA;    ;On &quot;normal&quot; exit: H = byte loaded from tape. Carry set.&#xD;&#xA;    &#xD;&#xA;    ROM:0480 LoadOneByte:&#xD;&#xA;    ROM:0480                 ld      h, 1  ;Mark bit 0 with 1. When H is filled&#xD;&#xA;                                           ;this '1' goes to the carry bit,&#xD;&#xA;                                           ;signaling that the byte is completed.&#xD;&#xA;    ROM:0482 NextBit:&#xD;&#xA;    ;--------------------------------------------------------------&#xD;&#xA;    ; BREAK CHECKING&#xD;&#xA;    ROM:0482                 ld      a, 7Fh&#xD;&#xA;    ROM:0484                 in      a, (0FEh)  ;read SPACE.&#xD;&#xA;    ROM:0486                 rra&#xD;&#xA;    ROM:0487                 jr      nc, TotalExit  ;if pressed, early exit.&#xD;&#xA;    ;--------------------------------------------------------------&#xD;&#xA;    ; BORDER AND SPEAKER HANDLING&#xD;&#xA;    ROM:0489                 exx&#xD;&#xA;    ROM:048A                 ld      a, c&#xD;&#xA;    ROM:048B                 xor     b&#xD;&#xA;    ROM:048C                 ld      c, a&#xD;&#xA;    ROM:048D                 out     (0FEh), a&#xD;&#xA;    ROM:048F                 exx&#xD;&#xA;    &#xD;&#xA;    ROM:0490                 ld      l, 1Eh  ;timeout for waiting for an edge.&#xD;&#xA;    ;--------------------------------------------------------------&#xD;&#xA;    ; LOOP FOR WAITING A POSITIVE TO NEGATIVE EDGE.&#xD;&#xA;    ROM:0492 WaitFor0:&#xD;&#xA;    ROM:0492                 dec     l  ;update timeout value&#xD;&#xA;    ROM:0493                 jr      z, TotalExit  ;if timeout, early exit.&#xD;&#xA;    ROM:0495                 in      a, (c)  ;reads clock and monostable&#xD;&#xA;    ROM:0497                 jp      m, WaitFor0  ;loops while clock is '1'&#xD;&#xA;    ;--------------------------------------------------------------&#xD;&#xA;    ; LOOP FOR WAITING A NEGATIVE TO POSITIVE EDGE.&#xD;&#xA;    ROM:049A WaitFor1:&#xD;&#xA;    ROM:049A                 dec     l   &#xD;&#xA;    ROM:049B                 jr      z, TotalExit&#xD;&#xA;    ROM:049D                 rra   ;stores last monostable value read into carry.&#xD;&#xA;    ROM:049E                 in      a, (c)  ;reads clock and monostable&#xD;&#xA;    ROM:04A0                 jp      p, WaitFor1  ;loops while clock is '0'&#xD;&#xA;    ;--------------------------------------------------------------&#xD;&#xA;    &#xD;&#xA;    ROM:04A3                 rl      h  ;load monostable value into H&#xD;&#xA;    ROM:04A5                 jr      nc, NextBit  ;if H is not full, go &#xD;&#xA;                                                  ;for the next bit.&#xD;&#xA;    ROM:04A7                 ret&#xD;&#xA;    &#xD;&#xA;    ROM:0535 TotalExit:&#xD;&#xA;    ROM:0535                 pop     hl  ;discard return value for this routine&#xD;&#xA;    ROM:0536                 xor     h  ;clears carry?&#xD;&#xA;    ROM:0537                 ret  ;return to the caller of the main load routine.&#xD;&#xA;&#xD;&#xA;Here you have a live demonstration of the Sprint, loading a copy of Jet Pac, previously recorded in a standard cassette at the ROM speed:&#xD;&#xA;&#xD;&#xA;http://www.youtube.com/watch?v=ofBmvjuuIBg&#xD;&#xA;&#xD;&#xA;*(FINAL NOTE: this answer is a copy of an answer I gave at the WOS forums about 5 years ago. The pictures are from my own Sprint cassette. I've copied it for the sake of preservation, in case the forum vanishes or something. The link to my answer, along with comments from other fellow WOSers, is here: http://www.worldofspectrum.org/forums/discussion/comment/554708/#Comment_554708 )*&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/bAomF.jpg&#xD;&#xA;  [2]: http://i.stack.imgur.com/lSTjH.jpg&#xD;&#xA;&#xD;&#xA;" />
  <row Id="1379" PostHistoryTypeId="2" PostId="508" RevisionGUID="c2a28e81-f65b-4732-9816-1e2ca3531876" CreationDate="2016-05-14T21:10:31.860" UserId="520" Text="Apple ][ used an ordinary disk transport and fixed bit-rate in the controller. in order to fit more bits on the outer track it would need to vary the spin rate of the disk so that the controller had time to put the extra bits on.&#xD;&#xA;&#xD;&#xA;CD drives use variable spin rate, but floppy disks (mostly) use a fixed spin rate (like grammophone records.&#xD;&#xA;&#xD;&#xA;Apple macointosh used a custom disk transport with variable spin rate, so it could fit more data on the outer tracks of the disk, getting 2MB on a &quot;1.44MB&quot; floppy.&#xD;&#xA;" />
  <row Id="1380" PostHistoryTypeId="6" PostId="476" RevisionGUID="a9418eb1-d0d1-4f7c-9b92-a7d8feb8aa89" CreationDate="2016-05-14T21:17:56.627" UserId="462" Comment="This question is about BASIC" Text="&lt;programming&gt;&lt;basic&gt;" />
  <row Id="1381" PostHistoryTypeId="24" PostId="476" RevisionGUID="a9418eb1-d0d1-4f7c-9b92-a7d8feb8aa89" CreationDate="2016-05-14T21:17:56.627" Comment="Proposed by 462 approved by 125 edit id of 140" />
  <row Id="1382" PostHistoryTypeId="2" PostId="509" RevisionGUID="487ac2a7-a3b1-4e05-9b84-74b7e2334cd5" CreationDate="2016-05-14T21:22:27.353" UserId="72" Text="Generally, this involves some very careful work, where you overwrite part of the tokenized BASIC program with the binary data, or add the binary data to the tokenized BASIC code while carefully adjusting the counters showing where things are located in the code. It's a tricky process and I never thought it was worth the trouble, given how easy it is to mess up.&#xD;&#xA;&#xD;&#xA;It does make it harder to edit the BASIC code, since it becomes problematic for the BASIC interpreter to revise the code as you make changes when it can't understand the &quot;tokenized code&quot; which is actually binary data. That makes it a crude copy protection scheme both in terms of obfuscating the code and in terms of making it harder to change the code without damaging it.&#xD;&#xA;&#xD;&#xA;I don't have the details on how to pull this off handy; it can be figured out by looking at the internal format of the tokenized BASIC code, though. Once you know how Integer BASIC (and Applesoft, for that matter) store their code, you can start to manipulate it to do pretty clever things. It takes patience and practice though." />
  <row Id="1383" PostHistoryTypeId="6" PostId="495" RevisionGUID="cf49c8f5-1eb5-400f-9622-debf6d34c8a0" CreationDate="2016-05-14T21:28:25.837" UserId="462" Comment="created new tag" Text="&lt;keyboards&gt;&lt;symbolics&gt;" />
  <row Id="1384" PostHistoryTypeId="5" PostId="449" RevisionGUID="075a7ef2-a77e-45a2-a3d6-d782f8ceb83c" CreationDate="2016-05-14T21:34:45.077" UserId="153" Comment="edit to refer to @Jasen's comment" Text="Although Mark's post probably is the correct answer (first non-hardwired game) the first home video game console is the [Magnavox Odyssey][1]:&#xD;&#xA;&#xD;&#xA;[![Magnavox Odyssey][2]][2]&#xD;&#xA;&#xD;&#xA;&gt;The Magnavox Odyssey and the whole idea of playing a video game on a television set was invented by a man named Ralph H Baer. Mr Baer first thought of the idea of building an &quot; interactive game &quot; displayed on a TV in 1951 when he worked with designing and building television sets at Loral Electronics, but no one at Loral showed any interest in the idea and so, Mr Bear put the idea to rest for 15 years.&#xD;&#xA;&gt;... &#xD;&#xA;&gt;Then on January 27th 1972 the videogame industry was born. On that date Magnavox begun the production of the [Odyssey ITL 200][1] and it was available for sale in May that same year. &#xD;&#xA;&#xD;&#xA;There were at least 28 [game cartridges][4] of which 12 were shipped with the console.&#xD;&#xA;&#xD;&#xA;---&#xD;&#xA;Edit: as commented by @Jasen the cartridge were hard-wired (see [the scheme][5]).&#xD;&#xA;&#xD;&#xA;  [1]: http://www.magnavox-odyssey.com/&#xD;&#xA;  [2]: http://i.stack.imgur.com/7gJLGm.png&#xD;&#xA;  [3]: http://retrovideogamesystems.com/the-magnavox-odyssey-itl200-the-holy-grail/&#xD;&#xA;  [4]: http://www.magnavox-odyssey.com/Standard%20games.htm&#xD;&#xA;  [5]: http://console5.com/wiki/File:Magnavox-Odyssey-1TL200BK12-Schematic.png" />
  <row Id="1385" PostHistoryTypeId="2" PostId="510" RevisionGUID="648f62b7-188a-48c9-8b2b-399f66f59800" CreationDate="2016-05-14T21:36:56.600" UserId="-1" Text="" />
  <row Id="1386" PostHistoryTypeId="2" PostId="511" RevisionGUID="d6da576f-fd04-43b1-9149-a1dfb71a8992" CreationDate="2016-05-14T21:36:56.600" UserId="-1" Text="" />
  <row Id="1387" PostHistoryTypeId="6" PostId="503" RevisionGUID="13291fd4-67fb-4e8d-9559-94b5a9207afa" CreationDate="2016-05-14T21:42:45.967" UserId="56" Comment="Edited tags -- very Apple II, not particularly 6502" Text="&lt;apple-ii&gt;&lt;floppy-disk&gt;&lt;disk-drive&gt;" />
  <row Id="1388" PostHistoryTypeId="5" PostId="500" RevisionGUID="f916c3a8-26b4-4ce3-9eb4-65699a8c5eee" CreationDate="2016-05-14T21:51:32.290" UserId="340" Comment="edited body" Text="If one doesn't need particularly high data rates, it's possible to implement data-to-audio and audio-to-data routines in a very small amount of code.  To store a &quot;1&quot;, generate 250us of high followed by 250us (e.g.) of low; to store a &quot;0&quot;, store 500us of high followed by 500us of low.  Note that some tape-drives' electronics, which are designed for analog signals, will try to adjust the signal try receive so that it's high about half the time and low about half the time, and the signal may get badly distorted (and thus become illegible) if the high and low times aren't close to being balanced, which is why tape formats seem to waste half the storage capacity writing each bit twice.&#xD;&#xA;&#xD;&#xA;If one is willing to use more complicated code for recording and playback, it's possible to use a mixture of different pulse lengths, encoded in such a fashion that the high and low times remain balanced.  Such approaches can allow more than twice as much information to be stored as the simple straightforward technique, but require more code to read or write data.  For a computer to include built-in support would have required that manufacturers devote hundreds of bytes of ROM to that purpose that could otherwise be used for other things.&#xD;&#xA;&#xD;&#xA;For programs shipped on pre-recorded tapes, however, the size of the record/playback routines is not an issue.  The data can be written on the tape using specialized equipment, making the size of the record routines irrelevant [if the encoding is one that couldn't be written by a standard computer, that would actually be a bonus].  The size of playback code is also not much of an issue.  Even if playback code would take 1024 bytes, it could be used to load all but 1024 bytes of RAM; if it would be necessary to load even more than that, the last little bit could be loaded using a slower but smaller routine (or perhaps the built-in one)." />
  <row Id="1391" PostHistoryTypeId="2" PostId="512" RevisionGUID="5b6a9c51-6023-4f98-a832-6394db793228" CreationDate="2016-05-15T08:14:14.233" UserId="525" Text="#&quot;Why was BASIC built into so many operating systems?&quot;  &#xD;&#xA;&#xD;&#xA;Because it was the popular choice. It's not like the systems that didn't include `BASIC` didn't have a `BASIC`-alternative. Every operating system has functionality that is hard-coded into it (like the boot process) and parts that can be programmed by the user (like startup scripts and scheduled tasks). To execute code that isn't known at OS-compile-time you need some kind of system to parse and execute commands. When creating an OS you define a set of commands that the user can give, `BASIC` is nothing more that a pre-defined set of commands. It was so popular because it was easy to learn, functioned well in many different environments and catered to the needs of most computer users at the time (and still).  &#xD;&#xA;&#xD;&#xA;Think of `Bash` (or `sh`, it's predecessor), it basically fills the same role that `BASIC` did for a lot of systems. You wouldn't wonder why so many *nix systems include `Bash` into the OS, it's an integral part of it." />
  <row Id="1392" PostHistoryTypeId="2" PostId="513" RevisionGUID="85e3c4dd-88c6-44fa-acaf-d982d845567e" CreationDate="2016-05-15T08:19:50.213" UserId="74" Text="Actually, in that case, no fancy algorithm changes were used - the tape recorder was literally &quot;overclocked&quot; - frequency of interrupts handling communication with the tape recorder changed.&#xD;&#xA;&#xD;&#xA;I found [a program][1] that allowed to override speed on the standard C: handler. It allows operation at up to 1400 baud, but as the author writes, the ability to use higher speed is &quot;an individual property of each tape recorder and requires high-quality tapes.&quot;&#xD;&#xA;&#xD;&#xA;Let me translate the segment of the article that addresses how the program actually works.&#xD;&#xA;&#xD;&#xA;&gt; For the curious: After being loaded, &quot;Selector&quot; searches hatabs for the address of the C: handler, and basing on it, it creates its own, with modified &quot;OPEN&quot; and CLOSE&quot; procedures. [note, read/write procedures are umodified! --SF.] New table address is attached to the standard handler, so it doesn't ocupy extra space. The speedup is based on modification of the serial bus interrupt vserini and corresponding setting of the POKEY work frequency registers for duration of the transmission. The interrupt change occurs only on opening the C: device and is restored after its closing in order to enable normal use of a disk drive. The control keys are passed from the keyboard interrupt. The program is immune to warm start of the computer. Good luck in turbo'ing!&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://tajemnice.atari8.info/1-2_93/1-2_93_brs.html" />
  <row Id="1394" PostHistoryTypeId="2" PostId="514" RevisionGUID="88515fcb-17a0-4de5-a117-100fed29005d" CreationDate="2016-05-15T11:42:33.113" UserId="105" Text="Not really a cassette improvement, but audio anyway: the CD Games Collection from Codemasters came with an adapter that meant to be connected to the joystick port of the computer and the headphones out of a CD Player. The games were recorded with a custom loading scheme, much faster than standard loaders, thanks to the absence of background noise, wow and flutter.&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;Theorically, the game would be recorded using both left and right tracks, as the audio plug is a stereo 3.5'' jack and the joystick connector seem to have two pins wired. A simple audio analysis shows that it isn't true, and both tracks carried the same signal. Besides, and according to Jose Leandro's research, the loader routine listened to only one pin from the joystick connector. He inferred how the inside circuit would look like:&#xD;&#xA;&#xD;&#xA;[![enter image description here][2]][2]&#xD;&#xA;&#xD;&#xA;So it seems that the recording and the loader routine were made after the cable was designed, and they were in a hurry to release this collection, so they couldn't debug it enough and decided to go with a mono signal version and a more reliable, although slower loader.&#xD;&#xA;&#xD;&#xA;More about this in Jose Leandro's hardware page:&#xD;&#xA;http://trastero.speccy.org/cosas/JL/CableCD/CableCD.html&#xD;&#xA;&#xD;&#xA;And speaking of loading through the joystick port. Long time ago I tried to do something similar (although I didn't hear about the CD Games Pack until years after). My approach is to use 5 pins from the joystick port to carry a parallel 4-bit digital signal (using the direction pins), and a clock (using the trigger pin). I could even make it DDR, i.e. accepting data on both the rising and the falling edge of the clock signal. With this approach, I achieved about 155kbps.&#xD;&#xA;&#xD;&#xA;This is a demonstration of such technique. I use a microcontroller to store the program I want to load, along with the bit banging code that converts it into a series of nibbles to be sent over the joystick cable. The routine at the computer end merely needs to wait until a clock edge happens and then, read the data present in direction pins, store it and when the second half is read, assemble a byte and store in memory. I think the technique can be extrapolated to any computer that has a digital joystick port, and the microcontroller part can be changed for a PC with a FTDI chip with assist from software to do the bit-banging part, loading a program from USB.&#xD;&#xA;&#xD;&#xA;https://www.youtube.com/watch?v=i8Sv9riKVwg&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/FqulN.jpg&#xD;&#xA;  [2]: http://i.stack.imgur.com/0Q0j7.png" />
  <row Id="1395" PostHistoryTypeId="5" PostId="514" RevisionGUID="7bda2a21-fe98-48ea-b259-8a3a2d5e627a" CreationDate="2016-05-15T11:48:41.353" UserId="105" Comment="added 175 characters in body" Text="Not really a cassette improvement, but audio anyway: the CD Games Collection from Codemasters came with an adapter that meant to be connected to the joystick port of the computer and the headphones out of a CD Player. The games were recorded with a custom loading scheme, much faster than standard loaders, thanks to the absence of background noise, wow and flutter.&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;Theorically, the game would be recorded using both left and right tracks, as the audio plug is a stereo 3.5'' jack and the joystick connector seem to have two pins wired. A simple audio analysis shows that it isn't true, and both tracks carried the same signal. Besides, and according to Jose Leandro's research, the loader routine listened to only one pin from the joystick connector. He inferred how the inside circuit would look like:&#xD;&#xA;&#xD;&#xA;[![enter image description here][2]][2]&#xD;&#xA;&#xD;&#xA;So it seems that the recording and the loader routine were made after the cable was designed, and they were in a hurry to release this collection, so they couldn't debug it enough and decided to go with a mono signal version and a more reliable, although slower loader.&#xD;&#xA;&#xD;&#xA;More about this in Jose Leandro's hardware page:&#xD;&#xA;http://trastero.speccy.org/cosas/JL/CableCD/CableCD.html&#xD;&#xA;&#xD;&#xA;And speaking of loading through the joystick port. Long time ago I tried to do something similar (although I didn't hear about the CD Games Pack until years after). My approach is to use 5 pins from the joystick port to carry a parallel 4-bit digital signal (using the direction pins), and a clock (using the trigger pin). I could even make it DDR, i.e. accepting data on both the rising and the falling edge of the clock signal. With this approach, I achieved about 155kbps.&#xD;&#xA;&#xD;&#xA;Details about this experiment can be found on my website:&#xD;&#xA;http://www.zxprojects.com/index.php/external-ultra-high-loader-for-the-zx-spectrum/14-proof-of-concept-alchemist&#xD;&#xA;&#xD;&#xA;This is a demonstration of such technique. I use a microcontroller to store the program I want to load, along with the bit banging code that converts it into a series of nibbles to be sent over the joystick cable. The routine at the computer end merely needs to wait until a clock edge happens and then, read the data present in direction pins, store it and when the second half is read, assemble a byte and store in memory. I think the technique can be extrapolated to any computer that has a digital joystick port, and the microcontroller part can be changed for a PC with a FTDI chip with assist from software to do the bit-banging part, loading a program from USB.&#xD;&#xA;&#xD;&#xA;https://www.youtube.com/watch?v=i8Sv9riKVwg&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/FqulN.jpg&#xD;&#xA;  [2]: http://i.stack.imgur.com/0Q0j7.png" />
  <row Id="1396" PostHistoryTypeId="5" PostId="490" RevisionGUID="4bedd5b1-b8df-4d5e-af61-bb14b1369381" CreationDate="2016-05-15T13:44:14.450" UserId="29" Comment="Changed some spelling, and formatting, and redrew schematic." Text="Tim's answer referencing Marty Goodman offers a good explanation, but not really any options for users today who might need to make this upgrade.&#xD;&#xA;&#xD;&#xA;The 3024 model can be modified with a simple PAL upgrade, available from [Cloud9][1]&#xD;&#xA;&#xD;&#xA;If you have access to a programmer and the proper GAL, there's information on Coco3.com for another option:&#xD;&#xA;&#xD;&#xA;If you get a Gray or White Large MPI (both have catalog #26-3024), then the procedure is different – you simply replace the 14L4 PAL with a properly programmed 16V8. You can’t use the equations presented above for a 26-3024. Instead, use these:&#xD;&#xA;&#xD;&#xA;    Name 26-3024 M.P.I. Upgrade ;&#xD;&#xA;    PartNo GCC-3024.01 ;&#xD;&#xA;    Date 6/1/2010 ;&#xD;&#xA;    Revision 01 ;&#xD;&#xA;    Designer J&amp;R ;&#xD;&#xA;    Company GIMEchip.com ;&#xD;&#xA;    Assembly 26-3024 M.P.I. Upgrade PAL for CoCo 3 ;&#xD;&#xA;    Location U6 ;&#xD;&#xA;    Device g16v8 ;&#xD;&#xA;    /* ***************** INPUT PINS *****************/&#xD;&#xA;    PIN 01 = !FFXX; /* LOW For Any Address Between $FF00-$FFFF */&#xD;&#xA;    PIN [2..9] = [A7..0]; /* CPU A7 – A0 */&#xD;&#xA;    PIN 11 = RW; /* READ = 1, WRITE = 0 */&#xD;&#xA;    PIN 12 = E; /* E-Clock */&#xD;&#xA;    PIN 13 = Q; /* Q-Clock */&#xD;&#xA;    PIN 18 = !CTS; /* Cartridge Select Signal. */&#xD;&#xA;    PIN 19 = !SLENB; /* Input To Disable Device Selection. */&#xD;&#xA;    /* ***************** OUTPUT PINS *****************/&#xD;&#xA;    PIN 14 = !DBEN; /* Enables The Multi-Pak Interface Data Buffer */&#xD;&#xA;    PIN 15 = !IOR; /* Read the Slot Select Latch. */&#xD;&#xA;    PIN 16 = !IOW; /* Write the Slot Select Latch */&#xD;&#xA;    /* ***************** LOGIC EQUATIONS &amp; VARIABLE DEFINITIONS *****************/&#xD;&#xA;    FIELD ADDRESS = [A7..0]; /* */&#xD;&#xA;    LATCH = ADDRESS:[7F]; /* Slot Select Latch@$FF7F */&#xD;&#xA;    IOR = LATCH &amp; FFXX &amp; E &amp; RW; /* Active on $FF7F and E=1 and RW=1 */&#xD;&#xA;    IOW = LATCH &amp; FFXX &amp; E &amp; !RW &amp; !Q; /* Active on $FF7F and E=1 and RW=0 and Q=0 */&#xD;&#xA;    DBEN = (ADDRESS:[40..7F] &amp; FFXX) # SLENB # CTS;/* Active $FF40-$FF7F or SLENB or CTS */&#xD;&#xA;    /* *****************/&#xD;&#xA;&#xD;&#xA;The 26-3124 model can be upgraded according to this image from coco3.com using a 74LS10 and some soldering skills:&#xD;&#xA;&#xD;&#xA;[![Little John's 74LS10 upgrade][3]][3]&#xD;&#xA;&#xD;&#xA;&gt; Standard CoCo 3 upgrade for the 26-3124 Multi-Pak Interface. The&#xD;&#xA;&gt; integrated circuit is a 74LS10 Tripple 3-Input NAND. The trace&#xD;&#xA;&gt; connecting pin 19 of IC1 to pin 52 of IC6 is severed. This circuit is&#xD;&#xA;&gt; assembled and connected as indicated in the schematic. This circuit&#xD;&#xA;&gt; restricts the address range of the M.P.I. data buffer to $FF40-$FF7F.&#xD;&#xA;&gt; The data buffer is aso enabled on SLENB* and CTS*. BA7 is buffered&#xD;&#xA;&gt; address line A7.&#xD;&#xA;&#xD;&#xA;Once you make this upgrade, your MPI will only be address compatible with the CoCo 3.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.frontiernet.net/~mmarlette/Cloud-9/Hardware/MPI%20PAL.html&#xD;&#xA;  [2]: http://i.stack.imgur.com/gVXsS.jpg&#xD;&#xA;  [3]: http://i.stack.imgur.com/9XYy3.png" />
  <row Id="1397" PostHistoryTypeId="24" PostId="490" RevisionGUID="4bedd5b1-b8df-4d5e-af61-bb14b1369381" CreationDate="2016-05-15T13:44:14.450" Comment="Proposed by 29 approved by 56, 105 edit id of 139" />
  <row Id="1399" PostHistoryTypeId="2" PostId="515" RevisionGUID="a47bb2e6-4558-4277-89c6-8296278bda89" CreationDate="2016-05-15T21:44:09.080" UserId="29" Text="The DS-69 was a cartridge you could plug into the computer to digitize a composite video source. It fully supported writing images to floppy disks.&#xD;&#xA;&#xD;&#xA;Can the DS-69 (A or B) be used with Y-Cable?&#xD;&#xA;&#xD;&#xA;The manual only mentions using the device with a Multi-Pak, or other &quot;active&quot; switcher." />
  <row Id="1400" PostHistoryTypeId="1" PostId="515" RevisionGUID="a47bb2e6-4558-4277-89c6-8296278bda89" CreationDate="2016-05-15T21:44:09.080" UserId="29" Text="Digisector DS-69 video digitizer" />
  <row Id="1401" PostHistoryTypeId="3" PostId="515" RevisionGUID="a47bb2e6-4558-4277-89c6-8296278bda89" CreationDate="2016-05-15T21:44:09.080" UserId="29" Text="&lt;color-computer&gt;" />
  <row Id="1402" PostHistoryTypeId="2" PostId="516" RevisionGUID="abf25013-cc26-4358-903c-5e90c50b5156" CreationDate="2016-05-16T01:58:23.313" UserId="393" Text="DOS 3.3 was the most common before ProDOS. How did it differ to DOS 3.2 and what versions were there before that?" />
  <row Id="1403" PostHistoryTypeId="1" PostId="516" RevisionGUID="abf25013-cc26-4358-903c-5e90c50b5156" CreationDate="2016-05-16T01:58:23.313" UserId="393" Text="How many versions of DOS were there for the Apple II and what were the differences?" />
  <row Id="1404" PostHistoryTypeId="3" PostId="516" RevisionGUID="abf25013-cc26-4358-903c-5e90c50b5156" CreationDate="2016-05-16T01:58:23.313" UserId="393" Text="&lt;apple-ii&gt;" />
  <row Id="1405" PostHistoryTypeId="5" PostId="406" RevisionGUID="da499367-a611-41f7-aed9-e01c56505ef4" CreationDate="2016-05-16T07:48:31.930" UserId="535" Comment="Copy edited." Text="Although it is widely known that the [ZX Spectrum ULA][1] answers to any request to an even I/O address, all documentation state that the official port number to use should be `$xxFE` (where `xx` is any 8 bit number).&#xD;&#xA;&#xD;&#xA;I'm now updating my ULA core to add the Timex MMU memory manager, and this MMU uses I/O port `$F4`, which would conflict with the current implemented ULA. So I'm thinking about performing a more restrictive decoding so that the ULA reacts only to I/O port `$FE`, but I'm concerned about the possible consequences of this in existing games and applications.&#xD;&#xA;&#xD;&#xA;So:&#xD;&#xA;&#xD;&#xA;- Do any of you know of a game, demoscene app, or actually, anything, that uses another even port than `$FE` to access the ULA?&#xD;&#xA;- Alternatively, is there any ZX Spectrum emulator which I could parametrize/customize in a way that I can run it from a shell script to execute a list of game snapshots, and log the first time it accesses an even addressed I/O port other than `$FE`?&#xD;&#xA;&#xD;&#xA;  [1]: https://en.wikipedia.org/wiki/Gate_array#History&#xD;&#xA;" />
  <row Id="1406" PostHistoryTypeId="4" PostId="406" RevisionGUID="da499367-a611-41f7-aed9-e01c56505ef4" CreationDate="2016-05-16T07:48:31.930" UserId="535" Comment="Copy edited." Text="Are there any ZX Spectrum applications (mainly games or demoscene productions) that use a port other than $FE to access the ULA?" />
  <row Id="1407" PostHistoryTypeId="24" PostId="406" RevisionGUID="da499367-a611-41f7-aed9-e01c56505ef4" CreationDate="2016-05-16T07:48:31.930" Comment="Proposed by 535 approved by 105 edit id of 144" />
  <row Id="1408" PostHistoryTypeId="5" PostId="134" RevisionGUID="067dedf2-f4ed-464b-875d-67737a1a2362" CreationDate="2016-05-16T07:49:51.460" UserId="535" Comment="Copy edited." Text="My [Commodore 64][1] is running quite slow, and my friends want it to be faster, thus overclocking it. But no one knows exactly how to do that. With our current &quot;modern&quot; stuff, nothing seems to help my retro computer get any faster. Naturally I suggested changing the crystal that controls the timing, and of course I was greeted with a series of complaints of ruining the device.&#xD;&#xA;&#xD;&#xA;How can I get some more juice out of (overclocking) my Commodore 64?&#xD;&#xA;&#xD;&#xA;  [1]: https://en.wikipedia.org/wiki/Commodore_64&#xD;&#xA;" />
  <row Id="1409" PostHistoryTypeId="4" PostId="134" RevisionGUID="067dedf2-f4ed-464b-875d-67737a1a2362" CreationDate="2016-05-16T07:49:51.460" UserId="535" Comment="Copy edited." Text="How can I overclock my Commodore 64?" />
  <row Id="1410" PostHistoryTypeId="24" PostId="134" RevisionGUID="067dedf2-f4ed-464b-875d-67737a1a2362" CreationDate="2016-05-16T07:49:51.460" Comment="Proposed by 535 approved by -1 edit id of 145" />
  <row Id="1411" PostHistoryTypeId="5" PostId="134" RevisionGUID="702a8d96-083d-496e-bd9c-0b90a200f399" CreationDate="2016-05-16T07:49:51.460" UserId="105" Comment="Copy edited. No need for the wikipedia link, as the tag should be self-explanatory" Text="My Commodore 64 is running quite slow, and my friends want it to be faster, thus overclocking it. But no one knows exactly how to do that. With our current &quot;modern&quot; stuff, nothing seems to help my retro computer get any faster. Naturally I suggested changing the crystal that controls the timing, and of course I was greeted with a series of complaints of ruining the device.&#xD;&#xA;&#xD;&#xA;How can I get some more juice out of (overclocking) my Commodore 64?&#xD;&#xA;" />
  <row Id="1412" PostHistoryTypeId="2" PostId="517" RevisionGUID="450487f6-5b79-4364-a3a5-f9db5c68eb36" CreationDate="2016-05-16T12:50:08.577" UserId="74" Text="Discussing 'non-standard byte sizes' with co-workers today, one mentioned hearing of soviet experiments with computers that used three-state bytes - and not just what is common today, 0, 1 and High Impedance meaning &quot;absent on the bus&quot;, but actual trinary system, where the bits could achieve three logical values. Unfortunately, he was unable to provide any more details - nothing beyond &quot;hearing about it.&quot;&#xD;&#xA;&#xD;&#xA;Could someone provide more detail? Was there a computer system that was based on the trinary system? What was it? How did it work?" />
  <row Id="1413" PostHistoryTypeId="1" PostId="517" RevisionGUID="450487f6-5b79-4364-a3a5-f9db5c68eb36" CreationDate="2016-05-16T12:50:08.577" UserId="74" Text="What computer used trinary bits?" />
  <row Id="1414" PostHistoryTypeId="3" PostId="517" RevisionGUID="450487f6-5b79-4364-a3a5-f9db5c68eb36" CreationDate="2016-05-16T12:50:08.577" UserId="74" Text="&lt;history&gt;&lt;ussr&gt;" />
  <row Id="1415" PostHistoryTypeId="2" PostId="518" RevisionGUID="dd548e04-12a6-41ba-9270-314ae420aa4a" CreationDate="2016-05-16T13:29:28.317" UserId="260" Text="The Commodore 64 had many different tape loaders.  Game publishers often included them, especially in Europe, as the C64 had on average more memory to fill and the standard tape routines weren't very fast.  The exact same tape routines exist in the PET, VIC20, C64, and C128 because when Chuck Peddle wrote them and he left Commodore, the secrets of the logic of the routines left with him." />
  <row Id="1416" PostHistoryTypeId="2" PostId="519" RevisionGUID="33ac7005-0826-44b3-9dde-a72e7a8c70f9" CreationDate="2016-05-16T14:03:09.923" UserId="539" Text="There was no public release of DOS 1 or 2.  DOS 3.1 was actually the first release to the public.  It had a pretty significant bug in its MASTER CREATE program, and so the patched version DOS 3.2 was released.  DOS 3.1 dates back to about June 1978.&#xD;&#xA;&#xD;&#xA;The system master disk for DOS was able to operate on any machine regardless of how much memory it had.  Simply running `INIT HELLO` (or whatever) generated a disk that put RWTS (the DOS code itself) in exactly the position of memory it was now.  A master disk would put it as high as it could on a 16, 32, or 48k machine.  So a bug in the code that made new disks that could do that was a problem.&#xD;&#xA;&#xD;&#xA;Anyway, DOS 3.1 and 3.2 used a 13 sector disk.  But it wasn't too much longer before Woz realized that 16 sectors was possible with a minor hardware change to the Disk II controller card.  DOS 3.3 came along with the necessary bits to fix that, and the DOS 3.3 System Master disk came with tools for moving files from 13 sector to 16 sector, and for booting the old disks from the System Master disk.&#xD;&#xA;&#xD;&#xA;ProDOS came along later and worked completely differently.  It more or less came onto the scene around the time of the Apple //e.  It clearly was developed for and on the Apple ][+, but Apple did not release it until the Apple /// was pretty much completely obviously dead.  Then suddenly here comes the //e and this new ProDOS thing.  And Apple withdrew permission at that point for A2UGs to distribute DOS 3.3 and older anymore, intending to kill off the old stuff.&#xD;&#xA;&#xD;&#xA;It never really did die off.  ;)&#xD;&#xA;&#xD;&#xA;There were also ProntoDOS, RDOS, and a whole bunch of mods to Apple's DOS, fundamentally all patches to the DOS RWTS to change the order things were written when the disk was INIT'd.  You'll discover more about that if you dig into &quot;DOS order&quot; and &quot;ProDOS order&quot;.&#xD;&#xA;&#xD;&#xA;There were also patched versions of the RWTS to work with devices other than the Disk II such as UniDOS, which could work on a 400k 3.5&quot; disk.  The DOS RWTS could cope with a device up to 400k in size with the slightest patches, but it was only ever intended to work with the Disk II as Apple released it.  ProDOS has Disk II code included (since the Disk II is about as dumb an interface as you can get), but it also has stuff to handle a &quot;smart&quot; block device.  As far as ProDOS is concerned, all 3.5&quot; disks and hard drives are smart block devices.&#xD;&#xA;&#xD;&#xA;Hope that's a good start for you.  If you're curious about the non-Apple DOS releases, others who know more about them can probably help you better.  The only alternative DOS I've ever used was UniDOS, and at the time I used it, I didn't know how it was changed from DOS 3.3." />
  <row Id="1417" PostHistoryTypeId="2" PostId="520" RevisionGUID="16547b0b-90ef-4258-9da0-9e3db6e53a16" CreationDate="2016-05-16T15:01:02.777" UserId="393" Text="Apple supplied some, were there others that other people wrote? What is the complete list of FSTs available?" />
  <row Id="1418" PostHistoryTypeId="1" PostId="520" RevisionGUID="16547b0b-90ef-4258-9da0-9e3db6e53a16" CreationDate="2016-05-16T15:01:02.777" UserId="393" Text="What FSTs (File System Translators) exist for the Apple IIGS?" />
  <row Id="1419" PostHistoryTypeId="3" PostId="520" RevisionGUID="16547b0b-90ef-4258-9da0-9e3db6e53a16" CreationDate="2016-05-16T15:01:02.777" UserId="393" Text="&lt;apple-iigs&gt;" />
  <row Id="1420" PostHistoryTypeId="5" PostId="198" RevisionGUID="12b0352f-f0b2-48bf-a390-b5940a462d19" CreationDate="2016-05-16T15:24:50.683" UserId="535" Comment="Copy edited (e.g. ref. &lt;http://en.wikipedia.org/wiki/EPROM&gt;). Added some context." Text="To get a faster operation there are several &quot;extensions&quot; around, which are either connected to the extension slot or replacing the CPU on its socket working like a coprocessor. CMD's [SuperCPU][1], [Flash 8][2], and one project from the [C't][3] computer magazine (a German one). They have all in common using a WDC [65C816][4] CPU, a 16-bit expanded version of a [65C02][5]. With some luck a program or game runs even on such a plain 6502 (without any dirty [6510][6] opcodes) and can handle the faster timing. In hard cases you can switch back to the 6510-only mode.&#xD;&#xA;&#xD;&#xA;The above mentioned problem with [VIC][7] and I/O access is solved differently. However, they have to slow down the clock for access the &quot;lower&quot; address space (VIC accessed RAM). Some optimization with making this window smaller and using a pipeling method or caching is often implemented to minimize slow down phases. The 16-bit CPU with 4 to 20 MHz is running on its own memory with fast access. ROM/EPROM is usually copied into a shadow RAM area simulating a ROM.&#xD;&#xA;&#xD;&#xA;There are some other extensions, based on an [FPGA][8] architecture, replacing the whole C64 on an extension card ([Turbo Chameleon 64][9]) allowing to speed up the stuff into a 10 MHz region. Here you have all illegal opcode, too. The compatibility to existing software is much better.&#xD;&#xA;&#xD;&#xA;  [1]: https://en.wikipedia.org/wiki/SuperCPU&#xD;&#xA;  [2]: https://www.c64-wiki.com/index.php/Ro%C3%9Fm%C3%B6ller_GmbH&#xD;&#xA;  [3]: https://en.wikipedia.org/wiki/C't&#xD;&#xA;  [4]: https://en.wikipedia.org/wiki/WDC_65816/65802&#xD;&#xA;  [5]: https://en.wikipedia.org/wiki/WDC_65C02&#xD;&#xA;  [6]: https://en.wikipedia.org/wiki/MOS_Technology_6510&#xD;&#xA;  [7]: https://en.wikipedia.org/wiki/MOS_Technology_VIC-II&#xD;&#xA;  [8]: http://en.wikipedia.org/wiki/Field-programmable_gate_array&#xD;&#xA;  [9]: https://www.c64-wiki.com/index.php/Turbo_Chameleon_64&#xD;&#xA;" />
  <row Id="1421" PostHistoryTypeId="24" PostId="198" RevisionGUID="12b0352f-f0b2-48bf-a390-b5940a462d19" CreationDate="2016-05-16T15:24:50.683" Comment="Proposed by 535 approved by 79, 56 edit id of 146" />
  <row Id="1422" PostHistoryTypeId="2" PostId="521" RevisionGUID="d309ba86-4e29-43e0-aa51-3413654f14c7" CreationDate="2016-05-16T16:12:23.240" UserId="65" Text="I know that Windows 95 is the first OS with Internet Access, however I wonder what the first computer/console was the first to allow accessing internet.&#xD;&#xA;&#xD;&#xA;What was the first computer/console that was able to access internet?" />
  <row Id="1423" PostHistoryTypeId="1" PostId="521" RevisionGUID="d309ba86-4e29-43e0-aa51-3413654f14c7" CreationDate="2016-05-16T16:12:23.240" UserId="65" Text="What was the first computer/console that was able to access internet?" />
  <row Id="1424" PostHistoryTypeId="3" PostId="521" RevisionGUID="d309ba86-4e29-43e0-aa51-3413654f14c7" CreationDate="2016-05-16T16:12:23.240" UserId="65" Text="&lt;history&gt;" />
  <row Id="1425" PostHistoryTypeId="2" PostId="522" RevisionGUID="9fc445d8-a8ab-4053-a4ff-3b4409a6be9b" CreationDate="2016-05-16T16:57:43.890" UserId="548" Text="Any computer or terminal can &quot;access the internet&quot; because virtually any terminal supports IP, the internet protocol or can be made to do so with software.&#xD;&#xA;&#xD;&#xA;The limitation on accessing the internet was originally having a wireline connection, not the type of computer.&#xD;&#xA;&#xD;&#xA;In the 1980s it was common for advanced students to have dial-up connections to their university which would connect them to a mini-computer or mainframe on campus, which could then access &quot;the internet&quot;.&#xD;&#xA;&#xD;&#xA;The internet was only useful to a relatively small number of researchers exchanging data (and rarely email) until about 1990. Until that time bulletin board systems (or AOL, god save them) were what average people used to communicate, not the internet. Before 1990, the only real advantage of the internet to a normal person was the ability to use [gopher][1] to get software, however, most of this software was for unix computers, which were generally only available at universities anyway. Email accounts were rarely used in those days, except to access mailing lists or usenet, which were typically only available through a university.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://en.wikipedia.org/wiki/Gopher_%28protocol%29" />
  <row Id="1427" PostHistoryTypeId="10" PostId="521" RevisionGUID="9b4dcb7e-cb0d-41e7-a256-b227148e5dcd" CreationDate="2016-05-16T17:29:02.723" UserId="47" Comment="103" Text="{&quot;Voters&quot;:[{&quot;Id&quot;:47,&quot;DisplayName&quot;:&quot;Robert Cartaino&quot;}]}" />
  <row Id="1428" PostHistoryTypeId="2" PostId="523" RevisionGUID="2f14767a-f04e-4f12-b727-855929156e82" CreationDate="2016-05-16T17:45:12.470" UserId="382" Text="You could consider the Coleco ADAM as one of the machines that did such tricks.&#xD;&#xA;&#xD;&#xA;Though it has been 25+ years since I owned one of these machines, I do remember a few things about them. For starters, it used custom cassettes rather than normal consumer bought audio tapes despite being the same form factor; I do seem to recall that there was an extra hole in the cassette to prevent you from using consumer audio tapes, though you could defeat that with some power tools. I believe it was more than just being a CrO2 or Metal cassette in that they were more durable given the high speeds the drive would push: 20 ips (inches per second) for read/write, 80 ips for cue/rewind.&#xD;&#xA;&#xD;&#xA;I believe the ADAM tapes were single-sided only, though I don't recall if the tape head was 2 or 4 tracks (I'll assume the latter because of the ease of getting parts). What was interesting about these tapes is that not only were they fast, but they had full seeking capabilities. In other words, just like how a floppy disk head will jump and sweep from track to track, the cassette would speed up to 80 ips to seek the tape and then drop down to 20 ips for read/write. Yes, the seek would go in either direction, though I think read/write ONLY went forwards. Assuming the 4-track configuration, I'd guess that one track was always position and the other three probably weren't that much different than typical disk sector data patterns.&#xD;&#xA;&#xD;&#xA;I don't remember much else about the drives, but they weren't as fast as an IBM / Apple II disk but certainly faster than normal cassettes." />
  <row Id="1429" PostHistoryTypeId="2" PostId="524" RevisionGUID="deef00a2-f776-4dc2-bb46-6e475fc06a1d" CreationDate="2016-05-16T18:40:09.097" UserId="4" Text="These were probably the [Setun][1] computers, built in the Soviet Union between 1959 and 1965.  It used [balanced ternary][2] (with the digits 1, 0, and -1) for computations, and a [three-valued logic][3] (I haven't been able to find which one) for operations.  Electrically, it almost certainly used &quot;ground&quot;, &quot;positive voltage&quot;, and &quot;negative voltage&quot; as its signaling levels.&#xD;&#xA;&#xD;&#xA;  [1]: https://en.wikipedia.org/wiki/Setun&#xD;&#xA;  [2]: https://en.wikipedia.org/wiki/Balanced_ternary&#xD;&#xA;  [3]: https://en.wikipedia.org/wiki/Three-valued_logic" />
  <row Id="1430" PostHistoryTypeId="2" PostId="525" RevisionGUID="5c8a08ea-96d5-4ae3-b8de-7e0d6d15b874" CreationDate="2016-05-16T20:25:06.077" UserId="550" Text="Digital Group offered a 5x-speed (as I recall) tape drive called Phi-Deck. This was around 1978. It was a poor man's floppy disk, because it supported a file system, and a primitive operating system, PhiMon.&#xD;&#xA;&#xD;&#xA;Some details are here: http://bytecollector.com/dg_phideck.htm" />
  <row Id="1431" PostHistoryTypeId="5" PostId="503" RevisionGUID="61c7c76b-4eff-4e7b-8eec-23783535458b" CreationDate="2016-05-16T20:36:07.390" UserId="31" Comment="Fixed typo of 60 secs/ms to 60 secs/min" Text="The Apple 2's disk drive controller and 5¼&quot; floppy disks have the following metrics:&#xD;&#xA;&#xD;&#xA;* The disks is spun at (roughly) 300 RPM (Revolutions per Minute), which means it takes = 1000 ms/sec / (300 RPM / 60 sec/min) = ~200 ms / revolution,&#xD;&#xA;* Beneath Apple DOS, Figure 3.3 states it takes 4 μs (microseconds) to read 2 consecutive bits off the disk. This [metafilter discussion](http://www.metafilter.com/114962/jmp-TRIGSPIKES#4301468) also mentions this.&#xD;&#xA;* Beneath Apple DOS, Figure 3.1, shows track zero is the outermost, but sadly doesn't give any dimensions. Loose empirical measurements show:&#xD;&#xA; * Track  0 (roughly) has a radius of 5&quot;/2 = ~ 2.5&quot;&#xD;&#xA; * Track 39 (roughly) has a radius of 1.5&quot;/2 = ~ 0.75&quot; (Center hole diameter measured at ~1½&quot;)&#xD;&#xA;&#xD;&#xA;I've seen 6,250 nibbles given as the (theoretical) maximum number of nibbles on a track (encoded with 6+2) but never an explanation of where this number comes from. (Beneath Apple DOS on page 3-7 briefly mentions 50,000 bits but doesn't provide any details oh this number was calculated.) It is straight forward to see that a track has = 200 ms/revolution * 1000 μs/ms / 4 μs/bit = 50,000 bits / (8 bits/byte) = 6,250 nibbles/track.&#xD;&#xA;&#xD;&#xA;**However**, since the _radius_ (and therefore the circumference) of the outermost and innermost track differ, shouldn't track 0 be able to hold more bits then track 39?  The circumference (C = 2 * π * r) for tracks:&#xD;&#xA;&#xD;&#xA;* Track 0 = 2*π*2.625 = ~15.7&quot;&#xD;&#xA;* Track 39 = 2*π*0.75 = ~4.7&quot; &#xD;&#xA;&#xD;&#xA;shows track 0 has a _whole_ lot more &quot;space&quot; then track 39.&#xD;&#xA;&#xD;&#xA;This naturally raises a few questions. Namely,&#xD;&#xA;&#xD;&#xA;* Does the Apple 2 disk utilize CLV (_Constant Linear Velocity_) or CAV (_Constant Angular Velocity_)? &#xD;&#xA;&#xD;&#xA;* Assuming the same 4  μs/bit but the _other_ speed type then what **would be** the maximum number of nibbles stored on an Apple II disk for:&#xD;&#xA;&#xD;&#xA; * Track 0, and&#xD;&#xA; * Track 39&#xD;&#xA;&#xD;&#xA;respectively?&#xD;&#xA;&#xD;&#xA;" />
  <row Id="1432" PostHistoryTypeId="2" PostId="526" RevisionGUID="813dd607-d0dd-4028-be00-7c45b8adf156" CreationDate="2016-05-16T20:53:07.647" UserId="553" Text="Because early hobbyists were a bit more technical about their computers, and did not just want to run applications on them.  Most were tinkerers.  Basic on those machines literally was the operating system.  The user interfaced by issuing immediate-mode Basic statements.  &#xD;&#xA;&#xD;&#xA;Plus, back then you could get books of programs to type in. Even sophisticated programs could be &quot;poked&quot; into memory from the Basic interpreter, and then executed by using a Basic SYS command referencing the starting address." />
  <row Id="1433" PostHistoryTypeId="2" PostId="527" RevisionGUID="149233ec-b2f6-458a-9794-822aa1526092" CreationDate="2016-05-16T21:26:54.783" UserId="553" Text="Use a value derived from a CMOS clock for your seed, since those are never the same twice. &#xD;&#xA;&#xD;&#xA;On an older computer with no CMOS clock, there will still be a clock that starts from zero every time the computer is started. You can use this clock as well, as long as the program start time relies on human action which will introduce a random delay.  Manually starting the program should introduce enough error for a reliably unique seed. If you autostart the program with a zeroed-out clock on reboot, and without requiring any human input, then you are very likely to get repeating values for your seed." />
  <row Id="1434" PostHistoryTypeId="5" PostId="519" RevisionGUID="f716a3f8-3a5d-48e2-b4d1-2a15b25d74ce" CreationDate="2016-05-17T06:24:33.230" UserId="539" Comment="Added reference to DOS 3.2.1 and version slipstream releases" Text="There was no public release of DOS 1 or 2.  DOS 3.1 was actually the first release to the public.  It had a pretty significant bug in its MASTER CREATE program, and so the patched version DOS 3.2 was released.  DOS 3.1 dates back to about June 1978.&#xD;&#xA;&#xD;&#xA;[@fadden](http://retrocomputing.stackexchange.com/users/56/fadden) references the [Wikipedia page for Apple DOS](https://en.wikipedia.org/wiki/Apple_DOS) which notes the existence of 3.2.1 which I had neglected to mention as a bugfix for 3.2.&#xD;&#xA;&#xD;&#xA;The system master disk for DOS was able to operate on any machine regardless of how much memory it had.  Simply running `INIT HELLO` (or whatever) generated a disk that put RWTS (the DOS code itself) in exactly the position of memory it was now.  A master disk would put it as high as it could on a 16, 32, or 48k machine.  So a bug in the code that made new disks that could do that was a problem.&#xD;&#xA;&#xD;&#xA;Anyway, DOS 3.1 and 3.2 used a 13 sector disk.  But it wasn't too much longer before Woz realized that 16 sectors was possible with a minor hardware change to the Disk II controller card.  DOS 3.3 came along with the necessary bits to fix that, and the DOS 3.3 System Master disk came with tools for moving files from 13 sector to 16 sector, and for booting the old disks from the System Master disk.&#xD;&#xA;&#xD;&#xA;ProDOS came along later and worked completely differently.  It more or less came onto the scene around the time of the Apple //e.  It clearly was developed for and on the Apple ][+, but Apple did not release it until the Apple /// was pretty much completely obviously dead.  Then suddenly here comes the //e and this new ProDOS thing.  And Apple withdrew permission at that point for A2UGs to distribute DOS 3.3 and older anymore, intending to kill off the old stuff.&#xD;&#xA;&#xD;&#xA;It never really did die off.  ;)&#xD;&#xA;&#xD;&#xA;There were other DOS releases made by Apple not explicitly referenced here.  Wikipedia's Apple DOS page (linked above) notes that bugfix versions were released for all versions of DOS, without changing the version number.  I do not doubt they did this because I have seen multiple builds of the same ProDOS version--though in the case of ProDOS, two versions may differ by as little as the build date on the splash screen.&#xD;&#xA;&#xD;&#xA;There were also ProntoDOS, RDOS, and a whole bunch of mods to Apple's DOS, fundamentally all patches to the DOS RWTS to change the order things were written when the disk was INIT'd.  You'll discover more about that if you dig into &quot;DOS order&quot; and &quot;ProDOS order&quot;.&#xD;&#xA;&#xD;&#xA;There were also patched versions of the RWTS to work with devices other than the Disk II such as UniDOS, which could work on a 400k 3.5&quot; disk.  The DOS RWTS could cope with a device up to 400k in size with the slightest patches, but it was only ever intended to work with the Disk II as Apple released it.  ProDOS has Disk II code included (since the Disk II is about as dumb an interface as you can get), but it also has stuff to handle a &quot;smart&quot; block device.  As far as ProDOS is concerned, all 3.5&quot; disks and hard drives are smart block devices.&#xD;&#xA;&#xD;&#xA;Hope that's a good start for you.  If you're curious about the non-Apple DOS releases, others who know more about them can probably help you better.  The only alternative DOS I've ever used was UniDOS, and at the time I used it, I didn't know how it was changed from DOS 3.3." />
  <row Id="1435" PostHistoryTypeId="2" PostId="528" RevisionGUID="03897985-604a-4554-9263-ab4d8b3bdc9d" CreationDate="2016-05-17T06:41:35.537" UserId="71" Text="The official ones, with GS/OS versions as indicated by the [Apple II History site][1]:&#xD;&#xA;&#xD;&#xA;    Filename        Purpose                                 In GS/OS Version&#xD;&#xA;    APPLESHARE.FST  For AppleTalk networks                  5.0&#xD;&#xA;    CHAR.FST        Keyboard, screen, printers, and modems  4.0&#xD;&#xA;    DOS3.3.FST      Apple II DOS 3.3 Disks (Read only)      6.0&#xD;&#xA;    HFS.FST         Mac OS HFS Disks (Read/Write)           6.0&#xD;&#xA;    HS.FST          High Sierra CD-ROMs                     4.0&#xD;&#xA;    MSDOS.FST       MS-DOS Disks (Read only)                6.0.1&#xD;&#xA;    PASCAL.FST      Apple II Pascal Disks (Read only)       6.0&#xD;&#xA;    PRO.FST         Apple II ProDOS Disks (Read/Write)      4.0&#xD;&#xA;&#xD;&#xA;Apple didn't release documentation on writing FSTs, perhaps because they often involved changes to GS/OS internals. This is discussed at the Apple II History link above.&#xD;&#xA;&#xD;&#xA;However, the following unofficial ones were developed by [Brutal Deluxe][2]:&#xD;&#xA;&#xD;&#xA;    DOS3.2.FST      Apple II DOS 3.2 Disks&#xD;&#xA;    DOS3.3.FST      Apple II DOS 3.3 Disks (Improved)&#xD;&#xA;    RDOS3.3.FST     Apple II RDOS Disks (SSI games)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://apple2history.org/history/ah15/&#xD;&#xA;  [2]: http://www.brutaldeluxe.fr/products/apple2gs/fsts.html" />
  <row Id="1436" PostHistoryTypeId="5" PostId="526" RevisionGUID="36397105-132c-46d7-ba6b-4fc1988ace8e" CreationDate="2016-05-17T08:02:47.717" UserId="278" Comment="Changed Basic to BASIC, improved formatting." Text="Because early hobbyists were a bit more technical about their computers, and did not just want to run applications on them.  Most were tinkerers.  BASIC on those machines literally was the operating system.  The user interfaced by issuing immediate-mode BASIC statements.  &#xD;&#xA;&#xD;&#xA;Plus, back then you could get books of programs to type in. Even sophisticated programs could be &quot;poked&quot; into memory from the BASIC interpreter, and then executed by using a BASIC `SYS` command referencing the starting address." />
  <row Id="1437" PostHistoryTypeId="24" PostId="526" RevisionGUID="36397105-132c-46d7-ba6b-4fc1988ace8e" CreationDate="2016-05-17T08:02:47.717" Comment="Proposed by 278 approved by 56, 79 edit id of 147" />
  <row Id="1441" PostHistoryTypeId="2" PostId="530" RevisionGUID="b1354eb9-bdbb-468d-a94e-c73f53c5800b" CreationDate="2016-05-17T14:42:41.463" UserId="-1" Text="" />
  <row Id="1442" PostHistoryTypeId="2" PostId="531" RevisionGUID="c0780311-3b19-459b-ace4-fd986347b789" CreationDate="2016-05-17T14:42:41.463" UserId="-1" Text="" />
  <row Id="1443" PostHistoryTypeId="2" PostId="532" RevisionGUID="e576f48d-14cf-469a-b77a-3b94c9737ef6" CreationDate="2016-05-17T15:10:45.650" UserId="563" Text="I'm studying [the 65c816 assembly](https://en.wikibooks.org/wiki/Super_NES_Programming/65c816_reference) for the 1994 game, Super Metroid.&#xD;&#xA;&#xD;&#xA;A hobbyist studied the game in-depth and created [a RAM map](http://drewseph.zophar.net/Kejardon/RAMMap.txt). From it:&#xD;&#xA;&#xD;&#xA;    7E:0B56 - 7E:0B57    Moves Samus this distance horizontally, in subpixels.&#xD;&#xA;    7E:0B58 - 7E:0B59    Moves Samus this distance horizontally, in pixels.&#xD;&#xA;    7E:0B5A - 7E:0B5B    Moves Samus this distance vertically, in subpixels.&#xD;&#xA;    7E:0B5C - 7E:0B5D    Moves Samus this distance vertically, in pixels.&#xD;&#xA;&#xD;&#xA;I'm new to assembly, but as I understand it, the game stores Samus's movement in RAM, to be picked up later by some code that performs the actual moving (the &quot;function&quot;). But why do things this way? Why not simply push the above &quot;parameters&quot; onto the stack and pop them from within the &quot;function&quot;? Is storing the parameters in static addresses somehow more efficient? Is it to save space on the stack? Is it for better code organization?" />
  <row Id="1444" PostHistoryTypeId="1" PostId="532" RevisionGUID="e576f48d-14cf-469a-b77a-3b94c9737ef6" CreationDate="2016-05-17T15:10:45.650" UserId="563" Text="Why use static RAM addresses instead of the stack?" />
  <row Id="1445" PostHistoryTypeId="3" PostId="532" RevisionGUID="e576f48d-14cf-469a-b77a-3b94c9737ef6" CreationDate="2016-05-17T15:10:45.650" UserId="563" Text="&lt;game-cartridge&gt;&lt;assembly&gt;&lt;snes&gt;" />
  <row Id="1447" PostHistoryTypeId="2" PostId="533" RevisionGUID="6b80004b-0ef4-4241-9928-c79021a1b8e0" CreationDate="2016-05-17T15:34:00.737" UserId="382" Text="There were also two other formats common on the Apple ][: Pascal and CP/M. Though the latter required a special Z80 CP/M card (such as the [Microsoft Softcard][1]), &#xD;&#xA;the former was proprietary to the [UCSD Pascal system][2] that was released in the late 1970s.&#xD;&#xA;&#xD;&#xA;I believe the idea was that since UCSD Pascal was a cross-platform p-Code environment, the format would be usable on other microcomputers at the time. However, I can't claim from personal experience ever seeing that in practice. As well, the only commercial software I recall using that was in the p-Code environment was Hayes Smartcom for the Micromodem ][.&#xD;&#xA;&#xD;&#xA;As a side note, the Sider hard drive system for the Apple II series did support these two disk formats for partitions along with the standard DOS 3.3 and ProDOS volumes.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://en.wikipedia.org/wiki/Z-80_SoftCard&#xD;&#xA;  [2]: https://en.wikipedia.org/wiki/UCSD_Pascal" />
  <row Id="1448" PostHistoryTypeId="2" PostId="534" RevisionGUID="219c248e-5344-4730-8ad9-779a2a9abb5d" CreationDate="2016-05-17T15:49:44.217" UserId="333" Text="Off the top of my head I can think of two reasons, there are probably more.&#xD;&#xA;&#xD;&#xA;The first reason is that these variables may be set by a routine each frame, and then a lot of code uses them during the time of the whole frame. Every interrupt routine that fires during that frame may want to read out the current direction.&#xD;&#xA;&#xD;&#xA;The second reason is that, in a real-time embedded environment like a console game, it's important to know that you have enough resources to handle the worst-case conditions. One resource is _time_; you want to make sure that everything you want to perform can be handled in one frame update. Another resource, and relevant in this case, is _memory_. Whatever happens, you can't run out of memory. There's no swap space, you can't pop up a requester, or kill of something else. Add to this the fact that embedded platforms like this do not have any form of memory protection, so if you write too much on the stack - _game over, man_.&#xD;&#xA;&#xD;&#xA;The combination of these two makes it reasonable to reserve RAM for variables like this.&#xD;&#xA;" />
  <row Id="1449" PostHistoryTypeId="5" PostId="534" RevisionGUID="3e39db81-fb90-4b6d-96b9-6a0b0fb48d96" CreationDate="2016-05-17T15:55:54.640" UserId="333" Comment="Just added some footnotes." Text="Off the top of my head I can think of two reasons, there are probably more.&#xD;&#xA;&#xD;&#xA;The first reason is that these variables may be set by a routine each frame, and then a lot of code uses them during the time of the whole frame. Every interrupt routine that fires during that frame may want to read out the current direction.&#xD;&#xA;&#xD;&#xA;The second reason is that, in a real-time embedded environment&lt;sup&gt;1&lt;/sup&gt; like a console game, it's important to know that you have enough resources to handle the worst-case conditions. One resource is _time_; you want to make sure that everything you want to perform can be handled in one frame update. Another resource, and relevant in this case, is _memory_. Whatever happens, you can't run out of memory&lt;sup&gt;2&lt;/sup&gt;. There's no swap space, you can't pop up a requester, or kill of something else. Add to this the fact that embedded platforms like this do not have any form of memory protection, so if you write too much on the stack - _game over, man_.&#xD;&#xA;&#xD;&#xA;The combination of these two makes it reasonable to reserve RAM for variables like this.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;----------&#xD;&#xA;&lt;sup&gt;1. These platforms still exist today, think control systems for robots, your fridge, basically every &quot;hidden&quot; microcontroller.&lt;/sup&gt;&#xD;&#xA;&#xD;&#xA;&lt;sup&gt;2. I've recently worked with an operating system designed for high reliability. It had every type of dynamic allocations removed. No malloc() for you.&lt;/sup&gt;" />
  <row Id="1450" PostHistoryTypeId="2" PostId="535" RevisionGUID="007122e0-eb2e-44ed-b8a5-c7cdf661408c" CreationDate="2016-05-17T17:27:02.997" UserId="181" Text="As mentioned previously the timing issue is the cause not to waste time in pushing up parameters, access them with cost-intensive addressing modes and pull them finally from stack. Too much action if this occurs in a tight, time-critical frame building routine. In a games of a certain size usually all could be handled with global variables. Some state of the game has to be held into globals anyway. It's a just a waste of time to copy the global state into local parameters all the time. There is no advantage or gain to use high-level language structures like parameter passing to functions or subroutines. Local variable protection, opaque variables, a common calling interface convention and so on are simply not necessary in a closed world of a game. &#xD;&#xA;An important exception is the calling interface to a surrounding operating system, to attach a game to the system environment and using its resources or gain access to libraries with offers graphical or sound support and so on (3D engines, sound players, ...).&#xD;&#xA;&#xD;&#xA;Larger developments or projects tend to use a high-level language which implies the usage of such techniques. On assembler level you have only to bother with the high-level calling interface if you want to embed such routines for (mostly) time-critical reasons. It can simply seen as a connection of some assembly with the rest of the project in high-level." />
  <row Id="1451" PostHistoryTypeId="5" PostId="198" RevisionGUID="86556ca5-20cb-4160-8edf-af47691b6532" CreationDate="2016-05-17T18:04:34.243" UserId="181" Comment="Reference to c't project; typo." Text="To get a faster operation there are several &quot;extensions&quot; around, which are either connected to the extension slot or replacing the CPU on its socket working like a coprocessor. CMD's [SuperCPU][1], [Flash 8][2], and one project from the [c't][3] computer magazine (a German one) reborn as follow-on project [LTC64][10]. They have all in common using a WDC [65C816][4] CPU, a 16-bit expanded version of a [65C02][5]. With some luck a program or game runs even on such a plain 6502 (without any dirty [6510][6] opcodes) and can handle the faster timing. In hard cases you can switch back to the 6510-only mode.&#xD;&#xA;&#xD;&#xA;The above mentioned problem with [VIC][7] and I/O access is solved differently. However, they have to slow down the clock for access the &quot;lower&quot; address space (VIC accessed RAM). Some optimization with making this window smaller and using a pipelining method or caching is often implemented to minimize slow down phases. The 16-bit CPU with 4 to 20 MHz is running on its own memory with fast access. ROM/EPROM is usually copied into a shadow RAM area simulating a ROM.&#xD;&#xA;&#xD;&#xA;There are some other extensions, based on an [FPGA][8] architecture, replacing the whole C64 on an extension card ([Turbo Chameleon 64][9]) allowing to speed up the stuff into a 10 MHz region. Here you have all illegal opcode, too. The compatibility to existing software is much better.&#xD;&#xA;&#xD;&#xA;  [1]: https://en.wikipedia.org/wiki/SuperCPU&#xD;&#xA;  [2]: https://www.c64-wiki.com/index.php/Ro%C3%9Fm%C3%B6ller_GmbH&#xD;&#xA;  [3]: https://en.wikipedia.org/wiki/C't&#xD;&#xA;  [4]: https://en.wikipedia.org/wiki/WDC_65816/65802&#xD;&#xA;  [5]: https://en.wikipedia.org/wiki/WDC_65C02&#xD;&#xA;  [6]: https://en.wikipedia.org/wiki/MOS_Technology_6510&#xD;&#xA;  [7]: https://en.wikipedia.org/wiki/MOS_Technology_VIC-II&#xD;&#xA;  [8]: http://en.wikipedia.org/wiki/Field-programmable_gate_array&#xD;&#xA;  [9]: https://www.c64-wiki.com/index.php/Turbo_Chameleon_64&#xD;&#xA; [10]: http://klasek.at/c64/ltc64/" />
  <row Id="1452" PostHistoryTypeId="4" PostId="517" RevisionGUID="bd900958-acb0-4cf1-8fa6-30fb5b7aacc8" CreationDate="2016-05-17T18:18:00.880" UserId="74" Comment="edited title" Text="What soviet computer used trinary bits?" />
  <row Id="1453" PostHistoryTypeId="2" PostId="536" RevisionGUID="e3c209b7-3510-42c5-9271-746a0417e869" CreationDate="2016-05-17T20:34:47.223" UserId="332" Text="Another example in the tightly constrained world of games - especially those with a real-time loop (e.g., for updating the display on a fixed schedule): there was no space for a &quot;task queue&quot; and/or no time for a &quot;rendezvous&quot; mechanism that would enable data to be passed from one thread to another in one of the &quot;structured&quot; methods that would be more common today.  Instead, the programmer passed data via global variables and was responsible for analyzing (and preventing or mitigating) data races and other concurrency hazards.  These solutions are fast and cheap at runtime, slow and expensive at coding time ...&#xD;&#xA;&#xD;&#xA;BTW, when looking at older code for very resource-constrained systems you'll frequently find coding techniques that are generally shunned today - for good reason!  The most egregious would be self-modifying code which was much more common on earlier and/or smaller architectures with less choice of addressing modes, fewer registers, etc.  Look at those mechanisms and marvel how we were able to do so much with so little ... and in such a way that it nearly always worked!" />
  <row Id="1454" PostHistoryTypeId="2" PostId="537" RevisionGUID="4dfd6fed-1268-469d-b2d4-b89b4ac081f7" CreationDate="2016-05-17T20:48:33.000" UserId="80" Text="The 8 bit 6502 family doesn't have any stack-relative addressing modes that would make it easy to use the stack for variable storage. One *can* access values on the stack with a sequence such as `TSX; LDA &amp;102, X`, but that's slower, clobbers X, and uses more memory (both in code size and stack usage) than a global variable.&#xD;&#xA;&#xD;&#xA;The 65C816 adds stack-relative instructions such as `LDA 2, S`, so it is now plausible to use local variables on the stack. But global variables were idiomatic on the 6502 and old habits die hard…" />
  <row Id="1455" PostHistoryTypeId="2" PostId="538" RevisionGUID="34454334-75dd-4434-8e57-1e402e5ce2c4" CreationDate="2016-05-17T21:34:04.647" UserId="72" Text="It's also worth pointing out that the intricacies of maintaining variables on the stack can result in slower code. And of course there are limits to how big the stack can be; even with the more expansive stack on the 65816, you're still limited to a fraction of bank $00 (so 64K minus the direct page(s) minus any other stacks you have around minus any I/O space or ROM or the like you have. So preserving bank zero space for use by other code that actually *has* to use it is pretty critical.&#xD;&#xA;&#xD;&#xA;As has been pointed out, the '816 does have stack relative addressing. But it's a little awkward and is very easy to screw up. If you make any changes to the configuration of the stack, you can mess up all kinds of stuff with things getting misaligned. Especially if you pass parameters on the stack.&#xD;&#xA;&#xD;&#xA;So it's just so much easier to not use the stack that way unless you're either (a) really sure of what you're doing or (b) really sure it will make a huge difference." />
  <row Id="1457" PostHistoryTypeId="5" PostId="511" RevisionGUID="32c57b17-318f-46aa-aef5-e574857e2ba3" CreationDate="2016-05-17T22:42:16.237" UserId="462" Comment="added 74 characters in body" Text="For questions about Symbolics, Inc. and its hardware or software products." />
  <row Id="1458" PostHistoryTypeId="24" PostId="511" RevisionGUID="32c57b17-318f-46aa-aef5-e574857e2ba3" CreationDate="2016-05-17T22:42:16.237" Comment="Proposed by 462 approved by 47 edit id of 142" />
  <row Id="1459" PostHistoryTypeId="5" PostId="530" RevisionGUID="30883cba-3e7b-4a2d-8c50-9e3b1312e190" CreationDate="2016-05-17T22:42:20.923" UserId="574" Comment="added 620 characters in body" Text="The Amstrad CPC (short for Colour Personal Computer) is a series of 8-bit home computers produced by Amstrad between 1984 and 1990. It was designed to compete in the mid-1980s home computer market dominated by the Commodore 64 and the Sinclair ZX Spectrum, where it successfully established itself primarily in the United Kingdom, France, Spain, and the German-speaking parts of Europe.&#xD;&#xA;&#xD;&#xA;For more information:&#xD;&#xA;&#xD;&#xA;* [Amstrad CPC on Wikipedia](https://en.wikipedia.org/wiki/Amstrad_CPC) -- the text above is extracted from that page&#xD;&#xA;* [CPCWiki - THE Amstrad CPC encyclopedia!](http://www.cpcwiki.eu/index.php/Main_Page)" />
  <row Id="1460" PostHistoryTypeId="24" PostId="530" RevisionGUID="30883cba-3e7b-4a2d-8c50-9e3b1312e190" CreationDate="2016-05-17T22:42:20.923" Comment="Proposed by 574 approved by 47 edit id of 148" />
  <row Id="1461" PostHistoryTypeId="5" PostId="441" RevisionGUID="f2677cfc-5b1b-4027-b81b-0a7837cb60f0" CreationDate="2016-05-17T22:43:16.903" UserId="12" Comment="Reworded to make it clear what is being asked, and fixed up typos." Text="I've seen simulators for the 8085 (i.e., [sim8085](http://www.homesoft.gen.tr/sim8085)) but not the Zilog Z80.&#xD;&#xA;&#xD;&#xA;Is there a similar sort of editor/assembler/compiler/debugger simulator for the Z80?" />
  <row Id="1462" PostHistoryTypeId="4" PostId="441" RevisionGUID="f2677cfc-5b1b-4027-b81b-0a7837cb60f0" CreationDate="2016-05-17T22:43:16.903" UserId="12" Comment="Reworded to make it clear what is being asked, and fixed up typos." Text="Looking for a Z80 simulator/emulator for Linux" />
  <row Id="1463" PostHistoryTypeId="6" PostId="441" RevisionGUID="f2677cfc-5b1b-4027-b81b-0a7837cb60f0" CreationDate="2016-05-17T22:43:16.903" UserId="12" Comment="Reworded to make it clear what is being asked, and fixed up typos." Text="&lt;z80&gt;&lt;simulator&gt;" />
  <row Id="1464" PostHistoryTypeId="24" PostId="441" RevisionGUID="f2677cfc-5b1b-4027-b81b-0a7837cb60f0" CreationDate="2016-05-17T22:43:16.903" Comment="Proposed by 12 approved by 79, 47 edit id of 131" />
  <row Id="1465" PostHistoryTypeId="5" PostId="531" RevisionGUID="41cc7d57-c9bb-462d-943e-fabb4ff463b5" CreationDate="2016-05-17T22:43:23.340" UserId="574" Comment="added 129 characters in body" Text="The Amstrad CPC is a series of 8-bit home computers from the 80s. Use this tag for questions related to this series of computers." />
  <row Id="1466" PostHistoryTypeId="24" PostId="531" RevisionGUID="41cc7d57-c9bb-462d-943e-fabb4ff463b5" CreationDate="2016-05-17T22:43:23.340" Comment="Proposed by 574 approved by 47 edit id of 149" />
  <row Id="1468" PostHistoryTypeId="5" PostId="508" RevisionGUID="efef1b47-7f41-48a2-a881-ce1775e3bb80" CreationDate="2016-05-18T00:36:31.120" UserId="520" Comment="added 12 characters in body" Text="Apple ][ used an ordinary disk transport and fixed bit-rate in the controller. in order to fit more bits on the outer track it would need to vary the spin rate of the disk so that the controller had time to put the extra bits on.&#xD;&#xA;&#xD;&#xA;CD drives use variable spin rate, but floppy disks (mostly) use a fixed spin rate (like grammophone records.&#xD;&#xA;&#xD;&#xA;Early Apple Macintoshes used a custom disk transport with variable spin rate, so it could fit more data on the outer tracks of the disk, getting 800K on a &quot;720K&quot; (3.5&quot; DSDD) floppy. &#xD;&#xA;" />
  <row Id="1469" PostHistoryTypeId="2" PostId="539" RevisionGUID="7696f508-426f-47ba-9978-b05eaa96fc8b" CreationDate="2016-05-18T11:54:40.447" UserId="26" Text="Code written in high-level languages do a lot of stack-relative operations, because compilers are good at keeping track of which stack offset refers to which variable in the current context.&#xD;&#xA;&#xD;&#xA;In hand-written assembly code it was often more common to store things as 'globals' in well-known memory locations, just because it's easier for humans to think about memory layout in that way. If recursion or concurrent instances are not needed in a particular function, then global storage is a possible solution. &#xD;&#xA;&#xD;&#xA;I worked on Z80 and 8086 assembly code software systems back in the day, and even though both of these processors have index registers that would allow stack-relative storage of variables, it was common practice to store variables as globals.&#xD;&#xA;" />
  <row Id="1470" PostHistoryTypeId="2" PostId="540" RevisionGUID="508a1f8b-f362-46b4-bbdb-6db495f8e632" CreationDate="2016-05-18T13:31:16.770" UserId="393" Text="I thought it was 4 Megabytes but I can see there are 8 Megabyte expansion cards. Is that the maximum? " />
  <row Id="1471" PostHistoryTypeId="1" PostId="540" RevisionGUID="508a1f8b-f362-46b4-bbdb-6db495f8e632" CreationDate="2016-05-18T13:31:16.770" UserId="393" Text="What is the maximum amount of memory that can be added to an Apple IIGS?" />
  <row Id="1472" PostHistoryTypeId="3" PostId="540" RevisionGUID="508a1f8b-f362-46b4-bbdb-6db495f8e632" CreationDate="2016-05-18T13:31:16.770" UserId="393" Text="&lt;apple-iigs&gt;" />
  <row Id="1473" PostHistoryTypeId="2" PostId="541" RevisionGUID="b1fd0f60-c129-4776-891d-46ff0d9848cf" CreationDate="2016-05-18T13:35:51.540" UserId="393" Text="Apple II and Commodore 64 being the obvious ones..." />
  <row Id="1474" PostHistoryTypeId="1" PostId="541" RevisionGUID="b1fd0f60-c129-4776-891d-46ff0d9848cf" CreationDate="2016-05-18T13:35:51.540" UserId="393" Text="What is the list of computers/consoles that used the 6502 and 65816?" />
  <row Id="1475" PostHistoryTypeId="3" PostId="541" RevisionGUID="b1fd0f60-c129-4776-891d-46ff0d9848cf" CreationDate="2016-05-18T13:35:51.540" UserId="393" Text="&lt;cpu&gt;&lt;chip&gt;" />
  <row Id="1476" PostHistoryTypeId="5" PostId="540" RevisionGUID="c86f3820-0d9a-4dc3-8541-41ce9dde44f0" CreationDate="2016-05-18T13:37:11.283" UserId="393" Comment="further clarification" Text="I thought it was 4 Megabytes but I can see there are 8 Megabyte expansion cards. Is that the maximum? And is that an addressing/bank limit or a limit of the slot?" />
  <row Id="1477" PostHistoryTypeId="2" PostId="542" RevisionGUID="87d8fc1c-a559-4aad-a2df-b05dbc302a18" CreationDate="2016-05-18T14:25:28.317" UserId="105" Text="There is a Wikipedia category that aims to list them, at least, the home computers part.&#xD;&#xA;https://en.wikipedia.org/wiki/Category:6502-based_home_computers&#xD;&#xA;&#xD;&#xA;The current list of home computers is as follow:&#xD;&#xA;&#xD;&#xA;A&#xD;&#xA;&#xD;&#xA;    Acorn Atom&#xD;&#xA;    Acorn Electron&#xD;&#xA;    Acorn Eurocard systems&#xD;&#xA;    Acorn System 1&#xD;&#xA;    Acorn System 2&#xD;&#xA;    Acorn System 3&#xD;&#xA;    Acorn System 4&#xD;&#xA;    Acorn System 5&#xD;&#xA;    Atari 8-bit family&#xD;&#xA;&#xD;&#xA;B&#xD;&#xA;&#xD;&#xA;    BBC Master&#xD;&#xA;    BBC Micro&#xD;&#xA;&#xD;&#xA;C&#xD;&#xA;&#xD;&#xA;    C-One&#xD;&#xA;    Commodore 128&#xD;&#xA;    Commodore 64&#xD;&#xA;    Commodore LCD&#xD;&#xA;    Commodore MAX Machine&#xD;&#xA;    Commodore PET&#xD;&#xA;    Commodore VIC-20&#xD;&#xA;    Compukit UK101&#xD;&#xA;&#xD;&#xA;L&#xD;&#xA;&#xD;&#xA;    Laser 128&#xD;&#xA;&#xD;&#xA;O&#xD;&#xA;&#xD;&#xA;    Ohio Scientific&#xD;&#xA;    Oric&#xD;&#xA;&#xD;&#xA;S&#xD;&#xA;&#xD;&#xA;    Superboard&#xD;&#xA;&#xD;&#xA;T&#xD;&#xA;&#xD;&#xA;    Tangerine Microtan 65&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;----------&#xD;&#xA;&#xD;&#xA;There is a list that seems to be more exhaustive, at:&#xD;&#xA;http://www.dwheeler.com/6502/oneelkruns/65machines.html&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    Apple I&#xD;&#xA;    Apple II&#xD;&#xA;    Apple II+&#xD;&#xA;    Apple III&#xD;&#xA;    Apple IIe&#xD;&#xA;    Apple IIc&#xD;&#xA;    Apple IIc+&#xD;&#xA;    Commodore PET&#xD;&#xA;    Commodore VIC-20&#xD;&#xA;    Commodore 64&#xD;&#xA;    Commodore 128&#xD;&#xA;    Commodore Plus/4&#xD;&#xA;    Atari 400&#xD;&#xA;    Atari 800&#xD;&#xA;    Atari 800XL&#xD;&#xA;    Atari 1200XL&#xD;&#xA;    Atari 600XL&#xD;&#xA;    Atari 65XE&#xD;&#xA;    Atari 130XE&#xD;&#xA;    Atari XE-GS&#xD;&#xA;    Atari 5200 (game system)&#xD;&#xA;    Atari 7800 (game system)&#xD;&#xA;    Atari 2600 (game system)&#xD;&#xA;    Atari Lynx 1 and 2 (game systems)&#xD;&#xA;    Laser 128&#xD;&#xA;    MOS Technologies KIM-1&#xD;&#xA;    SYM-1 (similar to KIM-1)&#xD;&#xA;    JOLT (had an ad in Dec. 1975 Byte magazine, anyone have one?)&#xD;&#xA;    Rockwell AIM-65&#xD;&#xA;    Oric-1&#xD;&#xA;    Oric Atmos&#xD;&#xA;    Oric Telestrat&#xD;&#xA;    Tangerine Microtan-65&#xD;&#xA;    Acorn System One&#xD;&#xA;    Acorn Atom&#xD;&#xA;    Acorn BBC-A&#xD;&#xA;    Acorn BBC-B+&#xD;&#xA;    Acorn BBC-B&#xD;&#xA;    Acorn Electron&#xD;&#xA;    Nintendo Entertainment System (original 8-bit)&#xD;&#xA;    Atari Lynx&#xD;&#xA;    PC-Engine (Turbo Grafix 16) (two 6502s)&#xD;&#xA;    OSI Superboard 600 / UK 101&#xD;&#xA;    Vtech creatiVision&#xD;&#xA;    Laser 128&#xD;&#xA;    Laser 128EX&#xD;&#xA;    Laser 3000 " />
  <row Id="1478" PostHistoryTypeId="2" PostId="543" RevisionGUID="ab30fd7f-a317-445c-862c-b5893de2e680" CreationDate="2016-05-18T15:59:56.403" UserId="56" Text="According to the *Apple IIgs Hardware Reference, Second Edition*, page 49: &#xD;&#xA;&#xD;&#xA;&gt; The original Apple IIgs has 256K of RAM and 128K of ROM built in, and the 1 MB Apple IIgs has 1 MB RAM and 256K of ROM.  This memory can be expanded to a total of 5 MB of RAM (4 MB RAM on a memory expansion card), and 1MB total ROM (768K ROM on a memory expansion card). Memory expansion of up to 8MB of RAM is possible by using the memory expansion slot, but complications requiring memory support logic keep this expansion from being practical.  The ahrdware and firmware in the Apple IIgs are designed to support only a 5 MB maximum memory space.  Addresses above 8 MB are not available to applications programs.&#xD;&#xA;&#xD;&#xA;Further:&#xD;&#xA;&#xD;&#xA;&gt; While the memory expansion slot has sufficient address lines available to decode addresses up to 8 MB, memory expansion cards of greater than 4 MB are not recommended.  This is because memory expansion locations beyond 4 MB cannot be accessed via direct memory access (DMA), and also must provide on-board memory refresh support circuitry for the additional memory chips.&#xD;&#xA;&#xD;&#xA;Since 8 MB expansion cards exist, it's clearly both possible and practical, but 8 MB does seem to be the upper limit due to the physical layout of the memory expansion slot.&#xD;&#xA;" />
  <row Id="1479" PostHistoryTypeId="2" PostId="544" RevisionGUID="cccbc4d7-ff57-4bdb-b255-967114a648f8" CreationDate="2016-05-18T16:28:09.137" UserId="278" Text="There is very little information online about this, so I have scraped around and put this together:&#xD;&#xA;&#xD;&#xA;The screws on the Amiga 500 and 500+ were often Phillips (requiring a #2 Phillips head screwdriver&lt;sup&gt;[\[1\]][1]&lt;/sup&gt;), but hex-socket (Allen key) screws were also used&lt;sup&gt;[\[4\]][4]&lt;/sup&gt;.&#xD;&#xA;&#xD;&#xA;Most of the screws for the 600 and 1200 are six millimetres long&lt;sup&gt;[\[2\]][2]&lt;/sup&gt; and appear to be Phillips screws&lt;sup&gt;[\[3\]][3]&lt;/sup&gt; as well, however there are shorter screws for the lower front edge&lt;sup&gt;[\[5\]][5]&lt;/sup&gt; on these machines.&#xD;&#xA;&#xD;&#xA;[1]: //amiga.resource.cx/manual/AdIDE2.pdf&#xD;&#xA;[2]: //amigakit.leamancomputing.com/catalog/product_info.php?products_id=992&#xD;&#xA;[3]: //amigakit.leamancomputing.com/catalog/images/case-screws.jpg&#xD;&#xA;[4]: //www.ebay.co.uk/itm/Amiga-500-500plus-Hex-type-case-fixing-kit-Screws-set-of-10-screws-/121962809701&#xD;&#xA;[5]: //www.ebay.co.uk/itm/Commodore-Amiga-600-and-1200-case-screws-6-Screw-Set-A600-A1200-/182115335561" />
  <row Id="1480" PostHistoryTypeId="2" PostId="545" RevisionGUID="d4372b6b-58e7-4594-a7d6-ba0fee26ac90" CreationDate="2016-05-18T16:51:14.637" UserId="539" Text="The largest amount of RAM supported by a real Apple IIgs is an 8MB expansion card, but that's somewhat misleading.  The original IIgs came with 256KiB and the ROM3 came with 1MiB.  A RAM expansion of 4MB will simply be added to these values.  But when you have a card larger than 6MiB (which exists as well), you're going to see a problem: The extra RAM beyond 8MB is wasted/unused.  It usually still needs to be there for the card to work properly, but your IIgs can't see it and can't use it.&#xD;&#xA;&#xD;&#xA;You may have seen that IIgs emulators often allow you to have up to 14MiB of RAM, though doing so requires enabling an option for having more than 8MB.  This is a hack, as it turns out, because the limit of 8MiB of RAM is actually in the ROM.  As there are functionally two IIgs ROMs out there to worry about, the emulators simply patch them to accept more.  This breaks a few titles, and only recently has the Apple // retro hardware market produced a ROM adapter board to use commodity chips to replace the mask ROMs of ROM0 machines with a burned ROM01 so that you need not cannibalize ROM01 machines to upgrade.  (ROM0 is pain, you don't want it!)&#xD;&#xA;&#xD;&#xA;In practice, a IIgs user will rarely need more than 4MiB of RAM.  The ROM01 machine does not have enough RAM to effectively use GS/OS 6.0.x with 1.25MiB, but a basic configuration should work with the Apple 1MiB expansion card on a ROM03.  (This is not my personal experience with an AppleTalk enabled system, however, I was getting $0201 errors--allocation failures--with the community 6.0.3 release on a 2MiB ROM3 system. A 4MiB card solved those problems.)&#xD;&#xA;&#xD;&#xA;I'm sure means to utilize the full 8MiB possible on a standard IIgs, but without using RAMdisks in an era of flash drive expansion in the same price category, it feels like having 8MiB is more about bragging rights than anything.  That's true in 2016 May, at least.  If it changes in the future because 8MiB cards become standard, someone will comment to that effect.  :)&#xD;&#xA;&#xD;&#xA;With ROM hacking beginning in earnest on the Apple // series, it's likely the option to have more than 8MiB may happen in the future.  If so, the hard limit would be 14MiB without bank switching as the upper 2MiB is used for ROM and the Mega II." />
  <row Id="1481" PostHistoryTypeId="2" PostId="546" RevisionGUID="2353f26e-8c15-4c14-b0e1-095c388558be" CreationDate="2016-05-18T17:21:10.543" UserId="539" Text="I've heard mention many times of screen editing commands on the Apple // for fixing typos in BASIC programs (and patching code in the monitor?).  I did not learn these growing up, never having the original manuals available in computer labs in school.  What are the commands, and how do they work?&#xD;&#xA;&#xD;&#xA;Are these built into the Apple // specifically, or do legal clones (e.g. Laser) have them as well?  What about other machines based on Microsoft 6502 BASIC like Commodore?" />
  <row Id="1482" PostHistoryTypeId="1" PostId="546" RevisionGUID="2353f26e-8c15-4c14-b0e1-095c388558be" CreationDate="2016-05-18T17:21:10.543" UserId="539" Text="Apple // screen editing" />
  <row Id="1483" PostHistoryTypeId="3" PostId="546" RevisionGUID="2353f26e-8c15-4c14-b0e1-095c388558be" CreationDate="2016-05-18T17:21:10.543" UserId="539" Text="&lt;apple-ii&gt;&lt;applesoft-basic&gt;" />
  <row Id="1484" PostHistoryTypeId="2" PostId="547" RevisionGUID="a85998bc-e55e-42a6-bd87-5b615b723fe9" CreationDate="2016-05-18T18:14:50.890" UserId="340" Text="The Apple II has an input buffer separate from the screen, with a maximum capacity of 256 characters.  Typing a printable character adds it to the buffer and the screen.  The left-arrow button removes a character from the input buffer and moves the cursor left.  The right arrow adds the character at the cursor position to the input buffer and moves the cursor right.&#xD;&#xA;&#xD;&#xA;Hitting the escape key followed by I, J, K, or M will move the cursor up, left, right, or down, respectively, without affecting the input buffer.  On the Apple //e, escape followed by arrow keys will do likewise.  Press escape again to return to normal typing mode.  If one wishes to modify a line of a program, one can use LIST to display it, then use Escape-I and J to move the cursor to the start of the line, hit escape to return to normal typing mode, and then use the right-arrow key to re-enter data from the screen into the input buffer.  One can delete data by using escape-K to skip past it without moving it into the buffer, or in many cases one may simply space over it.  Because LIST spaces things widely and AppleSoft generally ignores spaces, one can insert a few characters here and there by replacing spaces; larger inserts can be handled by using escape-J to move the cursor left after having imported some text, and then typing the characters to be inserted.&#xD;&#xA;&#xD;&#xA;Once upon a time, I write a utility to continuously display the last 40 characters of the input buffer at the top of the screen; I wouldn't be surprised if some such thing exists within the Internet-connected universe.&#xD;&#xA;" />
  <row Id="1485" PostHistoryTypeId="2" PostId="548" RevisionGUID="66b7b262-9e1b-43a3-94ae-c2eb6a1b61ef" CreationDate="2016-05-18T18:22:04.893" UserId="-1" Text="" />
  <row Id="1486" PostHistoryTypeId="2" PostId="549" RevisionGUID="d3ea6609-efb4-4f08-b8e0-0a4c07de88b1" CreationDate="2016-05-18T18:22:04.893" UserId="-1" Text="" />
  <row Id="1487" PostHistoryTypeId="2" PostId="550" RevisionGUID="90c21d92-e61a-4a15-aef3-303603f83aa7" CreationDate="2016-05-18T19:36:09.477" UserId="539" Text="How can I move 800k disk images (Macintosh GCR) to a real Macintosh with a 1.44M floppy drive using Linux?  The files are distributed as .sea.bin files, and I know (from experience with Apple IIgs) that the .bin file can be unpacked with unar and the .sea file contains an 819200 byte image at offset 84 in the file.  I have extracted these before and been able to loopback mount the HFS image to grab AppleTalk boot blocks for use with netatalk 2.&#xD;&#xA;&#xD;&#xA;But how can I get the filesystem image on a floppy for, say, a MacOS install or boot disk if the image is made for 800k disks and maintain all the forks and System folder, etc when moving to a 1.44M disk?" />
  <row Id="1488" PostHistoryTypeId="1" PostId="550" RevisionGUID="90c21d92-e61a-4a15-aef3-303603f83aa7" CreationDate="2016-05-18T19:36:09.477" UserId="539" Text="Movin 800k Mac GCR image to 1.44M MFM floppy using Linux" />
  <row Id="1489" PostHistoryTypeId="3" PostId="550" RevisionGUID="90c21d92-e61a-4a15-aef3-303603f83aa7" CreationDate="2016-05-18T19:36:09.477" UserId="539" Text="&lt;floppy-disk&gt;&lt;apple-macintosh&gt;&lt;disk-drive&gt;&lt;disk-image&gt;" />
  <row Id="1490" PostHistoryTypeId="2" PostId="551" RevisionGUID="12487841-0c75-4732-84b2-f805bd4ccde5" CreationDate="2016-05-18T20:25:18.790" UserId="611" Text="I have a wonderful Zenith SuperPort 286 laptop whose power circuitry seems faulty and it no longer powers up. I have useful material on the disk which I'd like to extract.&#xD;&#xA;&#xD;&#xA;The disk interface is pre IDE, and I can't seem to locate what interface it has. &#xD;&#xA;&#xD;&#xA;Can anyone suggest how I might spin up the disk and image it? Its only about 32Mb, so less than a modern memory stick.&#xD;&#xA;&#xD;&#xA;" />
  <row Id="1491" PostHistoryTypeId="1" PostId="551" RevisionGUID="12487841-0c75-4732-84b2-f805bd4ccde5" CreationDate="2016-05-18T20:25:18.790" UserId="611" Text="How can I access an old pre-IDE disk?" />
  <row Id="1492" PostHistoryTypeId="3" PostId="551" RevisionGUID="12487841-0c75-4732-84b2-f805bd4ccde5" CreationDate="2016-05-18T20:25:18.790" UserId="611" Text="&lt;disk-drive&gt;&lt;hard-disk&gt;&lt;80286&gt;" />
  <row Id="1494" PostHistoryTypeId="6" PostId="36" RevisionGUID="380a5493-c1d7-4d92-b957-f5a78396bba0" CreationDate="2016-05-18T20:46:16.860" UserId="278" Comment="[tag:color] + [tag:display] -&gt; [tag:color-display]" Text="&lt;video&gt;&lt;vga&gt;&lt;s-video&gt;&lt;color-display&gt;" />
  <row Id="1495" PostHistoryTypeId="24" PostId="36" RevisionGUID="380a5493-c1d7-4d92-b957-f5a78396bba0" CreationDate="2016-05-18T20:46:16.860" Comment="Proposed by 278 approved by 105, 79 edit id of 150" />
  <row Id="1496" PostHistoryTypeId="2" PostId="552" RevisionGUID="89d592a8-183b-45fe-a1b9-72bbf495239f" CreationDate="2016-05-18T20:53:31.240" UserId="12" Text="As far as I know, all of those models, either the 386 or 286 variants, all used [ESDI](https://en.wikipedia.org/wiki/Enhanced_Small_Disk_Interface) disks. I'd like my assertion to be proven by a photo of the drive connections, and (ideally) what it plugs into on the computer itself.&#xD;&#xA;&#xD;&#xA;These drives have built-in controllers, but the adapters are quite special; I think you are looking at finding an Adaptec or Western Digital adapter (which will probably be ISA), and a compatible PC.&#xD;&#xA;&#xD;&#xA;ESDI uses complicated daisy-chained cables with terminators, and each drive has to be addressed properly. Depending on what we find once we hook up the drive, we might have to worry about drive geometry and hard vs. soft sectors.&#xD;&#xA;&#xD;&#xA;Older Windows might work to actually spin up and read the drive, but I suspect using BSD or Linux might be more useful because there will be lots of tinkering.&#xD;&#xA;&#xD;&#xA;You could also consider sending the drive off to a data recovery service." />
  <row Id="1497" PostHistoryTypeId="5" PostId="551" RevisionGUID="4fd156fe-c310-4e0b-bf0f-05eb84ac8b25" CreationDate="2016-05-18T20:53:45.477" UserId="12" Comment="Corrected the name of the computer to its &quot;official&quot; name. Some grammar tweaks." Text="I have a wonderful Zenith SupersPORT 286 laptop whose power circuitry seems faulty and it no longer powers up. I have useful material on the disk which I'd like to extract.&#xD;&#xA;&#xD;&#xA;The disk interface is pre-IDE, and I can't seem to locate what interface it has.&#xD;&#xA;&#xD;&#xA;Can anyone suggest how I might spin up the disk and image it? It's only about 32Mb, so less than a modern memory stick.&#xD;&#xA;&#xD;&#xA;" />
  <row Id="1498" PostHistoryTypeId="24" PostId="551" RevisionGUID="4fd156fe-c310-4e0b-bf0f-05eb84ac8b25" CreationDate="2016-05-18T20:53:45.477" Comment="Proposed by 12 approved by 79, 611 edit id of 156" />
  <row Id="1500" PostHistoryTypeId="5" PostId="552" RevisionGUID="76c9edc2-bdf6-4177-a8ab-a4394f24859e" CreationDate="2016-05-18T20:58:36.220" UserId="12" Comment="Fleshed out the Linux/BSD part" Text="As far as I know, all of those models, either the 386 or 286 variants, all used [ESDI](https://en.wikipedia.org/wiki/Enhanced_Small_Disk_Interface) disks. I'd like my assertion to be proven by a photo of the drive connections, and (ideally) what it plugs into on the computer itself.&#xD;&#xA;&#xD;&#xA;These drives have built-in controllers, but the adapters are quite special; I think you are looking at finding an Adaptec or Western Digital adapter (which will probably be ISA), and a compatible PC.&#xD;&#xA;&#xD;&#xA;ESDI uses complicated daisy-chained cables with terminators, and each drive has to be addressed properly. Depending on what we find once we hook up the drive, we might have to worry about drive geometry and hard vs. soft sectors.&#xD;&#xA;&#xD;&#xA;Older Windows might work to actually spin up and read the drive, but I suspect using BSD or Linux (both of which have ESDI support as a kernel default or compile option) might be more useful because there will be lots of tinkering.&#xD;&#xA;&#xD;&#xA;You could also consider sending the drive off to a data recovery service." />
  <row Id="1501" PostHistoryTypeId="5" PostId="541" RevisionGUID="b55175f4-9421-44df-8cb0-a99323819350" CreationDate="2016-05-18T23:14:18.527" UserId="278" Comment="Improved wording and formality." Text="The Apple II and Commodore 64 are the obvious ones, but which other computer systems used the 6502 and 65816 chips?" />
  <row Id="1502" PostHistoryTypeId="4" PostId="541" RevisionGUID="b55175f4-9421-44df-8cb0-a99323819350" CreationDate="2016-05-18T23:14:18.527" UserId="278" Comment="Improved wording and formality." Text="Which computers / consoles used the 6502 and 65816 chipsets?" />
  <row Id="1503" PostHistoryTypeId="24" PostId="541" RevisionGUID="b55175f4-9421-44df-8cb0-a99323819350" CreationDate="2016-05-18T23:14:18.527" Comment="Proposed by 278 approved by 79, 393 edit id of 154" />
  <row Id="1504" PostHistoryTypeId="2" PostId="553" RevisionGUID="f6e9acbd-3a71-420b-941d-178532cff690" CreationDate="2016-05-19T00:21:33.357" UserId="64" Text="Systems like the ZX Spectrum have simple audio hardware with just one channel.  But apparently it was possible to do polyphony on these systems.  How was that achieved?&#xD;&#xA;" />
  <row Id="1505" PostHistoryTypeId="1" PostId="553" RevisionGUID="f6e9acbd-3a71-420b-941d-178532cff690" CreationDate="2016-05-19T00:21:33.357" UserId="64" Text="How was polyphony achieved on systems with only one audio channel?" />
  <row Id="1506" PostHistoryTypeId="3" PostId="553" RevisionGUID="f6e9acbd-3a71-420b-941d-178532cff690" CreationDate="2016-05-19T00:21:33.357" UserId="64" Text="&lt;zx-spectrum&gt;&lt;digital-audio&gt;" />
  <row Id="1507" PostHistoryTypeId="5" PostId="450" RevisionGUID="97d98553-54dd-42fe-9abb-2aa977d59b2d" CreationDate="2016-05-19T00:56:05.423" UserId="535" Comment="Copy edited. Dressed the naked link." Text="I've been using [Z80Pack][1] recently on a project, and it works pretty well. (I'm working on a bank-switcher and SD ROM loader for the RC2014 project.) &#xD;&#xA;&#xD;&#xA;  [1]: http://www.autometer.de/unix4fun/z80pack&#xD;&#xA;" />
  <row Id="1508" PostHistoryTypeId="24" PostId="450" RevisionGUID="97d98553-54dd-42fe-9abb-2aa977d59b2d" CreationDate="2016-05-19T00:56:05.423" Comment="Proposed by 535 approved by 79, 56 edit id of 153" />
  <row Id="1509" PostHistoryTypeId="5" PostId="457" RevisionGUID="5a123fb6-acd4-4884-90b1-8132f53c3860" CreationDate="2016-05-19T00:56:24.423" UserId="535" Comment="Copy edited (e.g. ref. &lt;https://en.wiktionary.org/wiki/any_more#Adverb&gt;)." Text="**[Z80.info][1]** has a HUGE list of emulators for many platforms. Some links may be broken, though - because the website was moved or does not exist any more. Either way, googling with the name of the emulator itself will solve the problem.&#xD;&#xA;&#xD;&#xA;I think you should favorite this page (I did!). It has useful information regarding the subject.&#xD;&#xA;&#xD;&#xA;Suggestions&#xD;&#xA;-----------&#xD;&#xA;&#xD;&#xA;I like [**Toledo**][2] - a CP/M emulator; it considers the Intel 8080, not the Z80. But I like it, and it won the [IOCCC][3]! You will need to compile it and maybe adjust something. But not much of what you want (simulates the system not the processor).&#xD;&#xA;&#xD;&#xA;There is also [ZIM][4] which can be used in a Java Virtual Machine (JVM). It speeds the use of the tool, because it just needs the JVM installed, not requiring compiling or installation of other tools (Java is usually used by multiple applications for your PC).&#xD;&#xA;&#xD;&#xA;ZIM also works within the browser if the Java Web Start plugin is available to your browser (Firefox and Internet&amp;nbsp;Explorer; Chrome doesn't support Java any more). I think it's very handy! It will work on a wide variety of modern OSes and within the browser! :P&#xD;&#xA;&#xD;&#xA;ZIM ***should be*** something along *SIM8085*. So I hope it helped!&#xD;&#xA;&#xD;&#xA;  [1]: http://goo.gl/jdw0cy&#xD;&#xA;  [2]: http://goo.gl/xEKYkf&#xD;&#xA;  [3]: https://en.wikipedia.org/wiki/International_Obfuscated_C_Code_Contest&#xD;&#xA;  [4]: http://www.natmac.net/zim/&#xD;&#xA;" />
  <row Id="1510" PostHistoryTypeId="24" PostId="457" RevisionGUID="5a123fb6-acd4-4884-90b1-8132f53c3860" CreationDate="2016-05-19T00:56:24.423" Comment="Proposed by 535 approved by 79, 56 edit id of 152" />
  <row Id="1511" PostHistoryTypeId="6" PostId="64" RevisionGUID="4b7137a4-a1a9-4fd2-893d-3a484d0910d5" CreationDate="2016-05-19T00:56:34.437" UserId="278" Comment="[tag:color] + [tag:display] -&gt; [tag:color-display]" Text="&lt;ms-dos&gt;&lt;color-display&gt;" />
  <row Id="1512" PostHistoryTypeId="24" PostId="64" RevisionGUID="4b7137a4-a1a9-4fd2-893d-3a484d0910d5" CreationDate="2016-05-19T00:56:34.437" Comment="Proposed by 278 approved by 79, 56 edit id of 151" />
  <row Id="1513" PostHistoryTypeId="5" PostId="553" RevisionGUID="7163f42f-c630-4ede-9f02-464257c434ad" CreationDate="2016-05-19T03:29:57.607" UserId="64" Comment="added 180 characters in body" Text="Systems like the ZX Spectrum have simple audio hardware with just one channel.  But apparently it was possible to do polyphony on these systems.  How was that achieved?&#xD;&#xA;&#xD;&#xA;The amazing thing with these systems is that the audio hardware seems to only be designed for playing a simple single tone, but people were able to transcend these limitations.&#xD;&#xA;" />
  <row Id="1517" PostHistoryTypeId="2" PostId="555" RevisionGUID="4e14a666-a488-4c79-8f85-4688a82ba1f0" CreationDate="2016-05-19T07:42:50.450" UserId="301" Text="And these systems had not just a single audio channel, but a single-bit audio channel.  There are no doubt many techniques, but a simple approach is to rapidly interleave the output of two or more channels.  The low-pass filtering of the speaker will serve to effectively mix the channels together.  Not the greatest fidelity but better than nothing.&#xD;&#xA;&#xD;&#xA;As an example, consider the following pseudo-code to output a square wave:&#xD;&#xA;&#xD;&#xA;    c0 = 0; f0 = 128;&#xD;&#xA;    loop:&#xD;&#xA;       c0 = c0 + f0;&#xD;&#xA;       if (c0 &gt;= 128) audio_out = 1; else audio_out = 0;&#xD;&#xA;       c0 = c0 % 256;&#xD;&#xA;       goto loop;&#xD;&#xA;&#xD;&#xA;With `f0 = 128` as shown the output frequency will be the maximum possible which is 1 / time-to-execute.  Let's say that works out to 50,0000 Hz.  We can output notes of different frequency by choosing different values of `f0`.  If `f0 = 1` then we get a 50000/128 = 390 Hz tone.&#xD;&#xA;&#xD;&#xA;To output two square waves at once simply add the code for another square wave:&#xD;&#xA;&#xD;&#xA;    loop:&#xD;&#xA;       c0 = c0 + f0;&#xD;&#xA;       if (c0 &gt;= 128) audio_out = 1; else audio_out = 0;&#xD;&#xA;       c0 = c0 % 256;&#xD;&#xA;       goto waste;&#xD;&#xA;    waste:&#xD;&#xA;       c1 = c1 + f1;&#xD;&#xA;       if (c1 &gt;= 128) audio_out = 1; else audio_out = 0;&#xD;&#xA;       c1 = c1 % 256;&#xD;&#xA;       goto loop;&#xD;&#xA;&#xD;&#xA;The time to execute the loop has doubled so all our frequencies have dropped in half with the maximum now 25,000 Hz.  The higher level music player will have to adjust `f0` and `f1` values accordingly.  Also notice the `goto waste;` statement I added.  That guarantees that the loop time exactly doubles and that the spacing between audio outputs is consistent.  It can be surprising how much these little things can matter when it comes to audio.&#xD;&#xA;&#xD;&#xA;Music players usually have `c0` and `c1` be fixed-point numbers that loop over waveform buffers to allow for output other than simple square waves." />
  <row Id="1518" PostHistoryTypeId="2" PostId="556" RevisionGUID="384bdbdd-7a3c-49ae-926d-d4e7b18bc98d" CreationDate="2016-05-19T12:29:43.517" UserId="627" Text="From your description, it sounds like a normal thing to do even today &amp;mdash; you just have the wrong model in your head.&#xD;&#xA;&#xD;&#xA;The description sounds like there is a &quot;physics&quot; thread responsible for updating the state of the game world, and updates happen periodically (say... once per frame, just before rendering).&#xD;&#xA;&#xD;&#xA;When some routine wishes to move Samus Aran, it doesn't do it *directly*; instead it would invoke a method to queue up the change, and then the next time the physics thread runs, it executes all of the changes at once.&#xD;&#xA;&#xD;&#xA;This model makes it easier to ensure regular updates of the world state. Additionally, if multiple changes happen between frames, it is likely much more efficient to only have to calculate the effect of motion once per frame rather than doing so after each individual event.&#xD;&#xA;&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;The gameplay of Super Metroid appears to be so that the motion doesn't need to be broken into individual events, and so it doesn't need an actual queue; instead the changes in each direction simply get added up, and only the total change in each direction effected.&#xD;&#xA;&#xD;&#xA;(naturally, the method to queue up the change would be inlined, so you wouldn't see a function call at all)" />
  <row Id="1519" PostHistoryTypeId="5" PostId="549" RevisionGUID="793696c2-23fc-4587-8568-59c7ebbecd50" CreationDate="2016-05-19T12:33:27.490" UserId="278" Comment="added 304 characters in body" Text="BASIC is a lightweight, high-level programming language favoured in retro computer systems. Questions with this tag should be about the language in general—dialect-specific questions should use the dialect-specific tags [tag:applesoft-basic], [tag:atari-basic], [tag:color-basic] and [tag:integer-basic]." />
  <row Id="1520" PostHistoryTypeId="24" PostId="549" RevisionGUID="793696c2-23fc-4587-8568-59c7ebbecd50" CreationDate="2016-05-19T12:33:27.490" Comment="Proposed by 278 approved by 79, 105 edit id of 155" />
  <row Id="1521" PostHistoryTypeId="4" PostId="550" RevisionGUID="62bf41a2-f6ad-42f5-a625-1b99bb0e1ce5" CreationDate="2016-05-19T12:36:52.570" UserId="539" Comment="Fixed a typo" Text="Moving 800k Mac GCR image to 1.44M MFM floppy using Linux" />
  <row Id="1522" PostHistoryTypeId="2" PostId="557" RevisionGUID="9585e509-9798-43e6-b2ec-cb2d7bc0965c" CreationDate="2016-05-19T12:45:04.523" UserId="320" Text="The answer will depend a lot on what application you have in mind.  There is a clarity difference, but how much it will matter will depend on how large of a display the output is going to as to how much you'll notice.  On a 20&quot; desktop monitor, you probably won't notice a huge difference, on a 50&quot; TV the difference will be more pronounced.&#xD;&#xA;&#xD;&#xA;The other factor that may matter depending on what you are using it for, is displaying 80 column text.  You stated 240p or 480i, but you didn't specify horizontal resolution.  If you're using, for example, a 640 x 240p resolution and dealing with a lot of text display (say application use over gaming), the difference will matter more.  80 column text is certainly readable on S-Video but the clarity will be better on a 15khz VGA signal if that's going to be a primary use for it." />
  <row Id="1524" PostHistoryTypeId="2" PostId="558" RevisionGUID="7600a4c6-44d9-459a-844e-2b8555427f26" CreationDate="2016-05-19T13:10:04.267" UserId="628" Text="Although commercial, [IDA][1] is an outstanding (dynamic) disassembler and debugger for the Z80.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://www.hex-rays.com/products/ida/" />
  <row Id="1525" PostHistoryTypeId="2" PostId="559" RevisionGUID="2d05cd6c-25b4-4717-9b20-5fd491a767e7" CreationDate="2016-05-19T13:20:31.373" UserId="218" Text="I'm fooling around with Matthew Reed's TRS-80 Model 1/III/4 emulator for Windows (TRS32) and am have trouble using virtual cassettes.  I am using it to emulate a Model III with Level II BASIC.&#xD;&#xA;&#xD;&#xA;I have used the menu to insert the virtual cassette, and the emulator (as expected) creates a new, blank `.CAS` file.  Then I &quot;press&quot; REC+PLAY on the virtual recorder and type `CSAVE FOO`.  I see the counter advance and the `CSAVE` completes without error.&#xD;&#xA;&#xD;&#xA;Next, I rewound back to the beginning of the &quot;tape&quot;, &quot;pressed&quot; PLAY, and typed `CLOAD`.  I see the counter start moving and it advances through to the where it was at the end of the recorded program, but the `CLOAD` doesn't find anything and just sits there (like it would do on a real system back in the day when it couldn't find a program on the tape).&#xD;&#xA;&#xD;&#xA;What's going wrong?&#xD;&#xA;" />
  <row Id="1526" PostHistoryTypeId="1" PostId="559" RevisionGUID="2d05cd6c-25b4-4717-9b20-5fd491a767e7" CreationDate="2016-05-19T13:20:31.373" UserId="218" Text="How to use virtual cassettes with Matthew Reed's TRS-80 Model III emulator? (TRS32)" />
  <row Id="1527" PostHistoryTypeId="3" PostId="559" RevisionGUID="2d05cd6c-25b4-4717-9b20-5fd491a767e7" CreationDate="2016-05-19T13:20:31.373" UserId="218" Text="&lt;emulation&gt;&lt;basic&gt;&lt;cassette&gt;&lt;z80&gt;&lt;8-bit-microcomputers&gt;" />
  <row Id="1528" PostHistoryTypeId="2" PostId="560" RevisionGUID="e9c42a0d-3c4e-4fa9-895f-ce99c68b255d" CreationDate="2016-05-19T13:41:50.997" UserId="105" Text="I know of two ways of achieving polyphony in system with 1-bit audio systems:&#xD;&#xA;&#xD;&#xA;- The simple way: time-multiplex two or more frequencies. For example, if you want the system to produce a mix of two tones, which are pure square waves in origin like these: &#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;you can simply render a period of first tone, followed by a period of second tone, and again, a period of first tone...&#xD;&#xA;&#xD;&#xA;[![enter image description here][2]][2]&#xD;&#xA;&#xD;&#xA;This method limits your tones to be just pure frequencies, and if a very low frequency tone is to be mixed with a very high frequency one, the result is not very good. Nevertheless, this method works fine for simple tunes which may have some simple chords (such as the kind of tunes you can achieve using the PLAY command in a Spectrum 128K)&#xD;&#xA;&#xD;&#xA;- The PWM way: this uses a modulation technique called PWM, which allows a 1-bit output driver to generate any complex sound, by varying the duty cycle of a very high fixed frequency tone. The frequency of the PWM signal is then the sampling period of a digital signal, and the number of different values the duty cycle can have is the resolution of that digital signal. For example, a PWM signal with a frequency of 10kHz and with 16 possible levels for duty cycle can encode a 4-bit digital signal with a sampling frequency of 10kHz.&#xD;&#xA;There is an implementation of PWM that allows for fast operation, called sigma-delta modulation. I wrote some PoC programs for the Spectrum to illustrate this method. [There is a thread in WOS discussing the matter][3], with some programs you can actually load and hear. One of them I provide it with full source code.&#xD;&#xA;&#xD;&#xA;It works as follows: first, I take a raw PCM sound and use sigma-delta modulation to convert it into a stream of bits, each of them being the actual output to put in the speaker&#xD;&#xA;&#xD;&#xA;    /*&#xD;&#xA;    Offline conversion of 8-bit sample files (RAW format, no header) to&#xD;&#xA;    1-bit sigma-delta encoded stream files.&#xD;&#xA;    &#xD;&#xA;    (C)2012 Miguel Angel Rodriguez Jodar (mcleod_ideafix)&#xD;&#xA;    Dept. Architecture and Computer Technology. University of Seville, Spain&#xD;&#xA;    Licensed under the terms of GPL.&#xD;&#xA;    &#xD;&#xA;    Change input and output files to suit your needs.&#xD;&#xA;    TO-DO: process input file in chunks, rather than completely load it in memory&#xD;&#xA;    */&#xD;&#xA;    &#xD;&#xA;    #define INPUTFILE &quot;yeaaaah.raw&quot;&#xD;&#xA;    #define OUTPUTFILE &quot;yeahh4bit_sigma_delta.bin&quot;&#xD;&#xA;    &#xD;&#xA;    #include &lt;stdio.h&gt;&#xD;&#xA;    #include &lt;stdlib.h&gt;&#xD;&#xA;    &#xD;&#xA;    void main (void)&#xD;&#xA;    {&#xD;&#xA;    	FILE *f;&#xD;&#xA;    	int leido;&#xD;&#xA;    	int i,sample,integrador,salida,filesize;&#xD;&#xA;    	unsigned char *buffer;    /* remove &quot;unsigned&quot; if using signed samples */&#xD;&#xA;    	unsigned char *buffout;&#xD;&#xA;    	&#xD;&#xA;    	f=fopen (INPUTFILE, &quot;rb&quot;);&#xD;&#xA;    	fseek (f, 0, SEEK_END);&#xD;&#xA;    	filesize = ftell (f);&#xD;&#xA;    	fseek (f, 0, SEEK_SET);&#xD;&#xA;    	buffer=malloc(filesize);&#xD;&#xA;    	buffout=malloc(filesize/4);&#xD;&#xA;    	filesize = fread (buffer, 1, filesize, f);&#xD;&#xA;    	fclose(f);&#xD;&#xA;    	&#xD;&#xA;    	integrador = 0;&#xD;&#xA;    	salida = 0;&#xD;&#xA;    	memset (buffout, 0, filesize/4);&#xD;&#xA;    		&#xD;&#xA;    	for (i=0;i&lt;filesize;i++)&#xD;&#xA;    	{&#xD;&#xA;    		sample = buffer[i]-128;  /* remove -128 if using signed samples */&#xD;&#xA;    		integrador += (sample-salida);&#xD;&#xA;    		if (integrador&gt;0)&#xD;&#xA;    		{&#xD;&#xA;    			salida=127;&#xD;&#xA;    			buffout[i/4] = buffout[i/4] | (1&lt;&lt;(7-(i*2)%8));&#xD;&#xA;    		}&#xD;&#xA;    		else&#xD;&#xA;    		{&#xD;&#xA;    			salida=-128;&#xD;&#xA;    		}&#xD;&#xA;    &#xD;&#xA;    		/* repeat once (2x oversampling) */&#xD;&#xA;    		integrador += (sample-salida);&#xD;&#xA;    		if (integrador&gt;0)&#xD;&#xA;    		{&#xD;&#xA;    			salida=127;&#xD;&#xA;    			buffout[i/4] = buffout[i/4] | (1&lt;&lt;(7-(i*2+1)%8));&#xD;&#xA;    		}&#xD;&#xA;    		else&#xD;&#xA;    		{&#xD;&#xA;    			salida=-128;&#xD;&#xA;    		}&#xD;&#xA;    	}&#xD;&#xA;    	&#xD;&#xA;    	f=fopen (OUTPUTFILE, &quot;wb&quot;);&#xD;&#xA;    	fwrite (buffout, 1, filesize/4, f);&#xD;&#xA;    	fclose(f);&#xD;&#xA;    	&#xD;&#xA;    	free(buffer);&#xD;&#xA;    	free(buffout);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Then, the stream of bits are simply played by a machine code routine.&#xD;&#xA;&#xD;&#xA;    ; Simple player for 1-bit samples. See file 8tosigmadelta.c for sigma-delta&#xD;&#xA;    ; offline conversion of 8-bit sample files to 1-bit sample files.&#xD;&#xA;    ; (C)2012 Miguel Angel Rodriguez Jodar. (mcleod_ideafix)&#xD;&#xA;    ; Dept. of Architecture and Computing Technology. University of Seville, Spain&#xD;&#xA;    ; Licensed under the terms of GPL.&#xD;&#xA;    &#xD;&#xA;    ; Assembled using PASMO.&#xD;&#xA;    &#xD;&#xA;                    org 49152&#xD;&#xA;    BORDERCOLOUR    equ 7&#xD;&#xA;    &#xD;&#xA;    DemoPlaySample  proc&#xD;&#xA;                    ld hl,Sample&#xD;&#xA;                    ld de,LenSample&#xD;&#xA;                    call PlaySample&#xD;&#xA;                    ret&#xD;&#xA;                    endp&#xD;&#xA;    &#xD;&#xA;    PlaySample      proc&#xD;&#xA;                    di&#xD;&#xA;    AnotherSample:  ld a,(hl)      ;Load 8 samples&#xD;&#xA;                    ld b,8&#xD;&#xA;    LoopSample:     ld c,a         ;Backup to C&#xD;&#xA;                    and 80h        ;Isolate high bit&#xD;&#xA;                    sra a&#xD;&#xA;                    sra a&#xD;&#xA;                    sra a          ;Shift it to SPK bit&#xD;&#xA;                    or BORDERCOLOUR   ;Apply desired border colour&#xD;&#xA;                    out (254),a     ;Output to spk&#xD;&#xA;                    ld a,c         ;Restore from C&#xD;&#xA;                    rla            ;Next sample is now in high bit&#xD;&#xA;                    nop            ;&#xD;&#xA;                    nop            ; Delay&#xD;&#xA;                    nop            ;&#xD;&#xA;                    nop            ;&#xD;&#xA;                    djnz LoopSample  ;Go to process next sample&#xD;&#xA;                    inc hl&#xD;&#xA;                    dec de&#xD;&#xA;                    ld a,d&#xD;&#xA;                    or e&#xD;&#xA;                    jp nz,AnotherSample    ;Go to process next 8 samples&#xD;&#xA;                    ei&#xD;&#xA;                    ret&#xD;&#xA;                    endp&#xD;&#xA;    &#xD;&#xA;    Sample:         equ $&#xD;&#xA;                    incbin &quot;yeahh4bit_sigma_delta.bin&quot;&#xD;&#xA;    LenSample       equ $-Sample&#xD;&#xA;    &#xD;&#xA;                    end DemoPlaySample&#xD;&#xA;&#xD;&#xA;I made some other PoC for several ways to achieve some kind of digital sound playing in a Spectrum. namely:&#xD;&#xA;&#xD;&#xA;- Using two bits (MIC and SPK) which gives me a (very rude and non linear) 2-bit DAC&#xD;&#xA;- Using the AY chip to modulate a fixed signal with the volume control&#xD;&#xA;- Using PWM&#xD;&#xA;- Using an actual 8-bit DAC (SpecDrum)&#xD;&#xA;&#xD;&#xA;Results can be loaded and executed, from here:&#xD;&#xA;http://www.atc.us.es/~rodriguj/prelude_spectrum.zip&#xD;&#xA;&#xD;&#xA;The original 4 channel MOD file is included. My demos use three channels (you may not notice that until the end, in where a chord is played)&#xD;&#xA;&#xD;&#xA;The high pitch you hear in the PWM version is caused by the PWM frequency to be so low that it enters the audible spectrum. &quot;Serious&quot; PWM applications use a very high pitch PWM signal.&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/e4d4M.png&#xD;&#xA;  [2]: http://i.stack.imgur.com/BVP08.png&#xD;&#xA;  [3]: http://www.worldofspectrum.org/forums/discussion/comment/641855/#Comment_641855" />
  <row Id="1530" PostHistoryTypeId="5" PostId="552" RevisionGUID="5ec92dc8-bbc8-48ca-a7a0-9c7828aa2f15" CreationDate="2016-05-19T14:13:17.987" UserId="12" Comment="added 78 characters in body" Text="As far as I know, all of those models, either the 386 or 286 variants, all used [ESDI](https://en.wikipedia.org/wiki/Enhanced_Small_Disk_Interface) disks. I'd like my assertion to be proven by a photo of the drive connections, and (ideally) what it plugs into on the computer itself.&#xD;&#xA;&#xD;&#xA;These drives have built-in controllers, but the adapters are quite special; I think you are looking at finding an Adaptec or Western Digital adapter (which will probably be ISA), and a compatible PC. As pointed out in the comments, some adapters might use the MCA bus, so this could complicate finding the right hardware match.&#xD;&#xA;&#xD;&#xA;ESDI uses complicated daisy-chained cables with terminators, and each drive has to be addressed properly. Depending on what we find once we hook up the drive, we might have to worry about drive geometry and hard vs. soft sectors.&#xD;&#xA;&#xD;&#xA;Older Windows might work to actually spin up and read the drive, but I suspect using BSD or Linux (both of which have ESDI support as a kernel default or compile option) might be more useful because there will be lots of tinkering.&#xD;&#xA;&#xD;&#xA;You could also consider sending the drive off to a data recovery service." />
  <row Id="1531" PostHistoryTypeId="2" PostId="561" RevisionGUID="af612028-487f-4313-a311-fbb5843f9d06" CreationDate="2016-05-19T14:31:09.570" UserId="335" Text="You might also find this discussion interesting: https://groups.google.com/forum/#!topic/comp.sys.apple2/7srpWGp1pCs&#xD;&#xA;&#xD;&#xA;Although the Apple II could only write at 4 cycles per bit, it can read faster: if you slow the drive down, you can write more densely." />
  <row Id="1532" PostHistoryTypeId="2" PostId="562" RevisionGUID="6d445cc1-e533-43a6-9a91-9c8cbc759892" CreationDate="2016-05-19T15:15:36.447" UserId="439" Text="I have a Sinclair ZX Spectrum 48k. I have source a suitable power supply, and applied the [Composite Video Mod](http://womblesretrorepairshack.blogspot.ca/2008/11/zx-spectrum-composite-video-mod.html &quot;Composite Video Mod&quot;) to bypass the PAL analogue modulator. Unfortunately, I can get no useful output, having tried:&#xD;&#xA;&#xD;&#xA;1. Direct composite video into my LG television (c. 2009): oversize greyscale image, with about ¼ of the display visible;&#xD;&#xA;2. Direct composite video into a Dell multi-input LCD monitor: flickering for a few seconds, then NO SIGNAL;&#xD;&#xA;3. Composite video via a cheap USB-powered PAL to NTSC converter (sold under many brands — mine is labelled “KEEDOX® PAL/NTSC/SECAM to PAL/NTSC MINI Bi-directional TV Format System Converter”) into television composite: horribly distorted snowy display with very slow refresh.&#xD;&#xA;&#xD;&#xA;Are there solutions known to work that might make the games of my youth playable again?" />
  <row Id="1533" PostHistoryTypeId="1" PostId="562" RevisionGUID="6d445cc1-e533-43a6-9a91-9c8cbc759892" CreationDate="2016-05-19T15:15:36.447" UserId="439" Text="ZX Spectrum PAL Composite Video to North American Monitor" />
  <row Id="1534" PostHistoryTypeId="3" PostId="562" RevisionGUID="6d445cc1-e533-43a6-9a91-9c8cbc759892" CreationDate="2016-05-19T15:15:36.447" UserId="439" Text="&lt;zx-spectrum&gt;&lt;video&gt;&lt;ntsc&gt;&lt;pal&gt;" />
  <row Id="1535" PostHistoryTypeId="6" PostId="559" RevisionGUID="3cdde5f0-123c-4163-84c5-c4edd719949e" CreationDate="2016-05-19T15:31:33.973" UserId="218" Comment="edited tags" Text="&lt;emulation&gt;&lt;8-bit-microcomputers&gt;&lt;basic&gt;&lt;cassette&gt;" />
  <row Id="1536" PostHistoryTypeId="5" PostId="475" RevisionGUID="c3b2a50c-1d68-4fa6-a277-b075cf019c0c" CreationDate="2016-05-19T15:32:17.013" UserId="433" Comment="added a few clarifying phrases" Text="Because at the time a personal computer without BASIC was a total non-starter. A personal computer without BASIC would seem as silly then as a computer without a web browser would seem today.&#xD;&#xA;&#xD;&#xA;We considered BASIC interpreters essential in the 1970's and early 1980's  because the modern concept of the personal computer as a machine on which one runs ready-made application programs was only beginning to emerge. BASIC was invented in 1964. Microsoft BASIC was released in 1975. Wordstar was released in 1978, Visicalc in 1979, Wordperfect in 1979, Microsoft Word in 1983, Lotus 123 in 1983. If you were a user then, you might have heard of some of these programs, you might be able to get a copy of one of them, and it might run on your computer (but probably would not).&#xD;&#xA;&#xD;&#xA;Making practical use of a computer without programming was still very much a new idea. BASIC was seen as a language which end users would use to solve problems. I learned it from the 1975 book &quot;Making BASIC Work For You&quot;. It is all about how to solve business accounting and record-keeping problems. The examples are things which today would be done using spreadsheets and other office applications.&#xD;&#xA;&#xD;&#xA;The computer buyer was also different. The average person did not think that he ever would or ever could operate a computer and so had no desire to own a home computer. They were bought by hobbyists who valiantly tried to show their friends that the machines had some practical value (which was hard since most tasks took two or three times as long on a computer) and by parents who realized that microcomputers, even if useless now, were the wave of the future and wanted their children to &quot;learn programming&quot;. In both cases it was essential that the computer be programmable.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;" />
  <row Id="1537" PostHistoryTypeId="5" PostId="124" RevisionGUID="c52ad371-f7c0-46d4-8f89-cf45f422b628" CreationDate="2016-05-19T16:29:08.990" UserId="621" Comment="Adjusted wording for clarity, adding game-boy tag" Text="I have a Nintendo GameBoy Color with some games that support saving your game status and also have a real-time clock, like Pokémon Red and Pokémon Silver.&#xD;&#xA;&#xD;&#xA;But recently the game does not save any more, the saved position is reset. Also the real-time clock stopped and time only goes one while the game is running instead of 24/7.&#xD;&#xA;&#xD;&#xA;How do such old Nintendo GameBoy games store save files, what could cause this sudden failure and how could I fix this?" />
  <row Id="1538" PostHistoryTypeId="6" PostId="124" RevisionGUID="c52ad371-f7c0-46d4-8f89-cf45f422b628" CreationDate="2016-05-19T16:29:08.990" UserId="621" Comment="Adjusted wording for clarity, adding game-boy tag" Text="&lt;nintendo&gt;&lt;storage&gt;&lt;game-boy&gt;" />
  <row Id="1539" PostHistoryTypeId="24" PostId="124" RevisionGUID="c52ad371-f7c0-46d4-8f89-cf45f422b628" CreationDate="2016-05-19T16:29:08.990" Comment="Proposed by 621 approved by 128 edit id of 159" />
  <row Id="1540" PostHistoryTypeId="5" PostId="2" RevisionGUID="8200c42c-0542-4d56-a55d-78df0987a53e" CreationDate="2016-05-19T16:37:44.763" UserId="621" Comment="Fixed spacing, added additional detail beyond &quot;wasn't good&quot;" Text="I used to blow the dust out of the cartridges but I heard that can actually damage the cartridge or the system itself.&#xD;&#xA;&#xD;&#xA;I am looking for the *proper way* to clean old Nintendo game cartridges (such as NES and SNES).&#xD;&#xA;&#xD;&#xA;Is cleaning the edge contacts sufficient or is it necessary to open the cartridge and do anything inside?" />
  <row Id="1541" PostHistoryTypeId="24" PostId="2" RevisionGUID="8200c42c-0542-4d56-a55d-78df0987a53e" CreationDate="2016-05-19T16:37:44.763" Comment="Proposed by 621 approved by 13 edit id of 157" />
  <row Id="1542" PostHistoryTypeId="2" PostId="563" RevisionGUID="f6fc20ad-aa31-4698-8af9-f576bbc6fdb9" CreationDate="2016-05-19T16:46:18.210" UserId="-1" Text="" />
  <row Id="1543" PostHistoryTypeId="2" PostId="564" RevisionGUID="a44135f1-c4f8-4c31-87bd-0b625fa393c8" CreationDate="2016-05-19T16:46:18.210" UserId="-1" Text="" />
  <row Id="1544" PostHistoryTypeId="2" PostId="565" RevisionGUID="74dafcf6-cc61-4e05-ba39-3a5c1f2732ed" CreationDate="2016-05-19T16:58:13.003" UserId="-1" Text="" />
  <row Id="1545" PostHistoryTypeId="2" PostId="566" RevisionGUID="b476ba97-8103-48a4-bfa6-ac77e3c58207" CreationDate="2016-05-19T16:58:13.003" UserId="-1" Text="" />
  <row Id="1546" PostHistoryTypeId="2" PostId="567" RevisionGUID="f9fe356b-a456-4da7-aacf-e457b40de485" CreationDate="2016-05-19T17:00:37.093" UserId="-1" Text="" />
  <row Id="1547" PostHistoryTypeId="2" PostId="568" RevisionGUID="340e81cc-eb52-4540-b778-b2610589fece" CreationDate="2016-05-19T17:00:37.093" UserId="-1" Text="" />
  <row Id="1548" PostHistoryTypeId="2" PostId="569" RevisionGUID="1a9a2135-8659-4516-bd52-411b30922ab1" CreationDate="2016-05-19T17:03:32.123" UserId="382" Text="Though supercat points out the built-in way of editing BASIC programs on the screen (well, machine language as well if you were doing it via the monitor and mini-assembler), there are better tools for this. Specifically, I was a big fan of GPLE from Beagle Bros. back in the day.&#xD;&#xA;&#xD;&#xA;The main problem that you run into with the screen editing method is that the listing of a BASIC program has certain indentations and sometimes in inconvenient places (e.g. in a quoted string). Though you can &lt;keyb&gt;ESC&lt;/keyb&gt; IJKM/arrow to avoid this, it is still a bit of a hassle. As well, there is no insert/delete functions in the middle of the line, which GPLE handles for you.&#xD;&#xA;&#xD;&#xA;Another alternative is MD-BASIC from Morgan Davis. I never used it myself, but the idea is that you can write BASIC programs in an improved language from AppleSoft (e.g. labels instead of line numbers) and it will &quot;compile&quot; it down to tight AppleSoft.&#xD;&#xA;&#xD;&#xA;" />
  <row Id="1549" PostHistoryTypeId="2" PostId="570" RevisionGUID="1e6df237-b37d-43ec-93d9-a8d77950662a" CreationDate="2016-05-19T17:03:35.920" UserId="-1" Text="" />
  <row Id="1550" PostHistoryTypeId="2" PostId="571" RevisionGUID="30d1680b-a569-431b-9d97-398074808543" CreationDate="2016-05-19T17:03:35.920" UserId="-1" Text="" />
  <row Id="1553" PostHistoryTypeId="2" PostId="572" RevisionGUID="4b26b9e0-77c3-4c0b-b2f4-be1a2b73724e" CreationDate="2016-05-19T17:39:18.857" UserId="75" Text="One strategy is to find a similar, working laptop on your favorite auction site, plug the old hard drive in, then use a laplink cable (null-printer cable) to transfer the files to another computer using [Interlink][1], or a null modem cable to transfer them with your favorite terminal emulator (I used Telix and TeleMate).&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.pcxt-micro.com/dos-interlink.html" />
  <row Id="1554" PostHistoryTypeId="6" PostId="559" RevisionGUID="5dadc296-90d3-4e84-9502-c7974ad79f34" CreationDate="2016-05-19T17:54:04.007" UserId="12" Comment="tweaked tags as discussed" Text="&lt;emulation&gt;&lt;basic&gt;&lt;cassette&gt;" />
  <row Id="1555" PostHistoryTypeId="24" PostId="559" RevisionGUID="5dadc296-90d3-4e84-9502-c7974ad79f34" CreationDate="2016-05-19T17:54:04.007" Comment="Proposed by 12 approved by 56, 218 edit id of 171" />
  <row Id="1556" PostHistoryTypeId="6" PostId="559" RevisionGUID="87b0bdb8-0f2d-4caa-a6f0-4a97dca17d60" CreationDate="2016-05-19T18:38:25.900" UserId="12" Comment="Try to add a tag?" Text="&lt;emulation&gt;&lt;basic&gt;&lt;cassette&gt;&lt;trs-80-model-iii&gt;" />
  <row Id="1557" PostHistoryTypeId="24" PostId="559" RevisionGUID="87b0bdb8-0f2d-4caa-a6f0-4a97dca17d60" CreationDate="2016-05-19T18:38:25.900" Comment="Proposed by 12 approved by 218 edit id of 172" />
  <row Id="1559" PostHistoryTypeId="2" PostId="573" RevisionGUID="85e512a3-f5fd-4b92-932f-089334f9c6d3" CreationDate="2016-05-19T19:04:11.007" UserId="335" Text="Ivan Drucker's [KansasFest talk](https://youtu.be/QmRG-SVZHgc) on [Slammer](http://ivanx.com/appleii/slammer/) has a lot of information you might find interesting." />
  <row Id="1560" PostHistoryTypeId="2" PostId="574" RevisionGUID="da465a75-6feb-4738-b7a8-ac172d39007c" CreationDate="2016-05-19T19:15:21.230" UserId="129" Text="This relates to [another question][1] about moving sprites to the border.&#xD;&#xA;&#xD;&#xA;On my experience, sprites confuse the raster timings very badly. I found this especially problematic, if sprites were moved to the left and right border (because moving to top or bottom doesn't require so precise timings).&#xD;&#xA;&#xD;&#xA;My impression were as if some, non-deterministic delay had been happen in the first pixel line of a sprite.&#xD;&#xA;&#xD;&#xA;What exactly happened? How could it be compensated?&#xD;&#xA;&#xD;&#xA;  [1]: http://retrocomputing.stackexchange.com/questions/97/how-to-move-sprites-to-the-border-on-c64" />
  <row Id="1561" PostHistoryTypeId="1" PostId="574" RevisionGUID="da465a75-6feb-4738-b7a8-ac172d39007c" CreationDate="2016-05-19T19:15:21.230" UserId="129" Text="How to avoid sprites confusing the raster timings on C64?" />
  <row Id="1562" PostHistoryTypeId="3" PostId="574" RevisionGUID="da465a75-6feb-4738-b7a8-ac172d39007c" CreationDate="2016-05-19T19:15:21.230" UserId="129" Text="&lt;commodore-64&gt;&lt;sprite&gt;" />
  <row Id="1563" PostHistoryTypeId="2" PostId="575" RevisionGUID="0c22aa74-451a-452e-8770-e1f14c231fa2" CreationDate="2016-05-19T19:24:37.790" UserId="301" Text="I got the same result -- it's a bug.  It does work at low-baud rate so you can use that as a workaround.  Type `L` when the `Cass?` prompt appears at startup.&#xD;&#xA;&#xD;&#xA;Looking at the output file the emulator is only saving the sync header of the saved program.  I tried this version 1.28, the most recent as of this writing.&#xD;&#xA;&#xD;&#xA;I'll send a bug report." />
  <row Id="1564" PostHistoryTypeId="5" PostId="559" RevisionGUID="9b43cef8-20f8-4596-a8d7-f8fa022c5681" CreationDate="2016-05-19T20:43:33.850" UserId="301" Comment="Added a quote to CSAVE which has to be there otherwise the command would give a type-mismatch (?TM) error." Text="I'm fooling around with Matthew Reed's TRS-80 Model 1/III/4 emulator for Windows (TRS32) and am have trouble using virtual cassettes.  I am using it to emulate a Model III with Level II BASIC.&#xD;&#xA;&#xD;&#xA;I have used the menu to insert the virtual cassette, and the emulator (as expected) creates a new, blank `.CAS` file.  Then I &quot;press&quot; REC+PLAY on the virtual recorder and type `CSAVE&quot;FOO`.  I see the counter advance and the `CSAVE` completes without error.&#xD;&#xA;&#xD;&#xA;Next, I rewound back to the beginning of the &quot;tape&quot;, &quot;pressed&quot; PLAY, and typed `CLOAD`.  I see the counter start moving and it advances through to the where it was at the end of the recorded program, but the `CLOAD` doesn't find anything and just sits there (like it would do on a real system back in the day when it couldn't find a program on the tape).&#xD;&#xA;&#xD;&#xA;What's going wrong?&#xD;&#xA;&#xD;&#xA;[Edit: added double-quote to CSAVE.  Admin; pls remove this part.]" />
  <row Id="1565" PostHistoryTypeId="24" PostId="559" RevisionGUID="9b43cef8-20f8-4596-a8d7-f8fa022c5681" CreationDate="2016-05-19T20:43:33.850" Comment="Proposed by 301 approved by -1 edit id of 173" />
  <row Id="1566" PostHistoryTypeId="5" PostId="559" RevisionGUID="fa5d5a08-5277-447d-b9ec-354a14ea1a09" CreationDate="2016-05-19T20:43:33.850" UserId="79" Comment="Added a quote to CSAVE which has to be there otherwise the command would give a type-mismatch (?TM) error." Text="I'm fooling around with Matthew Reed's TRS-80 Model 1/III/4 emulator for Windows (TRS32) and am have trouble using virtual cassettes.  I am using it to emulate a Model III with Level II BASIC.&#xD;&#xA;&#xD;&#xA;I have used the menu to insert the virtual cassette, and the emulator (as expected) creates a new, blank `.CAS` file.  Then I &quot;press&quot; REC+PLAY on the virtual recorder and type `CSAVE&quot;FOO`.  I see the counter advance and the `CSAVE` completes without error.&#xD;&#xA;&#xD;&#xA;Next, I rewound back to the beginning of the &quot;tape&quot;, &quot;pressed&quot; PLAY, and typed `CLOAD`.  I see the counter start moving and it advances through to the where it was at the end of the recorded program, but the `CLOAD` doesn't find anything and just sits there (like it would do on a real system back in the day when it couldn't find a program on the tape).&#xD;&#xA;&#xD;&#xA;What's going wrong?" />
  <row Id="1567" PostHistoryTypeId="5" PostId="559" RevisionGUID="14799eaa-ca79-4985-bef1-8ddcea8c39de" CreationDate="2016-05-19T20:43:47.623" UserId="218" Comment="added 2 characters in body" Text="I'm fooling around with Matthew Reed's TRS-80 Model 1/III/4 emulator for Windows (TRS32) and am have trouble using virtual cassettes.  I am using it to emulate a Model III with Level II BASIC.&#xD;&#xA;&#xD;&#xA;I have used the menu to insert the virtual cassette, and the emulator (as expected) creates a new, blank `.CAS` file.  Then I &quot;press&quot; REC+PLAY on the virtual recorder and type `CSAVE &quot;FOO&quot;`.  I see the counter advance and the `CSAVE` completes without error.&#xD;&#xA;&#xD;&#xA;Next, I rewound back to the beginning of the &quot;tape&quot;, &quot;pressed&quot; PLAY, and typed `CLOAD`.  I see the counter start moving and it advances through to the where it was at the end of the recorded program, but the `CLOAD` doesn't find anything and just sits there (like it would do on a real system back in the day when it couldn't find a program on the tape).&#xD;&#xA;&#xD;&#xA;What's going wrong?" />
  <row Id="1568" PostHistoryTypeId="5" PostId="550" RevisionGUID="be76b44b-d08b-4954-90bc-ff7b3c2c58a5" CreationDate="2016-05-19T20:44:30.917" UserId="621" Comment="Grammar; layout." Text="How can I move 800k disk images (Macintosh GCR) to a real Macintosh with a 1.44M floppy drive using Linux? The files are distributed as `.sea.bin` files, and I know (from experience with Apple IIgs) that the .bin file can be unpacked with `unar` and the `.sea` file contains an 819200 byte image at offset 84 in the file. I have extracted these before and been able to loopback mount the HFS image to grab AppleTalk boot blocks for use with netatalk 2.&#xD;&#xA;&#xD;&#xA;But how can I get the filesystem image on a floppy for, say, a MacOS install, or boot disk if the image is made for 800k disks and maintain all the forks and System folder, etc. when moving to a 1.44M disk?" />
  <row Id="1569" PostHistoryTypeId="24" PostId="550" RevisionGUID="be76b44b-d08b-4954-90bc-ff7b3c2c58a5" CreationDate="2016-05-19T20:44:30.917" Comment="Proposed by 621 approved by -1 edit id of 158" />
  <row Id="1570" PostHistoryTypeId="5" PostId="550" RevisionGUID="f32ea9bd-88e1-4e11-877a-4163a4e1494d" CreationDate="2016-05-19T20:44:30.917" UserId="79" Comment="Grammar; layout." Text="How can I move 800k disk images (Macintosh GCR) to a real Macintosh with a 1.44M floppy drive using Linux? The files are distributed as `.sea.bin` files, and I know (from experience with Apple IIgs) that the .bin file can be unpacked with `unar` and the `.sea` file contains an 819200 byte image at offset 84 in the file. I have extracted these before and been able to loopback mount the HFS image to grab AppleTalk boot blocks for use with netatalk 2.&#xD;&#xA;&#xD;&#xA;But how can I get the filesystem image on a floppy for, say, a MacOS install or boot disk if the image is made for 800k disks and maintain all the forks and System folder, etc. when moving to a 1.44M disk?" />
  <row Id="1575" PostHistoryTypeId="2" PostId="576" RevisionGUID="93bc90f3-5d10-4e23-b441-c8c8945e15cb" CreationDate="2016-05-19T21:30:28.767" UserId="75" Text="I use a USD$35 generic &quot;HD Video Converter SCART/HDMI to HDMI 720P/1080P&quot; box which accepts composite through the SCART connector and supports both PAL and NTSC signals. Into that I've plugged a passive composite to SCART adapter which also accepts L/R audio. This setup works with my French Amiga CD32.&#xD;&#xA;&#xD;&#xA;The XRGB-Mini scan doubler ($300) is supposed to work better and add less lag, but the price!" />
  <row Id="1576" PostHistoryTypeId="5" PostId="551" RevisionGUID="a570635c-2ce4-406c-aa3b-3f7feed27c32" CreationDate="2016-05-19T21:36:12.693" UserId="611" Comment="Added images and improved wording" Text="I have a wonderful Zenith SupersPORT 286 laptop (ZWE-0200-40) whose power circuitry seems faulty and it no longer powers up. I have useful material on the disk which I'd like to extract.&#xD;&#xA;&#xD;&#xA;![Zenith 286 laptop](http://i.stack.imgur.com/dfGRum.jpg)&#xD;&#xA;&#xD;&#xA;The disk (a Connor CP-343) interface is pre-IDE, and I can't seem to locate what type of interface it has.&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;[![enter image description here][2]][2]&#xD;&#xA;[![enter image description here][3]][3]&#xD;&#xA;&#xD;&#xA;Can anyone suggest how I might spin up the disk and image it? It's only about 32Mb, so less than a modern memory stick.&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;&#xD;&#xA;&lt;sup&gt;&lt;sub&gt;Yes: I realise I can cannibalise several scrap models, but at the moment I have found none on my continent at reasonable shipping prices or costs now they are museum pieces! I have a fair degree of experience at restoring older systems. Its just this form of disc interface is unknown to me.&lt;/sub&gt;&lt;/sup&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/d761om.jpg&#xD;&#xA;  [2]: http://i.stack.imgur.com/GoQcxm.jpg&#xD;&#xA;  [3]: http://i.stack.imgur.com/jP6syt.jpg" />
  <row Id="1577" PostHistoryTypeId="2" PostId="577" RevisionGUID="bcee0426-3deb-4f08-be55-3de996fade6c" CreationDate="2016-05-19T21:36:13.930" UserId="621" Text="According to Intel's *8080-8085 Assembly Language Programming* guide, the OP Code `20` corresponds to the Read Interrupt Mask (RIM) instruction, and `30` corresponds to the Set Interrupt Mask (SIM) instruction.&#xD;&#xA;&#xD;&#xA;[![RIM][1]][1]&#xD;&#xA;[![SIM][2]][2]&#xD;&#xA;&#xD;&#xA;[![Instruction Set Guide][3]][4]&#xD;&#xA;&#xD;&#xA;But these interrupts were only available on the 8085.  What did these instructions do on the earlier 8080 chipset?&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/zE5O7.png&#xD;&#xA;  [2]: http://i.stack.imgur.com/Em2ZP.png&#xD;&#xA;  [3]: http://i.stack.imgur.com/f2pC2m.png (click to enlarge)&#xD;&#xA;  [4]: http://i.stack.imgur.com/f2pC2.png" />
  <row Id="1578" PostHistoryTypeId="1" PostId="577" RevisionGUID="bcee0426-3deb-4f08-be55-3de996fade6c" CreationDate="2016-05-19T21:36:13.930" UserId="621" Text="Intel 8080 Read/Set Interrupt Mask Instructions" />
  <row Id="1579" PostHistoryTypeId="3" PostId="577" RevisionGUID="bcee0426-3deb-4f08-be55-3de996fade6c" CreationDate="2016-05-19T21:36:13.930" UserId="621" Text="&lt;assembly&gt;&lt;intel&gt;" />
  <row Id="1580" PostHistoryTypeId="2" PostId="578" RevisionGUID="133859e1-f122-4b82-a8ee-7d2a233fa470" CreationDate="2016-05-19T21:36:13.930" UserId="621" Text="The 8085 added two new instruction functions: SIM and RIM.&#xD;&#xA;&#xD;&#xA;These instructions differ from the 8080 instructions in that each has multiple functions.  The SIM instruction sets the interrupt mask and optionally writes one bit of data to the serial interface.  The RIM instruction reads one bit from the serial interface the interrupt mask into register A, the accumulator.&#xD;&#xA;&#xD;&#xA;There are also differences with regard to signal processing signal processing.  The new RST5.5, RST6.5, and RST7.5 hardware interrupts take priority over the Interrupt line at pin 14, the only interrupt on the 8080." />
  <row Id="1581" PostHistoryTypeId="5" PostId="578" RevisionGUID="186fae4f-bac4-43d7-aa67-a42ea821dca5" CreationDate="2016-05-19T21:41:46.993" UserId="621" Comment="added 24 characters in body" Text="The 8085 added two new instruction functions: SIM and RIM.&#xD;&#xA;&#xD;&#xA;These instructions differ from the 8080 instructions in that each has multiple functions.  The SIM instruction sets the interrupt mask and optionally writes one bit of data to the serial interface.  The RIM instruction reads one bit from the serial interface (if one is present) and the interrupt mask into register A, the accumulator.&#xD;&#xA;&#xD;&#xA;There are also differences with regard to signal processing signal processing.  The new RST5.5, RST6.5, and RST7.5 hardware interrupts take priority over the Interrupt line at pin 14, the only interrupt on the 8080." />
  <row Id="1582" PostHistoryTypeId="2" PostId="579" RevisionGUID="178fc311-4730-4d45-b7cd-e5ac58aa9913" CreationDate="2016-05-19T21:48:28.150" UserId="301" Text="To answer your specific question, the 0x20 and 0x30 opcodes on the 8080 were undefined.  In practice they were equivalent to NOP (0x00).&#xD;&#xA;&#xD;&#xA;A handy table of 8080 instructions can be found here:&#xD;&#xA;http://pastraiser.com/cpu/i8080/i8080_opcodes.html" />
  <row Id="1583" PostHistoryTypeId="5" PostId="578" RevisionGUID="d334e9ea-0528-456d-af0b-3eb0354e7f73" CreationDate="2016-05-19T21:50:55.243" UserId="621" Comment="added 44 characters in body" Text="The 8085 added two new instruction functions: SIM and RIM.&#xD;&#xA;&#xD;&#xA;These instructions differ from the 8080 instructions in that each has multiple functions.  The SIM instruction sets the interrupt mask and optionally writes one bit of data to the serial interface.  The RIM instruction reads one bit from the serial interface (if one is present) and the interrupt mask into register A, the accumulator.&#xD;&#xA;&#xD;&#xA;There are also differences with regard to signal processing signal processing.  The new RST5.5, RST6.5, and RST7.5 hardware interrupts take priority over the Interrupt line at pin 14, the only interrupt on the 8080.&#xD;&#xA;&#xD;&#xA;These instructions are NOPs on the 8080." />
  <row Id="1584" PostHistoryTypeId="5" PostId="577" RevisionGUID="adb76347-2371-4ec9-ab0b-f5ce9d997ab0" CreationDate="2016-05-19T21:52:51.330" UserId="621" Comment="added 31 characters in body" Text="According to Intel's *8080-8085 Assembly Language Programming* guide, the OP Code `20` corresponds to the Read Interrupt Mask (RIM) instruction, and `30` corresponds to the Set Interrupt Mask (SIM) instruction.&#xD;&#xA;&#xD;&#xA;[![RIM][1]][1]&#xD;&#xA;[![SIM][2]][2]&#xD;&#xA;&#xD;&#xA;[![Instruction Set Guide][3]][4]&#xD;&#xA;&#xD;&#xA;But these interrupts were only available on the 8085.  What did these instructions do on the earlier 8080 chipset?  How do they work on the 8085?&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/zE5O7.png&#xD;&#xA;  [2]: http://i.stack.imgur.com/Em2ZP.png&#xD;&#xA;  [3]: http://i.stack.imgur.com/f2pC2m.png (click to enlarge)&#xD;&#xA;  [4]: http://i.stack.imgur.com/f2pC2.png" />
  <row Id="1585" PostHistoryTypeId="2" PostId="580" RevisionGUID="ee6bca33-be1e-4de8-8a86-6b464b4030c1" CreationDate="2016-05-19T22:59:19.817" UserId="105" Text="I can think of several options:&#xD;&#xA;&#xD;&#xA;- The hardest one (because it is still WIP) is to remove the PAL ULA and get a NTSC ULA. NTSC ULA's existed for some clones intended for the American market. Today they are very rare chips.&#xD;&#xA;However, there are some projects that aim to design a direct replacement ULA using programable logic. These projects may support NTSC output with no effort. Besides, you would need to change the 4.43 MHz crystal with a 3.57 MHz one, and possibly some passives that belong to the LM1889 circuit.&#xD;&#xA;This option, once such replacement ULAs become available, has the advantage of having everything inside the case, with no extra equipment, so you end up with a true NTSC system, with 60 Hz vertical refresh. However, the main inconvenient is that games and demos expect vertical interrupt to occur every 20ms, or 69888 CPU clock cycles. Some of them rely on these timings to perform various multicolor effects, or achieve flicker-free sprite animation.&#xD;&#xA;As of today, the only ULA replacement readily available is from [Retroleum][1], and it is called Nebula. According to their FAQ they don't have plans for NTSC support, though.&#xD;&#xA;&#xD;&#xA;[![enter image description here][2]][2]&#xD;&#xA;&#xD;&#xA;[![enter image description here][3]][3]&#xD;&#xA;&#xD;&#xA;- It's a pity you don't have a SCART input in your TVs, as this tend to be very flexible with video timings, and as there is no modulation, but pure RGB, you actually get colour. In case you might have a TV with SCART inputs, [the Spectra interface][4] is able to generate a clean RGB signal from a Spectrum 48K, no matter if it has the composite mod applied or not.&#xD;&#xA;&#xD;&#xA;[![enter image description here][5]][5]&#xD;&#xA;&#xD;&#xA;- The remaining options are actually variations of the same idea: to convert the PAL composite video signal into a format understable by equipment available in America. AFAIK, American TVs understand composite video, YPrPb and HDMI, with some of them understanding VGA as well.&#xD;&#xA;These devices perform a full frame upscaling. That is: there is a memory that serves as frame buffer, actually, with enough capacity to hold two frames. The premise is that while the image from the composite video input is being stored in one frame buffer, the other one is being read at the required speed for the output image to be rendered.&#xD;&#xA;The advantage with this approach is that no matter the format or timings of the input image may have, the output image will have timings that will match your equipment. The disadvantage is that vertical refresh frequency won't be the same (specially if the input is PAL, which operates at 50 fields per second), so both frame producer and frame consumer won't be able to be in sync and sometimes, a frame that is being read by the frame consumer to produce the output will be rewritten in the middle of the operation by the frame producer, causing some [tearing][6] that may be visible if the screen features full screen animation such as full screen scrolling.&#xD;&#xA;&#xD;&#xA;There is this device. It is small, and is able to convert a composite video signal, either NTSC or PAL, into VGA, with the user having several choices about what resolution and refresh the outputted image will have.&#xD;&#xA;&#xD;&#xA;[![enter image description here][7]][7]&#xD;&#xA;&#xD;&#xA;[![enter image description here][8]][8]&#xD;&#xA;&#xD;&#xA;Here you can see that I am feeding the converter with a PAL signal from a PAL C64, while the output signal is rated for 75 Hz.&#xD;&#xA;&#xD;&#xA;[![enter image description here][9]][9]&#xD;&#xA;&#xD;&#xA;And this is the menu from which you can change the output resolution to better match your monitor's native resolution, if possible.&#xD;&#xA;&#xD;&#xA;[![enter image description here][10]][10]&#xD;&#xA;&#xD;&#xA;Analogously, there are converters from composite video signal to YPbPr or HDMI. All of these are upscalers, and hence, will suffer from the tearing effect described above.&#xD;&#xA;&#xD;&#xA;  [1]: http://www.retroleum.co.uk/&#xD;&#xA;  [2]: http://i.stack.imgur.com/NX60b.jpg&#xD;&#xA;  [3]: http://i.stack.imgur.com/O6t6m.jpg&#xD;&#xA;  [4]: http://www.fruitcake.plus.com/Sinclair/Spectrum/Spectra/SpectraInterface.htm&#xD;&#xA;  [5]: http://i.stack.imgur.com/yAVt9.png&#xD;&#xA;  [6]: https://en.wikipedia.org/wiki/Screen_tearing&#xD;&#xA;  [7]: http://i.stack.imgur.com/ajpBk.jpg&#xD;&#xA;  [8]: http://i.stack.imgur.com/Y0YJ2.jpg&#xD;&#xA;  [9]: http://i.stack.imgur.com/gJGPu.jpg&#xD;&#xA;  [10]: http://i.stack.imgur.com/I8F2z.jpg" />
  <row Id="1586" PostHistoryTypeId="2" PostId="581" RevisionGUID="5ce1c5ef-8f2e-4a08-b3ae-e1fbdcee49ad" CreationDate="2016-05-19T23:02:24.080" UserId="367" Text="I highly recommend the XRGB-Mini (it's often called &quot;framemeister&quot;) - got one for my Commodore's and it works flawlessly. I'm in Japan but all my computers are PAL versions (on purpose).&#xD;&#xA;The device is expensive, but if you start buying various adapters for a test you're likely to waste a lot of time and money anyway.&#xD;&#xA;&#xD;&#xA;If you're using a regular TV - any HDMI converter box might work, but you need to ensure your TV has 4:3/16:9 aspect ratio selection as HDMI by default is 16:9 - I have one of such boxes and my PC monitor has no aspect ratio selection so I retired it.&#xD;&#xA;&#xD;&#xA;Also, modern TV-sets are multi system anyway, even if the manual doesn't mention it (the chips are almost always multi system), it turned out that my TV-set supports PAL flawlessly, and ironically the manual specifically mentions that it only supports NTSC." />
  <row Id="1588" PostHistoryTypeId="2" PostId="582" RevisionGUID="e46931e4-fd64-43b2-a293-ec19bde38e46" CreationDate="2016-05-20T01:26:23.093" UserId="64" Text="The SGI O2 has a standard VGA port, but when I connect it to a CRT computer monitor, I do not get a signal.  Do I need a specific kind of monitor in order to use the O2?" />
  <row Id="1589" PostHistoryTypeId="1" PostId="582" RevisionGUID="e46931e4-fd64-43b2-a293-ec19bde38e46" CreationDate="2016-05-20T01:26:23.093" UserId="64" Text="What kind of computer monitor do I need for a SGI O2?" />
  <row Id="1590" PostHistoryTypeId="3" PostId="582" RevisionGUID="e46931e4-fd64-43b2-a293-ec19bde38e46" CreationDate="2016-05-20T01:26:23.093" UserId="64" Text="&lt;display&gt;&lt;sgi&gt;" />
  <row Id="1591" PostHistoryTypeId="2" PostId="583" RevisionGUID="0dabde6f-508f-497d-81e8-437642d58713" CreationDate="2016-05-20T01:31:33.397" UserId="367" Text="It needs to be sync-on-green capable (any good monitor should have this mentioned in the specs).&#xD;&#xA;&#xD;&#xA;But even then you may have issues, I have a few O2's and I have observed that sometimes one of my monitors (Dell U2410, SOG capable) really distorts the colors (towards green), replugging the cable solves the issue. I had no issues with an Octane with 13W3-&gt;VGA cable.&#xD;&#xA;&#xD;&#xA;There *are* devices on the market that can help, called sync stripper - such device could remove the sync signal from green channel and put it on the regular VGA sync line, but it might be cheaper to buy an old 15-17 inch monitor that supports SOG by default. (O2 won't do anything more than 1600x1200 without extreme tweaks anyway)." />
  <row Id="1592" PostHistoryTypeId="2" PostId="584" RevisionGUID="fe40f467-04c7-4296-b226-3c4e682e7dd5" CreationDate="2016-05-20T02:10:30.587" UserId="-1" Text="" />
  <row Id="1593" PostHistoryTypeId="2" PostId="585" RevisionGUID="0c5ad709-be9e-49d7-a9e8-9abe9c4c3227" CreationDate="2016-05-20T02:10:30.587" UserId="-1" Text="" />
  <row Id="1595" PostHistoryTypeId="2" PostId="586" RevisionGUID="fe62bdff-d344-42ce-abdc-b79b2eb609f3" CreationDate="2016-05-20T05:35:44.877" UserId="644" Text="I was browsing through tcrf.net and came across this page:&#xD;&#xA;&#xD;&#xA;https://tcrf.net/Tank&#xD;&#xA;&#xD;&#xA;Specifically, the following paragraph:&#xD;&#xA;&#xD;&#xA;    Tank is the first known arcade game to use solid-state ROM (in this case, a&#xD;&#xA;    tiny 2KB Mostek MK28000 chip) to store data. As such, it's the earliest&#xD;&#xA;    possible arcade game on this site and the oldest game on the site in general.&#xD;&#xA;&#xD;&#xA;This gives me the impression that this is the first possible arcade game (possibly earliest game period) that can have unused content because of its solid-state ROM, and by consequence a game cannot have unused content without solid-state ROM.&#xD;&#xA;&#xD;&#xA;My question is, what is the justification for this assertion? What's special about solid-state ROM that allows it to store unused content on a machine where a machine without it could still function but be guaranteed not to store unused content?" />
  <row Id="1596" PostHistoryTypeId="1" PostId="586" RevisionGUID="fe62bdff-d344-42ce-abdc-b79b2eb609f3" CreationDate="2016-05-20T05:35:44.877" UserId="644" Text="What is the relationship between solid-state ROM and unused content in arcade games?" />
  <row Id="1597" PostHistoryTypeId="3" PostId="586" RevisionGUID="fe62bdff-d344-42ce-abdc-b79b2eb609f3" CreationDate="2016-05-20T05:35:44.877" UserId="644" Text="&lt;rom&gt;" />
  <row Id="1599" PostHistoryTypeId="5" PostId="576" RevisionGUID="7ac5e439-48b5-46ee-a700-2c0193650eff" CreationDate="2016-05-20T06:01:16.720" UserId="75" Comment="Clarified wording." Text="I use a USD$35 generic &quot;HD Video Converter SCART/HDMI to HDMI 720P/1080P&quot; box which accepts composite through the SCART connector and supports both PAL and NTSC signals. Into that I've plugged a passive Composite-to-SCART adapter which also accepts L/R audio. This setup works with my French Amiga CD32.&#xD;&#xA;&#xD;&#xA;The XRGB-Mini scan doubler ($300) is supposed to work better and add less lag, but the price!" />
  <row Id="1600" PostHistoryTypeId="2" PostId="587" RevisionGUID="b2b06226-9b6b-4aa5-8486-caf0097b768a" CreationDate="2016-05-20T06:59:45.393" UserId="278" Text="I was researching the BBC Micro when I found the Sideways address space: a 16KiB memory space allowing access to up to 16 16KiB external blocks of ROM (or RAM).&#xD;&#xA;&#xD;&#xA;But 16 blocks of 16KiB is 256KiB, which is larger than the memory space itself! How did this work?" />
  <row Id="1601" PostHistoryTypeId="1" PostId="587" RevisionGUID="b2b06226-9b6b-4aa5-8486-caf0097b768a" CreationDate="2016-05-20T06:59:45.393" UserId="278" Text="How did the Sideways address space work?" />
  <row Id="1602" PostHistoryTypeId="3" PostId="587" RevisionGUID="b2b06226-9b6b-4aa5-8486-caf0097b768a" CreationDate="2016-05-20T06:59:45.393" UserId="278" Text="&lt;memory-layout&gt;&lt;acorn&gt;" />
  <row Id="1603" PostHistoryTypeId="5" PostId="576" RevisionGUID="b9052dd9-0c7d-440f-853d-a25908003372" CreationDate="2016-05-20T07:02:42.110" UserId="75" Comment="Added links, corrected a price." Text="I use a USD$35 generic &quot;HD Video Converter SCART/HDMI to HDMI 720P/1080P&quot; box (listed as &quot;HDV 8S&quot; on [this page](http://retrogaming.hazard-city.de/)) which accepts composite through the SCART connector and supports both PAL and NTSC signals. Into that I've plugged a passive Composite-to-SCART adapter which also accepts L/R audio. This setup works with my French Amiga CD32.&#xD;&#xA;&#xD;&#xA;The [XRGB-Mini scan doubler](http://retrogaming.hazard-city.de/framemeister.html) ($325+) is supposed to work better and add less lag, but the price!" />
  <row Id="1604" PostHistoryTypeId="2" PostId="588" RevisionGUID="40492ab1-6c2b-485c-bb04-9726de719dca" CreationDate="2016-05-20T08:33:46.640" UserId="651" Text="Just wanted to add a historical note (as this is  **retro** computing). All Manchester computers from the earliest days generated sound by attaching a speaker to a single bit of a register (usually the accumulator).&#xD;&#xA;&#xD;&#xA;This sound was used to  monitor the activity in the machine; because it if crashed or halted unexpectedly the sound would cease and if it was stuck in an infinite loop a characteristic whine would be produced which would alert the operators. From the Manchester Mark I through to MU5 the machine halls were alive with the sounds of the computer.&#xD;&#xA;&#xD;&#xA; Most users became accustomed to the patterns of sound produced and could tell one kind of software from another by the sound patterns produced, the sound of a compile was different from the sound of a sort, for example. It was also clear very early on that although a single bit flip produced the sound that sophisticated sound patterns of a polyphonic nature could be perceived from it.&#xD;&#xA;&#xD;&#xA;It did not take long for the many musicians working with the computers to turn this to musical use, and from that time all Manchester computers could sing. The main technique used was time multiplexing as previously described by @mcleod_ideafix.&#xD;&#xA;&#xD;&#xA;A very [early recording](http://curation.cs.manchester.ac.uk/digital60/www.digital60.org/media/mark_one_digital_music/mark_one_digital_music.mp3) exists from 1951 of this, and the origins of early sound from Manchester Computers can be read [here](http://www.manchester.ac.uk/discover/news/article/?id=3754).&#xD;&#xA;&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;&lt;sub&gt;&lt;sup&gt;BCT's Historical Sock Puppet Account&lt;/sup&gt;&lt;/sub&gt;" />
  <row Id="1605" PostHistoryTypeId="2" PostId="589" RevisionGUID="7d1e07cc-c88f-45c9-a636-48575e7ca3a5" CreationDate="2016-05-20T09:16:49.450" UserId="276" Text="Sideways ROM (also RAM in later models) was paged into the processor's address space.&#xD;&#xA;&#xD;&#xA;Sideways memory sat in the address range from $8000 to $BFFF.  The BBC Model B had four slots on the motherboard into which EPROMs could be put to occupy this space.  One of the slots was reserved for BBC Basic.  Expansion boards could be purchased to expand this to 16 slots.&#xD;&#xA;&#xD;&#xA;A register on Page 0 would switch one of the 16 EPROMs into the address space of the processor.&#xD;&#xA;&#xD;&#xA;Each of the 16 slots was allocated a section of non-paged memory in which it could keep its own status.&#xD;&#xA;&#xD;&#xA;The 16 blocks were used primarily for language ROMs.  As stated, one was the main BBC Basic ROM, others such as LISP, FORTH, etc were available.  The other use was for filing systems.  The Acorn DFS (Disk Filing System) for example would sit in one of these slots.&#xD;&#xA;&#xD;&#xA;On boot, the OS would interrogate each of the slots to see if it was occupied and would call an initialisation routine within each slot.&#xD;&#xA;&#xD;&#xA;Sideways ROMs could intercept software interrupts and post callback handlers.&#xD;&#xA;&#xD;&#xA;The sideways memory concept enabled the 64k addressing capability of the 6502 processor to be greatly expanded." />
  <row Id="1606" PostHistoryTypeId="5" PostId="589" RevisionGUID="80a2d915-65dd-42ff-81ac-e3a8d7be1d4f" CreationDate="2016-05-20T09:24:50.880" UserId="276" Comment="Corrected" Text="Sideways ROM (also RAM in later models) was paged into the processor's address space.&#xD;&#xA;&#xD;&#xA;Sideways memory sat in the address range from $8000 to $BFFF.  The BBC Model B had four slots on the motherboard into which EPROMs could be put to occupy this space.  One of the slots was reserved for BBC Basic.  Expansion boards could be purchased to expand this to 16 slots.&#xD;&#xA;&#xD;&#xA;A hardware register at address $FE30 (mirrored on Page 0 address $00F4) would switch one of the 16 EPROMs into the address space of the processor.&#xD;&#xA;&#xD;&#xA;Each of the 16 slots was allocated a section of non-paged memory in which it could keep its own status.&#xD;&#xA;&#xD;&#xA;The 16 blocks were used primarily for language ROMs.  As stated, one was the main BBC Basic ROM, others such as LISP, FORTH, etc were available.  The other use was for filing systems.  The Acorn DFS (Disk Filing System) for example would sit in one of these slots.&#xD;&#xA;&#xD;&#xA;On boot, the OS would interrogate each of the slots to see if it was occupied and would call an initialisation routine within each slot.&#xD;&#xA;&#xD;&#xA;Sideways ROMs could intercept software interrupts and post callback handlers.&#xD;&#xA;&#xD;&#xA;The sideways memory concept enabled the 64k addressing capability of the 6502 processor to be greatly expanded." />
  <row Id="1607" PostHistoryTypeId="5" PostId="589" RevisionGUID="f2dc4e29-c7c7-4966-8550-bec3eecf68b7" CreationDate="2016-05-20T09:30:29.007" UserId="276" Comment="Added detail" Text="Sideways ROM (also RAM in later models) was paged into the processor's address space.&#xD;&#xA;&#xD;&#xA;Sideways memory sat in the address range from $8000 to $BFFF.  The BBC Model B had four slots on the motherboard into which EPROMs could be put to occupy this space.  One of the slots was reserved for BBC Basic.  Expansion boards could be purchased to expand this to 16 slots.&#xD;&#xA;&#xD;&#xA;A hardware register at address $FE30 (mirrored on Page 0 address $00F4) would switch one of the 16 EPROMs into the address space of the processor.&#xD;&#xA;&#xD;&#xA;Each of the 16 slots was allocated a section of non-paged memory in which it could keep its own status.&#xD;&#xA;&#xD;&#xA;The 16 blocks were used primarily for language ROMs.  As stated, one was the main BBC Basic ROM, others such as LISP, FORTH, etc were available.  The other use was for filing systems.  The Acorn DFS (Disk Filing System) for example would sit in one of these slots.&#xD;&#xA;&#xD;&#xA;On boot, the OS would interrogate each of the slots to see if it was occupied and would call an initialisation routine within each slot.  A table of populated slots was set up at $02A1 - $02B0.&#xD;&#xA;&#xD;&#xA;To identify itself to this interrogation, the first few bytes of the ROM had to comply with a set format:  &#xD;&#xA;00-02 - Language entry  &#xD;&#xA;03-05 - Service entry  &#xD;&#xA;06 - ROM Type  &#xD;&#xA;07 - Offset to copyright statement  &#xD;&#xA;08 - Version number  &#xD;&#xA;09-xx - Title&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Sideways ROMs could intercept software interrupts and post callback handlers.&#xD;&#xA;&#xD;&#xA;The sideways memory concept enabled the 64k addressing capability of the 6502 processor to be greatly expanded." />
  <row Id="1608" PostHistoryTypeId="5" PostId="589" RevisionGUID="44501b3c-56f3-4e72-899a-2da61152a66f" CreationDate="2016-05-20T09:36:12.003" UserId="276" Comment="Added detail" Text="Sideways ROM (also RAM in later models) was paged into the processor's address space.&#xD;&#xA;&#xD;&#xA;Sideways memory sat in the address range from $8000 to $BFFF.  The BBC Model B had four slots on the motherboard into which EPROMs could be put to occupy this space.  One of the slots was reserved for BBC Basic.  Expansion boards could be purchased to expand this to 16 slots.&#xD;&#xA;&#xD;&#xA;A hardware register at address $FE30 (mirrored on Page 0 address $00F4) would switch one of the 16 EPROMs into the address space of the processor.&#xD;&#xA;&#xD;&#xA;Each of the 16 slots was allocated a section of non-paged memory in which it could keep its own status.&#xD;&#xA;&#xD;&#xA;The 16 blocks were used primarily for language ROMs.  As stated, one was the main BBC Basic ROM, others such as LISP, FORTH, etc were available.  The other use was for filing systems.  The Acorn DFS (Disk Filing System) for example would sit in one of these slots.&#xD;&#xA;&#xD;&#xA;On boot, the OS would interrogate each of the slots to see if it was occupied and would call an initialisation routine within each slot.  A table of populated slots was set up at $02A1 - $02B0.&#xD;&#xA;&#xD;&#xA;To identify itself to this interrogation, the first few bytes of the ROM had to comply with a set format:  &#xD;&#xA;00-02 - Language entry (initialisation)  &#xD;&#xA;03-05 - Service entry  &#xD;&#xA;06 - ROM Type (Language / Filing System / Second Processor)  &#xD;&#xA;07 - Offset to copyright statement  &#xD;&#xA;08 - Version number  &#xD;&#xA;09-xx - Title&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Sideways ROMs could intercept software interrupts and post callback handlers.  &#xD;&#xA;Calls into the ROMs executed a jump to the Service Entry with an entry code in the Accumulator.&#xD;&#xA;&#xD;&#xA;The sideways memory concept enabled the 64k addressing capability of the 6502 processor to be greatly expanded." />
  <row Id="1609" PostHistoryTypeId="2" PostId="590" RevisionGUID="1f6a2d42-d338-4eab-9d02-c92103f5d8e9" CreationDate="2016-05-20T09:36:38.567" UserId="301" Text="Excess capacity.  ROM chips come in standard sizes based on powers of 2 and it is quite unlikely a particular size will be exactly what a game needs.  For example, suppose a game displays numbers that are 8 x 8 pixels in size.  It will need the digits from 0 to 9, each digit needs 64 bits so a ROM of 640 bits is required.  That could be accommodated with a 512 bit and 128 bit ROM, but in terms of support circuitry, assembly costs and so on it likely is cheaper to use a 1024 bit ROM and not use the extra 384 bits.&#xD;&#xA;&#xD;&#xA;Nonetheless, it is possible to have excess capacity without using ROMs.  But such hand-rolled solutions will naturally avoid wasting components.  Consider the arcade game Space Race.  Here's a screenshot of it in action:&#xD;&#xA;&#xD;&#xA;[![Space Race with two little rockets][1]][1]&#xD;&#xA;&#xD;&#xA;The game does not have a ROM.  Instead, it uses a grid of wires to represent the rocketship picture and connects them wherever there is to be a white dot.  You can see it this subset of the schematic:&#xD;&#xA;&#xD;&#xA;[![enter image description here][2]][2]&#xD;&#xA;&#xD;&#xA;Isn't that just wonderful?  Notice how not a dot is wasted.  They were even clever enough to lay down only half of the rocketship and use extra circuitry to display the mirror image of it to draw the right side of the ship.&#xD;&#xA;&#xD;&#xA;You might ask if the score digits are stored in a wire grid.  They are not.  In fact, they're done by using a special-purpose chip used in handheld calculators that converts a binary number from 0 to 9 into 7 output bits that control the 7 line segments that make up the number.  That binary number is sent to the chip using 4 wires which is actually 16 combinations.  The game will only send combinations 0 through 9, what would happen if 10 through 15 were sent?&#xD;&#xA;&#xD;&#xA;What, indeed?  It depends on the chips used, but let's say for the sake of argument that the chip will do something useful with those numbers.  Maybe light up segments that look like the letters A through F.&#xD;&#xA;&#xD;&#xA;Aha!  In that case the game has unused content!  It's pretty boring unused content, but unused content nonetheless and not a ROM in sight.&#xD;&#xA;&#xD;&#xA;Nonetheless, I think it is fair and reasonable to discount these cases.  And practical, too..  ROM chips have another advantage.  We can look at their contents and figure out within the context of the hardware and software what images, audio, etc. they represent.  We can do that with the chips on board, but they're all special cases requiring familiarity which each individual chip and how it is connected.  A much more difficult proposition and as I've mentioned before, very unlikely to yield much of interest.&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/wEeKk.png&#xD;&#xA;  [2]: http://i.stack.imgur.com/eLaK5.png" />
  <row Id="1610" PostHistoryTypeId="2" PostId="591" RevisionGUID="5a9bb268-499a-4822-b6b7-b27fba7938a6" CreationDate="2016-05-20T09:38:29.847" UserId="105" Text="I'm not sure of what is exactly what you are asking, but I will try:&#xD;&#xA;&#xD;&#xA;Solid-state ROMs (and solid/state memories in general) are not built the size you desire, but they came always (afaik) with sizes that are powers of 2. This is because these memories are addressed using a binary number with N bits; with N bits you can represent 2^N memory cells, so the capacity is always a power of 2. Often, the physical layout of these memories is a square, so not every power of 2 is available. Often, the exponent of the power is required to be even. That is because it's very common to have 16k DRAMs, 64k DRAMs, and 256k DRAMs but it's much less common to find 32k or 128k DRAMs (which usually are built by recycling defective 64k and 256k DRAMs)&#xD;&#xA;&#xD;&#xA;So although you (and the CPU) sees memory as a more or less large linear array of bytes, the actual layout is more a square, so every size is available. Only those that allow such physical layout to be designed.&#xD;&#xA;&#xD;&#xA;But your program size does not need to be a power of 2. In fact, it's very common that the size will be any number, so when you store the program into the ROM, there will be always some unused cells.&#xD;&#xA;&#xD;&#xA;These cells, for masked and EPROM ROMs, are simply not &quot;programmed&quot; (or burned) and will likely have the value $FF (all 1's because to burn a bit is to blow some kind of fuse that turns a logic-1 connection into a 0-logic connection, so non burned bits will have all the value 1)&#xD;&#xA;&#xD;&#xA;For ROM containing boot code, OS entry points and so on, is very common to have &quot;gaps&quot; inside it. That is, regions with nothing more than $FF surrounded by regions with actual code and data. These gaps are the result of the OS needing to have specific code in specific addresses (like a NMI handler, jump tables, LUT tables at 256-byte boundaries to allow for fast translation, etc)" />
  <row Id="1611" PostHistoryTypeId="5" PostId="589" RevisionGUID="2d442984-16ab-4f99-828a-a85712316c39" CreationDate="2016-05-20T10:10:06.337" UserId="276" Comment="Added detail, formatting" Text="Sideways ROM (also RAM in later models) was paged into the processor's address space.&#xD;&#xA;&#xD;&#xA;Sideways memory sat in the address range from $8000 to $BFFF.  The BBC Model B had four slots on the motherboard into which EPROMs could be put to occupy this space.  One of the slots was reserved for BBC Basic.  Expansion boards could be purchased to expand this to 16 slots.&#xD;&#xA;&#xD;&#xA;A hardware register at address $FE30 (mirrored on Page 0 address $00F4) would switch one of the 16 EPROMs into the address space of the processor.&#xD;&#xA;&#xD;&#xA;Each of the 16 slots was allocated a section of non-paged memory in which it could keep its own status.&#xD;&#xA;&#xD;&#xA;The 16 blocks were used primarily for language ROMs.  As stated, one was the main BBC Basic ROM, others such as LISP, FORTH, etc were available.  The other use was for filing systems.  The Acorn DFS (Disk Filing System) for example would sit in one of these slots.  Only one language could be active at a time but there could be multiple filing systems active.&#xD;&#xA;&#xD;&#xA;On boot, the OS would interrogate each of the slots to see if it was occupied and would call an initialisation routine within each slot.  A table of populated slots was set up at $02A1 - $02B0.&#xD;&#xA;&#xD;&#xA;To identify itself to this interrogation, the first few bytes of the ROM had to comply with a set format:  &#xD;&#xA;&#xD;&#xA;    00-02 - Language entry (initialisation)  &#xD;&#xA;    03-05 - Service entry  &#xD;&#xA;    06 - ROM Type (Language / Filing System / Second Processor)  &#xD;&#xA;    07 - Offset to copyright statement  &#xD;&#xA;    08 - Version number  &#xD;&#xA;    09-xx - Title&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Sideways ROMs could intercept software interrupts and post callback handlers.  &#xD;&#xA;Calls into the ROMs executed a jump to the Service Entry with an entry code in the Accumulator.&#xD;&#xA;&#xD;&#xA;The sideways memory concept enabled the 64k addressing capability of the 6502 processor to be greatly expanded." />
  <row Id="1612" PostHistoryTypeId="5" PostId="534" RevisionGUID="01627ebb-8f11-48c9-82c0-27c93e805915" CreationDate="2016-05-20T10:18:20.983" UserId="44" Comment="Minor grammar; formatting (mainly to beat the 6+ char limit)" Text="Off the top of my head I can think of two reasons, there are probably more.&#xD;&#xA;&#xD;&#xA;The first reason is that these variables may be set by a routine each frame, and then a lot of code uses them during the time of the whole frame. Every interrupt routine that fires during that frame may want to read out the current direction.&#xD;&#xA;&#xD;&#xA;The second reason is that, in a real-time embedded environment&lt;sup&gt;1&lt;/sup&gt; like a console game, it's important to know that you have enough resources to handle the worst-case conditions. One resource is _time_; you want to make sure that everything you want to perform can be handled in one frame update. Another resource, and relevant in this case, is _memory_. Whatever happens, you can't run out of memory&lt;sup&gt;2&lt;/sup&gt;. There's no swap space, you can't pop up a requester, or kill off something else. Add to this the fact that embedded platforms like this do not have any form of memory protection, so if you write too much on the stack &amp;mdash; _game over, man_.&#xD;&#xA;&#xD;&#xA;The combination of these two makes it reasonable to reserve RAM for variables like this.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;----------&#xD;&#xA;&lt;sup&gt;1. These platforms still exist today, think control systems for robots, your fridge, basically every &quot;hidden&quot; microcontroller.&lt;/sup&gt;&#xD;&#xA;&#xD;&#xA;&lt;sup&gt;2. I've recently worked with an operating system designed for high reliability. It had every type of dynamic allocations removed. No malloc() for you.&lt;/sup&gt;" />
  <row Id="1613" PostHistoryTypeId="24" PostId="534" RevisionGUID="01627ebb-8f11-48c9-82c0-27c93e805915" CreationDate="2016-05-20T10:18:20.983" Comment="Proposed by 44 approved by 333 edit id of 176" />
  <row Id="1614" PostHistoryTypeId="5" PostId="589" RevisionGUID="b9b02b0d-bba8-4308-a03c-45a088d85b2f" CreationDate="2016-05-20T10:23:53.970" UserId="276" Comment="Added detail" Text="Sideways ROM (also RAM in later models) was paged into the processor's address space.&#xD;&#xA;&#xD;&#xA;Sideways memory sat in the address range from $8000 to $BFFF.  The BBC Model B had four slots on the motherboard into which EPROMs could be put to occupy this space.  One of the slots was reserved for BBC Basic.  Expansion boards could be purchased to expand this to 16 slots.&#xD;&#xA;&#xD;&#xA;A hardware register at address $FE30 (mirrored on Page 0 address $00F4) would switch one of the 16 EPROMs into the address space of the processor.&#xD;&#xA;&#xD;&#xA;Each of the 16 slots was allocated a section of non-paged memory in which it could keep its own status.&#xD;&#xA;&#xD;&#xA;The 16 blocks were used primarily for language ROMs.  As stated, one was the main BBC Basic ROM, others such as LISP, FORTH, etc were available.  The other use was for filing systems.  The Acorn DFS (Disk Filing System) for example would sit in one of these slots.  Only one language could be active at a time but there could be multiple filing systems active.&#xD;&#xA;&#xD;&#xA;On boot, the OS would interrogate each of the slots to see if it was occupied and would call an initialisation routine within each slot.  A table of populated slots was set up at $02A1 - $02B0.&#xD;&#xA;&#xD;&#xA;To identify itself to this interrogation, the first few bytes of the ROM had to comply with a set format:  &#xD;&#xA;&#xD;&#xA;    00-02 - Language entry (initialisation)  &#xD;&#xA;    03-05 - Service entry  &#xD;&#xA;    06 - ROM Type (Language / Filing System / Second Processor)  &#xD;&#xA;    07 - Offset to copyright statement  &#xD;&#xA;    08 - Version number  &#xD;&#xA;    09-xx - Title&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Sideways ROMs could intercept software interrupts and post callback handlers.  &#xD;&#xA;At initialisation, they could reserve a section of the main RAM for their own use.  This would be reserved for the ROM by the OS, starting at address $0E00. raising the OSHWM (Operating System High Water Mark) and reducing the working RAM available for the loading and operating of programs.&#xD;&#xA;&#xD;&#xA;Calls into the ROMs executed a jump to the Service Entry with an entry code in the Accumulator.&#xD;&#xA;&#xD;&#xA;The sideways memory concept enabled the 64k addressing capability of the 6502 processor to be greatly expanded." />
  <row Id="1615" PostHistoryTypeId="2" PostId="592" RevisionGUID="21efe811-326d-4360-8c83-964769a86ff5" CreationDate="2016-05-20T10:41:38.223" UserId="423" Text="It is hard to explain since it depends on which sprite is displayed and how many of them. It is also important to know if you are at normal or bad scanline. There is a great article on this subject: `Missing Cycles` by Pasi 'Albert' Ojala.&#xD;&#xA;&#xD;&#xA;Here is the link: http://www.antimon.org/dl/c64/code/missing.txt" />
  <row Id="1618" PostHistoryTypeId="5" PostId="548" RevisionGUID="31a1c5a9-9f01-43d7-80c1-769b80241977" CreationDate="2016-05-20T11:04:05.317" UserId="621" Comment="Moved broken markdown from excerpt to tag wiki, added full tag wiki" Text="Use this tag for questions about the [tag:basic] language.&#xD;&#xA;&#xD;&#xA;Questions with this tag should be about the language in general.  Dialect-specific questions should use the dialect-specific tags: [tag:applesoft-basic], [tag:atari-basic], [tag:color-basic] and [tag:integer-basic]." />
  <row Id="1619" PostHistoryTypeId="24" PostId="548" RevisionGUID="31a1c5a9-9f01-43d7-80c1-769b80241977" CreationDate="2016-05-20T11:04:05.317" Comment="Proposed by 621 approved by 79, 105 edit id of 162" />
  <row Id="1620" PostHistoryTypeId="5" PostId="567" RevisionGUID="f72a8bbf-7025-42f8-aa55-bdc0c9dee8df" CreationDate="2016-05-20T11:04:17.287" UserId="621" Comment="added 105 characters in body" Text="Atari BASIC is a BASIC interpreter that shipped with the Atari 8-bit family of 6502-based home computers." />
  <row Id="1621" PostHistoryTypeId="24" PostId="567" RevisionGUID="f72a8bbf-7025-42f8-aa55-bdc0c9dee8df" CreationDate="2016-05-20T11:04:17.287" Comment="Proposed by 621 approved by 79, 105 edit id of 166" />
  <row Id="1622" PostHistoryTypeId="5" PostId="564" RevisionGUID="44f9c315-3985-4f36-8e38-d2feaf9de732" CreationDate="2016-05-20T11:04:39.037" UserId="621" Comment="added 57 characters in body" Text="For questions about programming languages and constructs." />
  <row Id="1623" PostHistoryTypeId="24" PostId="564" RevisionGUID="44f9c315-3985-4f36-8e38-d2feaf9de732" CreationDate="2016-05-20T11:04:39.037" Comment="Proposed by 621 approved by 79, 105 edit id of 161" />
  <row Id="1624" PostHistoryTypeId="5" PostId="568" RevisionGUID="284eb9c3-a15a-4cf9-8326-7d220466db8c" CreationDate="2016-05-20T11:05:28.740" UserId="621" Comment="added 66 characters in body" Text="For questions related to the Atari BASIC interpreter and language." />
  <row Id="1625" PostHistoryTypeId="24" PostId="568" RevisionGUID="284eb9c3-a15a-4cf9-8326-7d220466db8c" CreationDate="2016-05-20T11:05:28.740" Comment="Proposed by 621 approved by 79, 105 edit id of 167" />
  <row Id="1626" PostHistoryTypeId="5" PostId="585" RevisionGUID="dc3d3759-06f5-4b00-a94b-b584994e0c77" CreationDate="2016-05-20T11:37:43.233" UserId="621" Comment="added 62 characters in body" Text="For questions related to cartridge-based game and applications" />
  <row Id="1627" PostHistoryTypeId="24" PostId="585" RevisionGUID="dc3d3759-06f5-4b00-a94b-b584994e0c77" CreationDate="2016-05-20T11:37:43.233" Comment="Proposed by 621 approved by 105, 79 edit id of 175" />
  <row Id="1628" PostHistoryTypeId="5" PostId="552" RevisionGUID="6ec61a28-ea62-411f-b605-f0daff4173b4" CreationDate="2016-05-20T12:25:46.603" UserId="12" Comment="added 731 characters in body" Text="As far as I know, all of those models, either the 386 or 286 variants, all used [ESDI](https://en.wikipedia.org/wiki/Enhanced_Small_Disk_Interface) disks. I'd like my assertion to be proven by a photo of the drive connections, and (ideally) what it plugs into on the computer itself.&#xD;&#xA;&#xD;&#xA;These drives have built-in controllers, but the adapters are quite special; I think you are looking at finding an Adaptec or Western Digital adapter (which will probably be ISA), and a compatible PC. As pointed out in the comments, some adapters might use the MCA bus, so this could complicate finding the right hardware match.&#xD;&#xA;&#xD;&#xA;ESDI uses complicated daisy-chained cables with terminators, and each drive has to be addressed properly. Depending on what we find once we hook up the drive, we might have to worry about drive geometry and hard vs. soft sectors.&#xD;&#xA;&#xD;&#xA;Older Windows might work to actually spin up and read the drive, but I suspect using BSD or Linux (both of which have ESDI support as a kernel default or compile option) might be more useful because there will be lots of tinkering.&#xD;&#xA;&#xD;&#xA;You could also consider sending the drive off to a data recovery service.&#xD;&#xA;&#xD;&#xA;------&#xD;&#xA;&#xD;&#xA;Ok, based on the pics I have to amend or delete my answer. This appears to be an ATA/IDE drive [made specifically for Zenith](http://theref.mfarris.com/hard_drives/conner_peripherals/conner_peripherals_cp-343.html) for this model of computer.&#xD;&#xA;&#xD;&#xA;So, it probably requires a custom XT/ATA 20-pin adapter of some sort, probably only from Zenith. The adapter will be on the laptop motherboard or perhaps [underneath the keyboard](https://www.reddit.com/r/vintagecomputing/comments/30xssg/looking_for_a_zenith_supersport_286_hard_disk/).&#xD;&#xA;&#xD;&#xA;Based on that last link, you _might_ be able to [tear the adapter out and use it to hook up a regular IDE controller](http://imgur.com/wCMwPlF) on any Linux box to the laptop drive." />
  <row Id="1629" PostHistoryTypeId="5" PostId="586" RevisionGUID="85d112a1-480e-4bec-b68d-abc20c51b319" CreationDate="2016-05-20T13:03:12.597" UserId="644" Comment="Made concept of &quot;unused content&quot; more explicit" Text="I was browsing through tcrf.net, which specializes in displaying unused programming and content left in games by developers, and came across this page:&#xD;&#xA;&#xD;&#xA;https://tcrf.net/Tank&#xD;&#xA;&#xD;&#xA;Specifically, the following paragraph:&#xD;&#xA;&#xD;&#xA;    Tank is the first known arcade game to use solid-state ROM (in this case, a&#xD;&#xA;    tiny 2KB Mostek MK28000 chip) to store data. As such, it's the earliest&#xD;&#xA;    possible arcade game on this site and the oldest game on the site in general.&#xD;&#xA;&#xD;&#xA;This gives me the impression that this is the first possible arcade game (possibly earliest game period) that can have unused programming because of its solid-state ROM, and by consequence a game cannot have unused content without solid-state ROM.&#xD;&#xA;&#xD;&#xA;My question is, what is the justification for this assertion? What's special about solid-state ROM that allows it to store unused content on a machine where a machine without it could still function but be guaranteed to only store content that the player can access?" />
  <row Id="1630" PostHistoryTypeId="4" PostId="586" RevisionGUID="85d112a1-480e-4bec-b68d-abc20c51b319" CreationDate="2016-05-20T13:03:12.597" UserId="644" Comment="Made concept of &quot;unused content&quot; more explicit" Text="What is the relationship between solid-state ROM and inaccessable content in arcade games?" />
  <row Id="1631" PostHistoryTypeId="5" PostId="552" RevisionGUID="435cbbed-d1ac-4e74-b320-215e292492d0" CreationDate="2016-05-20T13:40:53.023" UserId="12" Comment="Keep my old answer around for posterity, but strike it out." Text="&lt;strike&gt;As far as I know, all of those models, either the 386 or 286 variants, all used [ESDI](https://en.wikipedia.org/wiki/Enhanced_Small_Disk_Interface) disks. I'd like my assertion to be proven by a photo of the drive connections, and (ideally) what it plugs into on the computer itself.&#xD;&#xA;&#xD;&#xA;These drives have built-in controllers, but the adapters are quite special; I think you are looking at finding an Adaptec or Western Digital adapter (which will probably be ISA), and a compatible PC. As pointed out in the comments, some adapters might use the MCA bus, so this could complicate finding the right hardware match.&#xD;&#xA;&#xD;&#xA;ESDI uses complicated daisy-chained cables with terminators, and each drive has to be addressed properly. Depending on what we find once we hook up the drive, we might have to worry about drive geometry and hard vs. soft sectors.&#xD;&#xA;&#xD;&#xA;Older Windows might work to actually spin up and read the drive, but I suspect using BSD or Linux (both of which have ESDI support as a kernel default or compile option) might be more useful because there will be lots of tinkering.&lt;/strike&gt;&#xD;&#xA;&#xD;&#xA;You could also consider sending the drive off to a data recovery service.&#xD;&#xA;&#xD;&#xA;Ok, based on the pics I have to amend or delete my answer. This appears to be an ATA/IDE drive [made specifically for Zenith](http://theref.mfarris.com/hard_drives/conner_peripherals/conner_peripherals_cp-343.html) for this model of computer.&#xD;&#xA;&#xD;&#xA;So, it probably requires a custom XT/ATA 20-pin adapter of some sort, probably only from Zenith. The adapter will be on the laptop motherboard or perhaps [underneath the keyboard](https://www.reddit.com/r/vintagecomputing/comments/30xssg/looking_for_a_zenith_supersport_286_hard_disk/).&#xD;&#xA;&#xD;&#xA;Based on that last link, you _might_ be able to [tear the special adapter out and use it to hook up a regular IDE adapter](http://imgur.com/wCMwPlF) on any Linux box to the laptop drive." />
  <row Id="1632" PostHistoryTypeId="5" PostId="559" RevisionGUID="d01f38be-0dd1-4dce-8b74-41817fc4f353" CreationDate="2016-05-20T14:13:53.450" UserId="218" Comment="added 140 characters in body" Text="I'm fooling around with Matthew Reed's TRS-80 Model 1/III/4 emulator for Windows (TRS32) and am have trouble using virtual cassettes.  I am using it to emulate a Model III with Level II BASIC.&#xD;&#xA;&#xD;&#xA;I have used the menu to insert the virtual cassette, and the emulator (as expected) creates a new, blank `.CAS` file.  Then I &quot;press&quot; REC+PLAY on the virtual recorder and type `CSAVE &quot;FOO&quot;`.  I see the counter advance and the `CSAVE` completes without error.&#xD;&#xA;&#xD;&#xA;(Semi off-topic note -- I had forgotten that `CSAVE` and `CLOAD` only pay attention to the first character of the filename you give it.)&#xD;&#xA;&#xD;&#xA;Next, I rewound back to the beginning of the &quot;tape&quot;, &quot;pressed&quot; PLAY, and typed `CLOAD`.  I see the counter start moving and it advances through to the where it was at the end of the recorded program, but the `CLOAD` doesn't find anything and just sits there (like it would do on a real system back in the day when it couldn't find a program on the tape).&#xD;&#xA;&#xD;&#xA;What's going wrong?" />
  <row Id="1633" PostHistoryTypeId="5" PostId="573" RevisionGUID="061c40f2-23e6-420f-861c-3e5bb8b96d7c" CreationDate="2016-05-20T14:55:07.957" UserId="335" Comment="Expanded to non-link-only answer. Also included Integer BASIC variant of Lam Technique." Text="Although the [S. H. Lam Technique](http://www.llx.com/~nparker/a2/shlam.html) is for Applesoft BASIC, a slight variation works fine in Integer BASIC. It fills the keyboard buffer with keystrokes, then calls the monitor parse-and-process routine to execute the keystrokes as a monitor command.&#xD;&#xA;&#xD;&#xA;    10 DIM H$(23):H$=&quot;300:AD 30 C0 60 N D9C6G&quot;&#xD;&#xA;    20 FOR X=1 TO LEN(H$): POKE 511+X, ASC(H$(X,X)): NEXT X&#xD;&#xA;    30 POKE 72,0: CALL -144&#xD;&#xA;    40 PRINT &quot;HELLO&quot;&#xD;&#xA;    50 END&#xD;&#xA;    &#xD;&#xA;For more information on the Lam Technique, and on modern variations of it, see Ivan Drucker's [KansasFest talk](https://youtu.be/QmRG-SVZHgc) on [Slammer](http://ivanx.com/appleii/slammer/)." />
  <row Id="1634" PostHistoryTypeId="2" PostId="593" RevisionGUID="ac0ab7ca-3ea9-40d0-9991-23dc9b973b66" CreationDate="2016-05-20T15:38:50.090" UserId="621" Text="Another thought:&#xD;&#xA;&#xD;&#xA;When most people refer to &quot;unused content&quot; in games, they're traditionally referring to UI changes.  But what about unused memory addresses or the values at that memory?  What about debugging information.  Ideally, most debugging symbols and information would be stripped for release, but this is not always the case.  Let's look at the [Super Metroid memory map][1] as an example:&#xD;&#xA;&#xD;&#xA;    7E:008D - 7E:008E    Controller 2 Input. ALL Controller 2 Unused (Debug mode)&#xD;&#xA;    # ...&#xD;&#xA;    7E:05D5 - 7E:05D6    Saved X-Scroll position ($0911). Unused (Debug mode)&#xD;&#xA;    7E:05D7 - 7E:05D8    Saved Y-Scroll position ($0915). Unused (Debug mode)&#xD;&#xA;    # ...&#xD;&#xA;    7E:0617 - 7E:0618    0 = allow Soft Reset via Start+Select+L+R. Unused (Debug mode)&#xD;&#xA;    # ...&#xD;&#xA;&#xD;&#xA;etc.&#xD;&#xA;&#xD;&#xA;I would say it is unlikely for a game like Space Race to include this type of information.  Games that use an array of diodes have their circuitry are constructed by hand, and for production the circuits are changed to remove any unused debug logic, if they ever had any.&#xD;&#xA;&#xD;&#xA;Let's look at a memory map and crash in the production version of MechWarrior for the SNES:&#xD;&#xA;&#xD;&#xA;[![MechWarrior Memory Map][2]][3]&#xD;&#xA;&#xD;&#xA;Ideally, this screen will never be shown in production under normal circumstances (without directly modifying the hardware and/or software), and could potentially be considered inaccessible content.&#xD;&#xA;&#xD;&#xA;The idea of using/logging memory locations, or presenting this type of memory map to the user is a benefit of using ROM-based memory over diodes.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://drewseph.zophar.net/Kejardon/RAMMap.txt&#xD;&#xA;  [2]: http://i.stack.imgur.com/0tSAtm.jpg (click to enlarge)&#xD;&#xA;  [3]: http://i.stack.imgur.com/0tSAt.jpg" />
  <row Id="1636" PostHistoryTypeId="2" PostId="594" RevisionGUID="515a58de-394a-4903-820b-3c9adfa940e3" CreationDate="2016-05-20T15:49:51.343" UserId="-1" Text="" />
  <row Id="1637" PostHistoryTypeId="2" PostId="595" RevisionGUID="6fb07a68-a4f0-42a8-b414-63f79ddba1b9" CreationDate="2016-05-20T15:49:51.343" UserId="-1" Text="" />
  <row Id="1638" PostHistoryTypeId="6" PostId="97" RevisionGUID="59fc914b-fe49-4814-8e28-9fea1b9878a8" CreationDate="2016-05-20T16:55:17.307" UserId="278" Comment="Added [tag:sprite] tag." Text="&lt;commodore-64&gt;&lt;sprite&gt;" />
  <row Id="1639" PostHistoryTypeId="24" PostId="97" RevisionGUID="59fc914b-fe49-4814-8e28-9fea1b9878a8" CreationDate="2016-05-20T16:55:17.307" Comment="Proposed by 278 approved by 129 edit id of 179" />
  <row Id="1640" PostHistoryTypeId="5" PostId="573" RevisionGUID="8240f8e5-4bd2-4285-af6f-e01c5d79ad06" CreationDate="2016-05-20T17:09:48.713" UserId="335" Comment="Added explanation of the example program before diving into answering the question." Text="In this case, I don't think it's assembly language. I think it's just obfuscation. In [this Integer BASIC disassembly](http://www.easy68k.com/paulrsm/6502/INTLST.TXT), 202/203 ($CA/$CB) is `PP` - &quot;ptr: start of program&quot;. It looks like they're changing the &quot;start of program&quot; location, then re-running it by doing a `GOTO 0`.&#xD;&#xA;&#xD;&#xA;Assembly language _was_ often included in BASIC programs though: although the [S. H. Lam Technique](http://www.llx.com/~nparker/a2/shlam.html) is for Applesoft BASIC, a slight variation works fine in Integer BASIC. It fills the keyboard buffer with keystrokes, then calls the monitor parse-and-process routine to execute the keystrokes as a monitor command.&#xD;&#xA;&#xD;&#xA;    10 DIM H$(23):H$=&quot;300:AD 30 C0 60 N D9C6G&quot;&#xD;&#xA;    20 FOR X=1 TO LEN(H$): POKE 511+X, ASC(H$(X,X)): NEXT X&#xD;&#xA;    30 POKE 72,0: CALL -144&#xD;&#xA;    40 PRINT &quot;HELLO&quot;&#xD;&#xA;    50 END&#xD;&#xA;&#xD;&#xA;Other programs found creative ways of embedding actual assembly code somehow into a BASIC program. Ivan Drucker's [KansasFest talk](https://youtu.be/QmRG-SVZHgc) on [Slammer](http://ivanx.com/appleii/slammer/) discusses a clever, modern variant of this technique." />
  <row Id="1641" PostHistoryTypeId="4" PostId="586" RevisionGUID="aa1837af-50ca-44c7-830a-05f5f56f5ecb" CreationDate="2016-05-20T17:17:24.083" UserId="621" Comment="Fixed typo in title" Text="What is the relationship between solid-state ROM and inaccessible content in arcade games?" />
  <row Id="1642" PostHistoryTypeId="24" PostId="586" RevisionGUID="aa1837af-50ca-44c7-830a-05f5f56f5ecb" CreationDate="2016-05-20T17:17:24.083" Comment="Proposed by 621 approved by 644 edit id of 180" />
  <row Id="1643" PostHistoryTypeId="2" PostId="596" RevisionGUID="fbc08b2f-9c9f-4501-b5dd-91419d984c7e" CreationDate="2016-05-20T17:45:22.560" UserId="278" Text="Debuggers are programs that poke around at other programs' memory. In modern computers they rely on the ability for multiple programs to run at once, abundance of memory and, most importantly, dynamic allocation: an ordinary program only having access to memory it's reserved, which other programs can't simultaneously use for different purposes.&#xD;&#xA;&#xD;&#xA;However, retro-computers didn't have these features: except using interrupts (passing control back and forth), programs couldn't run simultaneously. Programs had access to all the memory: there was no way to tell what memory was and wasn't used, therefore knowing where to load the debugger. And even if there was a way to know that, many programs used most or all of the memory in a computer, leaving no place for the debugger to run.&#xD;&#xA;&#xD;&#xA;And yet debuggers *did* exist. My question is: how did they work?" />
  <row Id="1644" PostHistoryTypeId="1" PostId="596" RevisionGUID="fbc08b2f-9c9f-4501-b5dd-91419d984c7e" CreationDate="2016-05-20T17:45:22.560" UserId="278" Text="How did debuggers work?" />
  <row Id="1645" PostHistoryTypeId="3" PostId="596" RevisionGUID="fbc08b2f-9c9f-4501-b5dd-91419d984c7e" CreationDate="2016-05-20T17:45:22.560" UserId="278" Text="&lt;debug&gt;" />
  <row Id="1646" PostHistoryTypeId="5" PostId="592" RevisionGUID="9a6be96d-a81c-48d6-bbb6-fda5c97d3df4" CreationDate="2016-05-20T18:01:10.803" UserId="423" Comment="added 4605 characters in body" Text="Here are some extraction from an article: `Missing Cycles` by **Pasi 'Albert' Ojala**. In short, `VIC` needs to fetch the sprite data from memory. For each sprite it needs to fetch 3 bytes (one line of sprite shape) for each scanline.&#xD;&#xA;&#xD;&#xA;&gt; If there are sprites on the screen, the VIC needs even more cycles to&#xD;&#xA;&gt; fetch all of the graphics data. Scan lines are time divided so that&#xD;&#xA;&gt; there is enough time for all action during one line. On each line, the&#xD;&#xA;&gt; sprite image pointers are fetched during phase 1. If the sprite is to&#xD;&#xA;&gt; be displayed on that line, the three bytes of image data are fetched&#xD;&#xA;&gt; right after that. Out of these three fetches, two take place during&#xD;&#xA;&gt; phase 2 of the clock, so the processor will lose these. On average,&#xD;&#xA;&gt; two clock cycles are lost for each sprite that is displayed on that&#xD;&#xA;&gt; line.&#xD;&#xA;&#xD;&#xA;The most interesting part is that it should take 24 cycles (8 sprites * 3 bytes), but in fact it takes only 16-19 cycles. This is caused by special case of sharing the `bus` between `VIC` and `CPU`.&#xD;&#xA;&#xD;&#xA;&gt; When the VIC wants to use the bus, the BA (Bus Available) signal goes&#xD;&#xA;&gt; inactive. This will happen three cycles before the bus must be&#xD;&#xA;&gt; released ! During these three cycles, the CPU must complete all memory&#xD;&#xA;&gt; accesses or delay them until it has the bus again.&#xD;&#xA;&gt; &#xD;&#xA;&gt; The CPU either completes the current instruction in the remaining&#xD;&#xA;&gt; cycles or sits and waits for the bus to become available again. It&#xD;&#xA;&gt; can't execute a new instruction as long as it doesn't have the bus.&#xD;&#xA;&gt; This is why cycles seem to be lost (besides those stolen directly for&#xD;&#xA;&gt; the sprites). Usually, all 8 sprites take 17 cycles while one sprite&#xD;&#xA;&gt; takes three cycles. However, the CPU may continue to execute an&#xD;&#xA;&gt; instruction if it does not use the bus.&#xD;&#xA;&#xD;&#xA;So `VIC` is 'stealing' some cycles. Here are some examples:&#xD;&#xA;&#xD;&#xA;&gt; Let's suppose that all the sprites are enabled and on the same scan&#xD;&#xA;&gt; line. Then, the VIC steals 16 cycles (2 cycles for each sprite) for&#xD;&#xA;&gt; the memory fetches and 3 cycles as overhead for the BA signal, for a&#xD;&#xA;&gt; total of 19 cycles. However, it will be usually less because the CPU&#xD;&#xA;&gt; will use some of the cycles when the bus request is pending.&#xD;&#xA;&gt; &#xD;&#xA;&gt; If we now disable sprite 4, no cycles are released for the CPU's use.&#xD;&#xA;&gt; This is because during the previous sprite 4 data fetch, the VIC&#xD;&#xA;&gt; already signals that it needs the bus for the sprite 5 data fetch and&#xD;&#xA;&gt; BA stays low (Refer to the timing chart). Thus, the CPU never sees BA&#xD;&#xA;&gt; go high during sprite 4 and 2 cycles are still lost.&#xD;&#xA;&gt; &#xD;&#xA;&gt; Accordingly, if we only turn off sprites 1, 3 and 5 we get no cycles&#xD;&#xA;&gt; back from the VIC. So in time-critical raster routines, always use&#xD;&#xA;&gt; sprites in order.&#xD;&#xA;&#xD;&#xA;And the concluding timing table for missing cycles:&#xD;&#xA;&#xD;&#xA;    012345678901234567890123456789012345678901234567890123456789012 cycles&#xD;&#xA;    &#xD;&#xA;    Normal scan line, 0 sprites&#xD;&#xA;    ggggggggggggggggggggggggggggggggggggggggrrrrr  p p p p p p p p  phi-1 VIC&#xD;&#xA;                                                                    phi-2 VIC&#xD;&#xA;    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx phi-2 6510&#xD;&#xA;    63 cycles available&#xD;&#xA;    &#xD;&#xA;    Normal scan line, 8 sprites&#xD;&#xA;    ggggggggggggggggggggggggggggggggggggggggrrrrr  pspspspspspspsps phi-1 VIC&#xD;&#xA;                                                   ssssssssssssssss phi-2 VIC&#xD;&#xA;    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxXXX                 phi-2 6510&#xD;&#xA;    46-49 cycles available&#xD;&#xA;    &#xD;&#xA;    Normal scan line, 4 sprites&#xD;&#xA;    ggggggggggggggggggggggggggggggggggggggggrrrrr  psp psp psp psp  phi-1 VIC&#xD;&#xA;                                                   ss  ss  ss  ss   phi-2 VIC&#xD;&#xA;    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxXXX              xx phi-2 6510&#xD;&#xA;    48-51 cycles available&#xD;&#xA;    &#xD;&#xA;    Bad scan line, 0 sprites&#xD;&#xA;    ggggggggggggggggggggggggggggggggggggggggrrrrr  p p p p p p p p  phi-1 VIC&#xD;&#xA;    cccccccccccccccccccccccccccccccccccccccc                        phi-2 VIC&#xD;&#xA;                                            xxxxxxxxxxxxxxxxxxxxxxx phi-2 6510&#xD;&#xA;    23 cycles available&#xD;&#xA;    &#xD;&#xA;    Bad scan line, 8 sprites&#xD;&#xA;    ggggggggggggggggggggggggggggggggggggggggrrrrr  pspspspspspspsps phi-1 VIC&#xD;&#xA;    cccccccccccccccccccccccccccccccccccccccc       ssssssssssssssss phi-2 VIC&#xD;&#xA;                                            xxxxXXX                 phi-2 6510&#xD;&#xA;    4-7 cycles available&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    g= grafix data fetch (character images or graphics data)&#xD;&#xA;    r= refresh&#xD;&#xA;    p= sprite image pointer fetch&#xD;&#xA;    c= character and color CODE fetch during a bad scan line&#xD;&#xA;    s= sprite data fetch&#xD;&#xA;    x= processor executing instructions&#xD;&#xA;    X= processor executing an instruction, bus request pending&#xD;&#xA;&#xD;&#xA;You can use it to synchronize raster line using sprites.&#xD;&#xA;&#xD;&#xA;For more information (including demonstration program), please refer to the full article: [**&quot;Missing Cycles&quot; by Pasi 'Albert' Ojala**][1].&#xD;&#xA;&#xD;&#xA;  [1]: http://www.antimon.org/dl/c64/code/missing.txt" />
  <row Id="1647" PostHistoryTypeId="5" PostId="596" RevisionGUID="4c460e50-2473-4a80-b649-6ce2f34d01ec" CreationDate="2016-05-20T18:10:41.837" UserId="278" Comment="Added clarification (have not worked it into the question yet)" Text="**(Note: I am referring to programs that would run on an end-users' system, not special debugging hardware)**&#xD;&#xA;&#xD;&#xA;Debuggers are programs that poke around at other programs' memory. In modern computers they rely on the ability for multiple programs to run at once, abundance of memory and, most importantly, dynamic allocation: an ordinary program only having access to memory it's reserved, which other programs can't simultaneously use for different purposes.&#xD;&#xA;&#xD;&#xA;However, retro-computers didn't have these features: except using interrupts (passing control back and forth), programs couldn't run simultaneously. Programs had access to all the memory: there was no way to tell what memory was and wasn't used, therefore knowing where to load the debugger. And even if there was a way to know that, many programs used most or all of the memory in a computer, leaving no place for the debugger to run.&#xD;&#xA;&#xD;&#xA;And yet debugging programs *did* exist. My question is: how did they work?" />
  <row Id="1648" PostHistoryTypeId="5" PostId="596" RevisionGUID="66c271ef-b906-45c4-874d-df08dfd963cf" CreationDate="2016-05-20T18:15:32.213" UserId="278" Comment="Clarified *software*." Text="**(Note: I am referring to *software* that would run on an end-users' system, not special debugging hardware)**&#xD;&#xA;&#xD;&#xA;Debuggers are programs that poke around at other programs' memory. In modern computers they rely on the ability for multiple programs to run at once, abundance of memory and, most importantly, dynamic allocation: an ordinary program only having access to memory it's reserved, which other programs can't simultaneously use for different purposes.&#xD;&#xA;&#xD;&#xA;However, retro-computers didn't have these features: except using interrupts (passing control back and forth), programs couldn't run simultaneously. Programs had access to all the memory: there was no way to tell what memory was and wasn't used, therefore knowing where to load the debugger. And even if there was a way to know that, many programs used most or all of the memory in a computer, leaving no place for the debugger to run.&#xD;&#xA;&#xD;&#xA;And yet debugging software *did* exist. My question is: how did they work?" />
  <row Id="1649" PostHistoryTypeId="2" PostId="597" RevisionGUID="4231a9bc-7ec8-4cf2-a059-18580960135e" CreationDate="2016-05-20T18:31:11.783" UserId="320" Text="That Conner CP-343 drive appears to be a special snowflake, but its not.  Its actually a standard IDE drive, with one exception.  That 20-pin interface you're looking at isn't the IDE connector, its the connector between the drive mechanicals and the controller board that would normally be mounted to the bottom of the drive.  Why its not affixed to the bottom of the drive as normal for IDE drives I can only guess. (Space saving considerations?  Reducing the weight of the drive assembly for shock resistance?)&#xD;&#xA;&#xD;&#xA;The best information I've been able to find indicates that at the other end of that cable you should find the actual controller board for the drive, plugged into a standard 40-pin IDE socket on the motherboard.  You should be able to remove the controller from the IDE socket and plug it into a standard IDE cable in another machine to recover the data.&#xD;&#xA;&#xD;&#xA;Note that the IDE connector on the Zenith SupersPORT 286 laptop is slightly non-standard, but that should only effect things if you're trying to get another drive working with the laptop itself and shouldn't make a difference for recovering data from the CP-343.  [Discussion of Zenith IDE interface.][1]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://groups.google.com/forum/#!topic/comp.sys.zenith/ABBuMFnjRZ4" />
  <row Id="1650" PostHistoryTypeId="5" PostId="573" RevisionGUID="cfdfcf5d-ec0b-4361-b794-f64e7d52dd10" CreationDate="2016-05-20T19:41:43.893" UserId="335" Comment="added 256 characters in body" Text="In [this Integer BASIC disassembly](http://www.easy68k.com/paulrsm/6502/INTLST.TXT), 202/203 ($CA/$CB) is `PP` - &quot;ptr: start of program&quot;. It looks like they're changing the &quot;start of program&quot; location, then re-running it by doing a `GOTO 0`.&#xD;&#xA;&#xD;&#xA;My guess is that there's a small BASIC program (the one you see at the start), then a chunk of assembly language that looks like junk when listed, then another small BASIC program (the one you see at the end).&#xD;&#xA;&#xD;&#xA;What I'm not sure is why they don't just jump directly into the assembly routines… I might have to investigate further :-)&#xD;&#xA;&#xD;&#xA;Assembly language _was_ often included in BASIC programs though: although the [S. H. Lam Technique](http://www.llx.com/~nparker/a2/shlam.html) is for Applesoft BASIC, a slight variation works fine in Integer BASIC. It fills the keyboard buffer with keystrokes, then calls the monitor parse-and-process routine to execute the keystrokes as a monitor command.&#xD;&#xA;&#xD;&#xA;    10 DIM H$(23):H$=&quot;300:AD 30 C0 60 N D9C6G&quot;&#xD;&#xA;    20 FOR X=1 TO LEN(H$): POKE 511+X, ASC(H$(X,X)): NEXT X&#xD;&#xA;    30 POKE 72,0: CALL -144&#xD;&#xA;    40 PRINT &quot;HELLO&quot;&#xD;&#xA;    50 END&#xD;&#xA;&#xD;&#xA;Other programs found creative ways of embedding actual assembly code somehow into a BASIC program. Ivan Drucker's [KansasFest talk](https://youtu.be/QmRG-SVZHgc) on [Slammer](http://ivanx.com/appleii/slammer/) discusses a clever, modern variant of this technique." />
  <row Id="1651" PostHistoryTypeId="6" PostId="577" RevisionGUID="efdf4f96-925f-4f6c-9562-240498b506d9" CreationDate="2016-05-20T19:50:48.547" UserId="320" Comment="Added missing tags." Text="&lt;assembly&gt;&lt;intel&gt;&lt;8080&gt;&lt;8085&gt;" />
  <row Id="1652" PostHistoryTypeId="24" PostId="577" RevisionGUID="efdf4f96-925f-4f6c-9562-240498b506d9" CreationDate="2016-05-20T19:50:48.547" Comment="Proposed by 320 approved by 621 edit id of 181" />
  <row Id="1653" PostHistoryTypeId="2" PostId="598" RevisionGUID="1ca2e425-1e6b-4d08-8c4f-88f5e369dab0" CreationDate="2016-05-20T20:02:25.713" UserId="-1" Text="" />
  <row Id="1654" PostHistoryTypeId="2" PostId="599" RevisionGUID="bb3ecf15-88e3-4fcc-aaeb-a8385d50fad7" CreationDate="2016-05-20T20:02:25.713" UserId="-1" Text="" />
  <row Id="1655" PostHistoryTypeId="6" PostId="577" RevisionGUID="da2132fd-55a5-47de-80f1-6c36c3b7a0fa" CreationDate="2016-05-20T20:03:13.623" UserId="621" Comment="edited tags" Text="&lt;assembly&gt;&lt;intel&gt;&lt;8080&gt;&lt;8085&gt;&lt;intel-8080&gt;" />
  <row Id="1656" PostHistoryTypeId="2" PostId="600" RevisionGUID="0116ac9d-d320-4076-91fc-dfab67c1371f" CreationDate="2016-05-20T20:03:28.967" UserId="-1" Text="" />
  <row Id="1657" PostHistoryTypeId="2" PostId="601" RevisionGUID="0351cc7f-9d9a-4ac3-8935-0dfb04413b46" CreationDate="2016-05-20T20:03:28.967" UserId="-1" Text="" />
  <row Id="1658" PostHistoryTypeId="10" PostId="596" RevisionGUID="95d165a4-49e9-4fae-924a-ea2e805d7c1d" CreationDate="2016-05-20T21:23:30.297" UserId="-1" Comment="104" Text="{&quot;Voters&quot;:[{&quot;Id&quot;:56,&quot;DisplayName&quot;:&quot;fadden&quot;},{&quot;Id&quot;:79,&quot;DisplayName&quot;:&quot;Stephen Kitt&quot;},{&quot;Id&quot;:92,&quot;DisplayName&quot;:&quot;blubberdiblub&quot;},{&quot;Id&quot;:12,&quot;DisplayName&quot;:&quot;jdv&quot;},{&quot;Id&quot;:105,&quot;DisplayName&quot;:&quot;mcleod_ideafix&quot;}]}" />
  <row Id="1659" PostHistoryTypeId="2" PostId="602" RevisionGUID="878e6c20-537c-49af-baa1-c7680761f347" CreationDate="2016-05-21T00:02:27.080" UserId="367" Text="The manual asks for a &quot;tee&quot; connector - that's a simple wire connection without any logic inside (and equivalent to monitor passthrough that's also supported).&#xD;&#xA;&#xD;&#xA;You can safely use an Y-cable instead." />
  <row Id="1660" PostHistoryTypeId="2" PostId="603" RevisionGUID="d79b7f0d-c84f-4086-ba23-b8cb2b87c1d5" CreationDate="2016-05-21T03:25:13.830" UserId="367" Text="Are there any trapdoor slot video cards for a non-tower Amiga 1200 ?&#xD;&#xA;&#xD;&#xA;(That excludes Zorro expansion cards, PCI mediator cards and BlizzardPPC+BVision - as all of those require tower case)&#xD;&#xA;&#xD;&#xA;If not - then what would it take to make one ?&#xD;&#xA;&#xD;&#xA;This is partially inspired by recently released video card for A2000 by mntmn." />
  <row Id="1661" PostHistoryTypeId="1" PostId="603" RevisionGUID="d79b7f0d-c84f-4086-ba23-b8cb2b87c1d5" CreationDate="2016-05-21T03:25:13.830" UserId="367" Text="Are there any trapdoor slot video cards for a non-tower Amiga 1200?" />
  <row Id="1662" PostHistoryTypeId="3" PostId="603" RevisionGUID="d79b7f0d-c84f-4086-ba23-b8cb2b87c1d5" CreationDate="2016-05-21T03:25:13.830" UserId="367" Text="&lt;amiga&gt;&lt;video&gt;" />
  <row Id="1663" PostHistoryTypeId="5" PostId="603" RevisionGUID="a97c46de-775c-4890-a5f5-4e4f013b2dd5" CreationDate="2016-05-21T03:46:56.153" UserId="367" Comment="added 62 characters in body" Text="Are there any trapdoor slot video cards for a non-tower Amiga 1200 ?&#xD;&#xA;&#xD;&#xA;(That excludes Zorro expansion cards, PCI mediator cards and BlizzardPPC+BVision - as all of those require tower case,&#xD;&#xA;also excludes upcoming vampire for A1200, thanks to @rrrzx )&#xD;&#xA;&#xD;&#xA;If not - then what would it take to make one ?&#xD;&#xA;&#xD;&#xA;This is partially inspired by recently released video card for A2000 by mntmn." />
  <row Id="1665" PostHistoryTypeId="2" PostId="604" RevisionGUID="9f97f540-29bc-44a0-9962-0bdc9e04f487" CreationDate="2016-05-21T03:52:27.927" UserId="75" Text="The Indivision AGA doesn't attach to the trapdoor slot, but it also doesn't need a tower case because it attaches to the Lisa chip. (In a way, this is better than a trapdoor video card because it leaves the trapdoor available for accelerators.) It gives you video modes up to 1280x1024x256 colors, but for me it glitches at that resolution so I use 1024x768 or 1280x720.&#xD;&#xA;&#xD;&#xA;But it has no 3-D support. Basically it's just a scan doubler with additional resolutions and DVI output." />
  <row Id="1666" PostHistoryTypeId="5" PostId="603" RevisionGUID="92af7a73-3a2c-42c9-b148-7ca359d11282" CreationDate="2016-05-21T03:53:28.877" UserId="367" Comment="added 11 characters in body" Text="Are there any trapdoor slot video cards for a non-tower Amiga 1200 ?&#xD;&#xA;&#xD;&#xA;(That excludes Zorro expansion cards, PCI mediator cards and BlizzardPPC+BVision - as all of those require tower case,&#xD;&#xA;also excludes upcoming vampire for A1200, indivision and scandoublers )&#xD;&#xA;&#xD;&#xA;If not - then what would it take to make one ?&#xD;&#xA;&#xD;&#xA;This is partially inspired by recently released video card for A2000 by mntmn." />
  <row Id="1667" PostHistoryTypeId="5" PostId="604" RevisionGUID="07a38a8d-c4b7-4029-9cbd-743159dd654d" CreationDate="2016-05-21T04:13:33.123" UserId="75" Comment="BlizzardVisionPPC" Text="The Indivision AGA doesn't attach to the trapdoor slot, but it also doesn't need a tower case because it attaches to the Lisa chip. (In a way, this is better than a trapdoor video card because it leaves the trapdoor available for accelerators.) It gives you video modes up to 1280x1024x256 colors, but for me it glitches at that resolution so I use 1024x768 or 1280x720.&#xD;&#xA;&#xD;&#xA;But it has no 3-D support. Basically it's just a scan doubler with additional resolutions and DVI output.&#xD;&#xA;&#xD;&#xA;Edit: I change my answer: BlizzardVisionPPC + Blizzard603e/e+ + an upgraded power supply and maybe some extra vents in your desktop case. This has 24-bit color and 3D, and goes up to 1280x1024x24bpp or 1600x1200x16bpp." />
  <row Id="1669" PostHistoryTypeId="5" PostId="596" RevisionGUID="04b5cca5-d4d3-45a6-aa1c-c7bc1fa65832" CreationDate="2016-05-21T07:52:48.050" UserId="278" Comment="Added examples." Text="**(Note: I am referring to *software* that would run on an end-users' system, not special debugging hardware)**&#xD;&#xA;&#xD;&#xA;Debuggers are programs that poke around at other programs' memory. In modern computers they rely on the ability for multiple programs to run at once, abundance of memory and, most importantly, dynamic allocation: an ordinary program only having access to memory it's reserved, which other programs can't simultaneously use for different purposes.&#xD;&#xA;&#xD;&#xA;However, retro-computers didn't have these features: except using interrupts (passing control back and forth), programs couldn't run simultaneously. Programs had access to all the memory: there was no way to tell what memory was and wasn't used, therefore knowing where to load the debugger. And even if there was a way to know that, many programs used most or all of the memory in a computer, leaving no place for the debugger to run.&#xD;&#xA;&#xD;&#xA;And yet debugging software *did* exist, such as the DDT series, the ODT series, OLIVER, SIMON, CA/EZTEST and much of the XPEDITER series. My question is: how did they work?" />
  <row Id="1670" PostHistoryTypeId="5" PostId="596" RevisionGUID="7961367c-c46f-42c4-b0d3-7c8503b637e4" CreationDate="2016-05-21T07:59:56.383" UserId="278" Comment="Added examples." Text="**(Note: I am referring to *software* that would run on an *end-users'* system, not special debugging computers)**&#xD;&#xA;&#xD;&#xA;Debuggers are programs that poke around at other programs' memory. In modern computers they rely on the ability for multiple programs to run at once, abundance of memory and, most importantly, dynamic allocation: an ordinary program only having access to memory it's reserved, which other programs can't simultaneously use for different purposes.&#xD;&#xA;&#xD;&#xA;However, retro-computers didn't have these features: except using interrupts (passing control back and forth), programs couldn't run simultaneously. Programs had access to all the memory: there was no way to tell what memory was and wasn't used, therefore knowing where to load the debugger. And even if there was a way to know that, many programs used most or all of the memory in a computer, leaving no place for the debugger to run.&#xD;&#xA;&#xD;&#xA;And yet debugging software *did* exist, such as the DDT series, the ODT series, OLIVER, SIMON, CA/EZTEST and much of the XPEDITER series. My question is: how did they work?&#xD;&#xA;&#xD;&#xA;  * How did they load themselves into memory without conflict?&#xD;&#xA;  * How did they implement single-stepping?&#xD;&#xA;  * How did they ensure that they weren't overwritten?" />
  <row Id="1673" PostHistoryTypeId="5" PostId="551" RevisionGUID="f6352473-934c-4347-b29b-42e375822bfb" CreationDate="2016-05-21T11:00:42.077" UserId="611" Comment="Added more detail" Text="I have a wonderful Zenith SupersPORT 286 laptop (ZWE-0200-40) whose power circuitry seems faulty and it no longer powers up. I have useful material on the disk which I'd like to extract.&#xD;&#xA;&#xD;&#xA;![Zenith 286 laptop](http://i.stack.imgur.com/dfGRum.jpg)&#xD;&#xA;&#xD;&#xA;The disk (a Connor CP-343) interface is pre-IDE, and I can't seem to locate what type of interface it has.&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;[![enter image description here][2]][2]&#xD;&#xA;[![enter image description here][3]][3]&#xD;&#xA;&#xD;&#xA;Can anyone suggest how I might spin up the disk and image it? It's only about 40Mb, so less than a modern memory stick.&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;#Update&#xD;&#xA;&#xD;&#xA;Very helpful pointers from everyone. I'm almost at the point where I should probably spawn a new question rather than add more details. Anyway: yes, there is a daughter board with the disc controller:&#xD;&#xA;&#xD;&#xA;[![Connor disc controller board][4]][4]&#xD;&#xA;&#xD;&#xA;The board has a female IDE socket rather than a male IDE connector, and a power connector.&#xD;&#xA;&#xD;&#xA;I do have a male-to-male gender changer for IDE and an IDE-to-USB converter and a molex to floppy power connector. I checked the wiring as per the usenet postings linked by @mnem and I think they are right. However with a quick attempt I do not get disk power up, but get **very hot** chips on the controller board. Sigh....&#xD;&#xA;&#xD;&#xA;[![IDE and power][5]][5]&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;&#xD;&#xA;&lt;sup&gt;&lt;sub&gt;Yes: I realise I can cannibalise several scrap models, but at the moment I have found none on my continent at reasonable shipping prices or costs now they are museum pieces! I have a fair degree of experience at restoring older systems. Its just this form of disc interface is unknown to me.&lt;/sub&gt;&lt;/sup&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/d761om.jpg&#xD;&#xA;  [2]: http://i.stack.imgur.com/GoQcxm.jpg&#xD;&#xA;  [3]: http://i.stack.imgur.com/jP6syt.jpg&#xD;&#xA;  [4]: http://i.stack.imgur.com/rSCNR.jpg&#xD;&#xA;  [5]: http://i.stack.imgur.com/ifw71m.jpg" />
  <row Id="1674" PostHistoryTypeId="5" PostId="597" RevisionGUID="3831c30a-57cb-4faf-a35f-11a67b2547ee" CreationDate="2016-05-21T11:36:19.573" UserId="320" Comment="Corrected and expanded answer." Text="That Conner CP-343 drive appears to be a special snowflake, but its not.  Its actually a standard IDE drive, with one exception.  That 20-pin interface you're looking at isn't the IDE connector, its the connector between the drive mechanicals and the controller board that would normally be mounted to the bottom of the drive.  Why its not affixed to the bottom of the drive as normal for IDE drives I can only guess. (Space saving considerations?  Reducing the weight of the drive assembly for shock resistance?)&#xD;&#xA;&#xD;&#xA;The best information I've been able to find indicates that at the other end of that cable you should find the actual controller board for the drive, plugged into a standard 40-pin IDE socket on the motherboard.  You should be able to remove the controller from the IDE socket and plug it into a standard IDE cable in another machine to recover the data.&#xD;&#xA;&#xD;&#xA;Note that the IDE connector on the Zenith SupersPORT 286 laptop is slightly non-standard, but that should only effect things if you're trying to get another drive working with the laptop itself and shouldn't make a difference for recovering data from the CP-343.  [Discussion of Zenith IDE interface.][1]&#xD;&#xA;&#xD;&#xA;**EDIT:** It looks like the CP-343 itself is slightly out of spec for IDE.  I found a reference to this in the document I linked before &quot;**Pin 39 on the CP343 must be HIGH if BUSY**&quot; and checking the IDE spec, pin 39 is normally active-low.  I think an inverter might have to be added on that line to get this drive to work on a standard IDE interface.&#xD;&#xA;&#xD;&#xA;  [1]: https://groups.google.com/forum/#!topic/comp.sys.zenith/ABBuMFnjRZ4" />
  <row Id="1675" PostHistoryTypeId="5" PostId="593" RevisionGUID="84075e93-ce76-4fbe-a90d-e17c65c62828" CreationDate="2016-05-21T11:51:15.293" UserId="621" Comment="added 5 characters in body" Text="Another thought:&#xD;&#xA;&#xD;&#xA;When most people refer to &quot;unused content&quot; in games, they're traditionally referring to UI changes.  But what about unused memory addresses or the values at that memory?  What about debugging information.  Ideally, most debugging symbols and information would be stripped for release, but this is not always the case.  Let's look at the [Super Metroid memory map][1] as an example:&#xD;&#xA;&#xD;&#xA;    7E:008D - 7E:008E    Controller 2 Input. ALL Controller 2 Unused (Debug mode)&#xD;&#xA;    # ...&#xD;&#xA;    7E:05D5 - 7E:05D6    Saved X-Scroll position ($0911). Unused (Debug mode)&#xD;&#xA;    7E:05D7 - 7E:05D8    Saved Y-Scroll position ($0915). Unused (Debug mode)&#xD;&#xA;    # ...&#xD;&#xA;    7E:0617 - 7E:0618    0 = allow Soft Reset via Start+Select+L+R. Unused (Debug mode)&#xD;&#xA;    # ...&#xD;&#xA;&#xD;&#xA;etc.&#xD;&#xA;&#xD;&#xA;I would say it is unlikely for a game like Space Race to include this type of information.  Games that use an array of diodes have their circuitry are constructed by hand, and for production the circuits are changed to remove any unused debug logic, if they ever had any.&#xD;&#xA;&#xD;&#xA;---&#xA;&#xA;Let's look at a memory map and crash in the production version of MechWarrior for the SNES:&#xD;&#xA;&#xD;&#xA;[![MechWarrior Memory Map][2]][3]&#xD;&#xA;&#xD;&#xA;Ideally, this screen will never be shown in production under normal circumstances (without directly modifying the hardware and/or software), and could potentially be considered inaccessible content.&#xD;&#xA;&#xD;&#xA;The idea of using/logging memory locations, or presenting this type of memory map to the user is a benefit of using ROM-based memory over diodes.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://drewseph.zophar.net/Kejardon/RAMMap.txt&#xD;&#xA;  [2]: http://i.stack.imgur.com/0tSAtm.jpg (click to enlarge)&#xD;&#xA;  [3]: http://i.stack.imgur.com/0tSAt.jpg" />
  <row Id="1676" PostHistoryTypeId="5" PostId="597" RevisionGUID="4c5a2e07-8d97-4341-9ae7-e4dd417f8094" CreationDate="2016-05-21T11:54:12.057" UserId="320" Comment="added 507 characters in body" Text="That Conner CP-343 drive appears to be a special snowflake, but its not.  Its actually a standard IDE drive, with one exception.  That 20-pin interface you're looking at isn't the IDE connector, its the connector between the drive mechanicals and the controller board that would normally be mounted to the bottom of the drive.  Why its not affixed to the bottom of the drive as normal for IDE drives I can only guess. (Space saving considerations?  Reducing the weight of the drive assembly for shock resistance?)&#xD;&#xA;&#xD;&#xA;The best information I've been able to find indicates that at the other end of that cable you should find the actual controller board for the drive, plugged into a standard 40-pin IDE socket on the motherboard.  You should be able to remove the controller from the IDE socket and plug it into a standard IDE cable in another machine to recover the data.&#xD;&#xA;&#xD;&#xA;Note that the IDE connector on the Zenith SupersPORT 286 laptop is slightly non-standard, but that should only effect things if you're trying to get another drive working with the laptop itself and shouldn't make a difference for recovering data from the CP-343.  [Discussion of Zenith IDE interface.][1]&#xD;&#xA;&#xD;&#xA;**EDIT:** It looks like the CP-343 itself is slightly out of spec for IDE.  I found a reference to this in the document I linked before &quot;**Pin 39 on the CP343 must be HIGH if BUSY**&quot; and checking the IDE spec, pin 39 is normally active-low.  I think an inverter might have to be added on that line to get this drive to work on a standard IDE interface.&#xD;&#xA;&#xD;&#xA;Something else to watch out for, although I think you have the SS286, not the 286e so you should be ok:&#xD;&#xA;&#xD;&#xA;    SuperSPORT-286 HARD DRIVE Power Connectors on Power Supply:&#xD;&#xA;                 SS286 Connector            SS-286e Connector  &#xD;&#xA;                     +5v            Top       Ground            &#xD;&#xA;                   Ground            .        +12v              &#xD;&#xA;                   Ground            .        +5v                &#xD;&#xA;                     +12v          Bottom                        &#xD;&#xA;&#xD;&#xA;  [1]: https://groups.google.com/forum/#!topic/comp.sys.zenith/ABBuMFnjRZ4&#xD;&#xA;" />
  <row Id="1677" PostHistoryTypeId="2" PostId="605" RevisionGUID="47adda54-a1e1-4f87-9db4-1e4f383c867d" CreationDate="2016-05-21T13:30:41.540" UserId="80" Text="I would quite like to resurrect my [openkick](https://github.com/mooli/openkick) project. As I note on that project's [README.md](https://github.com/mooli/openkick/blob/master/README.md), it is stalled because GNU GCC is not fit for purpose.&#xD;&#xA;&#xD;&#xA;Sadly, there do not seem to be any other modern compilers which still have (or ever had) m68k support. The LLVM backend appeared to be my best bet but the architecture-specific code-generator is woefully underdocumented and rather brittle and my attempts to add a m68k backend are not promising. There are already a handful of incomplete m68k backends on github (e.g. [kwaters/llvm-m68k](https://github.com/kwaters/llvm-m68k), [SamuraiCrow/llvm-m68k](https://github.com/SamuraiCrow/llvm-m68k) and [Peylow/llvm](https://github.com/PeyloW/llvm)), but those can barely even process trivial straight-line code and are on a par with my own efforts.&#xD;&#xA;&#xD;&#xA;So is there another solution that I've missed? There seem to be (at least) three options:&#xD;&#xA;&#xD;&#xA;* Find a port of gcc that supports regparm on m68k *and* actually pays attention to `-fomit-frame-pointer` so that it doesn't interfere with the Amiga's standard library-calling convention;&#xD;&#xA;* Find a more complete m68k backend for LLVM; or&#xD;&#xA;* Find another compiler that has a decent m68k backend.&#xD;&#xA;&#xD;&#xA;I would strongly prefer that the compiler understand C++11, which both GCC and clang support, and can be made to run on MacOS. I can backport my code to C++98 if necessary, but booting up an emulator or VM to run some obscure ancient executables would foul up my workflow." />
  <row Id="1678" PostHistoryTypeId="1" PostId="605" RevisionGUID="47adda54-a1e1-4f87-9db4-1e4f383c867d" CreationDate="2016-05-21T13:30:41.540" UserId="80" Text="Are there any modern compilers that can generate Amiga/m68k executables?" />
  <row Id="1679" PostHistoryTypeId="3" PostId="605" RevisionGUID="47adda54-a1e1-4f87-9db4-1e4f383c867d" CreationDate="2016-05-21T13:30:41.540" UserId="80" Text="&lt;amiga&gt;&lt;assembly&gt;&lt;m68k&gt;" />
  <row Id="1681" PostHistoryTypeId="2" PostId="606" RevisionGUID="df2d9932-00c7-4ab5-8401-0aa316fc5fad" CreationDate="2016-05-22T03:10:41.200" UserId="621" Text="There seems to be a lot of discussion online about the development hardware used to create Nintendo 64 titles: SGI Indy &quot;pizza box&quot; workstations, SGI's custom Ultra 64 development boards (aka &quot;DEVELOPMNET&quot; boards), and testing using a modified Sega Saturn controller before the N64 controller specs had been completed.  But I can't find too much information about the development software used on these machines.  Was it custom built by SGI?  Was it similar to tools like CodeWarrior or C++ Builder?" />
  <row Id="1682" PostHistoryTypeId="1" PostId="606" RevisionGUID="df2d9932-00c7-4ab5-8401-0aa316fc5fad" CreationDate="2016-05-22T03:10:41.200" UserId="621" Text="What kind of software was used to develop Nintendo 64 titles?" />
  <row Id="1683" PostHistoryTypeId="3" PostId="606" RevisionGUID="df2d9932-00c7-4ab5-8401-0aa316fc5fad" CreationDate="2016-05-22T03:10:41.200" UserId="621" Text="&lt;software&gt;&lt;nintendo&gt;&lt;nintendo-64&gt;&lt;software-development-kit&gt;" />
  <row Id="1686" PostHistoryTypeId="5" PostId="196" RevisionGUID="8fc4ca92-198c-407e-8e9a-ab01893cb277" CreationDate="2016-05-22T10:09:39.733" UserId="92" Comment="Improve HAM animation with a zoom into the pixels." Text="EHB&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;For example, a game that uses EHB (Extra HalfBrite) mode during the game action (i. e. ingame) is _Pinball Dreams_. In my example run of the _Beat Box_ table I can find the following in the copper list:&#xD;&#xA;&#xD;&#xA;    $00D6EA WAIT $4211FFFE&#xD;&#xA;    $00D6EE MOVE #$6200,BPLCON0&#xD;&#xA;&#xD;&#xA;I. e. it waits for raster line $42 (66) and uses BPLCON0 to set the number of bitplanes to 6 without the HAM bit set, which means EHB mode.&#xD;&#xA;&#xD;&#xA;_Cannon Fodder_ uses EHB for some of its still pictures. I'm not sure if it uses it ingame, but I consider it unlikely.&#xD;&#xA;&#xD;&#xA;A newer game, _Nemac IV_, presents you with a screen mode selection at the beginning, offering EHB mode as an option. It can then render its ingame 3D graphics to an EHB mode display. However, it requires a machine more powerful than a stock Amiga 500.&#xD;&#xA;&#xD;&#xA;HAM&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;The way HAM (Hold And Modify) mode works makes it unsuitable for ingame animation in most cases. I used to be unaware of any game that uses it for gameplay. (**Update**: There were at least 2 games using HAM for their animated action. See [robc's answer](http://retrocomputing.stackexchange.com/a/393/92).)&#xD;&#xA;&#xD;&#xA;_Fury of the Furries_ uses HAM for its still images, for example the title image and the images that are displayed before entering a new world (each consisting of a set of levels).&#xD;&#xA;&#xD;&#xA;The reason why it is unfeasible to use HAM for animated action is that you will either have to tolerate so-called color bleeding to the right of pixels or you will need to employ sophisticated algorithms to counteract the color bleeding, which timing constraints may forbid or which are just not worth it to come up with.&#xD;&#xA;&#xD;&#xA;In HAM mode you usually use 6 bitplanes (you can also use it with 5 bitplanes, but there's not much point to that). That's 64 possible values per pixel. Values 0 to 15 select a full RGB color from the 16 color palette, the same way other normal screen modes would. However, value sets 16 to 31 (modify blue component), 32 to 47 (modify red component) and 48 to 63 (modify green component), respectively, each just change one of the color components relative to the color of the previous pixel. The other two color components remain unchanged from the previous pixel.&#xD;&#xA;&#xD;&#xA;Say you set the color to palette entry 8 in column 100. Say also that this palette entry is $0333, i. e. a very dark gray. So the pixel in column 100 will appear gray.&#xD;&#xA;&#xD;&#xA; 1. Then, lacking a matching color in the palette, you modify the red component in column 101 to $6 (using a pixel value of $26 = 38). The resulting pixel in column 101 will now have a color equivalent to $0633, which is a dark unsaturated red.&#xD;&#xA;&#xD;&#xA; 2. Next, again lacking a matching color in the palette, you modify the green component in column 102 to $7 (using a pixel value of $37 = 55). The resulting pixel in column 102 will now have a color equivalent to $0673, which is a brown-greenish color.&#xD;&#xA;&#xD;&#xA; 3. Finally, lacking a matching color in the palette once more, you modify the blue component in column 103 to $6 (using a pixel value of $16 = 22). The resulting pixel in column 103 will now have a color equivalent to $0676, which is a dark gray with a very slight shimmer of green.&#xD;&#xA;&#xD;&#xA; [![HAM pixels before blitting][1]][1]  &#xD;&#xA; *note that each differently colored square represents 1 pixel*&#xD;&#xA;&#xD;&#xA;So far so good, but say you now want to blit an animated character onto the bitmap. Say the rightmost pixel of that character ends up in column 100 and it is a bright white, palette value $0FFF. What this means is that the white will bleed into the next 2 pixels:&#xD;&#xA;&#xD;&#xA; 1. Due to modifying just the red component, the visible color in column 101 will be $06FF, a bright cyan.&#xD;&#xA;&#xD;&#xA; 2. Due to modifying just the green component, the visible color in column 102 will be $067F, a bright blue.&#xD;&#xA;&#xD;&#xA; 3. Only in column 103 will you have modified all three color components and the apparent pixel color will be the same $0676 as the original one before blitting.&#xD;&#xA;&#xD;&#xA; [![HAM pixels after blitting][2]][2]  &#xD;&#xA; *note that each differently colored square represents 1 pixel*&#xD;&#xA;&#xD;&#xA;Depending on how many and which color components you consecutively modify, the color bleeding can affect more or less pixels and depending on how different the colors are to the originally intended colors, the artifacts can be more or less visible.&#xD;&#xA;&#xD;&#xA; [![uncorrected HAM color bleeding when naively blitting][3]][3]&#xD;&#xA; *note that I scaled the image by a factor of 2 to make the artifacts easier to see*&#xD;&#xA;&#xD;&#xA;To counteract the bleeding, you would have to design a routine that figures out which pixels to the right of a blit to adjust and which pixel values are the optimal ones that let the apparent pixel colors match the original ones as closely as possible. You won't get completely rid of the artifacts, but they might now be unnoticeable unless you take a closer look.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/xGlsK.png&#xD;&#xA;  [2]: http://i.stack.imgur.com/OTbAq.png&#xD;&#xA;  [3]: http://i.stack.imgur.com/XzthK.gif" />
  <row Id="1687" PostHistoryTypeId="5" PostId="605" RevisionGUID="5b9ddff3-f2c6-46f9-8adf-2f5d6b434f52" CreationDate="2016-05-22T11:14:01.713" UserId="80" Comment="Added note on vbcc" Text="I would quite like to resurrect my [openkick](https://github.com/mooli/openkick) project. As I note on that project's [README.md](https://github.com/mooli/openkick/blob/master/README.md), it is stalled because GNU GCC is not fit for purpose.&#xD;&#xA;&#xD;&#xA;Sadly, there do not seem to be any other modern compilers which still have (or ever had) m68k support. The LLVM backend appeared to be my best bet but the architecture-specific code-generator is woefully underdocumented and rather brittle and my attempts to add a m68k backend are not promising. There are already a handful of incomplete m68k backends on github (e.g. [kwaters/llvm-m68k](https://github.com/kwaters/llvm-m68k), [SamuraiCrow/llvm-m68k](https://github.com/SamuraiCrow/llvm-m68k) and [Peylow/llvm](https://github.com/PeyloW/llvm)), but those can barely even process trivial straight-line code and are on a par with my own efforts.&#xD;&#xA;&#xD;&#xA;So is there another solution that I've missed? There seem to be (at least) three options:&#xD;&#xA;&#xD;&#xA;* Find a port of gcc that supports regparm on m68k *and* actually pays attention to `-fomit-frame-pointer` so that it doesn't interfere with the Amiga's standard library-calling convention;&#xD;&#xA;* Find a more complete m68k backend for LLVM; or&#xD;&#xA;* Find another compiler that has a decent m68k backend.&#xD;&#xA;&#xD;&#xA;I would strongly prefer that the compiler understand C++11, which both GCC and clang support, and can be made to run on MacOS. I can backport my code to C++98 if necessary, but booting up an emulator or VM to run some obscure ancient executables would foul up my workflow.&#xD;&#xA;&#xD;&#xA;---&#xD;&#xA;*Edit 2016-05-22 1314 CEST:*&#xD;&#xA;&#xD;&#xA;[rrrzx](http://retrocomputing.stackexchange.com/users/64/rrrzx) pointed out [vbcc](https://en.wikipedia.org/wiki/Vbcc) in a comment, so I gave it a spin. The upside is that it supports register parameters and doesn't take A6 for its own purposes, so it *can* be used to cross-compile Amiga binaries without having to fight the compiler as is the case with gcc. The downside is that it is C-only, and its optimiser and code generator are pretty dire." />
  <row Id="1689" PostHistoryTypeId="2" PostId="608" RevisionGUID="d0cdfd24-8aca-45e9-a1b1-2d565d01501b" CreationDate="2016-05-22T17:02:52.450" UserId="680" Text="One solution is to use the program published at COMPUTE! ISSUE 76 / SEPTEMBER 1986 / PAGE 100 :&#xD;&#xA;&#xD;&#xA;http://www.atarimagazines.com/compute/issue76/AtariML.php&#xD;&#xA;&#xD;&#xA;" />
  <row Id="1690" PostHistoryTypeId="6" PostId="168" RevisionGUID="a34032ed-f946-41dc-8e27-9accf3527915" CreationDate="2016-05-22T19:35:10.030" UserId="278" Comment="Added [tag:plastic]" Text="&lt;maintenance&gt;&lt;plastic&gt;" />
  <row Id="1691" PostHistoryTypeId="24" PostId="168" RevisionGUID="a34032ed-f946-41dc-8e27-9accf3527915" CreationDate="2016-05-22T19:35:10.030" Comment="Proposed by 278 approved by 92, 79 edit id of 187" />
  <row Id="1693" PostHistoryTypeId="2" PostId="609" RevisionGUID="f92c1352-0446-42ec-a9d7-02f7f6b570c1" CreationDate="2016-05-23T03:15:32.800" UserId="64" Text="I have read that the Amiga 1200 may need certain &quot;timing fixes&quot; to be applied to the motherboard in order to use CPU accelerators.  What are these timing fixes and why are they needed?  Is there one set of fixes that will fix all hardware stability issues with the Amiga 1200?  Do the timing fixes needed depend on the CPU accelerator used?&#xD;&#xA;" />
  <row Id="1694" PostHistoryTypeId="1" PostId="609" RevisionGUID="f92c1352-0446-42ec-a9d7-02f7f6b570c1" CreationDate="2016-05-23T03:15:32.800" UserId="64" Text="What are the Amiga 1200 timing fixes?" />
  <row Id="1695" PostHistoryTypeId="3" PostId="609" RevisionGUID="f92c1352-0446-42ec-a9d7-02f7f6b570c1" CreationDate="2016-05-23T03:15:32.800" UserId="64" Text="&lt;amiga&gt;&lt;hardware&gt;" />
  <row Id="1696" PostHistoryTypeId="2" PostId="610" RevisionGUID="12bfb2f0-de58-4048-b74a-29c965f8b487" CreationDate="2016-05-23T05:54:19.020" UserId="301" Text="It used the same C compiler that shipped with the Indy workstation.  See: [Nintendo 64 Development Manual: C Compiler Suite][1]&#xD;&#xA;&#xD;&#xA;It required a few flags not normally used when building C programs for the Indy itself.  And there were utilities for downloading to the development boards and converting executables into ROM images.&#xD;&#xA;&#xD;&#xA;Some IDE's were available for UNIX at the time, but Nintendo didn't provide anything beyond system libraries and starter makefiles for the venerable &quot;make&quot; build command.  I'd expect most developers built N64 games in the same way they did Unix programs.  Run &quot;make&quot; on the command line and correct any errors in a separate editor window.  Or possible run &quot;make&quot; on a command line inside the emacs text editor with macros to assist in locating errors.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://level42.ca/projects/ultra64/Documentation/man/pro-man/pro05/index5.6.html &quot;Nintendo 64 Development Manual: C Compiler Suite&quot;" />
  <row Id="1698" PostHistoryTypeId="5" PostId="608" RevisionGUID="29fe0168-5c3a-47b5-bc5a-6672e88282ab" CreationDate="2016-05-23T08:44:37.253" UserId="74" Comment="added 2628 characters in body" Text="One solution is to use the program published at COMPUTE! ISSUE 76 / SEPTEMBER 1986 / PAGE 100 :&#xD;&#xA;&#xD;&#xA;http://www.atarimagazines.com/compute/issue76/AtariML.php&#xD;&#xA;&#xD;&#xA;The program heavily utilizes the CASIC &quot;self-programming trick&quot;.&#xD;&#xA;&#xD;&#xA;First, let's explain the trick. An example - dynamically allocating a string of variable length - is located starting with line 31570:&#xD;&#xA;&#xD;&#xA;    PH 31570 GRAPHICS 0:POSITION 2,4:PRINT &quot;31750 DIM TEMP$(&quot;;FILSIZ;&quot;):RETURN&quot;&#xD;&#xA;    FK 31580 PRINT &quot;CONT&quot;:POSITION 2,0:POKE 842,13:STOP&#xD;&#xA;    FK 31590 POKE 842,12:GOSUB 31750&#xD;&#xA;&#xD;&#xA;31570:&#xD;&#xA;&#xD;&#xA; - clear screen (`GRAPHICS 0`). &#xD;&#xA; - position the cursor leaving a little room above (`POSITION 2,4`)&#xD;&#xA; - Output the text of the program line that is to be added/changed. In this case, that's creation (or on subsequent runs overwrite) of line 31750 which contains a subroutine, allocating space for a new variable, and returning.&#xD;&#xA;&#xD;&#xA;31580:&#xD;&#xA;&#xD;&#xA; - In the next line, output the command `CONT` - this command makes sense only in immediate context - used in a program it would trigger 'already running' error.&#xD;&#xA; - Position the cursor at the topmost line of the screen.&#xD;&#xA; - Perform a &quot;magical&quot; `POKE 842,13` - I'm not sure what's 'behind the scenes' - 842 is the ICAX1 register, but I only managed to find the meaning of its 2 and 3 (device open for read and write); not bit 0 which is toggled here.&#xD;&#xA; - Perform 'STOP'. This is mostly equivalent to pressing BREAK - aborting the activity of the program, in a way that is resumable by the CONT instruction.&#xD;&#xA;&#xD;&#xA;The moment the &quot;Magical Poke&quot; is executed Atari begins outputting the Return key repeatedly. The program is aborted before the cursor reaches the text on screen, so when it does, the computer is in immediate mode, but with &quot;jammed Return&quot;. Whatever lines the cursor rides through, are executed as if they were typed in. In that case, that's the line preceded by the number - which gets written into the program - and then, the line CONT, which resumes execution from the next command after STOP. Which happens to be...&#xD;&#xA;&#xD;&#xA;31590:&#xD;&#xA;&#xD;&#xA; - `POKE 842,12` to cancel the cursor madness&#xD;&#xA; - `GOSUB 31750` - execute the newly entered line.&#xD;&#xA;&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;Now, what the program actually does:&#xD;&#xA;&#xD;&#xA; - open the binary file for reading. (31540)&#xD;&#xA; - obtain file size (31560)&#xD;&#xA; - allocate a string of length corresponding to the binary length (using the self-programming trick) (31570)&#xD;&#xA; - load the binary into the memory location of the allocated string (31600)&#xD;&#xA; - output the contents of the string, wrapped in context of new program lines and variable assignments. (31610)&#xD;&#xA; - Enter them using the self-programming trick (31720),&#xD;&#xA; - Erase self from memory, using the self-programming trick. (31720)&#xD;&#xA;&#xD;&#xA;It's up to the user to save the remaining program containing the gibberish strings of machine code." />
  <row Id="1699" PostHistoryTypeId="2" PostId="611" RevisionGUID="54eb402d-b050-42ae-8e88-c474d3d61fce" CreationDate="2016-05-23T09:14:06.730" UserId="74" Text="In quite a few programs on Atari, I found the self-programming trick:&#xD;&#xA;&#xD;&#xA;    10 GRAPHICS 0           : REM clear the screen, enter standard text mode&#xD;&#xA;    20 POSITION 2,4         : REM place cursor 4 lines from top of screen&#xD;&#xA;    30 PRINT &quot;1000 SOUND 0, 200, 10, 15      : REM Beep&quot;&#xD;&#xA;    40 PRINT &quot;1010 FOR I=0 TO 500 : NEXT I   : REM wait a bit&quot;&#xD;&#xA;    50 PRINT &quot;1020 SOUND 0, 0, 0, 0          : REM Silence&quot;&#xD;&#xA;    60 PRINT &quot;1030 RETURN&quot;&#xD;&#xA;    70 PRINT &quot;CONT&quot;&#xD;&#xA;    80 POSITION 2,0         : REM place cursor on top of screen&#xD;&#xA;    90 POKE 842,13          : REM The Magical POKE&#xD;&#xA;    100 STOP                : REM Abort program execution&#xD;&#xA;    110 POKE 842,13         : REM Program is resumed from here. This stops the effect of the prior POKE&#xD;&#xA;    120 GOSUB 1000          : REM Emit the Beep&#xD;&#xA;    130 END&#xD;&#xA;&#xD;&#xA;The above program appends to self a subroutine that emits a beep, then executes it. The uses in practice were much more creative.&#xD;&#xA;&#xD;&#xA;The key point is `POKE 842,13` which causes effect similar to holding down the Return key - the cursor starts riding down the screen, executing whatever's printed out - including `CONT` which resumes the program.&#xD;&#xA;&#xD;&#xA;I found memory location 824 is [ICAX1](http://www.atarimax.com/freenet/freenet_material/12.AtariLibrary/2.MiscellaneousTextFiles/showarticle.php?30) not very informatively described as *The auxiliary information bytes are used to give CIO or the device any special information needed.* Bits 2 and 3 are responsible for Read and Write flags when opening a file... but I didn't find anything about bit 0, plus no file is being accessed here.&#xD;&#xA;&#xD;&#xA;So, 'from the guts side' what did that POKE do?" />
  <row Id="1700" PostHistoryTypeId="1" PostId="611" RevisionGUID="54eb402d-b050-42ae-8e88-c474d3d61fce" CreationDate="2016-05-23T09:14:06.730" UserId="74" Text="What did POKE 842,13 on Atari do? (Jamming the Return key)" />
  <row Id="1701" PostHistoryTypeId="3" PostId="611" RevisionGUID="54eb402d-b050-42ae-8e88-c474d3d61fce" CreationDate="2016-05-23T09:14:06.730" UserId="74" Text="&lt;atari&gt;&lt;memory-layout&gt;" />
  <row Id="1702" PostHistoryTypeId="2" PostId="612" RevisionGUID="fb5618c9-1ce0-478a-9b49-abd791427adf" CreationDate="2016-05-23T09:19:26.313" UserId="333" Text="&#xD;&#xA;##*This answer is getting seriously long! I'm submitting this as a draft because I have to take care of my dogs and other things, but I will come back and edit it later!*&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;As far as I know, there's no authoritative source, and the information out there is probably not really accurate. I will answer this from an electrical engineering perspective, and because I have implemented some of these fixes myself. First a little note about _timing fixes_:&#xD;&#xA;&#xD;&#xA;---&#xD;&#xA;The expression _timing fixes_ is not really accurate, but comes from the observation that an [RC filter](https://en.wikipedia.org/wiki/Low-pass_filter#RC_filter) (Resistor-Capacitor) will affect a digital step in a way that, after thresholding at an input of a digital circuit, looks like it has been delayed in time:&#xD;&#xA;&#xD;&#xA;![A simple time delay](https://upload.wikimedia.org/wikipedia/commons/d/d1/RC-RC-RC-RC_Delay.png)&#xD;&#xA;&#xD;&#xA;It is a pretty bad and unreliable way to delay a fast digital signal, and to my knowledge, this is not really what the fixes do.&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;&#xD;&#xA;## Ringing. Overshoot. Impedance mismatch.&#xD;&#xA;Designing a physically large circuit board with a lot of clock signals is not easy. The signals actually _bounce_ when reach junctions or connections. This often causes signals that should look like _a_ turning into _b_ in this image:![](http://www.ni.com/cms/images/devzone/tut/a/2170dcae1750.gif)&#xD;&#xA;&#xD;&#xA;The solution is called _termination_, and you may have seen it used in other settings, for example in SCSI cabling. If you have a signal from point A to point B, this can be calculated and implemented perfectly. For distributed signals like the clock signal in the Amiga, it's not that easy. Especially so if you want to allow everyone to just plug in random boards to the same signals. Termination on circuit boards are often implemented using resistors, and because of manufacturing variations and other reasons you can't often even use an optimal value, but you have to compromise. This is also a cost issue. Often you will use a &quot;rule of thumb&quot; value, manufacture the product, measure the signals, and leave it there if it looks right.&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;&#xD;&#xA;[Ian Stedman](http://www.ianstedman.co.uk/Amiga/amiga_hacks/A1200_Mobo_fix/a1200_mobo_fix.html) has collected some information about the various fixes proposed in the forums, and the main components are: **E121**_x_, **E122**_x_, **E123**_x_, **E125**_x_.&#xD;&#xA;&#xD;&#xA;Looking at the [schematics](http://www.amigawiki.org/doku.php?id=en:service:schematics) for the Amiga 1200 we can locate these components, and they are all connected to the CPU clock signal. A note on the schematics say&#xD;&#xA;&gt;Note: Various components are for EMI Control and may be loaded with funny things...&#xD;&#xA;&#xD;&#xA;...and another one...&#xD;&#xA;&gt;Note: Components designated as Exxx may be loaded with EMI fliters[sic], ferrite beads or resistors!&#xD;&#xA;&#xD;&#xA;We can also see that there is an asterisk near these components. What all this means is that the engineer(s) simply added the components to the schematic in case they found out that they are necessary. Some of these are not populated, and some are (This is _very_ common and you will see a lot of unpopulated components on almost every circuit board). They have added these because they were afraid that the digital signals would create [EMI](https://en.wikipedia.org/wiki/Electromagnetic_interference), electromagnetic interference, which would have stopped them from selling the devices in a lot of places around the world. I will not talk about that here.&#xD;&#xA;&#xD;&#xA;What it means for _you_ as a customer is that these components are populated seemingly &quot;at random&quot;. What can you do about it?&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;## Suggested solutions&#xD;&#xA;&#xD;&#xA;&gt;Is there one set of fixes that will fix all hardware stability issues with the Amiga 1200?&#xD;&#xA;&#xD;&#xA;*Probably*&#xD;&#xA;&#xD;&#xA;&gt;Do the timing fixes needed depend on the CPU accelerator used?&#xD;&#xA;&#xD;&#xA;*Maybe*&#xD;&#xA;&#xD;&#xA;My understanding is that it's a bit &quot;hit or miss&quot; when it comes to these fixes. The fixes consists of fitting or removing these components. Each of the Exxx component has two parts: A resistor and a capacitor. The resistor (*ExxxR*) can either be left out, fitted, or replaced with a [ferrite bead](https://en.wikipedia.org/wiki/Ferrite_bead). The capacitor (*ExxxC*) can either be fitted or left out.&#xD;&#xA;&#xD;&#xA;A [thread](http://eab.abime.net/showthread.php?t=60387) on the _English Amiga Board_ suggests these fixes:&#xD;&#xA;&#xD;&#xA; - **E123x**, **E125x** - Fit with the value indicated in the schematics&#xD;&#xA; - **E121R**, **E122R** - Fit or replace with a 60 Ω ferrite bead&#xD;&#xA; - **E121C**, **E122C** - Replace with 27 pF capacitors&#xD;&#xA;&#xD;&#xA;I have a feeling that doing this on every motherboard, no matter the revision, will fix most issues with accelerator boards. I don't think anyone has tried it on many different variants, but the idea is sound.&#xD;&#xA;&#xD;&#xA;*TODO: more about accelerator boards*&#xD;&#xA;" />
  <row Id="1703" PostHistoryTypeId="5" PostId="612" RevisionGUID="a6960d2d-5565-4e95-b9cc-d993728f7340" CreationDate="2016-05-23T13:01:31.263" UserId="333" Comment="Added most of what I planned to write from the beginning." Text="As far as I know, there's no authoritative source, and the information out there is probably not really accurate. I will answer this from an electrical engineering perspective, and because I have implemented some of these fixes myself. First a little note about _timing fixes_:&#xD;&#xA;&#xD;&#xA;---&#xD;&#xA;The expression _timing fixes_ is not really accurate, but comes from the observation that an [RC filter](https://en.wikipedia.org/wiki/Low-pass_filter#RC_filter) (Resistor-Capacitor) will affect a digital step in a way that, after thresholding at an input of a digital circuit, looks like it has been delayed in time:&#xD;&#xA;&#xD;&#xA;![A simple time delay](https://upload.wikimedia.org/wikipedia/commons/d/d1/RC-RC-RC-RC_Delay.png)&#xD;&#xA;&#xD;&#xA;It is a pretty bad and unreliable way to delay a fast digital signal, and to my knowledge, this is not really what the fixes do.&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;## Ringing. Overshoot. Impedance mismatch.&#xD;&#xA;Designing a physically large circuit board with a lot of clock signals is not easy. The signals actually _bounce_ when reach junctions or connections. This often causes signals that should look like _a_ turning into _b_ in this image:![](http://www.ni.com/cms/images/devzone/tut/a/2170dcae1750.gif)&#xD;&#xA;&#xD;&#xA;The solution is called _termination_, and you may have seen it used in other settings, for example in SCSI cabling. If you have a signal from point A to point B, this can be calculated and implemented perfectly. For distributed signals like the clock signal in the Amiga, it's not that easy. Especially so if you want to allow everyone to just plug in random boards to the same signals. Termination on circuit boards are often implemented using resistors, and because of manufacturing variations and other reasons you can't often even use an optimal value, but you have to compromise. This is also a cost issue. Often you will use a &quot;rule of thumb&quot; value, manufacture the product, measure the signals, and leave it there if it looks right.&#xD;&#xA;&#xD;&#xA;There's also the question of electrical interference. A nice and clean clock signal will, counterproductively, cause a lot of electromagnetic interference. This used to be a greater problem than it is today, which is why you will see that old home computers have excessive shielding while today's devices don't care enough.&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;[Ian Stedman](http://www.ianstedman.co.uk/Amiga/amiga_hacks/A1200_Mobo_fix/a1200_mobo_fix.html) has collected some information about the various fixes proposed in the forums, and the main components are: **E121**_x_, **E122**_x_, **E123**_x_, **E125**_x_.&#xD;&#xA;&#xD;&#xA;Looking at the [schematics](http://www.amigawiki.org/doku.php?id=en:service:schematics) for the Amiga 1200 we can locate these components, and they are all connected to the CPU clock signal. A note on the schematics say&#xD;&#xA;&gt;Note: Various components are for EMI Control and may be loaded with funny things...&#xD;&#xA;&#xD;&#xA;...and another one...&#xD;&#xA;&gt;Note: Components designated as Exxx may be loaded with EMI fliters[sic], ferrite beads or resistors!&#xD;&#xA;&#xD;&#xA;We can also see that there is an asterisk near these components. What all this means is that the engineer(s) simply added the components to the schematic in case they found out that they are necessary. Some of these are not populated, and some are (This is _very_ common and you will see a lot of unpopulated components on almost every circuit board). They have added these because they were afraid that the digital signals would create [EMI](https://en.wikipedia.org/wiki/Electromagnetic_interference), electromagnetic interference, which would have stopped them from selling the devices in a lot of places around the world.&#xD;&#xA;&#xD;&#xA;What it means for _you_ as a customer is that these components are populated seemingly &quot;at random&quot;. Now, what can you do about it?&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;## Suggested solutions&#xD;&#xA;&#xD;&#xA;&gt;Is there one set of fixes that will fix all hardware stability issues with the Amiga 1200?&#xD;&#xA;&#xD;&#xA;*Probably*&#xD;&#xA;&#xD;&#xA;&gt;Do the timing fixes needed depend on the CPU accelerator used?&#xD;&#xA;&#xD;&#xA;*Maybe*&#xD;&#xA;&#xD;&#xA;My understanding is that it's a bit &quot;hit or miss&quot; when it comes to these fixes. The fixes consists of fitting or removing these components. Each of the Exxx component has two parts: A resistor and a capacitor. The resistor (*ExxxR*) can either be left out, fitted, or replaced with a [ferrite bead](https://en.wikipedia.org/wiki/Ferrite_bead). The capacitor (*ExxxC*) can either be fitted or left out.&#xD;&#xA;&#xD;&#xA;A [thread](http://eab.abime.net/showthread.php?t=60387) on the _English Amiga Board_ suggests these fixes:&#xD;&#xA;&#xD;&#xA; - **E123x**, **E125x** - Fit with the value indicated in the schematics&#xD;&#xA; - **E121R**, **E122R** - Fit or replace with a 60 Ω ferrite bead&#xD;&#xA; - ***E121C**, **E122C** - (Replace with 27 pF capacitors)*&#xD;&#xA;&#xD;&#xA;I have a feeling that doing this on every motherboard, no matter the revision, will fix most issues with accelerator boards. I don't think anyone has tried it on many different variants, but the idea is sound. The &quot;dubious&quot; parts are the capacitors. Normally, you would not want capacitors on the signal lines, *especially* not the clock signals. The fact that they have added them shows that they were afraid of EMI, and added the components to the schematics just in case. [Individual Computer's wiki](http://wiki.icomp.de/wiki/ACA1232) has an article about these capacitors and strongly recommend that they are to be removed. I have no doubt that the advice is correct, and that this will help. It's probably the only modification you have to perform, although an annoying one because I seem to recall that some of these are located on the back of the board.&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;&lt;sup&gt;*Please leave a comment if you believe something here is wrong or unclear, and I will try to update the answer. It is an interesting topic, and it deserves to be researched. I may do so in the future, because I own the equipment to do so, and I have one rev 1 and one rev 2 A1200 motherboard. I just don't have the time or energy just now.*&lt;/sup&gt;" />
  <row Id="1704" PostHistoryTypeId="5" PostId="611" RevisionGUID="d1d77af2-9efc-44a4-9cc5-cf513e639583" CreationDate="2016-05-23T13:06:25.137" UserId="74" Comment="edited body" Text="In quite a few programs on Atari, I found the self-programming trick:&#xD;&#xA;&#xD;&#xA;    10 GRAPHICS 0           : REM clear the screen, enter standard text mode&#xD;&#xA;    20 POSITION 2,4         : REM place cursor 4 lines from top of screen&#xD;&#xA;    30 PRINT &quot;1000 SOUND 0, 200, 10, 15      : REM Beep&quot;&#xD;&#xA;    40 PRINT &quot;1010 FOR I=0 TO 500 : NEXT I   : REM wait a bit&quot;&#xD;&#xA;    50 PRINT &quot;1020 SOUND 0, 0, 0, 0          : REM Silence&quot;&#xD;&#xA;    60 PRINT &quot;1030 RETURN&quot;&#xD;&#xA;    70 PRINT &quot;CONT&quot;&#xD;&#xA;    80 POSITION 2,0         : REM place cursor on top of screen&#xD;&#xA;    90 POKE 842,13          : REM The Magical POKE&#xD;&#xA;    100 STOP                : REM Abort program execution&#xD;&#xA;    110 POKE 842,13         : REM Program is resumed from here. This stops the effect of the prior POKE&#xD;&#xA;    120 GOSUB 1000          : REM Emit the Beep&#xD;&#xA;    130 END&#xD;&#xA;&#xD;&#xA;The above program appends to self a subroutine that emits a beep, then executes it. The uses in practice were much more creative.&#xD;&#xA;&#xD;&#xA;The key point is `POKE 842,13` which causes effect similar to holding down the Return key - the cursor starts riding down the screen, executing whatever's printed out - including `CONT` which resumes the program.&#xD;&#xA;&#xD;&#xA;I found memory location 842 is [ICAX1](http://www.atarimax.com/freenet/freenet_material/12.AtariLibrary/2.MiscellaneousTextFiles/showarticle.php?30) not very informatively described as *The auxiliary information bytes are used to give CIO or the device any special information needed.* Bits 2 and 3 are responsible for Read and Write flags when opening a file... but I didn't find anything about bit 0, plus no file is being accessed here.&#xD;&#xA;&#xD;&#xA;So, 'from the guts side' what did that POKE do?" />
  <row Id="1705" PostHistoryTypeId="5" PostId="612" RevisionGUID="9751ba36-7890-4a9f-ae23-5ab3707a8a55" CreationDate="2016-05-23T13:08:42.380" UserId="333" Comment="Added most of what I planned to write from the beginning." Text="As far as I know, there's no authoritative source, and the information out there is probably not really accurate. I will answer this from an electrical engineering perspective, and because I have implemented some of these fixes myself. First a little note about _timing fixes_:&#xD;&#xA;&#xD;&#xA;---&#xD;&#xA;The expression _timing fixes_ is not really accurate, but comes from the observation that an [RC filter](https://en.wikipedia.org/wiki/Low-pass_filter#RC_filter) (Resistor-Capacitor) will affect a digital step in a way that, after thresholding at an input of a digital circuit, looks like it has been delayed in time:&#xD;&#xA;&#xD;&#xA;![A simple time delay](https://upload.wikimedia.org/wikipedia/commons/d/d1/RC-RC-RC-RC_Delay.png)&#xD;&#xA;&#xD;&#xA;It is a pretty bad and unreliable way to delay a fast digital signal, and to my knowledge, this is not really what the fixes do.&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;## Ringing. Overshoot. Impedance mismatch.&#xD;&#xA;Designing a physically large circuit board with a lot of clock signals is not easy. The signals actually _bounce_ when reach junctions or connections. This often causes signals that should look like _a_ turning into _b_ in this image:![](http://www.ni.com/cms/images/devzone/tut/a/2170dcae1750.gif)&#xD;&#xA;&#xD;&#xA;The solution is called _termination_, and you may have seen it used in other settings, for example in SCSI cabling. If you have a signal from point A to point B, this can be calculated and implemented perfectly. For distributed signals like the clock signal in the Amiga, it's not that easy. Especially so if you want to allow everyone to just plug in random boards to the same signals. Termination on circuit boards are often implemented using resistors, and because of manufacturing variations and other reasons you can't often even use an optimal value, but you have to compromise. This is also a cost issue. Often you will use a &quot;rule of thumb&quot; value, manufacture the product, measure the signals, and leave it there if it looks right.&#xD;&#xA;&#xD;&#xA;There's also the question of electrical interference. A nice and clean clock signal will, counterproductively, cause a lot of electromagnetic interference. This used to be a greater problem than it is today, which is why you will see that old home computers have excessive shielding while today's devices don't care enough.&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;[Ian Stedman](http://www.ianstedman.co.uk/Amiga/amiga_hacks/A1200_Mobo_fix/a1200_mobo_fix.html) has collected some information about the various fixes proposed in the forums, and the main components are: **E121**_x_, **E122**_x_, **E123**_x_, **E125**_x_.&#xD;&#xA;&#xD;&#xA;Looking at the [schematics](http://www.amigawiki.org/doku.php?id=en:service:schematics) for the Amiga 1200 we can locate these components, and they are all connected to the CPU clock signal. A note on the schematics say&#xD;&#xA;&gt;Note: Various components are for EMI Control and may be loaded with funny things...&#xD;&#xA;&#xD;&#xA;...and another one...&#xD;&#xA;&gt;Note: Components designated as Exxx may be loaded with EMI fliters[sic], ferrite beads or resistors!&#xD;&#xA;&#xD;&#xA;We can also see that there is an asterisk near these components. What all this means is that the engineer(s) simply added the components to the schematic in case they found out that they are necessary. Some of these are not populated, and some are (This is _very_ common and you will see a lot of unpopulated components on almost every circuit board). They have added these because they were afraid that the digital signals would create [EMI](https://en.wikipedia.org/wiki/Electromagnetic_interference), electromagnetic interference, which would have stopped them from selling the devices in a lot of places around the world.&#xD;&#xA;&#xD;&#xA;What it means for _you_ as a customer is that these components are populated seemingly &quot;at random&quot;. Now, what can you do about it?&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;## Suggested solutions&#xD;&#xA;&#xD;&#xA;&gt;Is there one set of fixes that will fix all hardware stability issues with the Amiga 1200?&#xD;&#xA;&#xD;&#xA;*Probably*&#xD;&#xA;&#xD;&#xA;&gt;Do the timing fixes needed depend on the CPU accelerator used?&#xD;&#xA;&#xD;&#xA;*Maybe*&#xD;&#xA;&#xD;&#xA;My understanding is that it's a bit &quot;hit or miss&quot; when it comes to these fixes. The fixes consists of fitting or removing these components. Each of the Exxx component has two parts: A resistor and a capacitor. The resistor (*ExxxR*) can either be left out, fitted, or replaced with a [ferrite bead](https://en.wikipedia.org/wiki/Ferrite_bead). The capacitor (*ExxxC*) can either be fitted or left out.&#xD;&#xA;&#xD;&#xA;A [thread](http://eab.abime.net/showthread.php?t=60387) on the _English Amiga Board_ suggests these fixes:&#xD;&#xA;&#xD;&#xA; - **E123R**, **E125R** - Fit with the value indicated in the schematics&#xD;&#xA; - **E121R**, **E122R** - Fit or replace with a 60 Ω ferrite bead&#xD;&#xA; - ***E123C**, **E125C** - (Fit with the value indicated in the schematics)*&#xD;&#xA; - ***E121C**, **E122C** - (Replace with 27 pF capacitors)*&#xD;&#xA;&#xD;&#xA;I have a feeling that doing this on every motherboard, no matter the revision, will fix most issues with accelerator boards. I don't think anyone has tried it on many different variants, but the idea is sound. The &quot;dubious&quot; parts are the capacitors. Normally, you would not want capacitors on the signal lines, *especially* not the clock signals. The fact that they have added them shows that they were afraid of EMI, and added the components to the schematics just in case. [Individual Computer's wiki](http://wiki.icomp.de/wiki/ACA1232) has an article about these capacitors and strongly recommend that they are to be removed. I have no doubt that the advice is correct, and that this will help. It's probably the only modification you have to perform, although an annoying one because I seem to recall that some of these are located on the back of the board.&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;&lt;sup&gt;*Please leave a comment if you believe something here is wrong or unclear, and I will try to update the answer. It is an interesting topic, and it deserves to be researched. I may do so in the future, because I own the equipment to do so, and I have one rev 1 and one rev 2 A1200 motherboard. I just don't have the time or energy just now.*&lt;/sup&gt;" />
  <row Id="1710" PostHistoryTypeId="2" PostId="613" RevisionGUID="30d4412f-efa6-4172-8abe-7e07de33639b" CreationDate="2016-05-23T17:13:02.560" UserId="621" Text="Many authors credit [Space Invaders][1] as the first blockbuster game to have been written with an onboard microprocessor (Taito used Intel's 8080 for game logic), but there is also references to Taito's [Western Gun][2] as the first arcade game to use a microprocessor in Chris Kohler's book [*Power-Up: How Japanese Video Games Gave the World an Extra Life*][3].&#xD;&#xA;&#xD;&#xA;What is considered to be the first arcade game to use a microprocessor?&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://en.wikipedia.org/wiki/Space_Invaders&#xD;&#xA;  [2]: http://www.arcade-museum.com/game_detail.php?game_id=10420&#xD;&#xA;  [3]: http://amzn.com/0744004241" />
  <row Id="1711" PostHistoryTypeId="1" PostId="613" RevisionGUID="30d4412f-efa6-4172-8abe-7e07de33639b" CreationDate="2016-05-23T17:13:02.560" UserId="621" Text="What was the first arcade game to use a microprocessor instead of discrete logic?" />
  <row Id="1712" PostHistoryTypeId="3" PostId="613" RevisionGUID="30d4412f-efa6-4172-8abe-7e07de33639b" CreationDate="2016-05-23T17:13:02.560" UserId="621" Text="&lt;8080&gt;&lt;intel-8080&gt;&lt;arcade&gt;" />
  <row Id="1713" PostHistoryTypeId="2" PostId="614" RevisionGUID="9dff946e-dde7-4be7-bd43-2ed1b186b1b7" CreationDate="2016-05-23T17:13:02.560" UserId="621" Text="Midway's port of Western Gun, known as [Gun Fight][1] in the West is the first arcade game that used a microprocessor (the same Intel 8080 used with Space Invaders).  The original Western Gun release in Japan used Taito's Transistor-Transistor Logic chip (possibly one in the 7400 chipset family, as used on many of Taito's boards).  Dave Nutting made the decision to use the 8080 when Taito licensed the game to Midway for its North American release in November of 1975.&lt;sup&gt;[1][2]&lt;/sup&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://en.wikipedia.org/wiki/Gun_Fight&#xD;&#xA;  [2]: http://www.giantbomb.com/gun-fight/3030-32574/" />
  <row Id="1714" PostHistoryTypeId="33" PostId="605" RevisionGUID="26be1e9b-bb67-44ed-9c85-695ffe13ca6b" CreationDate="2016-05-23T18:25:35.890" UserId="80" Comment="1" />
  <row Id="1716" PostHistoryTypeId="2" PostId="615" RevisionGUID="35523645-3442-4773-baac-6ac02edc6894" CreationDate="2016-05-23T21:01:31.633" UserId="301" Text="If bit 0 of location 842 is set then the keyboard scanning routine immediately returns 0x9B which is the code indicating the ENTER key has been pressed.  In short, a surprisingly literal effect.&#xD;&#xA;&#xD;&#xA;The keyboard scan is part of the &quot;OS&quot; ROM built into the machine.  There's a source listing I'll excerpt from: [Atari 800 ROM OS Source Listing][1]&#xD;&#xA;&#xD;&#xA;`ICAX1Z` is a zero page location that is a temporary copy of location 842.  If you know 6502 assembly language you can quickly see that the keyboard scan routine returns 0x9B when bit 0 of `ICAX1Z` is set:&#xD;&#xA;&#xD;&#xA;    ; SYSTEM EOL (CARRIAGE RETURN)&#xD;&#xA;    CR      =    $9B&#xD;&#xA;    ;...&#xD;&#xA;    KGETCH: LDA  ICAX1Z	   ;TEST LSB OF AUX1 FOR SPECIAL EDITOR READ MO&#xD;&#xA;	        LSR	  A&#xD;&#xA;	        BCS	  GETOUT&#xD;&#xA;    ;...&#xD;&#xA;    GETOUT: LDA   #CR      ;PUT CR IN ATACHR&#xD;&#xA;            BNE   K8       ;(UNCONDITIONAL)&#xD;&#xA;    ;....&#xD;&#xA;    K8:     STA   ATACHR&#xD;&#xA;    K4:     JMP   RETUR1   ;ALL DONE&#xD;&#xA;&#xD;&#xA;Additionally there are some equates which give the purpose of each bit in `AUX1` portion of the I/O Control Block of each device.  Most of the bits are generic (i.e., the mean the same to all devices), but `$1` (bit 0) does seem to have a special meaning:&#xD;&#xA;&#xD;&#xA;    ; AUX1 EQUATES&#xD;&#xA;    ; () INDICATES WHICH DEVICES USE BIT&#xD;&#xA;    APPEND  =     $1          ;OPEN FOR WRITE APPEND (D), OR SCREEN READ (&#xD;&#xA;    DIRECT  =     $2          ;OPEN FOR DIRECTORY ACCESS (D)&#xD;&#xA;    OPNIN   =     $4          ;OPEN FOR INPUT (ALL DEVICES)&#xD;&#xA;    OPNOT   =     $8          ;OPEN FOR OUTPUT (ALL DEVICES)&#xD;&#xA;    OPNINO  =     OPNIN+OPNOT ;OPEN FOR INPUT AND OUTPUT (ALL DEVICES)&#xD;&#xA;    MXDMOD  =     $10         ;OPEN FOR MIXED MODE (E,S)&#xD;&#xA;    INSCLR  =     $20         ;OPEN WITHOUT CLEARING SCREEN (E,S)&#xD;&#xA;&#xD;&#xA;The OS defines several devices including the keyboard, cassette, printer and disk each with a corresponding I/O Control Block (or IOCB).  You'll notice that the normal value for 842 is 12 which means `OPNIN` and `OPNOT` are both set.  The device is open for read and write access.  When you `POKE` 13 into 842 the `APPEND` bit is set.  For the cassette or disk that might mean you're adding to the end of a file.  For the keyboard device it has the special effect you're wondering about.&#xD;&#xA;&#xD;&#xA;Note that `POKE 842,4` has no obvious effect - BASIC never tries to write to the keyboard so turning off `OPNOT` does nothing.  But a `POKE 842,8` is bad.  BASIC will spew an undending stream of `ERROR - 131` messages as it tries to read input from the keyboard but is denied because read access has been turned off.&#xD;&#xA;&#xD;&#xA;  [1]: https://atariwiki.org/wiki/Wiki.jsp?page=Atari%20800%20ROM%20OS%20Source%20Listing &quot;Atari 800 ROM OS Source Listing&quot;" />
  <row Id="1718" PostHistoryTypeId="5" PostId="610" RevisionGUID="1d76ba23-89bf-43f6-9f3b-c9cb05cc48b6" CreationDate="2016-05-23T21:22:17.127" UserId="301" Comment="Add information about the debugger for development boards and a brief overview of libultra." Text="It used the same C compiler that shipped with the Indy workstation.  See: [Nintendo 64 Development Manual: C Compiler Suite][1]&#xD;&#xA;&#xD;&#xA;It required a few flags not normally used when building C programs for the Indy itself.  And there were utilities for downloading to the development boards and converting executables into ROM images.&#xD;&#xA;&#xD;&#xA;Some IDE's were available for UNIX at the time, but Nintendo didn't provide anything beyond system libraries and starter makefiles for the venerable &quot;make&quot; build command.  I'd expect most developers built N64 games in the same way they did Unix programs.  Run &quot;make&quot; on the command line and correct any errors in a separate editor window.  Or possible run &quot;make&quot; on a command line inside the emacs text editor with macros to assist in locating errors.&#xD;&#xA;&#xD;&#xA;Nintendo provided `gvd` for debugging programs that were downloaded using `gload`.  [It appears that][2] it was similar in function to typical Unix command line debuggers like `dbx` and `gdb`.&#xD;&#xA;&#xD;&#xA;A comment mentions `libultra`.  It is a C library of various utility functions ranging from common C library functions like `abs()` to matrix math, hardware accessors, threading primitives and so on.  The documentation has a [complete list of functions][3].  At the bottom of the page are links to functions grouped by category.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://level42.ca/projects/ultra64/Documentation/man/pro-man/pro05/index5.6.html &quot;Nintendo 64 Development Manual: C Compiler Suite&quot;&#xD;&#xA;  [2]: http://level42.ca/projects/ultra64/Documentation/man/pro-man/pro23/index23.5.html &quot;GameShop Debugger&quot;&#xD;&#xA;  [3]: http://level42.ca/projects/ultra64/Documentation/man/n64man/misc/search.html &quot;N64 Function List&quot;" />
  <row Id="1721" PostHistoryTypeId="2" PostId="616" RevisionGUID="114a281c-2c36-4f11-9ce9-bf5855b7e2a4" CreationDate="2016-05-23T22:01:22.837" UserId="80" Text="Although I don't recommend this course of action except for educational purposes, it is possible to do a bare-metal boot of [FreeDOS](https://en.wikipedia.org/wiki/FreeDOS) on some x86 Macs. The problem with actually *using* it (as opposed to noodling around in wonder that it works at all) is that most interesting DOS software gets down and dirty with the hardware, and a modern Mac isn't exactly register-level compatible with a 1990s-era PC." />
  <row Id="1723" PostHistoryTypeId="4" PostId="550" RevisionGUID="ce19ed9f-fb5c-4bc9-9ad5-238de302ed91" CreationDate="2016-05-24T00:08:23.140" UserId="539" Comment="Change title for hopeful clarity" Text="Writing raw 800k Mac GCR images to 1.44M floppies using Linux" />
  <row Id="1725" PostHistoryTypeId="5" PostId="612" RevisionGUID="844526b3-9cad-4274-a893-043b26a17b36" CreationDate="2016-05-24T06:43:37.927" UserId="333" Comment="Implemented changes from comments, and tried to give a more credible answer" Text="As far as I know, there's no authoritative source, and the information out there is probably not really accurate. I will answer this from an electrical engineering perspective, and because I have implemented some of these fixes myself. First a little note about _timing fixes_:&#xD;&#xA;&#xD;&#xA;---&#xD;&#xA;The expression _timing fixes_ is not really accurate, but comes from the observation that an [RC filter](https://en.wikipedia.org/wiki/Low-pass_filter#RC_filter) (Resistor-Capacitor) will affect a digital step in a way that, after thresholding at an input of a digital circuit, looks like it has been delayed in time:&#xD;&#xA;&#xD;&#xA;![A simple time delay](https://upload.wikimedia.org/wikipedia/commons/d/d1/RC-RC-RC-RC_Delay.png)&#xD;&#xA;&#xD;&#xA;It is a pretty bad and unreliable way to delay a fast digital signal, and to my knowledge, this is not really what the fixes do.&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;## Ringing. Overshoot. Impedance mismatch.&#xD;&#xA;Designing large circuit boards with multiple clock signals is not easy. Signals actually _bounce_ when they reach junctions or connections, causing reflections and other impurities:![](http://www.ni.com/cms/images/devzone/tut/a/2170dcae1750.gif)&#xD;&#xA;&#xD;&#xA;The solution is called _termination_, and you may have seen it used in other settings, for example in SCSI cabling. [Here](https://www.youtube.com/watch?v=DovunOxlY1k) is a great video on the subject, from 1959.&#xD;&#xA;&#xD;&#xA;If you have a signal from point A to point B, the correct termination can be calculated, but for distributed signals like the Amiga clock signals, it's not that easy. Especially so if you want to allow everyone to just plug in random boards to the same signals. The (arguably) _correct_ solution is to use special circuits called _clock distribution_ circuits, but you can usually get away with cheaper solutions.&#xD;&#xA;&#xD;&#xA;The common way is to add _termination resistors_. This works well, but only when you know about everything connected to the bus. This is where the problem lies: Adding an expansion board to the bus will change the electrical parameters on the network, invalidating the previously calculated resistances. This does not necessarily break things. The signals only have to be &quot;good enough&quot;. After all, that's why we are using digital signals.&#xD;&#xA;&#xD;&#xA;There's also the question of electrical interference. A nice and clean clock signal will, counterproductively, cause a lot of [electromagnetic interference](https://en.wikipedia.org/wiki/Unintentional_radiator). This can be mitigated by adding capacitors to smooth the sharp edges. Doing so is bad for the signal, and is preferably avoided, but can be a last resort fix to get the product out of the door.&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;[Ian Stedman](http://www.ianstedman.co.uk/Amiga/amiga_hacks/A1200_Mobo_fix/a1200_mobo_fix.html) has collected some information about the various fixes proposed in the forums, and the main components are: **E121**_x_, **E122**_x_, **E123**_x_, **E125**_x_.&#xD;&#xA;&#xD;&#xA;Looking at the [schematics](http://www.amigawiki.org/doku.php?id=en:service:schematics) for the Amiga 1200 we can locate these components, and they are all connected to the CPU clock signal. A note on the schematics say&#xD;&#xA;&gt;Note: Various components are for EMI Control and may be loaded with funny things...&#xD;&#xA;&#xD;&#xA;...and another one...&#xD;&#xA;&gt;Note: Components designated as Exxx may be loaded with EMI fliters[sic], ferrite beads or resistors!&#xD;&#xA;&#xD;&#xA;We can also see that there is an asterisk near these components. What all this means is that the engineer(s) simply added the components to the schematic in case they found out that they are necessary. Some of these are not populated, and some are (This is _very_ common and you will see a lot of unpopulated components on almost every circuit board). It could very well be that they did not plan to populate the components, but wanted the option of doing so in case any unforeseen problems arose. Eventually, someone down the line either put components there by mistake, or after measuring the final product and observing that the components are necessary. Everyone working in consumer electronics manufacturing can probably tell a lot of stories about this.&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;## Suggested answer&#xD;&#xA;&#xD;&#xA;&gt;Is there one set of fixes that will fix all hardware stability issues with the Amiga 1200?&#xD;&#xA;&#xD;&#xA;*Probably*&#xD;&#xA;&#xD;&#xA;The fixes consists of fitting or removing these components. Every Exxx component has two parts: A resistor and a capacitor. The resistor (*ExxxR*) can either be left out, fitted, or replaced with a [ferrite bead](https://en.wikipedia.org/wiki/Ferrite_bead). The capacitor (*ExxxC*) can either be fitted or left out.&#xD;&#xA;&#xD;&#xA;A [thread](http://eab.abime.net/showthread.php?t=60387) on the _English Amiga Board_ suggests these fixes:&#xD;&#xA;&#xD;&#xA; - **E123R**, **E125R** - Fit with the value indicated in the schematics&#xD;&#xA; - **E121R**, **E122R** - Fit or replace with a 60 Ω ferrite bead&#xD;&#xA; - **E123C**, **E125C** - Fit with the value indicated in the schematics&#xD;&#xA; - **E121C**, **E122C** - Replace with 27 pF capacitors&#xD;&#xA;&#xD;&#xA;In contrast to that advice, [Individual Computer's wiki](http://wiki.icomp.de/wiki/ACA1232) has an article about the capacitors and instead strongly recommend that they are to be removed.&#xD;&#xA;&#xD;&#xA;In my opinion, removing the capacitors and leaving everything else as they are is the best advice. I have a feeling that doing this on every motherboard, no matter the revision, will fix any issues with accelerator boards. I have three reasons for recommending this:&#xD;&#xA;&#xD;&#xA; 1. The capacitors are only added to pass an artificial test. Other than that, they do more harm than good to the signals.&#xD;&#xA; 2. There is a technically sound reason for the resistors as designed.&#xD;&#xA; 3. Any unnecessary rework has a chance of damaging the board or other components.&#xD;&#xA; 4. No need to order new parts.&#xD;&#xA;&#xD;&#xA;&gt;Do the timing fixes needed depend on the CPU accelerator used?&#xD;&#xA;&#xD;&#xA;*Probably not*&#xD;&#xA;&#xD;&#xA;I have not seen any good comparative data on this. People often mention Apollo boards to be extra problematic, but I have personally had to perform the modifications on an old Amiga 1200 for a Blizzard accelerator board.&#xD;&#xA;&#xD;&#xA;Now, as mentioned by Kuba Tyszko in a comment, if your accelerator board works, it is not necessary to risk damage by doing any of these mods. If, however, you experience unusual instability, it may be worth trying to remove the capacitors. I have nothing to back this up (yet), but I believe that this will improve the situation for every accelerator.&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;&lt;sup&gt;*Please leave a comment if you believe something here is wrong or unclear, and I will try to update the answer. It is an interesting topic, and it deserves to be researched.*&lt;/sup&gt;" />
  <row Id="1727" PostHistoryTypeId="5" PostId="611" RevisionGUID="bdbcdc4f-f99f-4dc3-91b8-4e8a2e36c754" CreationDate="2016-05-24T08:05:02.507" UserId="301" Comment="Fixed critical program error.  Poke value on line 110 must be 12, not 13.  Plus some minor syntax changes to meet the &quot;6 character edit requirement&quot;." Text="In quite a few programs on Atari, I found the self-programming trick:&#xD;&#xA;&#xD;&#xA;    10 GRAPHICS 0           : REM clear the screen, enter standard text mode&#xD;&#xA;    20 POSITION 2,4         : REM place cursor 4 lines from top of screen&#xD;&#xA;    30 PRINT &quot;1000 SOUND 0, 200, 10, 15      : REM Beep&quot;&#xD;&#xA;    40 PRINT &quot;1010 FOR I=0 TO 500 : NEXT I   : REM wait a bit&quot;&#xD;&#xA;    50 PRINT &quot;1020 SOUND 0, 0, 0, 0          : REM Silence&quot;&#xD;&#xA;    60 PRINT &quot;1030 RETURN&quot;&#xD;&#xA;    70 PRINT &quot;CONT&quot;&#xD;&#xA;    80 POSITION 2,0         : REM place cursor on top of screen&#xD;&#xA;    90 POKE 842,13          : REM The Magical POKE&#xD;&#xA;    100 STOP                : REM Abort program execution&#xD;&#xA;    110 POKE 842,12         : REM Program resumes from here. This stops the effect of the prior POKE&#xD;&#xA;    120 GOSUB 1000          : REM Emit the Beep&#xD;&#xA;    130 END&#xD;&#xA;&#xD;&#xA;The above program appends to itself a subroutine that emits a beep, then executes it. The uses in practice were much more creative.&#xD;&#xA;&#xD;&#xA;The key point is `POKE 842,13` which causes effect similar to holding down the Return key - the cursor starts riding down the screen, executing whatever's printed out - including `CONT` which resumes the program.&#xD;&#xA;&#xD;&#xA;I found memory location 842 is [ICAX1](http://www.atarimax.com/freenet/freenet_material/12.AtariLibrary/2.MiscellaneousTextFiles/showarticle.php?30) not very informatively described as *The auxiliary information bytes are used to give CIO or the device any special information needed.* Bits 2 and 3 are responsible for Read and Write flags when opening a file... but I didn't find anything about bit 0, plus no file is being accessed here.&#xD;&#xA;&#xD;&#xA;So, 'from the guts side' what did that POKE do?" />
  <row Id="1728" PostHistoryTypeId="24" PostId="611" RevisionGUID="bdbcdc4f-f99f-4dc3-91b8-4e8a2e36c754" CreationDate="2016-05-24T08:05:02.507" Comment="Proposed by 301 approved by 56, 74 edit id of 188" />
  <row Id="1729" PostHistoryTypeId="2" PostId="617" RevisionGUID="36e9b77d-21fc-48b6-ba45-c9fb01b6b538" CreationDate="2016-05-24T09:24:49.377" UserId="276" Text="In 1986, the 900th anniversary of the original Domesday Book, the BBC coordinated a project to document modern Britain.  This was claimed to be data to last for the next thousand years.  &#xD;&#xA;&#xD;&#xA;Data was compiled from myriad nationwide school projects.  The results were published as the *Domesday Discs*.  These were video disks in Laservision LVROM format.&#xD;&#xA;&#xD;&#xA;Is there any way of reading these disks on modern equipment?&#xD;&#xA;" />
  <row Id="1730" PostHistoryTypeId="1" PostId="617" RevisionGUID="36e9b77d-21fc-48b6-ba45-c9fb01b6b538" CreationDate="2016-05-24T09:24:49.377" UserId="276" Text="Reading the BBC Domesday Project" />
  <row Id="1731" PostHistoryTypeId="3" PostId="617" RevisionGUID="36e9b77d-21fc-48b6-ba45-c9fb01b6b538" CreationDate="2016-05-24T09:24:49.377" UserId="276" Text="&lt;acorn&gt;&lt;bbc-micro&gt;&lt;lvrom&gt;" />
  <row Id="1732" PostHistoryTypeId="2" PostId="618" RevisionGUID="bd38e045-35db-4487-9e89-847a626fd208" CreationDate="2016-05-24T09:36:21.810" UserId="-1" Text="" />
  <row Id="1733" PostHistoryTypeId="2" PostId="619" RevisionGUID="4af176cc-d90c-4456-aeba-70899c9c67bc" CreationDate="2016-05-24T09:36:21.810" UserId="-1" Text="" />
  <row Id="1734" PostHistoryTypeId="2" PostId="620" RevisionGUID="bf1c0c2d-b762-472e-920a-bbcafab21d88" CreationDate="2016-05-24T09:38:53.620" UserId="-1" Text="" />
  <row Id="1735" PostHistoryTypeId="2" PostId="621" RevisionGUID="ddd3a037-8166-4f45-951c-af40b61ab769" CreationDate="2016-05-24T09:38:53.620" UserId="-1" Text="" />
  <row Id="1736" PostHistoryTypeId="2" PostId="622" RevisionGUID="d7d3f01a-a69d-4e11-a312-b551aeed9f88" CreationDate="2016-05-24T11:26:41.293" UserId="79" Text="Reading up on various preservation efforts, including [the Center for Computing History's][1], and information collected on [Andy Finney's][2] and [Adrian Graham's][3] sites, it appears that the most difficult part would be physically reading the disks — the required drives were built in limited quantities.&#xD;&#xA;&#xD;&#xA;If you have one of the drives, it might be possible to connect it to a SCSI HBA and read from it that way (although none of this counts as &quot;modern equipment&quot;). Previous preservation efforts used the original hardware though so I don't know how feasible this is.&#xD;&#xA;&#xD;&#xA;Once you have the data from the drives, it is possible to extract the information contained therein. The Centre for Computing History did it, and the [CAMiLEON project][4] also wrote [an emulator][5] (which isn't available as far as I can tell).&#xD;&#xA;&#xD;&#xA;It's probably easier to use [the Centre for Computing History's resources][6] and [the BBC's Domesday Reloaded site][7] !&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.computinghistory.org.uk/pages/8792/BBC-Domesday-System-Preservation/&#xD;&#xA;  [2]: http://www.atsf.co.uk/dottext/domesday.html#redux&#xD;&#xA;  [3]: http://www.binarydinosaurs.co.uk/Museum/Acorn/domesday/index.php&#xD;&#xA;  [4]: http://web.archive.org/web/20090514022456/http://www.si.umich.edu/CAMILEON/domesday/domesday.html&#xD;&#xA;  [5]: http://web.archive.org/web/20090514022456/http://www.si.umich.edu/CAMILEON/domesday/pictures.html&#xD;&#xA;  [6]: http://www.computinghistory.org.uk/domesday&#xD;&#xA;  [7]: http://www.bbc.co.uk/history/domesday/using-domesday" />
  <row Id="1737" PostHistoryTypeId="2" PostId="623" RevisionGUID="feef96a5-0228-4bb4-88b9-8fd2ab3c21a1" CreationDate="2016-05-24T14:01:28.433" UserId="694" Text="If you're thinking of interactive realtime games using some kind of visual representation (so, this is essentially excluding turn-based games), it's probably Spacewar! for the DEC PDP-1 (MIT, Steve Russell et al., 1961/62).&#xD;&#xA;&#xD;&#xA;See [http://www.masswerk.at/spacewar/][1] (online emulation)&#xD;&#xA;&#xD;&#xA;See also &quot;The Origin of Spacewar&quot; by J.M. Graetz: [http://www.masswerk.at/spacewar/SpacewarOrigin.html][2]&#xD;&#xA;&#xD;&#xA;  [1]: http://www.masswerk.at/spacewar/&#xD;&#xA;  [2]: http://www.masswerk.at/spacewar/SpacewarOrigin.html" />
  <row Id="1738" PostHistoryTypeId="2" PostId="624" RevisionGUID="4599d14b-259b-4463-bd79-3cab79d9a8df" CreationDate="2016-05-24T14:32:48.853" UserId="-1" Text="" />
  <row Id="1739" PostHistoryTypeId="2" PostId="625" RevisionGUID="86f2c223-4145-4f36-b679-05c3831ad8a4" CreationDate="2016-05-24T14:32:48.853" UserId="-1" Text="" />
  <row Id="1740" PostHistoryTypeId="2" PostId="626" RevisionGUID="ae9eac6e-efd2-4c57-869c-9db2934f8dfc" CreationDate="2016-05-24T14:35:47.117" UserId="-1" Text="" />
  <row Id="1741" PostHistoryTypeId="2" PostId="627" RevisionGUID="b762984b-c9d9-49d1-9fe7-c439a4492512" CreationDate="2016-05-24T14:35:47.117" UserId="-1" Text="" />
  <row Id="1742" PostHistoryTypeId="2" PostId="628" RevisionGUID="ec2b03d9-460c-4c47-a438-e608741445d6" CreationDate="2016-05-24T14:37:21.877" UserId="-1" Text="" />
  <row Id="1743" PostHistoryTypeId="2" PostId="629" RevisionGUID="e112958f-a26e-493c-aac6-51c64dd802ce" CreationDate="2016-05-24T14:37:21.877" UserId="-1" Text="" />
  <row Id="1744" PostHistoryTypeId="6" PostId="587" RevisionGUID="04117ff2-6630-476b-b780-d127da4a80f5" CreationDate="2016-05-24T15:36:00.233" UserId="276" Comment="Added BBC Micro tag" Text="&lt;memory-layout&gt;&lt;acorn&gt;&lt;bbc-micro&gt;" />
  <row Id="1745" PostHistoryTypeId="24" PostId="587" RevisionGUID="04117ff2-6630-476b-b780-d127da4a80f5" CreationDate="2016-05-24T15:36:00.233" Comment="Proposed by 276 approved by 79, 92 edit id of 191" />
  <row Id="1746" PostHistoryTypeId="2" PostId="630" RevisionGUID="fe23533c-def4-48ba-a428-7615c98b1440" CreationDate="2016-05-24T16:59:06.620" UserId="621" Text="Adding this as an additional answer, since it technically differs from my Gun Fight answer.&#xD;&#xA;&#xD;&#xA;[mnem][1] mentioned the Fairchild F8 microprocessor in the comments of my question.  If we are indeed counting the Fairchild F8 as an 8-bit microprocessor then Gun Fight is technically not the first arcade game ever created using a microprocessor.  It is, however, the first commercially released game that used a microprocessor.&#xD;&#xA;&#xD;&#xA;[Jerry Lawson][2], designer of the [Fairchild Channel F][3] video game console, allegedly created a top-down driving coin-op game using the Fairchild F8 in 1974/75.[&lt;sup&gt;1&lt;/sup&gt;][4]&#xD;&#xA;&#xD;&#xA;[The Golden Age Arcade Historian][5] comments:&#xD;&#xA;&#xD;&#xA;&gt; **Sidebar - Was Demolition Derby the first coin-op game with a microprocessor?**&#xD;&#xA;&gt; &#xD;&#xA;&gt; Some sources have suggested that Demolition Derby was the first game&#xD;&#xA;&gt; to use a microprocessor and even that the game was released not long&#xD;&#xA;&gt; after Pong, but is this true? Lawson claims he started working on the&#xD;&#xA;&gt; game in 1972 or 1973 and sold it to Major Manufacturers of San Mateo,&#xD;&#xA;&gt; CA. Some sources (including the Wikipedia article on Lawson) claim&#xD;&#xA;&gt; that the game &quot;debuted&quot; shortly after the release of Pong. The F-8,&#xD;&#xA;&gt; however, was not released until 1975 and Major Manufacturers was not&#xD;&#xA;&gt; incorporated until October of 1974. The October, 1975 issue of Play&#xD;&#xA;&gt; Meter announced that at the 1975 MOA show (the same show where Gun&#xD;&#xA;&gt; Fight was introduced), Major Manufacturers would be &quot;…. introducing&#xD;&#xA;&gt; two new upright games that use a microprocessor...instead of a logic&#xD;&#xA;&gt; board, as well as exhibiting their line of video games and a new&#xD;&#xA;&gt; designer cocktail table&quot;. The article does not name any of these&#xD;&#xA;&gt; games, nor do any other issues of Replay or Play Meter. It is not&#xD;&#xA;&gt; clear from the description if the microprocessor games were video&#xD;&#xA;&gt; games or not. The October, 1975 issue of Vending Times, however, does&#xD;&#xA;&gt; list two games that the company was to display at the MOA: Lunar&#xD;&#xA;&gt; Module and Fascination - but does not mention whether they use a&#xD;&#xA;&gt; microprocessor. The 1972/1973 date thus seems clearly too early, at&#xD;&#xA;&gt; least for a microprocessor version of Demolition Derby (though Lawson&#xD;&#xA;&gt; could have started with a non-microprocessor version). In addition,&#xD;&#xA;&gt; only one copy of Demolition Derby is thought to have been built and it&#xD;&#xA;&gt; never went past the field testing stage. On the other hand, while it&#xD;&#xA;&gt; seems unlikely that it was field tested prior to 1975, given that&#xD;&#xA;&gt; Major Manufacturers did plan to show microprocessor games at the 1975&#xD;&#xA;&gt; MOA, it (or one of Major's other games) may have been tested prior to&#xD;&#xA;&gt; the release of Gun Fight.&#xD;&#xA;&#xD;&#xA;[Source][6]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://retrocomputing.stackexchange.com/users/320/mnem&#xD;&#xA;  [2]: https://en.wikipedia.org/wiki/Jerry_Lawson_(engineer)&#xD;&#xA;  [3]: https://en.wikipedia.org/wiki/Fairchild_Channel_F&#xD;&#xA;  [4]: http://mamedev.emulab.it/undumped/index.php?title=Demolition_Derby_(Lawson)&#xD;&#xA;  [5]: http://allincolorforaquarter.blogspot.com/&#xD;&#xA;  [6]: http://allincolorforaquarter.blogspot.com/2013/07/dave-needle-and-jerry-lawon-two-early.html" />
  <row Id="1747" PostHistoryTypeId="5" PostId="598" RevisionGUID="c74179fc-de14-4242-9c5d-c482e4669e0a" CreationDate="2016-05-24T18:20:51.770" UserId="621" Comment="added 96 characters in body" Text="Related tags and processors:&#xD;&#xA;&#xD;&#xA;[tag:intel-8080]&#xD;&#xA;[tag:8008]&#xD;&#xA;[tag:8085]&#xD;&#xA;[tag:8086]&#xD;&#xA;[tag:8088]" />
  <row Id="1748" PostHistoryTypeId="24" PostId="598" RevisionGUID="c74179fc-de14-4242-9c5d-c482e4669e0a" CreationDate="2016-05-24T18:20:51.770" Comment="Proposed by 621 approved by 79, 47 edit id of 182" />
  <row Id="1749" PostHistoryTypeId="5" PostId="599" RevisionGUID="79ef133a-83ad-4f46-8c85-ac6af9fb46ea" CreationDate="2016-05-24T18:20:56.130" UserId="621" Comment="added 49 characters in body" Text="For questions about the 8080 8-bit microprocessor" />
  <row Id="1750" PostHistoryTypeId="24" PostId="599" RevisionGUID="79ef133a-83ad-4f46-8c85-ac6af9fb46ea" CreationDate="2016-05-24T18:20:56.130" Comment="Proposed by 621 approved by 79, 47 edit id of 183" />
  <row Id="1751" PostHistoryTypeId="5" PostId="629" RevisionGUID="cbd219ae-887a-4d38-b261-bbc14e1c579f" CreationDate="2016-05-24T18:20:58.817" UserId="621" Comment="added 53 characters in body" Text="For questions about Intel's 8080 8-bit microprocessor" />
  <row Id="1752" PostHistoryTypeId="24" PostId="629" RevisionGUID="cbd219ae-887a-4d38-b261-bbc14e1c579f" CreationDate="2016-05-24T18:20:58.817" Comment="Proposed by 621 approved by 47 edit id of 197" />
  <row Id="1753" PostHistoryTypeId="5" PostId="601" RevisionGUID="e8a055ac-ac74-4809-ab27-8d96bdad2287" CreationDate="2016-05-24T18:21:01.567" UserId="621" Comment="added 49 characters in body" Text="For questions about the 8085 8-bit microprocessor" />
  <row Id="1754" PostHistoryTypeId="24" PostId="601" RevisionGUID="e8a055ac-ac74-4809-ab27-8d96bdad2287" CreationDate="2016-05-24T18:21:01.567" Comment="Proposed by 621 approved by 79, 47 edit id of 185" />
  <row Id="1755" PostHistoryTypeId="5" PostId="584" RevisionGUID="6e57b9b1-c20e-4cf2-a3c0-edbb25effa2c" CreationDate="2016-05-24T18:21:10.820" UserId="621" Comment="added 134 characters in body" Text="Use this tag for questions related to programs loaded from read-only memory cartridges.&#xD;&#xA;&#xD;&#xA;Related tags:&#xD;&#xA;[tag:rom]&#xD;&#xA;[tag:floppy-disk]" />
  <row Id="1756" PostHistoryTypeId="24" PostId="584" RevisionGUID="6e57b9b1-c20e-4cf2-a3c0-edbb25effa2c" CreationDate="2016-05-24T18:21:10.820" Comment="Proposed by 621 approved by 79, 47 edit id of 174" />
  <row Id="1757" PostHistoryTypeId="5" PostId="626" RevisionGUID="f48d2fb9-6cbb-4514-9bcd-d30f780e997e" CreationDate="2016-05-24T18:21:13.960" UserId="621" Comment="added 31 characters in body" Text="Related tags:&#xD;&#xA;[tag:intel-8080]" />
  <row Id="1758" PostHistoryTypeId="24" PostId="626" RevisionGUID="f48d2fb9-6cbb-4514-9bcd-d30f780e997e" CreationDate="2016-05-24T18:21:13.960" Comment="Proposed by 621 approved by 47 edit id of 194" />
  <row Id="1759" PostHistoryTypeId="5" PostId="595" RevisionGUID="09000f2a-f346-432f-9dde-088325d9826b" CreationDate="2016-05-24T18:21:18.850" UserId="621" Comment="added 101 characters in body" Text="For questions regarding the TRS-80 Micro Computer System Model III computer sold by Tandy Corporation" />
  <row Id="1760" PostHistoryTypeId="24" PostId="595" RevisionGUID="09000f2a-f346-432f-9dde-088325d9826b" CreationDate="2016-05-24T18:21:18.850" Comment="Proposed by 621 approved by 79, 47 edit id of 178" />
  <row Id="1761" PostHistoryTypeId="5" PostId="549" RevisionGUID="647a4180-b079-46ee-adc7-c4a01e93fb69" CreationDate="2016-05-24T18:21:32.553" UserId="621" Comment="Moved broken markdown from excerpt to tag wiki, added full tag wiki" Text="BASIC is a lightweight, high-level programming language favored in retro computer systems." />
  <row Id="1762" PostHistoryTypeId="24" PostId="549" RevisionGUID="647a4180-b079-46ee-adc7-c4a01e93fb69" CreationDate="2016-05-24T18:21:32.553" Comment="Proposed by 621 approved by 79, 47 edit id of 163" />
  <row Id="1763" PostHistoryTypeId="5" PostId="571" RevisionGUID="c1ae4870-1bdc-4c73-9d53-42e6af3f99a7" CreationDate="2016-05-24T18:22:10.090" UserId="621" Comment="added 70 characters in body" Text="For questions related to the Applesoft BASIC interpreter and language." />
  <row Id="1764" PostHistoryTypeId="24" PostId="571" RevisionGUID="c1ae4870-1bdc-4c73-9d53-42e6af3f99a7" CreationDate="2016-05-24T18:22:10.090" Comment="Proposed by 621 approved by 79, 47 edit id of 169" />
  <row Id="1765" PostHistoryTypeId="5" PostId="565" RevisionGUID="e44f27ae-baff-4f0a-90a2-88673ef58d36" CreationDate="2016-05-24T18:22:16.010" UserId="621" Comment="added 334 characters in body" Text="Use this tag for general questions about using and running software.&#xD;&#xA;&#xD;&#xA;For questions specific to the media used to load software, consider using the [tag:floppy-disk] tag.&#xD;&#xA;&#xD;&#xA;For questions about software for specific hardware, consider using this tag in conjunction with a related hardware tag, such as [tag:amiga] or [tag:apple-ii]." />
  <row Id="1766" PostHistoryTypeId="24" PostId="565" RevisionGUID="e44f27ae-baff-4f0a-90a2-88673ef58d36" CreationDate="2016-05-24T18:22:16.010" Comment="Proposed by 621 approved by 79, 47 edit id of 164" />
  <row Id="1767" PostHistoryTypeId="5" PostId="628" RevisionGUID="c4842867-98b4-4fde-9717-5d6c7d9db4bb" CreationDate="2016-05-24T18:22:32.107" UserId="621" Comment="added 90 characters in body" Text="Related tags and processors:&#xD;&#xA;&#xD;&#xA;[tag:8008]&#xD;&#xA;[tag:8080]&#xD;&#xA;[tag:8085]&#xD;&#xA;[tag:8086]&#xD;&#xA;[tag:8088]" />
  <row Id="1768" PostHistoryTypeId="24" PostId="628" RevisionGUID="c4842867-98b4-4fde-9717-5d6c7d9db4bb" CreationDate="2016-05-24T18:22:32.107" Comment="Proposed by 621 approved by 47 edit id of 196" />
  <row Id="1769" PostHistoryTypeId="5" PostId="621" RevisionGUID="af4a2702-7907-41e5-a019-0c3389cb96e2" CreationDate="2016-05-24T18:22:36.593" UserId="276" Comment="added 111 characters in body" Text="For questions regarding the LaserVision Read Only Memory format of video disks, originally produced by Philips." />
  <row Id="1770" PostHistoryTypeId="24" PostId="621" RevisionGUID="af4a2702-7907-41e5-a019-0c3389cb96e2" CreationDate="2016-05-24T18:22:36.593" Comment="Proposed by 276 approved by 79, 47 edit id of 190" />
  <row Id="1771" PostHistoryTypeId="5" PostId="600" RevisionGUID="957a6157-3ea0-413c-a8e5-123352b1407b" CreationDate="2016-05-24T18:22:39.263" UserId="621" Comment="added 96 characters in body" Text="Related tags and processors:&#xD;&#xA;&#xD;&#xA;[tag:intel-8080]&#xD;&#xA;[tag:8008]&#xD;&#xA;[tag:8085]&#xD;&#xA;[tag:8086]&#xD;&#xA;[tag:8088]" />
  <row Id="1772" PostHistoryTypeId="24" PostId="600" RevisionGUID="957a6157-3ea0-413c-a8e5-123352b1407b" CreationDate="2016-05-24T18:22:39.263" Comment="Proposed by 621 approved by 79, 47 edit id of 184" />
  <row Id="1773" PostHistoryTypeId="5" PostId="566" RevisionGUID="1300c929-08bf-4f80-8f1d-6a75876b1451" CreationDate="2016-05-24T18:22:47.060" UserId="621" Comment="added 100 characters in body" Text="For questions about the applications and programs that can be run on retro devices (computers, etc.)" />
  <row Id="1774" PostHistoryTypeId="24" PostId="566" RevisionGUID="1300c929-08bf-4f80-8f1d-6a75876b1451" CreationDate="2016-05-24T18:22:47.060" Comment="Proposed by 621 approved by 79, 47 edit id of 165" />
  <row Id="1775" PostHistoryTypeId="5" PostId="570" RevisionGUID="39ee27bb-848b-4048-805a-5d2507487e19" CreationDate="2016-05-24T18:22:51.860" UserId="621" Comment="added 124 characters in body" Text="Applesoft BASIC (also known as FP BASIC) is a dialect of Microsoft BASIC that shipped with the Apple II series of computers." />
  <row Id="1776" PostHistoryTypeId="24" PostId="570" RevisionGUID="39ee27bb-848b-4048-805a-5d2507487e19" CreationDate="2016-05-24T18:22:51.860" Comment="Proposed by 621 approved by 79, 47 edit id of 168" />
  <row Id="1777" PostHistoryTypeId="5" PostId="594" RevisionGUID="01436aee-e9a5-4bcf-be6b-edd16126cf9a" CreationDate="2016-05-24T18:23:22.360" UserId="621" Comment="added 134 characters in body" Text="Use this tag for specific questions about the TRS-80 Model III.  For other models or generic TRS-80 questions, use a more generic tag." />
  <row Id="1778" PostHistoryTypeId="24" PostId="594" RevisionGUID="01436aee-e9a5-4bcf-be6b-edd16126cf9a" CreationDate="2016-05-24T18:23:22.360" Comment="Proposed by 621 approved by 79, 47 edit id of 177" />
  <row Id="1780" PostHistoryTypeId="2" PostId="631" RevisionGUID="d9eb1fa1-a029-41a7-96d0-785c16e275ad" CreationDate="2016-05-24T21:43:08.553" UserId="698" Text="It was 3 times the teletype speed.  yes, 300 baud is exactly 3 times 110 Baud, measured in characters.  The teletype standard was 110 bps with 1 start and 2 stop bits. That, plus 8 data bits (7 plus parity) equals 11 bits per character.   110/11 = 10 CPS.  300 Baud used 1 Start and 1 Stop, plus 8 data = 10 bits per character.    300/10 = 30, and 30 cps is 3 time 10 cps." />
  <row Id="1782" PostHistoryTypeId="5" PostId="497" RevisionGUID="bab49815-51e3-4bf8-bc19-252d5353c4e1" CreationDate="2016-05-25T00:54:44.207" UserId="507" Comment="more info" Text="Doxbox for Mac would work. I have Dosbox for PC (Windows 10). I love it and use it run everything from 1980 or later. I have GW-Basic, Turbo Pascal, Old games like Wheel of Fortune and Jeopardy from the early 90's. You can run off a flash drive or hard drive. &#xD;&#xA;&#xD;&#xA;DosBox 0.74&#xD;&#xA;&#xD;&#xA;Another thing you try..Something my uber extreme computer geek of a son did. Partitioned the drive and installed windows 7 on one, and Linux on the other. Apparently it worked so don't quote me on it." />
  <row Id="1784" PostHistoryTypeId="2" PostId="632" RevisionGUID="5870db80-063e-46e5-ab92-5e2ad2601cd7" CreationDate="2016-05-25T07:21:26.457" UserId="539" Text="Here's what I've been able to determine: A short filesystem on a floppy should work fine, so long as the blocks are all there, in the right order.&#xD;&#xA;&#xD;&#xA;A raw 800k disk image for the Macintosh (or for the IIgs as it happens) will be exactly 819200 bytes in size.&#xD;&#xA;&#xD;&#xA;```&#xD;&#xA;tjcarter@miho:~/tmp$ lsar ~/Downloads/System4.2-Finder6.0.sea.hqx &#xD;&#xA;/home/pi/Downloads/System4.2-Finder6.0.sea.hqx: StuffIt 5 in BinHex&#xD;&#xA;System 4.2 - Finder 6.0/&#xD;&#xA;System 4.2 - Finder 6.0/Disk420.dsk&#xD;&#xA;System 4.2 - Finder 6.0/Disk420b.dsk&#xD;&#xA;System 4.2 - Finder 6.0/vMac Screen 5.0&#xD;&#xA;tjcarter@miho:~/tmp$ unar ~/Downloads/System4.2-Finder6.0.sea.hqx &#xD;&#xA;/home/pi/Downloads/System4.2-Finder6.0.sea.hqx: StuffIt 5 in BinHex&#xD;&#xA;  System 4.2 - Finder 6.0/  (dir)... OK.&#xD;&#xA;  System 4.2 - Finder 6.0/Disk420.dsk  (819200 B)... OK.&#xD;&#xA;  System 4.2 - Finder 6.0/Disk420b.dsk  (819200 B)... OK.&#xD;&#xA;  System 4.2 - Finder 6.0/vMac Screen 5.0  (5154 B)... OK.&#xD;&#xA;Successfully extracted to &quot;System 4.2 - Finder 6.0&quot;.&#xD;&#xA;```&#xD;&#xA;&#xD;&#xA;These .dsk files are raw.  If you first fdformat your floppy to be 1.44MB, you actually **can** just run a command like...&#xD;&#xA;&#xD;&#xA;```&#xD;&#xA;dd bs=512 if=&quot;System 4.2 - Finder 6.0/Disk420.dsk&quot; of=/dev/floppy&#xD;&#xA;```&#xD;&#xA;&#xD;&#xA;...and a Mac with a 1.44MB drive would be able to read it.&#xD;&#xA;&#xD;&#xA;Disk Copy images are not raw, however.  They are 819284 bytes.  Before writing the image to the disk, you must cut off the 84 byte header.  An easy/effective (if inefficient) way to do this would be a command like:&#xD;&#xA;&#xD;&#xA;```&#xD;&#xA;dd bs=84 skip=1 if=diskcopy_image.dmg of=raw_image.img&#xD;&#xA;```&#xD;&#xA;&#xD;&#xA;You can then write the raw image as with the first dd example above.&#xD;&#xA;&#xD;&#xA;Apple distributed a number of disk images as `.sea.bin` files.  Ivan Drucker demonstrates extracting a raw image from these in his A2SERVER package, a suite of wrapper scripts to make a netatalk 2 installation into an Apple //e and IIgs friendly AppleTalk server.  My work on this is how I knew that the raw image could be extracted from these files with a combination of `dd` and `unar` from [The Unarchiver's unar/lsar](http://unarchiver.c3.cx/) for Linux.&#xD;&#xA;&#xD;&#xA;Simply use `unar` to extract the BinHex `.sea.bin` file.  This will leave you with a `.sea` file whose name is probably not UNIX friendly as spaces are quite acceptable in Macintosh filenames.  The extraction program is appended to the image and may be stripped:&#xD;&#xA;&#xD;&#xA;```&#xD;&#xA;mv disk_image.sea disk_image.dmg&#xD;&#xA;truncate -s 819284 disk_image.dmg&#xD;&#xA;dd bs=84 skip=1 if=disk_image.dmg of=disk_image.img&#xD;&#xA;```&#xD;&#xA;This image may then just be written to the disk as above.&#xD;&#xA;&#xD;&#xA;The `hfsutils` package might be able to copy files with forks intact from one filesystem to another, allowing you to simply mkfs.hfs on the floppy, but I've never had luck doing recursive copies with it, and I don't know if a copied System folder would be bootable.&#xD;&#xA;&#xD;&#xA;Hopefully other vintage Mac users can improve this answer with more details." />
  <row Id="1785" PostHistoryTypeId="2" PostId="633" RevisionGUID="72fda7aa-b164-4e76-830b-7c4132c72552" CreationDate="2016-05-25T14:29:19.153" UserId="175" Text="Real Mac/IIgs 800k floppy disks cannot be written from Linux because Apple used [GCR](https://en.wikipedia.org/wiki/Group_code_recording) to get 800k on the disk instead of the 720k that the PC did. You need a [Superdrive](https://en.wikipedia.org/wiki/Macintosh_External_Disk_Drive) to write Mac/IIgs format 800k disks." />
  <row Id="1786" PostHistoryTypeId="5" PostId="633" RevisionGUID="567924b5-fe9f-43c3-b23a-fad700bb26b1" CreationDate="2016-05-25T15:08:48.330" UserId="175" Comment="added 226 characters in body" Text="Real Mac/IIgs 800k floppy disks cannot be written from Linux because Apple used [GCR](https://en.wikipedia.org/wiki/Group_code_recording) to get 800k on the disk instead of the 720k that the PC did. You need a [Superdrive](https://en.wikipedia.org/wiki/Macintosh_External_Disk_Drive) to write Mac/IIgs format 800k disks.&#xD;&#xA;&#xD;&#xA;You can write 1440k floppy disks from a PC drive that a Mac can read. You used to be able to download MacOS 6.0.8, 7.1, and 7.5.3 from Apple. Lots of people have cached those system disk images, which are in 1440k format. " />
  <row Id="1787" PostHistoryTypeId="2" PostId="634" RevisionGUID="79f7b825-03c7-4762-95eb-ca245d35b34c" CreationDate="2016-05-25T15:37:33.963" UserId="702" Text="I have two 50-pin scsi hard-drives that I need to take an image of. However after spending quite a while searching across the internet, I cannot find any adapters to convert the 50-pin connector to something useful.&#xD;&#xA;&#xD;&#xA;The make/model of the hard-drives is the Quantum Lightning ProDrive, and they hold 540MB each.&#xD;&#xA;&#xD;&#xA;If anyone has any suggestions on how I can attach these to a more modern machine it would be greatly appreciated." />
  <row Id="1788" PostHistoryTypeId="1" PostId="634" RevisionGUID="79f7b825-03c7-4762-95eb-ca245d35b34c" CreationDate="2016-05-25T15:37:33.963" UserId="702" Text="How can I take an image of an 50-pin scsi hard-drive" />
  <row Id="1789" PostHistoryTypeId="3" PostId="634" RevisionGUID="79f7b825-03c7-4762-95eb-ca245d35b34c" CreationDate="2016-05-25T15:37:33.963" UserId="702" Text="&lt;hardware&gt;&lt;hard-disk&gt;" />
  <row Id="1790" PostHistoryTypeId="2" PostId="635" RevisionGUID="67400cb9-701a-4735-ae44-5662da2b5455" CreationDate="2016-05-25T16:01:48.733" UserId="79" Text="If &quot;a more modern machine&quot; includes systems with ISA, PCI or PCI Express slots, it should be easy enough to retrieve the data from the drives. You'll need a SCSI adapter (known as a host bus adapter, HBA); you can find loads on auction sites, or [SCSI4ME][1] and other places (depending on which country you live in). Adaptec cards are very good and well-supported on most operating systems. You'll also need a 50-pin cable such as [this one on eBay][2] (I'll update with a more permanent link later); avoid long cables and cables with too many connectors, you may have termination issues with your drives.&#xD;&#xA;&#xD;&#xA;Once you've got all that, plug your adapter into your computer, connect the cable to the drive (the connectors are keyed so there shouldn't be any issue there), connect a power cable to the drive and you should be good to go.&#xD;&#xA;&#xD;&#xA;If you can't use a PCI or PCI Express card, there are SCSI-to-USB converters, but they are usually designed for external SCSI devices so you'll need an additional SCSI converter to go from whatever SCSI port is on the SCSI-to-USB converter, to the 50-pin port on your hard drives. They also tend to be very expensive. Finally, you can also get PCMCIA SCSI HBAs for laptops, but the same issues apply, and they're even more expensive!&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.scsi4me.com/scsi_hba-controller-cards_ultra160-ultra3-u160.html&#xD;&#xA;  [2]: http://www.ebay.com/itm/Adaptec-497462-00-Internal-71cm-50-Pin-SCSI-Cable-/252298295735" />
  <row Id="1791" PostHistoryTypeId="5" PostId="635" RevisionGUID="bad8ecb1-7c23-427d-ae5c-2c987484a245" CreationDate="2016-05-25T16:17:08.743" UserId="79" Comment="Add a better URL for cables, and mention identifiers and termination." Text="If &quot;a more modern machine&quot; includes systems with ISA, PCI or PCI Express slots, it should be easy enough to retrieve the data from the drives. You'll need a SCSI adapter (known as a host bus adapter, HBA); you can find loads on auction sites, or [SCSI4ME][1] and other places (depending on which country you live in). Adaptec cards are very good and well-supported on most operating systems. You'll also need a 50-pin cable such as [these ones][2]; avoid long cables and cables with too many connectors, you may have termination issues with your drives.&#xD;&#xA;&#xD;&#xA;Once you've got all that, plug your adapter into your computer, connect the cable to the drive (the connectors are keyed so there shouldn't be any issue there), connect a power cable to the drive and you should be good to go.&#xD;&#xA;&#xD;&#xA;If you can't use a PCI or PCI Express card, there are SCSI-to-USB converters, but they are usually designed for external SCSI devices so you'll need an additional SCSI converter to go from whatever SCSI port is on the SCSI-to-USB converter, to the 50-pin port on your hard drives. They also tend to be very expensive. Finally, you can also get PCMCIA SCSI HBAs for laptops, but the same issues apply, and they're even more expensive!&#xD;&#xA;&#xD;&#xA;There are a couple of issues to keep an eye out for, but if you only connect one drive at a time they shouldn't cause any actual difficulties. The first is that SCSI drives have identifiers which can be changed, usually using jumpers; just make sure they're not set to 7 and you should be fine (7 is the SCSI HBA's identifier). The second is termination: SCSI buses need to be electrically terminated. Most HBAs from the last twenty years handle their end of things themselves, and the drives might well have built-in termination too (another jumper to look out for). As mentioned above though, if you're only connecting one drive at a time on a short enough cable, termination shouldn't be an issue.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.scsi4me.com/scsi_hba-controller-cards_ultra160-ultra3-u160.html&#xD;&#xA;  [2]: http://cable-trader.co.uk/category.php?sc=&amp;cat=218" />
  <row Id="1792" PostHistoryTypeId="5" PostId="634" RevisionGUID="87c396c0-5965-490e-821f-837b2b3f5c4b" CreationDate="2016-05-25T17:17:11.273" UserId="12" Comment="Capitalization, small grammar tweaks." Text="I have two 50-pin SCSI hard-drives that I need to image. However, after spending quite a while searching across the internet, I cannot find any adapters to convert the 50-pin connector to something useful.&#xD;&#xA;&#xD;&#xA;The make/model of the hard-drives is the Quantum Lightning ProDrive, and they hold 540MB each.&#xD;&#xA;&#xD;&#xA;If anyone has any suggestions on how I can attach these to a more modern machine it would be greatly appreciated." />
  <row Id="1793" PostHistoryTypeId="4" PostId="634" RevisionGUID="87c396c0-5965-490e-821f-837b2b3f5c4b" CreationDate="2016-05-25T17:17:11.273" UserId="12" Comment="Capitalization, small grammar tweaks." Text="How can I take an image of a 50-pin SCSI hard-drive" />
  <row Id="1794" PostHistoryTypeId="6" PostId="634" RevisionGUID="87c396c0-5965-490e-821f-837b2b3f5c4b" CreationDate="2016-05-25T17:17:11.273" UserId="12" Comment="Capitalization, small grammar tweaks." Text="&lt;hardware&gt;&lt;hard-disk&gt;&lt;scsi&gt;" />
  <row Id="1795" PostHistoryTypeId="24" PostId="634" RevisionGUID="87c396c0-5965-490e-821f-837b2b3f5c4b" CreationDate="2016-05-25T17:17:11.273" Comment="Proposed by 12 approved by 79, 105 edit id of 200" />
  <row Id="1797" PostHistoryTypeId="5" PostId="142" RevisionGUID="904f480c-874c-4153-bb5f-d14f0f9ef639" CreationDate="2016-05-25T19:08:47.770" UserId="621" Comment="Grammar; added Nintendo tag" Text="I found my Game Boy Advance in a box a few days ago, and I'm already playing good old Mario games. The problem is that I usually don't have time to finish the whole level at the same time (or I might want to savescum).&#xD;&#xA;&#xD;&#xA;Is there way to save (and load) the game state somehow, by using external parts?" />
  <row Id="1798" PostHistoryTypeId="6" PostId="142" RevisionGUID="904f480c-874c-4153-bb5f-d14f0f9ef639" CreationDate="2016-05-25T19:08:47.770" UserId="621" Comment="Grammar; added Nintendo tag" Text="&lt;nintendo&gt;&lt;game-boy-advance&gt;" />
  <row Id="1799" PostHistoryTypeId="24" PostId="142" RevisionGUID="904f480c-874c-4153-bb5f-d14f0f9ef639" CreationDate="2016-05-25T19:08:47.770" Comment="Proposed by 621 approved by 65 edit id of 208" />
  <row Id="1802" PostHistoryTypeId="2" PostId="636" RevisionGUID="c3fc1c5a-758a-4492-90b9-fd1107115b31" CreationDate="2016-05-25T19:40:52.897" UserId="621" Text="In my research on 1970s-era arcade machines, I've noticed that both Midway and Taito created games which used Intel's 8080 microprocessor.  However, each company had their own host boards which integrated with this processor.  What are the main technical differences between Midway's and Taito's host boards?" />
  <row Id="1803" PostHistoryTypeId="1" PostId="636" RevisionGUID="c3fc1c5a-758a-4492-90b9-fd1107115b31" CreationDate="2016-05-25T19:40:52.897" UserId="621" Text="What are the technical differences between Midway 8080 and Taito 8080 based hardware?" />
  <row Id="1804" PostHistoryTypeId="3" PostId="636" RevisionGUID="c3fc1c5a-758a-4492-90b9-fd1107115b31" CreationDate="2016-05-25T19:40:52.897" UserId="621" Text="&lt;8080&gt;&lt;intel-8080&gt;&lt;arcade&gt;" />
  <row Id="1806" PostHistoryTypeId="4" PostId="636" RevisionGUID="c4a2b06f-7497-4b6b-8ded-78f5a6328da8" CreationDate="2016-05-25T20:19:50.030" UserId="621" Comment="edited title" Text="What are the technical differences between Midway 8080 and Taito 8080 hardware boards?" />
  <row Id="1807" PostHistoryTypeId="5" PostId="634" RevisionGUID="a78dd7ba-68ff-4698-900b-360cd0485d1f" CreationDate="2016-05-25T20:54:03.577" UserId="621" Comment="Trademark capitalization; noise reduction, removed &quot;any help would be greatly appreciated&quot; cruft" Text="I have two 50-pin SCSI hard-drives that I need to image. However, after spending quite a while searching across the Internet, I cannot find any adapters to convert the 50-pin connector to something useful.&#xD;&#xA;&#xD;&#xA;The make/model of the hard-drives is the Quantum Lightning ProDrive, and they hold 540MB each.&#xD;&#xA;&#xD;&#xA;How can I attach these to a more modern machine?" />
  <row Id="1808" PostHistoryTypeId="24" PostId="634" RevisionGUID="a78dd7ba-68ff-4698-900b-360cd0485d1f" CreationDate="2016-05-25T20:54:03.577" Comment="Proposed by 621 approved by 56, 79 edit id of 201" />
  <row Id="1809" PostHistoryTypeId="5" PostId="632" RevisionGUID="d340c1be-c069-4c9b-83b2-b92183a28b75" CreationDate="2016-05-25T20:54:46.220" UserId="621" Comment="Corrected code block formatting" Text="Here's what I've been able to determine: A short filesystem on a floppy should work fine, so long as the blocks are all there, in the right order.&#xD;&#xA;&#xD;&#xA;A raw 800k disk image for the Macintosh (or for the IIgs as it happens) will be exactly 819200 bytes in size.&#xD;&#xA;&#xD;&#xA;    tjcarter@miho:~/tmp$ lsar ~/Downloads/System4.2-Finder6.0.sea.hqx &#xD;&#xA;    /home/pi/Downloads/System4.2-Finder6.0.sea.hqx: StuffIt 5 in BinHex&#xD;&#xA;    System 4.2 - Finder 6.0/&#xD;&#xA;    System 4.2 - Finder 6.0/Disk420.dsk&#xD;&#xA;    System 4.2 - Finder 6.0/Disk420b.dsk&#xD;&#xA;    System 4.2 - Finder 6.0/vMac Screen 5.0&#xD;&#xA;    tjcarter@miho:~/tmp$ unar ~/Downloads/System4.2-Finder6.0.sea.hqx &#xD;&#xA;    /home/pi/Downloads/System4.2-Finder6.0.sea.hqx: StuffIt 5 in BinHex&#xD;&#xA;      System 4.2 - Finder 6.0/  (dir)... OK.&#xD;&#xA;      System 4.2 - Finder 6.0/Disk420.dsk  (819200 B)... OK.&#xD;&#xA;      System 4.2 - Finder 6.0/Disk420b.dsk  (819200 B)... OK.&#xD;&#xA;      System 4.2 - Finder 6.0/vMac Screen 5.0  (5154 B)... OK.&#xD;&#xA;    Successfully extracted to &quot;System 4.2 - Finder 6.0&quot;.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;These `.dsk` files are raw.  If you first `fdformat` your floppy to be 1.44MB, you actually **can** just run a command like...&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    dd bs=512 if=&quot;System 4.2 - Finder 6.0/Disk420.dsk&quot; of=/dev/floppy&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;...and a Mac with a 1.44MB drive would be able to read it.&#xD;&#xA;&#xD;&#xA;Disk Copy images are not raw, however.  They are 819284 bytes.  Before writing the image to the disk, you must cut off the 84 byte header.  An easy/effective (if inefficient) way to do this would be a command like:&#xD;&#xA;&#xD;&#xA;    dd bs=84 skip=1 if=diskcopy_image.dmg of=raw_image.img&#xD;&#xA;&#xD;&#xA;You can then write the raw image as with the first dd example above.&#xD;&#xA;&#xD;&#xA;Apple distributed a number of disk images as `.sea.bin` files.  Ivan Drucker demonstrates extracting a raw image from these in his A2SERVER package, a suite of wrapper scripts to make a netatalk 2 installation into an Apple //e and IIgs friendly AppleTalk server.  My work on this is how I knew that the raw image could be extracted from these files with a combination of `dd` and `unar` from [The Unarchiver's unar/lsar](http://unarchiver.c3.cx/) for Linux.&#xD;&#xA;&#xD;&#xA;Simply use `unar` to extract the BinHex `.sea.bin` file.  This will leave you with a `.sea` file whose name is probably not UNIX friendly as spaces are quite acceptable in Macintosh filenames.  The extraction program is appended to the image and may be stripped:&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    mv disk_image.sea disk_image.dmg&#xD;&#xA;    truncate -s 819284 disk_image.dmg&#xD;&#xA;    dd bs=84 skip=1 if=disk_image.dmg of=disk_image.img&#xD;&#xA;&#xD;&#xA;This image may then just be written to the disk as above.&#xD;&#xA;&#xD;&#xA;The `hfsutils` package might be able to copy files with forks intact from one filesystem to another, allowing you to simply mkfs.hfs on the floppy, but I've never had luck doing recursive copies with it, and I don't know if a copied System folder would be bootable.&#xD;&#xA;&#xD;&#xA;Hopefully other vintage Mac users can improve this answer with more details." />
  <row Id="1810" PostHistoryTypeId="24" PostId="632" RevisionGUID="d340c1be-c069-4c9b-83b2-b92183a28b75" CreationDate="2016-05-25T20:54:46.220" Comment="Proposed by 621 approved by 56, 79 edit id of 202" />
  <row Id="1812" PostHistoryTypeId="5" PostId="636" RevisionGUID="6549d76e-edea-40cc-b0f7-72abd2c8f27d" CreationDate="2016-05-26T00:42:30.233" UserId="621" Comment="added 300 characters in body" Text="In my research on 1970s-era arcade machines, I've noticed that both Midway and Taito created games which used Intel's 8080 microprocessor.  However, each company had their own host boards which integrated with this processor.  What are the main technical differences between Midway's and Taito's host boards?&#xD;&#xA;&#xD;&#xA;The only major difference that I know of was that the Midway board has a daughter board plugged into it at a 90 degree angle.&#xD;&#xA;&#xD;&#xA;[![Midway][1]][1]&#xD;&#xA;&#xD;&#xA;Taito's boards are stacked vertically:&#xD;&#xA;&#xD;&#xA;[![Taito][2]][2]&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/hfkTN.jpg&#xD;&#xA;  [2]: http://i.stack.imgur.com/XDMNw.jpg" />
  <row Id="1813" PostHistoryTypeId="4" PostId="636" RevisionGUID="cc3b0db7-56c4-467e-917f-b69fb93902b0" CreationDate="2016-05-26T01:32:35.390" UserId="621" Comment="edited title" Text="What are the technical differences between the Midway 8080 and Taito 8080 hardware boards?" />
  <row Id="1814" PostHistoryTypeId="2" PostId="638" RevisionGUID="e4350bdf-a3cb-4f91-a32e-761eb14fa921" CreationDate="2016-05-26T07:27:03.670" UserId="105" Text="Don't know if this is on-topic, but I will give it a chance to go. If you feel this is off-topic, act accordingly.&#xD;&#xA;&#xD;&#xA;Recently, a discussion has started about the feelings associated to the unboxing of your first computer. For me it's the smell of a ZX Spectrum rubber key model, wrapped in a plastic bag, placed in a polyestirene white box, inside a cardboard box.&#xD;&#xA;&#xD;&#xA;This was in 1984. Then, I felt the same smell many years after that, while opening the box of a Spectrum +2A &quot;Police Pack&quot;.&#xD;&#xA;&#xD;&#xA;Both computers were designed with different materials but the smell was the same. I wonder where does it come from. Plastic case? Bag? Poly? Printed manuals?  &#xD;&#xA;&#xD;&#xA;People are telling me that it is added perfume to cover the unpleasant odor from mass production. If this is so:&#xD;&#xA;&#xD;&#xA;- Does anyone know or remember where final assembly and packaging of ZX Spectrum took place (which factory)? Maybe that factory still exists and someone can find out what kind of perfume they used.&#xD;&#xA;&#xD;&#xA;- Did both models (48K and +2A) used the same factory to manufacture the case? Are both cases from the same plastic material?&#xD;&#xA;&#xD;&#xA;- Does anyone know about &quot;electronics perfume&quot; other than the &quot;new Apple electronics unboxing perfume&quot; you can buy? (by no means I want my Spectrum to smell like an Apple)" />
  <row Id="1815" PostHistoryTypeId="1" PostId="638" RevisionGUID="e4350bdf-a3cb-4f91-a32e-761eb14fa921" CreationDate="2016-05-26T07:27:03.670" UserId="105" Text="The smell of a computer while unboxing it" />
  <row Id="1816" PostHistoryTypeId="3" PostId="638" RevisionGUID="e4350bdf-a3cb-4f91-a32e-761eb14fa921" CreationDate="2016-05-26T07:27:03.670" UserId="105" Text="&lt;zx-spectrum&gt;" />
  <row Id="1817" PostHistoryTypeId="5" PostId="550" RevisionGUID="422bda3e-dc5d-41d3-aac9-c04590599ea3" CreationDate="2016-05-26T11:32:15.303" UserId="539" Comment="Greatly simplified the question for what's being asked." Text="If you have Macintosh filesystem image of an 800k boot disk, but your physical Mac has a 1.44M SuperDrive, how can you produce a physical disk that can boot that Mac?" />
  <row Id="1818" PostHistoryTypeId="4" PostId="550" RevisionGUID="422bda3e-dc5d-41d3-aac9-c04590599ea3" CreationDate="2016-05-26T11:32:15.303" UserId="539" Comment="Greatly simplified the question for what's being asked." Text="Writing 800k Mac floppy images for 1.44M-equipped Macs using Linux" />
  <row Id="1819" PostHistoryTypeId="5" PostId="632" RevisionGUID="23a3c308-1ec6-4bb2-8d69-d98f66169d50" CreationDate="2016-05-26T12:01:50.003" UserId="539" Comment="fix fenced code blocks for this site's markdown renderer" Text="Here's what I've been able to determine:  A short filesystem on a floppy should work fine, as long as the blocks are in the right order.  If the image you're using is a raw image (819200 bytes exactly, often used by emulators, that's easy.  Just `fdformat` the floppy device for 1.44MiB as you would for any other DOS/Windows/Linux machine and write the image using a command like,&#xD;&#xA;&#xD;&#xA;    dd bs=512 if=floppy_image.img of=/dev/floppy&#xD;&#xA;&#xD;&#xA;However, if the image you are using comes from Apple, it will not be raw.  It will be either a Disk Copy image (819284 bytes) or a `.sea` self-extracting disk image, possibly with a BinHex (`.bin`) wrapper.  We'll address that first since it's far more common.&#xD;&#xA;&#xD;&#xA;If the image is wrapped in BinHex, we can use [The Unarchiver's `unar`/`lsar`](http://unarchiver.c3.cx/) to unpack the file.  Note, you'd be wise to use `lsar` on the file first as Macintosh files contain characters like spaces rather commonly and `unar` does not provide an option to rename the output file during extraction.&#xD;&#xA;&#xD;&#xA;At this point I recommend renaming or copying the `.sea` file to one ending in the `.dmg` extension and running `truncate -s 819284 your_image.dmg` to produce a Disk Copy image.&#xD;&#xA;&#xD;&#xA;Now to convert that to a raw image, you can use `dd` to trim off the Disk Copy header:&#xD;&#xA;&#xD;&#xA;    dd bs=84 skip=1 if=disk_image.dmg of=disk_image.img&#xD;&#xA;&#xD;&#xA;This leaves you with a raw disk image suitable for use with emulators or writing to a floppy as above.  Note, any 800k image written to a floppy this way wastes space on the floppy disk, and the disk requires a 1.44M &quot;SuperDrive&quot; (a name Apple has reused time and again, but in this context refers to machines able to support the 1.44M floppy and equipped with such a drive.)  Similar tricks can be used for Apple // ProDOS and GS/OS disk images if the machine is equipped with a SuperDrive and controller or other PC-compatible 1.44MB drive.&#xD;&#xA;&#xD;&#xA;There may be other common disk formats I am not aware of for the early Macintosh.  Hopefully they can be added to this answer if someone comes across one." />
  <row Id="1820" PostHistoryTypeId="6" PostId="516" RevisionGUID="42e7a607-b966-4a67-a06e-e353828bd9f1" CreationDate="2016-05-26T14:34:43.600" UserId="539" Comment="Added apple-dos and disk-ii tags" Text="&lt;apple-ii&gt;&lt;apple-dos&gt;&lt;disk-ii&gt;" />
  <row Id="1821" PostHistoryTypeId="24" PostId="516" RevisionGUID="42e7a607-b966-4a67-a06e-e353828bd9f1" CreationDate="2016-05-26T14:34:43.600" Comment="Proposed by 539 approved by 79, 92 edit id of 209" />
  <row Id="1822" PostHistoryTypeId="6" PostId="638" RevisionGUID="0256870f-633a-42f2-82cf-fdd14d6c11ec" CreationDate="2016-05-26T14:59:35.577" UserId="621" Comment="This question is about general hardware smell, not just the ZX Spectrum" Text="&lt;hardware&gt;" />
  <row Id="1823" PostHistoryTypeId="24" PostId="638" RevisionGUID="0256870f-633a-42f2-82cf-fdd14d6c11ec" CreationDate="2016-05-26T14:59:35.577" Comment="Proposed by 621 approved by -1 edit id of 210" />
  <row Id="1824" PostHistoryTypeId="6" PostId="638" RevisionGUID="298f7024-0405-46e7-8f9f-f2f98eb5ff9e" CreationDate="2016-05-26T14:59:35.577" UserId="105" Comment="This question is about general hardware smell, not just the ZX Spectrum" Text="&lt;hardware&gt;&lt;zx-spectrum&gt;" />
  <row Id="1825" PostHistoryTypeId="5" PostId="569" RevisionGUID="ff351877-00e0-4b82-9d56-9c1919827f89" CreationDate="2016-05-26T15:51:40.540" UserId="382" Comment="kbd tag!" Text="Though supercat points out the built-in way of editing BASIC programs on the screen (well, machine language as well if you were doing it via the monitor and mini-assembler), there are better tools for this. Specifically, I was a big fan of GPLE from Beagle Bros. back in the day.&#xD;&#xA;&#xD;&#xA;The main problem that you run into with the screen editing method is that the listing of a BASIC program has certain indentations and sometimes in inconvenient places (e.g. in a quoted string). Though you can &lt;kbd&gt;ESC&lt;/kbd&gt; &lt;kbd&gt;I&lt;/kbd&gt;&lt;kbd&gt;J&lt;/kbd&gt;&lt;kbd&gt;K&lt;/kbd&gt;&lt;kbd&gt;M&lt;/kbd&gt;/&lt;kbd&gt;arrows&lt;/kbd&gt; to avoid this, it is still a bit of a hassle. As well, there is no insert/delete functions in the middle of the line, which GPLE handles for you.&#xD;&#xA;&#xD;&#xA;Another alternative is MD-BASIC from Morgan Davis. I never used it myself, but the idea is that you can write BASIC programs in an improved language from AppleSoft (e.g. labels instead of line numbers) and it will &quot;compile&quot; it down to tight AppleSoft.&#xD;&#xA;&#xD;&#xA;" />
  <row Id="1826" PostHistoryTypeId="2" PostId="639" RevisionGUID="1985909a-ad72-489b-998b-44a5c8eba43a" CreationDate="2016-05-26T16:17:58.340" UserId="125" Text="This was on CNN today:&#xD;&#xA;&#xD;&#xA;[The U.S. is still using floppy disks to run its nuclear program][1]&#xD;&#xA;&#xD;&#xA;Which led me to read through this article:&#xD;&#xA;&#xD;&#xA;[Think the floppy disk is dead? Think again! Here’s why it still stands between us and a Nuclear Apocalypse][2]&#xD;&#xA;&#xD;&#xA;In particular, this excerpt got me thinking:&#xD;&#xA;&#xD;&#xA;&gt; Last year, a broadcast of 60 Minutes surprised many viewers with the discovery that 8-inch floppy disks were still the preferred method of removable storage for the computers in a U.S. Air Force nuclear silo.&#xD;&#xA;&#xD;&#xA;Even the newest 8&quot; floppy disks *must* be around 25 years old (at least).  Honestly, I don't remember floppies being the most-stable storage media to begin with.  I can't imagine the old 8&quot; disks have a very good service life.  And I remember being able to only reformat a bad disk a few times before it was useless.&#xD;&#xA;&#xD;&#xA;While I'm not exactly sure about the Air Force's use case, I'll pose a simple question:&#xD;&#xA;&#xD;&#xA;Can you take these disks off the shelf 30 years later and still expect to read their data?&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.cnn.com/2016/05/26/us/pentagon-floppy-disks-nuclear/index.html?sr=fbCNN052616pentagon-floppy-disks-nuclear0957AMStoryGalLink&amp;linkId=24889589&#xD;&#xA;  [2]: http://www.digitaltrends.com/computing/why-do-floppy-disks-still-exist-the-world-isnt-ready-to-move-on/#:oyVSMG3nZa_xlA" />
  <row Id="1827" PostHistoryTypeId="1" PostId="639" RevisionGUID="1985909a-ad72-489b-998b-44a5c8eba43a" CreationDate="2016-05-26T16:17:58.340" UserId="125" Text="How long will floppy disks maintain data integrity?" />
  <row Id="1828" PostHistoryTypeId="3" PostId="639" RevisionGUID="1985909a-ad72-489b-998b-44a5c8eba43a" CreationDate="2016-05-26T16:17:58.340" UserId="125" Text="&lt;floppy-disk&gt;" />
  <row Id="1830" PostHistoryTypeId="2" PostId="641" RevisionGUID="af4a52b0-8801-4321-8d61-9cd7f0e9ec30" CreationDate="2016-05-26T16:24:48.490" UserId="621" Text="The Nintendo 64 shipped with a Memory Expansion Bay which contained a Jumper Pack.  Some games such as Donkey Kong 64 and The Legend of Zelda: Majora's Mask required additional RAM to run, and shipped with a 4MB Memory Expansion Pak which was installed via this Memory Expansion Bay.  Were there any other uses (licensed or unlicensed) for the Memory Expansion Bay?  I only see Memory Expansion Pak accessories online (both from Nintendo and third-party) for this slot.&#xD;&#xA;&#xD;&#xA;[![Memory Expansion Slot][1]][1]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/qpySW.gif" />
  <row Id="1831" PostHistoryTypeId="1" PostId="641" RevisionGUID="af4a52b0-8801-4321-8d61-9cd7f0e9ec30" CreationDate="2016-05-26T16:24:48.490" UserId="621" Text="Were there any other peripherals that used the Nintendo 64's Memory Expansion Bay besides the Expansion Pak?" />
  <row Id="1832" PostHistoryTypeId="3" PostId="641" RevisionGUID="af4a52b0-8801-4321-8d61-9cd7f0e9ec30" CreationDate="2016-05-26T16:24:48.490" UserId="621" Text="&lt;nintendo&gt;&lt;nintendo-64&gt;" />
  <row Id="1833" PostHistoryTypeId="2" PostId="642" RevisionGUID="d577b08e-2958-45fc-a65d-913aaf61b10c" CreationDate="2016-05-26T17:50:54.603" UserId="382" Text="There are a few factors:&#xD;&#xA;&#xD;&#xA;1. Quality of media.&#xD;&#xA;2. Storage environment (i.e. climate controlled versus humid attic).&#xD;&#xA;3. How many hours of use did the disk experience.&#xD;&#xA;&#xD;&#xA;Assuming little-to-no use, it probably comes down mostly to quality of the floppy disk media which tends to vary across manufacturers and even production year. The formula wasn't always consistent for a brand; I've got old Maxell 5.25&quot; disks of the same model from 1983 which are a distinct mocha color versus a darker brown starting in 1985.&#xD;&#xA;&#xD;&#xA;While 5.25&quot; disks seem to have held up over the years, I can say that 3.5&quot; disks were obviously cost reduced and of much lower quality. Some that I have in my collection that were sold as &quot;high quality&quot; back in the early 90's are questionable today at best while a repurposed America Online 3.5&quot; from the same period is almost certainly not going to still hold its original contents.&#xD;&#xA;&#xD;&#xA;In general, I think it is hard to come up with an answer for this since nobody really seemed to perform studies on this back in the day; probably because nobody assumed the technology would still be in use 30 years later. However, I will state that you can visibly see if a disk is &quot;dead&quot; physically by looking for small dark spots on the medium (not referring to mold but natural oxidation). If you see that, I'd say you've got time to image the disk before throwing it away and then perhaps cleaning your drive head." />
  <row Id="1834" PostHistoryTypeId="5" PostId="544" RevisionGUID="633677a0-f5de-43d3-a037-cb1185a0c084" CreationDate="2016-05-26T18:37:59.180" UserId="278" Comment="Archive.org'd links." Text="There is very little information online about this, so I have scraped around and put this together:&#xD;&#xA;&#xD;&#xA;The screws on the Amiga 500 and 500+ were often Phillips (requiring a #2 Phillips head screwdriver&lt;sup&gt;[\[1\]][1]&lt;/sup&gt;), but hex-socket (Allen key) screws were also used&lt;sup&gt;[\[4\]][4]&lt;/sup&gt;.&#xD;&#xA;&#xD;&#xA;Most of the screws for the 600 and 1200 are six millimetres long&lt;sup&gt;[\[2\]][2]&lt;/sup&gt; and appear to be Phillips screws&lt;sup&gt;[\[3\]][3]&lt;/sup&gt; as well, however there are shorter screws for the lower front edge&lt;sup&gt;[\[5\]][5]&lt;/sup&gt; on these machines.&#xD;&#xA;&#xD;&#xA;[1]: //web.archive.org/http://amiga.resource.cx/manual/AdIDE2.pdf&#xD;&#xA;[2]: //web.archive.org/web/20160328054249/http://amigakit.leamancomputing.com/catalog/product_info.php?products_id=992&#xD;&#xA;[3]: //web.archive.org/web/20160422061416/http://amigakit.leamancomputing.com/catalog/images/case-screws.jpg&#xD;&#xA;[4]: //web.archive.org/web/20160517204022/http://www.ebay.co.uk/itm/Amiga-500-500plus-Hex-type-case-fixing-kit-Screws-set-of-10-screws-/121962809701&#xD;&#xA;[5]: //web.archive.org/web/20160517205017/http://www.ebay.co.uk/itm/Commodore-Amiga-600-and-1200-case-screws-6-Screw-Set-A600-A1200-/182115335561" />
  <row Id="1835" PostHistoryTypeId="2" PostId="643" RevisionGUID="9f8633a6-21d2-4794-a4ea-1bf1172b5aa0" CreationDate="2016-05-26T19:50:15.813" UserId="80" Text="When recently imaging my old Amiga disks, dating from 1989 until about 1993, approximately 80% of them read first time without error, another 10% needed a few retries to get all the data off, 9% had unrecoverable sectors, and 1% appeared to be completely unformatted. (The latter were not virgin blank disks, since they were labelled with their contents.)&#xD;&#xA;&#xD;&#xA;This is for 3.5&quot; DD disks. Other sizes and densities will of course vary, with 3.5&quot; HD disks being famously awful." />
  <row Id="1836" PostHistoryTypeId="2" PostId="644" RevisionGUID="b6455550-1306-4a2c-af8e-b274c7843f57" CreationDate="2016-05-26T20:19:02.113" UserId="462" Text="At some point in the past, around the 1970's or so, programmers wrote their code on paper. Considering the fact that modern computers have replaced paper in so many ways, the whole idea seems a little backwards.&#xD;&#xA;&#xD;&#xA;I have no first hand experience with these things. I have a vague idea how it worked, but I want more details. I assume that the process is similar to filling out regular paperwork, but the fact that these were programs that had to follow a complex syntax must complicate things a little.&#xD;&#xA;&#xD;&#xA;Obviously, these programming forms couldn't be fed directly into the computer, so something had to be done to put it in machine readable format.&#xD;&#xA;&#xD;&#xA;What needed to be done to actually run a program written on a form? Was this an error-prone process? In this one book I have, the format on some of the programs is a little lax:&#xD;&#xA;&#xD;&#xA;![it's a big image...][1]&#xD;&#xA;&lt;sub&gt;Photo mine. It's a COBOL book.&lt;/sub&gt;&#xD;&#xA;&#xD;&#xA;Near the top, some lines are crossed out. But near the bottom of the page, some of the code is literally outside the lines: it's straddling two lines.&#xD;&#xA;&#xD;&#xA;Here's a full example of a form:&#xD;&#xA;&#xD;&#xA;![Coding form][2]&#xD;&#xA;&lt;sub&gt;https://commons.wikimedia.org/wiki/File:FortranCodingForm.png&lt;/sub&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/enLSE.jpg&#xD;&#xA;  [2]: http://i.stack.imgur.com/INzls.png" />
  <row Id="1837" PostHistoryTypeId="1" PostId="644" RevisionGUID="b6455550-1306-4a2c-af8e-b274c7843f57" CreationDate="2016-05-26T20:19:02.113" UserId="462" Text="How did programs on coding forms get run?" />
  <row Id="1838" PostHistoryTypeId="3" PostId="644" RevisionGUID="b6455550-1306-4a2c-af8e-b274c7843f57" CreationDate="2016-05-26T20:19:02.113" UserId="462" Text="&lt;programming&gt;" />
  <row Id="1840" PostHistoryTypeId="5" PostId="332" RevisionGUID="33fa0592-58b2-4578-b035-87b3760b5c37" CreationDate="2016-05-26T20:33:33.417" UserId="268" Comment="Edited for clarification. Re-open appreciated, but not expected." Text="I'm looking for a small 386 computer, preferably handheld, with a VGA screen that is capable of running MS-DOS.&#xD;&#xA;&#xD;&#xA;Does anyone know if such a system is available, either using real hardware, or emulated within an FPGA?&#xD;&#xA;&#xD;&#xA;EDIT: To clarify, I'm looking for the 386 equivalent of an HP 100LX with a color VGA screen; or a compatible emulation within a small FPGA. I'm aware of handhelds such as the Libretto, but am looking for a 386 because of the slower CPU speed. The purpose is for hobby development." />
  <row Id="1841" PostHistoryTypeId="2" PostId="645" RevisionGUID="a8dc2d70-9897-4ac8-a142-3f8cf793cbb9" CreationDate="2016-05-26T20:47:10.873" UserId="320" Text="Coding forms such as your examples are basically just really fancy lined paper.  The fixed grid is there to help you organize your code and reduce errors when you (or a clerk) actually type in the code, but it still needs to be manually entered.&#xD;&#xA;&#xD;&#xA;Your completed form would go to someone operating a punch card machine or interactive terminal so that all your time spent thinking and reworking the code didn't tie up the limited computer resources.  As for drawing outside the lines, this would just basically make the data entry a little more error prone if whoever doing the keying interpreted things incorrectly." />
  <row Id="1842" PostHistoryTypeId="5" PostId="645" RevisionGUID="3d2dc1e2-1786-4dc8-a2b5-c319f0721334" CreationDate="2016-05-26T20:49:53.613" UserId="320" Comment="added 249 characters in body" Text="Coding forms such as your examples are basically just really fancy lined paper.  The fixed grid is there to help you organize your code and reduce errors when you (or a clerk) actually type in the code, but it still needs to be manually entered.&#xD;&#xA;&#xD;&#xA;Your completed form would go to someone operating a punch card machine or interactive terminal so that all your time spent thinking and reworking the code didn't tie up the limited computer resources.  As for drawing outside the lines, this would just basically make the data entry a little more error prone if whoever doing the keying interpreted things incorrectly.&#xD;&#xA;&#xD;&#xA;Finally, the completed code form would be retained and serve as basic documentation for the program, since the final entered code wouldn't be human-readable.  Any reworks to the code you needed to do, you would refer back to the code form first." />
  <row Id="1843" PostHistoryTypeId="5" PostId="645" RevisionGUID="8066ab07-91e6-48b0-9931-3d28a40805af" CreationDate="2016-05-26T21:03:36.880" UserId="320" Comment="Additional clarifying information." Text="Coding forms such as your examples are basically just really fancy lined paper.  The fixed grid is there to help you organize your code and reduce errors when you (or a clerk) actually type in the code, but it still needs to be manually entered.&#xD;&#xA;&#xD;&#xA;Your completed form would go to someone operating a punch card machine or interactive terminal so that all your time spent thinking and reworking the code didn't tie up the limited computer resources.  As for drawing outside the lines, this would just basically make the data entry a little more error prone if whoever doing the keying interpreted things incorrectly.&#xD;&#xA;&#xD;&#xA;Finally, the completed code form would be retained and serve as basic documentation for the program, since the final entered code wouldn't be human-readable.  Any reworks to the code you needed to do, you would refer back to the code form first.&#xD;&#xA;&#xD;&#xA;I should probably also mention that even up until the mid-90s forms like these were still being used in the teaching of certain languages such as COBOL, despite the prevalence of adequate numbers of interactive terminals, in an effort to impress upon students good documentation habits and in case they happened to land a job at an organization that still required that level of formality." />
  <row Id="1844" PostHistoryTypeId="5" PostId="645" RevisionGUID="16809c22-92b0-4a78-a86a-186f16bb2e62" CreationDate="2016-05-26T21:23:12.760" UserId="320" Comment="Additional clarifying information." Text="Coding forms such as your examples are basically just really fancy lined paper.  The fixed grid is there to help you organize your code and reduce errors when you (or a clerk) actually type in the code, but it still needs to be manually entered.&#xD;&#xA;&#xD;&#xA;Your completed form would go to someone operating a punch card machine or interactive terminal so that all your time spent thinking and reworking the code didn't tie up the limited computer resources.  As for drawing outside the lines, this would just basically make the data entry a little more error prone if whoever doing the keying interpreted things incorrectly.&#xD;&#xA;&#xD;&#xA;Finally, the completed code form would be retained and serve as basic documentation for the program, since the final entered code wouldn't be human-readable.  Any reworks to the code you needed to do, you would refer back to the code form first.&#xD;&#xA;&#xD;&#xA;I should probably also mention that even up until the mid-90s forms like these were still being used in the teaching of certain languages such as COBOL, despite the prevalence of adequate numbers of interactive terminals, in an effort to impress upon students good documentation habits and in case they happened to land a job at an organization that still required that level of formality.&#xD;&#xA;&#xD;&#xA;One other thing, the code form wouldn't be your first step in starting to write a program either.  You'd typically start by getting out your flow-charting stencil and drawing out a flowchart for the program logic before writing any code on a form to make sure you understood what the program needed to do and how it was going to do it.  Flow charting in this manner was definitely something still being taught in the mid 90's also. When I attended college in '95 one of my first year courses was a &quot;Programming Logic&quot; course for which the coursework consisted mostly of coming up with answers to programming questions in hand-drawn flowchart and then writing out the code from that in pseudo-code form without touching a computer for the entire semester in that class." />
  <row Id="1845" PostHistoryTypeId="2" PostId="646" RevisionGUID="56db18b9-0284-4ce5-8417-7a09354bf877" CreationDate="2016-05-26T21:45:25.750" UserId="539" Text="The short answer is that they will retain data integrity as long as they do.  Floppy disks have a number of enemies: Moisture, corrosion, mildew, deformation of the physical media, degradation of adhesives and other materials, magnetic fields, etc.&#xD;&#xA;&#xD;&#xA;If a floppy disk is treated like a precious document and stored in a UV-proof, temperature and humidity controlled environment, free from harmful magnetic fields, and if the bonding agent that keeps the magnetic material attached to the disk surface doesn't fail, the disks may last for decades yet to come even if they are 8&quot; floppies from the 1970s.&#xD;&#xA;&#xD;&#xA;However, I've seen floppy disks fail just a couple of months after opening the package.  It's a fragile media.&#xD;&#xA;&#xD;&#xA;The best advice is to preserve the contents of any floppy you come across if the data contained within is at all worth preservation.  Multiple redundant copies remains the surest way to keep data safe into the future.&#xD;&#xA;&#xD;&#xA;The US nuclear program has a problem in that the data on those 8&quot; floppies may not exist elsewhere, and we cannot know how long the media or the drives will last.  Moving parts eventually fail too, after all.  Theoretically the US government could commission new drives and new media at considerable expense.  You and I probably cannot do that.  But better it would be I think for them to prepare for a day when that fragile media no longer exists." />
  <row Id="1846" PostHistoryTypeId="2" PostId="647" RevisionGUID="ca31e942-96de-448b-b68d-8b905ff548c8" CreationDate="2016-05-26T22:06:02.137" UserId="539" Text="How does one use joysticks in a program on the Apple //?&#xD;&#xA;&#xD;&#xA;I have three different joysticks here and I would like to visualize their state (pot and button values), maybe similar to the SDL joystick test, for anyone who's ever seen that.  That seems like it should be fairly easy to do in Applesoft and run real-time enough to see jitter or worn switches.&#xD;&#xA;&#xD;&#xA;If the BASIC program is useful more as an exercise than a diagnostic, is there a better tool for testing joysticks?" />
  <row Id="1847" PostHistoryTypeId="1" PostId="647" RevisionGUID="ca31e942-96de-448b-b68d-8b905ff548c8" CreationDate="2016-05-26T22:06:02.137" UserId="539" Text="Testing/using a joystick in AppleSoft?" />
  <row Id="1848" PostHistoryTypeId="3" PostId="647" RevisionGUID="ca31e942-96de-448b-b68d-8b905ff548c8" CreationDate="2016-05-26T22:06:02.137" UserId="539" Text="&lt;apple-ii&gt;&lt;hardware&gt;&lt;applesoft-basic&gt;&lt;joystick&gt;&lt;hardware-testing&gt;" />
  <row Id="1849" PostHistoryTypeId="2" PostId="648" RevisionGUID="a9181aad-0e85-49e4-b7db-7a689c560d87" CreationDate="2016-05-26T22:24:13.100" UserId="105" Text="Some computer languages had a very strict syntaxis. COBOL, which is the language featured in your pictures, is a good example of this. The language only allows code to be entered from column 8 or 12 (depending on if it is a division, or a section). Column 7 was used to mark the line as a commentary (by using an asterisk, AFAIR), and so on. FORTRAN, which is the language the second form you feature is for, uses the character C (in a specific column if I remember well) to mark the line as a commentary.&#xD;&#xA;&#xD;&#xA;Why? Several reasons. Among them:&#xD;&#xA;&#xD;&#xA;- Simplifies the compiler and the compiling process: by forcing source code to follow strict identation rules, the lexical analyzer is much more easy to write and thus, needs less memory and executes faster. Remember that memory and computing power were scarce resouces back in the days.&#xD;&#xA;&#xD;&#xA;- Force the programmer to follow a programming style that may help him to quickly find bugs. Specifically, COBOL was designed to be understable for non programmers (bankers are not very comfortable not knowing what a computing nerd is doing with his money, so they needed a computer language that they could understand)&#xD;&#xA;&#xD;&#xA;- Such forms were needed as a previous step, to later make punched cards from them. COBOL, for example, had more restrictions to suit punched cards, such as the maximum length allowed in a line (76 chars if I remember well). These restrictions were in part forced by the fact that each line in a COBOL programming form had to be encoded into a punched card, with each character into each column, and with a maximum of 76 columns (this is from memory). The special column to mark the whole line as a commentary is precisely a needed feature to speed up the process of entering the computer program from a punched card reader: the reader could just throw away the whole card if the special column is marked with the commentary character.&#xD;&#xA;" />
  <row Id="1850" PostHistoryTypeId="5" PostId="648" RevisionGUID="f4fa1c0a-3cb6-48cf-a139-7b928505fc49" CreationDate="2016-05-26T22:31:08.150" UserId="105" Comment="deleted 8 characters in body" Text="Some computer languages had a very strict syntaxis. COBOL, which is the language featured in your pictures, is a good example of this. The language only allows code to be entered from column 8 or 12 (depending on if it is a division, or a section). Column 7 was used to mark the line as a commentary (by using an asterisk, AFAIR), and so on. FORTRAN, which is the language the second form you feature is for, uses the character C (in a specific column if I remember well) to mark the line as a commentary.&#xD;&#xA;&#xD;&#xA;Why? Several reasons. Among them:&#xD;&#xA;&#xD;&#xA;- Simplifies the compiler and the compiling process: by forcing source code to follow strict identation rules, the lexical analyzer is much more easy to write and thus, needs less memory and executes faster. Remember that memory and computing power were scarce resouces back in the days.&#xD;&#xA;&#xD;&#xA;- Force the programmer to follow a programming style that may help him to quickly find bugs. Specifically, COBOL was designed to be understable for non programmers (bankers are not very comfortable not knowing what a computing nerd is doing with his money, so they needed a computer language that they could understand)&#xD;&#xA;&#xD;&#xA;- Such forms were needed as a previous step, to later make punch cards from them. COBOL, for example, had more restrictions to suit punch cards, such as the maximum length allowed in a line (72 chars if I remember well). These restrictions were in part forced by the fact that each line in a COBOL programming form had to be encoded into a punch card, with each character into each column, and with a maximum of 72 columns (this is from memory). The special column to mark the whole line as a commentary is precisely a needed feature to speed up the process of entering the computer program from a punch card reader: the reader could just throw away the whole card if the special column is marked with the commentary character.&#xD;&#xA;" />
  <row Id="1852" PostHistoryTypeId="2" PostId="649" RevisionGUID="87931938-a29b-4b33-a203-36c8c1f5d150" CreationDate="2016-05-26T23:54:47.370" UserId="393" Text="You can use the following PEEK commands to get the values.&#xD;&#xA;&#xD;&#xA;Note that the first joystick corresponds to paddle 0 for the X and paddle 1 for the Y&#xD;&#xA;&#xD;&#xA;- PEEK   49249	 -  PADDLE 0 BUTTON (&gt;127 IF BUTTON PRESSED)&#xD;&#xA;- PEEK   49250	 -  PADDLE 1 BUTTON (&gt;127 IF BUTTON PRESSED)&#xD;&#xA;- PEEK   49251	 -  PADDLE 2 BUTTON (&gt;127 IF BUTTON PRESSED)&#xD;&#xA;- PEEK   49252	 -  READ GAME PADDLE 0 (0-255)&#xD;&#xA;- PEEK   49253	 -  READ GAME PADDLE 1 (0-255)&#xD;&#xA;- PEEK   49254	 -  READ GAME PADDLE 2 (0-255)&#xD;&#xA;- PEEK   49255	 -  READ GAME PADDLE 3 (0-255)&#xD;&#xA;&#xD;&#xA;I got this from here : http://www.skepticfiles.org/cowtext/apple/memorytx.htm" />
  <row Id="1853" PostHistoryTypeId="2" PostId="650" RevisionGUID="6fb111ff-1961-469f-a829-cb4d222902bd" CreationDate="2016-05-27T00:17:19.797" UserId="723" Text="No, this is only for RAM. The jumper pack actually just terminates connection of the onboard RAM and adding the expansion pack works just as it sounds.  &#xD;&#xA;&#xD;&#xA;You can even upgrade the capacity to even more RAM than is supplied by the expansion pack and the console will boot with it, but no games will take advantage of it.  &#xD;&#xA;&#xD;&#xA;See http://assemblergames.com/l/threads/possible-to-upgrade-n64-ram-internally.34414/" />
  <row Id="1854" PostHistoryTypeId="5" PostId="649" RevisionGUID="96464d54-c8a4-4ee5-85ea-88b735f6d458" CreationDate="2016-05-27T04:08:25.237" UserId="393" Comment="more info" Text="You can use the following PEEK commands to get the values.&#xD;&#xA;&#xD;&#xA;Note that the first joystick corresponds to paddle 0 for the X and paddle 1 for the Y&#xD;&#xA;&#xD;&#xA;- PEEK   49249	 -  PADDLE 0 BUTTON (&gt;127 IF BUTTON PRESSED)&#xD;&#xA;- PEEK   49250	 -  PADDLE 1 BUTTON (&gt;127 IF BUTTON PRESSED)&#xD;&#xA;- PEEK   49251	 -  PADDLE 2 BUTTON (&gt;127 IF BUTTON PRESSED)&#xD;&#xA;- PEEK   49248	 -  PADDLE 3 BUTTON (&gt;127 IF BUTTON PRESSED)&#xD;&#xA;- PEEK   49252	 -  READ GAME PADDLE 0 (0-255)&#xD;&#xA;- PEEK   49253	 -  READ GAME PADDLE 1 (0-255)&#xD;&#xA;- PEEK   49254	 -  READ GAME PADDLE 2 (0-255)&#xD;&#xA;- PEEK   49255	 -  READ GAME PADDLE 3 (0-255)&#xD;&#xA;&#xD;&#xA;I got this from here : http://www.skepticfiles.org/cowtext/apple/memorytx.htm&#xD;&#xA;&#xD;&#xA;Simpler than peeking is to use the PDL command - eg PDL(0), PDL(1)&#xD;&#xA;&#xD;&#xA;Here is a simple program:&#xD;&#xA;&#xD;&#xA;    10 LET X = PDL(0)&#xD;&#xA;    20 LET Y = PDL(1)&#xD;&#xA;    30 PRINT &quot;X=&quot;;X;&quot; Y=&quot;;Y&#xD;&#xA;    40 GOTO 10&#xD;&#xA;&#xD;&#xA;I've just tested that in AppleWin using the mouse as the joystick and it works fine.&#xD;&#xA;&#xD;&#xA;" />
  <row Id="1856" PostHistoryTypeId="2" PostId="651" RevisionGUID="1d49680f-d672-4491-88d4-836a296b9d5a" CreationDate="2016-05-27T06:34:41.260" UserId="730" Text="I believe Nintendo had some plans to add some extensions to it but in the end it just was for RAM.  I always wondered that too." />
  <row Id="1857" PostHistoryTypeId="2" PostId="652" RevisionGUID="17fd4980-8b56-4fed-847b-f335b3f63aaf" CreationDate="2016-05-27T08:54:43.647" UserId="712" Text="From something I read just the other day on the news:&#xD;&#xA;&#xD;&#xA;&gt; &quot;We regularly read floppy disks from 40 years ago and they are as good as new,&quot; he said. [someone at The National Museum of Computing at Bletchley Park]&#xD;&#xA;&gt; &#xD;&#xA;&gt; &quot;Magnetic tape has a real issue because when it is on the reels you&#xD;&#xA;&gt; have a lot of different layers so you have 'print through',&quot; he said.&#xD;&#xA;&gt; &quot;This involves the shadow of data on one section of tape being&#xD;&#xA;&gt; superimposed on the layer above and below. The interference means data&#xD;&#xA;&gt; quickly gets harder to read.&quot;&#xD;&#xA;&#xD;&#xA;Source: [BBC article][1]&#xD;&#xA;&#xD;&#xA;Certainly from my own experience, well stored 3.5 inch floppy disks are readable after 20 years, if not more.&#xD;&#xA;&#xD;&#xA;  [1]: http://www.bbc.co.uk/news/technology-36389711" />
  <row Id="1860" PostHistoryTypeId="5" PostId="633" RevisionGUID="2926ab3c-01d5-4c6c-9b28-a44f21f91133" CreationDate="2016-05-27T13:46:30.387" UserId="175" Comment="Added where you can download disk images since Apple pulled their archive" Text="Real Mac/IIgs 800k floppy disks cannot be written from Linux because Apple used [GCR](https://en.wikipedia.org/wiki/Group_code_recording) to get 800k on the disk instead of the 720k that the PC did. You need a [Superdrive](https://en.wikipedia.org/wiki/Macintosh_External_Disk_Drive) to write Mac/IIgs format 800k disks.&#xD;&#xA;&#xD;&#xA;You can write 1440k floppy disks from a PC drive that a Mac can read. [Mac GUI](http://macgui.com/downloads/?cat_id=340) has 1440k floppy disk images for System 6 and System 7." />
  <row Id="1861" PostHistoryTypeId="5" PostId="648" RevisionGUID="2856737b-ffaa-4c73-b2d4-c7914380a19a" CreationDate="2016-05-27T14:24:16.087" UserId="-1" Comment="Improve wording and grammar" Text="Some computer languages had a very strict syntax. COBOL, which is the language featured in your pictures, is a good example of this. The language only allows code to be entered from column 8 or 12 (depending on if it is a division, or a section). Column 7 was used to mark the line as a comment (by using an asterisk, AFAIR), and so on. FORTRAN, which is the language the second form you feature is for, uses the character C (in a specific column if I remember well) to mark the line as a comment.&#xD;&#xA;&#xD;&#xA;Why? Several reasons. Among them:&#xD;&#xA;&#xD;&#xA;- Simplifies the compiler and the compiling process: by forcing source code to follow strict indentation rules, the lexical analyzer is much more easy to write and thus needs less memory and executes faster. Remember that memory and computing power were scarce resouces back in the day.&#xD;&#xA;&#xD;&#xA;- Force the programmer to follow a programming style that may help him to quickly find bugs. Specifically, COBOL was designed to be understable for non-programmers (bankers are not very comfortable not knowing what a computing nerd is doing with his money, so they needed a computer language that they could understand)&#xD;&#xA;&#xD;&#xA;- Such forms were needed as a previous step, to later make punched cards from them. COBOL, for example, had more restrictions to suit punch cards, such as the maximum length allowed in a line (72 chars if I remember well). These restrictions were in part forced by the fact that each line in a COBOL programming form had to be encoded onto a punched card, each character into each column, and with a maximum of 72 columns (this is from memory). The special column to mark the whole line as a comment is a needed feature to speed up the process of entering the computer program from a punched card reader: the reader could just throw away the whole card if the special column is marked with the comment character.&#xD;&#xA;" />
  <row Id="1862" PostHistoryTypeId="24" PostId="648" RevisionGUID="2856737b-ffaa-4c73-b2d4-c7914380a19a" CreationDate="2016-05-27T14:24:16.087" Comment="Proposed by 62.255.26.46|5e44603f-fe9f-4ec0-a058-74866db9a20b approved by 105 edit id of 211" />
  <row Id="1863" PostHistoryTypeId="2" PostId="653" RevisionGUID="4322b176-7505-46d2-8ea7-58de28e239cb" CreationDate="2016-05-27T14:45:29.740" UserId="494" Text="I still have some of mine.&#xD;&#xA;&#xD;&#xA;The answer, for most large organzations was that you submitted them to the Data Entry Operators who would key them in to make punched cards for you (or for smaller organizations, or if you were a lowly intern, you keyed them in yourself).&#xD;&#xA;&#xD;&#xA;Then you would take you program in the form of punched cards (called a &quot;Deck&quot;) over to the Operators who would load it and schedule it for execution.  Hours or days later, you would receive a fan-fold printout of your programs execution and output.&#xD;&#xA;" />
  <row Id="1864" PostHistoryTypeId="5" PostId="653" RevisionGUID="1b2d9113-5bf0-4651-8bb9-917e1a5531ea" CreationDate="2016-05-27T14:53:45.190" UserId="494" Comment="added 1 character in body" Text="I still have some of mine.&#xD;&#xA;&#xD;&#xA;The answer, for most large organzations was that you submitted them to the Data Entry Operators who would key them in to make punched cards for you (or for smaller organizations, or if you were a lowly intern, you keyed them in yourself).&#xD;&#xA;&#xD;&#xA;Then you would take your program in the form of punched cards (called a &quot;Deck&quot;) over to the Operators who would load it and schedule it for execution.  Hours or days later, you would receive a fan-fold printout of your programs execution and output.&#xD;&#xA;" />
  <row Id="1866" PostHistoryTypeId="2" PostId="654" RevisionGUID="f8b8d679-2d15-41ef-87cc-2d16ae34ca01" CreationDate="2016-05-27T16:22:42.533" UserId="382" Text="I know the LET statement was available in AppleSoft and other Microsoft 8-bit BASICs back in the day, but I can't think of a time where I actually used it. Frankly, I get the impression that it was supported to conform to the Dartmouth standard but the interpreter was smart enough to not require it.&#xD;&#xA;&#xD;&#xA;Was the LET statement actually required anywhere? Were there revisions of Microsoft BASIC that actually used it? Further, if the statement *was* used, did the interpreter spend any time pondering it or did it skip right past it?&#xD;&#xA;" />
  <row Id="1867" PostHistoryTypeId="1" PostId="654" RevisionGUID="f8b8d679-2d15-41ef-87cc-2d16ae34ca01" CreationDate="2016-05-27T16:22:42.533" UserId="382" Text="Did the LET statement actually do anything in 8-bit Microsoft BASICs?" />
  <row Id="1868" PostHistoryTypeId="3" PostId="654" RevisionGUID="f8b8d679-2d15-41ef-87cc-2d16ae34ca01" CreationDate="2016-05-27T16:22:42.533" UserId="382" Text="&lt;applesoft-basic&gt;&lt;basic&gt;&lt;microsoft-basic&gt;" />
  <row Id="1870" PostHistoryTypeId="2" PostId="656" RevisionGUID="8c7f6b12-c22f-4fae-86fc-edf121cab392" CreationDate="2016-05-27T17:21:37.383" UserId="105" Text="I can only answer to the first question: the LET statement was actually used in 48K Sinclair BASIC, in which due to the way commands are entered, a keyword is needed before an identifier can be typed, so LET was needed in order to write a variable assignment (although there were unofficial patches to the ROM that eliminated that requirement).&#xD;&#xA;&#xD;&#xA;In fact, and while this is not a recommended practice, the use of the LET keyword allowed you to type things like this in Sinclair BASIC:&#xD;&#xA;&#xD;&#xA;    LET let=0&#xD;&#xA;    LET if i were you=2&#xD;&#xA;    LET i wouldnt treat me the way you do=3&#xD;&#xA;&#xD;&#xA;This examples, BTW, won't work in some MS BASIC interpreters. I have try them with MSX-1.&#xD;&#xA;" />
  <row Id="1871" PostHistoryTypeId="5" PostId="656" RevisionGUID="ef8d5815-d2d7-4396-90c0-a587343c4e72" CreationDate="2016-05-27T17:29:25.987" UserId="105" Comment="added 1 character in body" Text="I can only answer to the first question: the LET statement was actually used in 48K Sinclair BASIC, in which due to the way commands are entered, a keyword is needed before an identifier can be typed, so LET was needed in order to write a variable assignment (although there were unofficial patches to the ROM that eliminated that requirement).&#xD;&#xA;&#xD;&#xA;In fact, and while this is not a recommended practice, the use of the LET keyword allowed you to type things like this in Sinclair BASIC:&#xD;&#xA;&#xD;&#xA;    LET let=0&#xD;&#xA;    LET if i were you=2&#xD;&#xA;    LET i wouldnt treat me the way you do=3&#xD;&#xA;&#xD;&#xA;These examples, BTW, won't work in some MS BASIC interpreters. I have try them with MSX-1.&#xD;&#xA;" />
  <row Id="1872" PostHistoryTypeId="2" PostId="657" RevisionGUID="607c4a41-dcd7-469b-88cd-c6675a8112f1" CreationDate="2016-05-27T17:36:04.930" UserId="47" Text="Except for the very earliest versions of basic, `LET` was rarely used, but the `LET` keyword was *not* always optional. Early BASIC interpreters required it; however, for *most* versions that came out for the PC (including Microsoft BASIC), the use of `LET` *was* optional. &#xD;&#xA;&#xD;&#xA;Later standards in BASIC often required that the keyword be supported, but since there was no syntactical ambiguity in leaving it out, it was included simply to ensure compatibility with previous versions of BASIC that require it.&#xD;&#xA;&#xD;&#xA;From MSDN » [Visual BASIC](https://msdn.microsoft.com/en-us/librar/aa243390%28v=vs.60%29.aspx):&#xD;&#xA;&#xD;&#xA;&gt; ###Let Statement  &#xD;&#xA;&gt; Assigns the value of an expression to a variable or property.&#xD;&#xA;&gt;&#xD;&#xA;&gt; **Syntax**&#xD;&#xA;&gt;&#xD;&#xA;&gt; [**Let**] *varname = expression*&#xD;&#xA;&gt;&#xD;&#xA;&gt; The Let statement syntax has these parts:&#xD;&#xA;&gt; &#xD;&#xA;&gt; `Let` Optional. Explicit use of the Let keyword is a matter of style, but it is usually omitted.  &#xD;&#xA;&gt; &amp;hellip;   &#xD;&#xA;&#xD;&#xA;I've read and written quite a few BASIC interpreters way back, and the lexer definition of an  assignment statement usually looked something like this:&#xD;&#xA;&#xD;&#xA;&gt; *line-number* [LET] *variable* = *expression*&#xD;&#xA;&#xD;&#xA;(line numbers were omitted later)&#xD;&#xA;&#xD;&#xA;That means the appearance of `LET` is optional. The only time the interpreter spent in *pondering* the `LET` statement was in tokenizing the sequence of characters. But once it was parsed, the token was simply discarded. The use of `LET` didn't actually add anything in the parsing or execution of code.&#xD;&#xA;" />
  <row Id="1873" PostHistoryTypeId="5" PostId="657" RevisionGUID="80e4a9a0-443e-41a7-9b63-6c048c83e1cc" CreationDate="2016-05-27T18:50:25.637" UserId="47" Comment="edited body" Text="Except for the very earliest versions of basic, `LET` was rarely used, but the `LET` keyword was *not* always optional. Early BASIC interpreters required it; however, for *most* versions that came out for the PC (including Microsoft BASIC), the use of `LET` *was* optional. &#xD;&#xA;&#xD;&#xA;Later standards in BASIC often required that the keyword be supported, but since there was no syntactical ambiguity in leaving it out, it was included simply to ensure compatibility with previous versions of BASIC that require it.&#xD;&#xA;&#xD;&#xA;From MSDN » [Visual BASIC](https://msdn.microsoft.com/en-us/librar/aa243390%28v=vs.60%29.aspx):&#xD;&#xA;&#xD;&#xA;&gt; ###Let Statement  &#xD;&#xA;&gt; Assigns the value of an expression to a variable or property.&#xD;&#xA;&gt;&#xD;&#xA;&gt; **Syntax**&#xD;&#xA;&gt;&#xD;&#xA;&gt; [**Let**] *varname = expression*&#xD;&#xA;&gt;&#xD;&#xA;&gt; The Let statement syntax has these parts:&#xD;&#xA;&gt; &#xD;&#xA;&gt; `Let` Optional. Explicit use of the Let keyword is a matter of style, but it is usually omitted.  &#xD;&#xA;&gt; &amp;hellip;   &#xD;&#xA;&#xD;&#xA;I've read and written quite a few BASIC interpreters way back, and the lexer definition of an  assignment statement usually looked something like this:&#xD;&#xA;&#xD;&#xA;&gt; *line-number* [LET] *variable* = *expression*&#xD;&#xA;&#xD;&#xA;&lt;sup&gt;(line numbers were later omitted)&lt;/sup&gt;&#xD;&#xA;&#xD;&#xA;That means the appearance of `LET` is optional. The only time the interpreter spent in *pondering* the `LET` statement was in tokenizing the sequence of characters. But once it was parsed, the token was simply discarded. The use of `LET` didn't actually add anything in the parsing or execution of code.&#xD;&#xA;" />
  <row Id="1875" PostHistoryTypeId="5" PostId="649" RevisionGUID="efd4e353-cc04-48b7-922c-f5a1440dfddf" CreationDate="2016-05-28T09:01:26.910" UserId="148" Comment="Edited as indicated in comments." Text="The paddles and joysticks on the Apple work by charging a capacity through a variable resistance (potentiometer). For the first joystick, the X-axis corresponds to paddle 0, and the Y-axis to paddle 1, and similarly for the second joystick.&#xD;&#xA;&#xD;&#xA;Accessing address $C070 discharges all capacities, so they can now charge with a speed that is determined by the resistance. Addresses $C064 to $C067 can be read to check if the capacity is fully charged (MSB set). BASIC is too slow to do that accurately, so you can use the inbuilt `PDL(x)` commands, which call the monitor routine `PREAD`.&#xD;&#xA;&#xD;&#xA;The 3 buttons can be read by checking the MSB of addresses $C061 to $C063. In BASIC, you can use the following PEEK commands to get the values.&#xD;&#xA;&#xD;&#xA;- PEEK 49249 - PADDLE 0 BUTTON (&gt;127 IF BUTTON PRESSED)&#xD;&#xA;- PEEK 49250 - PADDLE 1 BUTTON (&gt;127 IF BUTTON PRESSED)&#xD;&#xA;- PEEK 49251 - PADDLE 2 BUTTON (&gt;127 IF BUTTON PRESSED)&#xD;&#xA;&#xD;&#xA;Here is a simple program:&#xD;&#xA;&#xD;&#xA;    10 LET X = PDL(0)&#xD;&#xA;    20 LET Y = PDL(1)&#xD;&#xA;    30 PRINT &quot;X=&quot;;X;&quot; Y=&quot;;Y&#xD;&#xA;    40 GOTO 10&#xD;&#xA;&#xD;&#xA;I've just tested that in AppleWin using the mouse as the joystick and it works fine.&#xD;&#xA;" />
  <row Id="1876" PostHistoryTypeId="24" PostId="649" RevisionGUID="efd4e353-cc04-48b7-922c-f5a1440dfddf" CreationDate="2016-05-28T09:01:26.910" Comment="Proposed by 148 approved by 393 edit id of 212" />
  <row Id="1877" PostHistoryTypeId="2" PostId="658" RevisionGUID="c33e6cac-878f-4bc1-b0d1-4377a57d6c7d" CreationDate="2016-05-28T18:16:28.390" UserId="462" Text="According to [Wikipedia](https://en.wikipedia.org/wiki/Regular_expression), Regular Expressions (AKA *regexes*) have only been around since 1956:&#xD;&#xA;&#xD;&#xA;&gt;Regular expressions originated in 1956, when mathematician Stephen Cole Kleene described regular languages... Other early implementations of pattern matching include the SNOBOL language, which did not use regular expressions, but instead its own pattern matching constructs.&#xD;&#xA;&#xD;&#xA;&gt;Regular expressions entered popular use from 1968 in two uses: pattern matching in a text editor and lexical analysis in a compiler.&#xD;&#xA;&#xD;&#xA;The description of SNOBOL's pattern matching abilities is vague: I'm not sure if they are actually able to match all regular languages. The article doesn't confirm if anything else came earlier either. I think that there must be something before regexes first became popular in 1968.&#xD;&#xA;&#xD;&#xA;I really want to know what was the earliest regex flavor. And how does its syntax compare to &quot;modern&quot; regex syntax (PCRE, for example)?&#xD;&#xA;&#xD;&#xA;---------&#xD;&#xA;&#xD;&#xA;Just to be clear, a regex flavor must be able to do the following things (just not necessarily with this syntax):&#xD;&#xA;&#xD;&#xA;1. Concatenation&#xD;&#xA; - Match &quot;cat&quot; by stringing together three regexes: `c` + `a` + `t`&#xD;&#xA;2. Union (AKA alternation)&#xD;&#xA; - Match either &quot;c&quot; or &quot;d&quot;: `[cd]`&#xD;&#xA;3. Star (AKA repetitions)&#xD;&#xA; - Match &quot;cccccc&quot;: `c*`&#xD;&#xA;4. Any combination of the above&#xD;&#xA;- Concatenation and Union&lt;br&gt;Match either &quot;cat&quot; or &quot;dog&quot;: `cat|dog`&#xD;&#xA;- Concatenation and Star&lt;br&gt;Match &quot;c&quot;s followed by &quot;d&quot;s: `c*d*`&#xD;&#xA;- Union and Star&lt;br&gt;Match any pattern of &quot;c&quot; and &quot;d&quot;: `[cd]*`&#xD;&#xA;- All three&lt;br&gt;Match any pattern of &quot;cat&quot; and &quot;dog&quot;: `(cat|dog)*`" />
  <row Id="1878" PostHistoryTypeId="1" PostId="658" RevisionGUID="c33e6cac-878f-4bc1-b0d1-4377a57d6c7d" CreationDate="2016-05-28T18:16:28.390" UserId="462" Text="What was the first language with regexes?" />
  <row Id="1879" PostHistoryTypeId="3" PostId="658" RevisionGUID="c33e6cac-878f-4bc1-b0d1-4377a57d6c7d" CreationDate="2016-05-28T18:16:28.390" UserId="462" Text="&lt;programming&gt;" />
  <row Id="1880" PostHistoryTypeId="2" PostId="659" RevisionGUID="0be7bee8-431b-4e7c-b37f-72ab2ea1e32d" CreationDate="2016-05-28T18:30:26.093" UserId="-1" Text="" />
  <row Id="1881" PostHistoryTypeId="2" PostId="660" RevisionGUID="b682470b-4e41-45a5-8f4c-dacb903ac556" CreationDate="2016-05-28T18:30:26.093" UserId="-1" Text="" />
  <row Id="1882" PostHistoryTypeId="2" PostId="661" RevisionGUID="6cbaef42-7a83-4c96-add8-bcb3a82133dc" CreationDate="2016-05-28T18:48:16.870" UserId="-1" Text="" />
  <row Id="1883" PostHistoryTypeId="2" PostId="662" RevisionGUID="69ebddaa-8b8b-4e83-8730-7f967d2b56ca" CreationDate="2016-05-28T18:48:16.870" UserId="-1" Text="" />
  <row Id="1884" PostHistoryTypeId="2" PostId="663" RevisionGUID="c8092a37-b518-4867-a96c-7c4c42cfb114" CreationDate="2016-05-28T22:38:48.677" UserId="87" Text="What 'virtual tape' image format is most suited for data preservation i.e. can store metadata like density and media type of original tape, presence of data past EOT marker, parity/ECC bits etc.?" />
  <row Id="1885" PostHistoryTypeId="1" PostId="663" RevisionGUID="c8092a37-b518-4867-a96c-7c4c42cfb114" CreationDate="2016-05-28T22:38:48.677" UserId="87" Text="Magnetic tape data preservation format" />
  <row Id="1886" PostHistoryTypeId="3" PostId="663" RevisionGUID="c8092a37-b518-4867-a96c-7c4c42cfb114" CreationDate="2016-05-28T22:38:48.677" UserId="87" Text="&lt;cassette-tape&gt;&lt;data-transfer&gt;" />
  <row Id="1887" PostHistoryTypeId="2" PostId="664" RevisionGUID="4d519ea6-dfe4-4946-961e-c61f12523cb2" CreationDate="2016-05-29T00:49:16.043" UserId="71" Text="The maximum is 8309 ($2075) nibbles for track 0. Well, according to a bit of experimentation I did. ; - )&#xD;&#xA;&#xD;&#xA;The Disk II uses Constant Angular Velocity standardized by Shugart at 300 RPM. The storage capacity of a track is affected by its contents: since MFM clock pulses aren't used, the data written must be carefully arranged in order to synchronize with and be reliably read by the Disk II controller.&#xD;&#xA;&#xD;&#xA;However in this experiment I didn't use sync bytes, instead relying on the sequencer's natural tendency sync to certain patterns. A simple nibble count measures the maximum theoretical capacity of the track, ignoring the required overheads of practical data storage. Here is the nibble count code:&#xD;&#xA;&#xD;&#xA;          ORG $8000&#xD;&#xA;          LDA #$30    ;WRITE LEN&#xD;&#xA;          STA $01&#xD;&#xA;          LDX #$50    ;SLOT * $10&#xD;&#xA;          LDA $C08D,X ;LOAD WP&#xD;&#xA;          LDA $C08E,X ;READ WP&#xD;&#xA;          BPL NOTWP&#xD;&#xA;          RTS&#xD;&#xA;    NOTWP LDA #$D5    ;1ST NIBBLE&#xD;&#xA;          STA $C08F,X ;WRITE MODE&#xD;&#xA;          CMP $C08C,X ;4 - SHIFT&#xD;&#xA;          BIT $FF     ;3&#xD;&#xA;          LDY #$00    ;2&#xD;&#xA;    LOOP1 DEC $FF     ;5&#xD;&#xA;          EOR #$7F    ;2 - D5^AA&#xD;&#xA;    LOOP2 DEC $FF     ;5&#xD;&#xA;          CMP $FFFF   ;4&#xD;&#xA;          NOP         ;2&#xD;&#xA;          STA $C08D,X ;5 - LOAD&#xD;&#xA;          CMP $C08C,X ;4 - SHIFT&#xD;&#xA;          DEY         ;2&#xD;&#xA;          BNE LOOP1   ;3 OR 2&#xD;&#xA;          DEC $01     ;5&#xD;&#xA;          BNE LOOP2   ;3 OR 2&#xD;&#xA;          DEC $FF     ;5&#xD;&#xA;          DEC $FF     ;5&#xD;&#xA;    MARK  LDA #$FF    ;2 - MARK&#xD;&#xA;          STA $C08D,X ;5 - LOAD&#xD;&#xA;          CMP $C08C,X ;4 - SHIFT&#xD;&#xA;          JSR RTS     ;12&#xD;&#xA;          LDA #$20    ;2 - ADDR&#xD;&#xA;          STA STORE+2 ;4&#xD;&#xA;          STA COUNT+2 ;4&#xD;&#xA;          LDY $01     ;3&#xD;&#xA;          STY $00     ;3&#xD;&#xA;          LDA $C08E,X ;READ MODE&#xD;&#xA;    READ  LDA $C08C,X&#xD;&#xA;          BPL READ&#xD;&#xA;    STORE STA $2000,Y&#xD;&#xA;          INY&#xD;&#xA;          BNE READ&#xD;&#xA;          INC STORE+2&#xD;&#xA;          BPL READ    ;TO $8000&#xD;&#xA;          STA $C088,X ;MOTOR OFF&#xD;&#xA;          LDX #$00&#xD;&#xA;    COUNT LDA $2000,X&#xD;&#xA;          CMP MARK+1&#xD;&#xA;          BNE NEXT&#xD;&#xA;          LDA COUNT+2 ;PRINT ADDR&#xD;&#xA;          JSR $FDDA&#xD;&#xA;          TXA&#xD;&#xA;          JSR $FDDA&#xD;&#xA;          LDA #$A0&#xD;&#xA;          JSR $FDED&#xD;&#xA;          LDA $01     ;1ST MARK?&#xD;&#xA;          BEQ COPY&#xD;&#xA;          TXA         ;NO&#xD;&#xA;          SEC         ;CALC LEN&#xD;&#xA;          SBC $00&#xD;&#xA;          PHA&#xD;&#xA;          JSR $FE80   ;SETINV&#xD;&#xA;          LDA COUNT+2&#xD;&#xA;          SBC $01&#xD;&#xA;          JSR $FDDA   ;PRINT LEN&#xD;&#xA;          PLA&#xD;&#xA;          JSR $FDDA&#xD;&#xA;          JSR $FE84   ;SETNORM&#xD;&#xA;          LDA #$8D&#xD;&#xA;          JSR $FDED&#xD;&#xA;    COPY  LDA COUNT+2&#xD;&#xA;          STA $01&#xD;&#xA;          STX $00&#xD;&#xA;    NEXT  INX&#xD;&#xA;          BNE COUNT&#xD;&#xA;          INC COUNT+2&#xD;&#xA;          BPL COUNT   ;TO $8000?&#xD;&#xA;    RTS   RTS         ;YES, DONE&#xD;&#xA;&#xD;&#xA;Assembled at $8000, there are some variables that can be adjusted:&#xD;&#xA;&#xD;&#xA; - 8001: The number of nibbles to write to the track (in units of $100)&#xD;&#xA; - 8005: The drive slot number times $10&#xD;&#xA; - 8010: The first nibble value; this gives a pair sequence via XOR with $7F&#xD;&#xA; - 801E: The XOR value; bit 8 should be 0&#xD;&#xA; - 8037: The nibble count mark value&#xD;&#xA; - 8042: The page to start storing track data when read back and nibble counted&#xD;&#xA;&#xD;&#xA;The routine assumes the drive is on and up-to-speed, and that the head is already positioned on the desired track. The defaults as given will write $3000 nibbles comprised of the sequence &quot;D5AA&quot; to the selected drive in slot 5. The track will then be read into memory at $2000-$7FFF and the data scanned for the mark value. Mark locations will be printed in normal text, and length between marks in inverse.&#xD;&#xA;&#xD;&#xA;Here is an image of a sample run which uses boot 0 to seek track 0 of drive 1 in slot 6 in AppleWin:&#xD;&#xA;&#xD;&#xA;[![Sample run of nibble count routine][1]][1]&#xD;&#xA;&#xD;&#xA;Adjusting a real drive's speed (measured with Copy II Plus 8.4) I obtained the following results:&#xD;&#xA;&#xD;&#xA;    Speed (ms)  Speed (RPM)  Max length  Length (Hex)&#xD;&#xA;    188         319          6015        177F&#xD;&#xA;    200         300          6400        1900&#xD;&#xA;    210         286          6715        1A3B&#xD;&#xA;    220         273          7045        1B85&#xD;&#xA;    230         261          7360        1CC0&#xD;&#xA;    240         250          7680        1E00&#xD;&#xA;    250         240          8004        1F44&#xD;&#xA;    260         231          8309        2075&#xD;&#xA;    270         222          -           -&#xD;&#xA;    280         214          -           -&#xD;&#xA;    317         189          -           -&#xD;&#xA;&#xD;&#xA;At 270ms and above the sequencer would not auto-sync to simple nibble patterns, though Copy II Plus could still measure drive speed. Its exclusive use of selected sync byte values would likely explain this.&#xD;&#xA;&#xD;&#xA;Tracks written at one speed can be read at another speed that is +/-10ms. I didn't test how far this tolerance extends.&#xD;&#xA;&#xD;&#xA;When speculating about Constant Linear Velocity storage, you would need to specify the exact hardware being used. There is a good list of existing [floppy disk formats on Wikipedia](https://en.wikipedia.org/wiki/List_of_floppy_disk_formats#Known_disk_logical_formats).&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/cTamZ.png" />
  <row Id="1888" PostHistoryTypeId="5" PostId="356" RevisionGUID="85715345-e198-46dd-89dd-e5e738432262" CreationDate="2016-05-29T04:15:11.597" UserId="462" Comment="minor grammar and new tag" Text="I have a 3003b CoCo 1 (the white one) with the melty keyboard. A few of the keys do not work. On a few of them, there appears to be a slimy substance that I've cleaned from the surface. The badge on the top of the case is mushy, so I can only assume someone used a cleaner on it and it got down into the keyboard. &#xD;&#xA;&#xD;&#xA;This keyboard used folded mylar sheets with a separator sheet. I'll be taking the keyboard apart next week to inspect it. What's the best cleaner to use on these types without damaging the mylar or the material the traces are made out of? " />
  <row Id="1889" PostHistoryTypeId="6" PostId="356" RevisionGUID="85715345-e198-46dd-89dd-e5e738432262" CreationDate="2016-05-29T04:15:11.597" UserId="462" Comment="minor grammar and new tag" Text="&lt;color-computer&gt;&lt;maintenance&gt;&lt;keyboards&gt;" />
  <row Id="1890" PostHistoryTypeId="24" PostId="356" RevisionGUID="85715345-e198-46dd-89dd-e5e738432262" CreationDate="2016-05-29T04:15:11.597" Comment="Proposed by 462 approved by 75, 56 edit id of 215" />
  <row Id="1891" PostHistoryTypeId="6" PostId="663" RevisionGUID="76d42aa3-237a-4036-bc21-4a3e72f3520a" CreationDate="2016-05-29T09:16:56.490" UserId="87" Comment="define new tags" Text="&lt;cassette-tape&gt;&lt;data-transfer&gt;&lt;magnetic-tape&gt;&lt;data-preservation&gt;" />
  <row Id="1892" PostHistoryTypeId="6" PostId="639" RevisionGUID="d6886b5b-345d-4efd-8d38-3e0dfd1ff7e5" CreationDate="2016-05-29T10:26:24.207" UserId="87" Comment="adding relevant tag" Text="&lt;floppy-disk&gt;&lt;data-preservation&gt;" />
  <row Id="1893" PostHistoryTypeId="24" PostId="639" RevisionGUID="d6886b5b-345d-4efd-8d38-3e0dfd1ff7e5" CreationDate="2016-05-29T10:26:24.207" Comment="Proposed by 87 approved by 92, 125 edit id of 220" />
  <row Id="1894" PostHistoryTypeId="2" PostId="665" RevisionGUID="efcd0eda-bc31-463f-886a-fefed024a66a" CreationDate="2016-05-29T10:48:11.707" UserId="46" Text="If you need a custom USB keyboard, this ought to be possible with any microcontroller which implementes a full USB device, so long as you can find the relevant codes to generate - that would maybe be simpler than sourcing the right hardware." />
  <row Id="1896" PostHistoryTypeId="5" PostId="664" RevisionGUID="456712ba-4e30-420a-8a3d-7877e6714f11" CreationDate="2016-05-29T11:39:57.927" UserId="71" Comment="Expanded and clarified some parts, and added reference links where possible." Text="The maximum is 8309 ($2075) nibbles for track 0. Well, according to a bit of experimentation I did. ; - )&#xD;&#xA;&#xD;&#xA;The Disk II uses Constant Angular Velocity standardized by [Shugart at 300 RPM][1]. The earlier 8-inch drives were 360 RPM, and since the physical media was the same it's likely that 300 RPM was chosen to increase data density on the smaller disks, and perhaps reduce controller throughput for use on early computers that were less powerful and cheaper. (But I can't find a reference for this.)&#xD;&#xA;&#xD;&#xA;Disk II spindle speed can be [manually adjusted][2] on Apple's analog controller board between approximately 190 and 320 RPM. Slower speed results in higher data density, but this will be limited by physical parameters such as magnetic (iron oxide) particle density and read/write head characteristics - e.g. weaker magnetically induced current in the read head at low speed.&#xD;&#xA;&#xD;&#xA;Track capacity is affected by its contents: since MFM clock pulses aren't used, the data written must be carefully chosen in order to synchronize with and be reliably read by the Disk II controller. This includes restrictions on consecutive zeros, and nibbles with trailing zeroes called self-sync bytes.&#xD;&#xA;&#xD;&#xA;However in this experiment I didn't use sync bytes, instead relying on the controller sequencer's natural tendency to quickly sync to certain patterns. A simple nibble count measures the maximum theoretical capacity of the track, ignoring the required overheads of practical data storage. Here is the nibble count code:&#xD;&#xA;&#xD;&#xA;          ORG $8000&#xD;&#xA;          LDA #$30    ;WRITE LEN&#xD;&#xA;          STA $01&#xD;&#xA;          LDX #$50    ;SLOT * $10&#xD;&#xA;          LDA $C08D,X ;LOAD WP&#xD;&#xA;          LDA $C08E,X ;READ WP&#xD;&#xA;          BPL NOTWP&#xD;&#xA;          RTS&#xD;&#xA;    NOTWP LDA #$D5    ;1ST NIBBLE&#xD;&#xA;          STA $C08F,X ;WRITE MODE&#xD;&#xA;          CMP $C08C,X ;4 - SHIFT&#xD;&#xA;          BIT $FF     ;3&#xD;&#xA;          LDY #$00    ;2&#xD;&#xA;    LOOP1 DEC $FF     ;5&#xD;&#xA;          EOR #$7F    ;2 - D5^AA&#xD;&#xA;    LOOP2 DEC $FF     ;5&#xD;&#xA;          CMP $FFFF   ;4&#xD;&#xA;          NOP         ;2&#xD;&#xA;          STA $C08D,X ;5 - LOAD&#xD;&#xA;          CMP $C08C,X ;4 - SHIFT&#xD;&#xA;          DEY         ;2&#xD;&#xA;          BNE LOOP1   ;3 OR 2&#xD;&#xA;          DEC $01     ;5&#xD;&#xA;          BNE LOOP2   ;3 OR 2&#xD;&#xA;          DEC $FF     ;5&#xD;&#xA;          DEC $FF     ;5&#xD;&#xA;    MARK  LDA #$FF    ;2 - MARK&#xD;&#xA;          STA $C08D,X ;5 - LOAD&#xD;&#xA;          CMP $C08C,X ;4 - SHIFT&#xD;&#xA;          JSR RTS     ;12&#xD;&#xA;          LDA #$20    ;2 - ADDR&#xD;&#xA;          STA STORE+2 ;4&#xD;&#xA;          STA COUNT+2 ;4&#xD;&#xA;          LDY $01     ;3&#xD;&#xA;          STY $00     ;3&#xD;&#xA;          LDA $C08E,X ;READ MODE&#xD;&#xA;    READ  LDA $C08C,X&#xD;&#xA;          BPL READ&#xD;&#xA;    STORE STA $2000,Y&#xD;&#xA;          INY&#xD;&#xA;          BNE READ&#xD;&#xA;          INC STORE+2&#xD;&#xA;          BPL READ    ;TO $8000&#xD;&#xA;          STA $C088,X ;MOTOR OFF&#xD;&#xA;          LDX #$00&#xD;&#xA;    COUNT LDA $2000,X&#xD;&#xA;          CMP MARK+1&#xD;&#xA;          BNE NEXT&#xD;&#xA;          LDA COUNT+2 ;PRINT ADDR&#xD;&#xA;          JSR $FDDA&#xD;&#xA;          TXA&#xD;&#xA;          JSR $FDDA&#xD;&#xA;          LDA #$A0&#xD;&#xA;          JSR $FDED&#xD;&#xA;          LDA $01     ;1ST MARK?&#xD;&#xA;          BEQ COPY&#xD;&#xA;          TXA         ;NO&#xD;&#xA;          SEC         ;CALC LEN&#xD;&#xA;          SBC $00&#xD;&#xA;          PHA&#xD;&#xA;          JSR $FE80   ;SETINV&#xD;&#xA;          LDA COUNT+2&#xD;&#xA;          SBC $01&#xD;&#xA;          JSR $FDDA   ;PRINT LEN&#xD;&#xA;          PLA&#xD;&#xA;          JSR $FDDA&#xD;&#xA;          JSR $FE84   ;SETNORM&#xD;&#xA;          LDA #$8D&#xD;&#xA;          JSR $FDED&#xD;&#xA;    COPY  LDA COUNT+2&#xD;&#xA;          STA $01&#xD;&#xA;          STX $00&#xD;&#xA;    NEXT  INX&#xD;&#xA;          BNE COUNT&#xD;&#xA;          INC COUNT+2&#xD;&#xA;          BPL COUNT   ;TO $8000?&#xD;&#xA;    RTS   RTS         ;YES, DONE&#xD;&#xA;&#xD;&#xA;Assembled at $8000, there are some defaults that can be optionally adjusted:&#xD;&#xA;&#xD;&#xA; - 8001: The number of nibbles to write to the track in units of $100 (Default $30 = $3000 nibbles)&#xD;&#xA; - 8005: The drive slot number times $10 (Default $50 - safer than $60!)&#xD;&#xA; - 8010: The first nibble value; this gives a pair sequence via XOR with $7F (Default D5/AA)&#xD;&#xA; - 801E: The XOR value; bit 8 should be 0 (Default $7F)&#xD;&#xA; - 8037: The nibble count mark value (Default $FF)&#xD;&#xA; - 8042: The page to start storing track data when read back and nibble counted (Default $20)&#xD;&#xA;&#xD;&#xA;The routine assumes the drive is on and up-to-speed, and that the head is already positioned on the desired track. The defaults as given will write $3000 nibbles of &quot;D5AA&quot; followed by one &quot;FF&quot; mark to the selected drive in slot 5. The track will then be read into memory at $2000-$7FFF and the data scanned for the mark value. Mark locations will be printed in normal text, and length between marks in inverse.&#xD;&#xA;&#xD;&#xA;Here is an image of a sample run which uses boot 0 to seek track 0 of drive 1 in slot 6 in AppleWin:&#xD;&#xA;&#xD;&#xA;[![Sample run of nibble count routine][3]][3]&#xD;&#xA;&#xD;&#xA;Adjusting a real drive's speed (measured with Copy II Plus 8.4) I obtained the following results:&#xD;&#xA;&#xD;&#xA;    Speed (ms)  Speed (RPM)  Max length  Length (Hex)&#xD;&#xA;    188         319          6015        177F&#xD;&#xA;    200         300          6400        1900&#xD;&#xA;    210         286          6715        1A3B&#xD;&#xA;    220         273          7045        1B85&#xD;&#xA;    230         261          7360        1CC0&#xD;&#xA;    240         250          7680        1E00&#xD;&#xA;    250         240          8004        1F44&#xD;&#xA;    260         231          8309        2075&#xD;&#xA;    270         222          -           -&#xD;&#xA;    280         214          -           -&#xD;&#xA;    317         189          -           -&#xD;&#xA;&#xD;&#xA;At 270ms and above the sequencer would not auto-sync to simple nibble patterns, though Copy II Plus could still measure drive speed. Its exclusive use of selected sync byte values would likely explain this.&#xD;&#xA;&#xD;&#xA;Tracks written at one speed can be read at another speed that is +/-10ms. I didn't test how far this tolerance extends. Roland Gustafsson (who wrote the copy protection for many Brøderbund titles) [says he tried slowing the drive speed but &quot;never used that technique due to compatibility problems&quot;][4].&#xD;&#xA;&#xD;&#xA;When speculating about an alternative Constant Linear Velocity capacity you would need to specify the exact hardware being used, since that big a change would probably extend from the controlling software to the magnetic media - and everything in between. There is a good list of existing [floppy disk formats on Wikipedia][5].&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://archive.org/details/bitsavers_shugartSA478_3019449&#xD;&#xA;  [2]: https://archive.org/details/Apple_Disk_II_Technical_Procedures&#xD;&#xA;  [3]: http://i.stack.imgur.com/cTamZ.png&#xD;&#xA;  [4]: http://boutillon.free.fr/Underground/Deplombage/Interviews/The_Wizard/Roland_Gustafsson.html#F02&#xD;&#xA;  [5]: https://en.wikipedia.org/wiki/List_of_floppy_disk_formats#Known_disk_logical_formats" />
  <row Id="1897" PostHistoryTypeId="5" PostId="625" RevisionGUID="89d47197-5c85-4081-bbef-b801219db558" CreationDate="2016-05-29T15:34:47.470" UserId="621" Comment="added 55 characters in body" Text="For questions regarding early arcade games and hardware" />
  <row Id="1898" PostHistoryTypeId="24" PostId="625" RevisionGUID="89d47197-5c85-4081-bbef-b801219db558" CreationDate="2016-05-29T15:34:47.470" Comment="Proposed by 621 approved by 79, 56 edit id of 206" />
  <row Id="1899" PostHistoryTypeId="5" PostId="563" RevisionGUID="23ef498b-53c3-4d5e-bb8c-c602027ee07b" CreationDate="2016-05-29T15:35:25.970" UserId="621" Comment="added 215 characters in body" Text="For questions about the basic language, use the [tag:basic] tag. Dialect-specific questions should use the dialect-specific tags [tag:applesoft-basic], [tag:atari-basic], [tag:color-basic], [tag:integer-basic], etc." />
  <row Id="1900" PostHistoryTypeId="24" PostId="563" RevisionGUID="23ef498b-53c3-4d5e-bb8c-c602027ee07b" CreationDate="2016-05-29T15:35:25.970" Comment="Proposed by 621 approved by 79, 56 edit id of 198" />
  <row Id="1901" PostHistoryTypeId="5" PostId="624" RevisionGUID="2f2d37b1-7562-4899-9a33-e06cbe9afae1" CreationDate="2016-05-29T15:35:39.517" UserId="621" Comment="added 31 characters in body" Text="Related tags:&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;[tag:gaming]" />
  <row Id="1902" PostHistoryTypeId="24" PostId="624" RevisionGUID="2f2d37b1-7562-4899-9a33-e06cbe9afae1" CreationDate="2016-05-29T15:35:39.517" Comment="Proposed by 621 approved by 79, 56 edit id of 205" />
  <row Id="1903" PostHistoryTypeId="6" PostId="634" RevisionGUID="5a12dd68-1fb6-42af-8884-ad640885b10f" CreationDate="2016-05-29T15:36:14.953" UserId="87" Comment="adding relevant tag" Text="&lt;hardware&gt;&lt;hard-disk&gt;&lt;scsi&gt;&lt;data-preservation&gt;" />
  <row Id="1904" PostHistoryTypeId="24" PostId="634" RevisionGUID="5a12dd68-1fb6-42af-8884-ad640885b10f" CreationDate="2016-05-29T15:36:14.953" Comment="Proposed by 87 approved by 92, 56 edit id of 221" />
  <row Id="1905" PostHistoryTypeId="5" PostId="627" RevisionGUID="2c9c8a34-50ea-4c0c-930f-5d46aa53d445" CreationDate="2016-05-29T16:03:27.510" UserId="621" Comment="added 73 characters in body" Text="For questions about retrocomputing hardware and software created by Intel" />
  <row Id="1906" PostHistoryTypeId="24" PostId="627" RevisionGUID="2c9c8a34-50ea-4c0c-930f-5d46aa53d445" CreationDate="2016-05-29T16:03:27.510" Comment="Proposed by 621 approved by 79, 47 edit id of 204" />
  <row Id="1907" PostHistoryTypeId="5" PostId="659" RevisionGUID="86cd0bc3-ae20-48a5-b122-d3ef87761579" CreationDate="2016-05-29T16:03:34.493" UserId="462" Comment="added 786 characters in body" Text="Good software recommendation requests have two components:&#xD;&#xA;&#xD;&#xA;- A **purpose** — a task to accomplish&#xD;&#xA;- Some **objective requirements** — a minimum set of features&#xD;&#xA;&#xD;&#xA;We request that answers demonstrate **how** the recommended product meets the requirement and is suitable for the intended purpose.&#xD;&#xA;&#xD;&#xA;If you're asking for alternatives, be sure to describe the features you're using and why what you have isn't up for the task.&#xD;&#xA;&#xD;&#xA;**Don't ask about...**&#xD;&#xA;&#xD;&#xA;- Questions without concrete requirements — if some potential answer would lack a critical feature, we need to know.&#xD;&#xA;- Hosting recommendations&#xD;&#xA;- Game recommendations, unless they solve a problem (other than “I'm bored”)&#xD;&#xA;&#xD;&#xA;&lt;sub&gt;Adapted from the rules at [Software Recommendations](http://softwarerecs.stackexchange.com/).&lt;/sub&gt;" />
  <row Id="1908" PostHistoryTypeId="24" PostId="659" RevisionGUID="86cd0bc3-ae20-48a5-b122-d3ef87761579" CreationDate="2016-05-29T16:03:34.493" Comment="Proposed by 462 approved by 47 edit id of 213" />
  <row Id="1909" PostHistoryTypeId="5" PostId="660" RevisionGUID="5df31593-3081-4086-af4c-80898dd5b06a" CreationDate="2016-05-29T16:04:31.453" UserId="462" Comment="added 49 characters in body" Text="Recommendations of software to accomplish a task." />
  <row Id="1910" PostHistoryTypeId="24" PostId="660" RevisionGUID="5df31593-3081-4086-af4c-80898dd5b06a" CreationDate="2016-05-29T16:04:31.453" Comment="Proposed by 462 approved by 47 edit id of 214" />
  <row Id="1911" PostHistoryTypeId="5" PostId="662" RevisionGUID="33643b7c-57f9-4dc6-957c-0e32236341de" CreationDate="2016-05-29T16:04:36.703" UserId="462" Comment="added 84 characters in body" Text="For questions about Intel's 386 processor, alternatively known as the i386 or 80386." />
  <row Id="1912" PostHistoryTypeId="24" PostId="662" RevisionGUID="33643b7c-57f9-4dc6-957c-0e32236341de" CreationDate="2016-05-29T16:04:36.703" Comment="Proposed by 462 approved by 47 edit id of 217" />
  <row Id="1913" PostHistoryTypeId="2" PostId="666" RevisionGUID="5c0cdb1a-1d84-48c7-9d9f-d5df6fcebd94" CreationDate="2016-05-29T17:40:53.653" UserId="462" Text="I think I found it. It's called [COMIT](https://en.wikipedia.org/wiki/COMIT), and it dates back to 1957, just *one year* after Kleene's work was published. Wikipedia calls it the &quot;first string processing language&quot;, so it fits the bill very nicely.&#xD;&#xA;&#xD;&#xA;Wikipedia also says that its creation led to the creation of SNOBOL. After reading up on SNOBOL a bit, I realized it's actually pretty powerful too, capable of parsing Context-free grammars (CFGs).&#xD;&#xA;&#xD;&#xA;[*An introduction to COMIT programming*](https://babel.hathitrust.org/cgi/pt?id=mdp.39015040285333;view=1up;seq=13) is the best reference for the grammar that I've found so far. Keep in mind, it's an ENTIRE programming language. I am not sure how to do everything I mentioned, but I am sure it's possible; the language is probably Turing-complete, so it might be capable of parsing CFGs too.&#xD;&#xA;&#xD;&#xA;The syntaxes for the &quot;patterns&quot; and the &quot;strings&quot; are a little weird (but mutually similar), so I doubt that modern regex syntax was derived from it. &#xD;&#xA;&#xD;&#xA;(The oldest regex flavor with syntax like modern regexes that I know of are Unix utilities, as dirkt mentioned: grep, ed, sed, awk. This could be an entirely different question to ask about.)&#xD;&#xA;&#xD;&#xA;Characters can be grouped together into arbitrary groups called *constituents*, which are separated by plus signs. Ironically, my initial example of concatenation is *exactly* how it looks:&#xD;&#xA;&#xD;&#xA;    C + A + T&#xD;&#xA;It can also be written as one constituent:&#xD;&#xA;&#xD;&#xA;    CAT&#xD;&#xA;To include a space, the dash (`-`) character is used:&#xD;&#xA;&#xD;&#xA;    THE + -CAT&#xD;&#xA;Or, as a single constituent:&#xD;&#xA;&#xD;&#xA;    THE-CAT&#xD;&#xA;Strings are stored in memory called the *workspace*. &quot;Rules&quot; are matched against the workspace, and replacements can be made. &#xD;&#xA;&#xD;&#xA;It's pretty easy to do a replacement, actually. To change `THE-CAT` into `THE-DOG`, you could use this rule:&#xD;&#xA;&#xD;&#xA;    * CAT = DOG *&#xD;&#xA;&#xD;&#xA;Deletion is easy too. To remove `THE-` from `THE-DOG`, you could use this rule:&#xD;&#xA;&#xD;&#xA;    * THE- = 0 *&#xD;&#xA;If you have `DOG` and wanted to double the `G`, you could use numbers. Numbers are meta characters, as my deletion example shows you. Ignoring `0`, they have a similar meaning to modern capture groups, if you imagine each constituent as a capture group. For example, `G` could be doubled by using the following rule:&#xD;&#xA;&#xD;&#xA;    * G = 1 + 1 *&#xD;&#xA;(No, one plus one isn't two, it's `GG`!)&#xD;&#xA;&#xD;&#xA;Moving onto more complex constructs, `$` is essentially equivalent to the modern `.*`. On the other hand, in order to do something similar to the modern `.{3}` (three characters), you would use `$3` in COMIT (assuming each constituent was a character, I think).&#xD;&#xA;&#xD;&#xA;If you had `THE-CAT + , + -WHO-WISHED + -IT-WAS + -A-DOG + , + -BARKED` and you wanted to remove everything between the commas, you would use:&#xD;&#xA;&#xD;&#xA;    * , + $ + , = 0 *&#xD;&#xA;&#xD;&#xA;-----&#xD;&#xA;&#xD;&#xA;Like I said, there's a whole lot more past this. It has some type of GOTO, but I don't have any experience with using GOTOs (I come from an era where GOTO is something to be avoided, not taught).&#xD;&#xA;&#xD;&#xA;It also might help me if I had a way to run this stuff. I guess I'll have to write up a flowchart instead or something `:)`." />
  <row Id="1914" PostHistoryTypeId="5" PostId="327" RevisionGUID="dd965ad0-4eab-4bac-892f-f006fb40cf54" CreationDate="2016-05-29T21:56:13.913" UserId="260" Comment="Updated bit depth per comments" Text="No hardware revisions are necessary.  The digitization playback is achieved by bit-banging the volume register of the SID chip to simulate a digital playback device.  Essentially, the SID can be used as a 4-bit digital playback device.  What's amazing is that the thing sounds as good as it does playing back digital data.&#xD;&#xA;&#xD;&#xA;A great article about digis on the C64 can be found here: http://sid.kubarth.com/articles/the_c64_digi.txt" />
  <row Id="1915" PostHistoryTypeId="5" PostId="649" RevisionGUID="2c5940b9-54e3-4f27-a133-c27958e0e10c" CreationDate="2016-05-30T00:00:00.980" UserId="539" Comment="Added the clarifying appnote from the other answer." Text="The paddles and joysticks on the Apple work by charging a capacity through a variable resistance (potentiometer). For the first joystick, the X-axis corresponds to paddle 0, and the Y-axis to paddle 1, and similarly for the second joystick.&#xD;&#xA;&#xD;&#xA;Accessing address $C070 discharges all capacities, so they can now charge with a speed that is determined by the resistance. Addresses $C064 to $C067 can be read to check if the capacity is fully charged (MSB set). BASIC is too slow to do that accurately, so you can use the inbuilt `PDL(x)` commands, which call the monitor routine `PREAD`.&#xD;&#xA;&#xD;&#xA;The 3 buttons can be read by checking the MSB of addresses $C061 to $C063. In BASIC, you can use the following PEEK commands to get the values.&#xD;&#xA;&#xD;&#xA;- PEEK 49249 - PADDLE 0 BUTTON (&gt;127 IF BUTTON PRESSED)&#xD;&#xA;- PEEK 49250 - PADDLE 1 BUTTON (&gt;127 IF BUTTON PRESSED)&#xD;&#xA;- PEEK 49251 - PADDLE 2 BUTTON (&gt;127 IF BUTTON PRESSED)&#xD;&#xA;&#xD;&#xA;Here is a simple program:&#xD;&#xA;&#xD;&#xA;    10 LET X = PDL(0)&#xD;&#xA;    20 LET Y = PDL(1)&#xD;&#xA;    30 PRINT &quot;X=&quot;;X;&quot; Y=&quot;;Y&#xD;&#xA;    40 GOTO 10&#xD;&#xA;&#xD;&#xA;I've just tested that in AppleWin using the mouse as the joystick and it works fine.&#xD;&#xA;&#xD;&#xA;More details about reading the paddles can be found in the appnote [here](http://www.1000bit.it/support/manuali/apple/technotes/aiie/tn.aiie.06.html), which explains some of the quirks you'll need to be aware of." />
  <row Id="1916" PostHistoryTypeId="24" PostId="649" RevisionGUID="2c5940b9-54e3-4f27-a133-c27958e0e10c" CreationDate="2016-05-30T00:00:00.980" Comment="Proposed by 539 approved by 393 edit id of 218" />
  <row Id="1917" PostHistoryTypeId="2" PostId="667" RevisionGUID="86b7bd75-4e78-4da7-b402-7dec822a8f18" CreationDate="2016-05-30T00:26:42.610" UserId="64" Text="Each of the SID6581s I have tested sound different, particularly when it comes to filter cutoffs and distortion.  What are the causes of these variances?&#xD;&#xA;&#xD;&#xA;" />
  <row Id="1918" PostHistoryTypeId="1" PostId="667" RevisionGUID="86b7bd75-4e78-4da7-b402-7dec822a8f18" CreationDate="2016-05-30T00:26:42.610" UserId="64" Text="Why was the audio output of the SID6581 so variable between chips?" />
  <row Id="1919" PostHistoryTypeId="3" PostId="667" RevisionGUID="86b7bd75-4e78-4da7-b402-7dec822a8f18" CreationDate="2016-05-30T00:26:42.610" UserId="64" Text="&lt;hardware&gt;&lt;commodore-64&gt;&lt;audio&gt;" />
  <row Id="1920" PostHistoryTypeId="2" PostId="668" RevisionGUID="83848777-5932-4c4a-9160-a7ad204b2b46" CreationDate="2016-05-30T01:33:40.210" UserId="367" Text="SID6851 specification quotes: &#xD;&#xA;&#xD;&#xA;&gt; Cut-off frequency variation may occur from chip to chip due to&#xD;&#xA;&gt; process variations, and power supply voltage. Capacitor values and&#xD;&#xA;&gt; voltage regulation can compensate for these variations&#xD;&#xA;&#xD;&#xA;We're talking about a 30-some years old chips, the manufacturing process wasn't very consistent back then, and also MOS was known to have issues with some process steps such as passivation layer that was &quot;leaking&quot; and allowing external elements to &quot;age&quot; the chip.&#xD;&#xA;&#xD;&#xA;Also, SID is in big part an analog chip, there are plenty of analog components there on a die (this is why it's so hard to reimplement say in FPGA), each and every one of those analog components can vary between chips slightly." />
  <row Id="1921" PostHistoryTypeId="5" PostId="239" RevisionGUID="e2dea9be-b66d-4799-b0b2-5100b18116f1" CreationDate="2016-05-30T01:35:15.370" UserId="115" Comment="added 13 characters in body" Text="Are there any automated test suites for MOS 6520, 6522 and 6526 chips? I am looking for test suites aimed at making sure datasheet-based independent reimplementations of the above chips (e.g. FPGAs or emulators) work exactly as the real chips." />
  <row Id="1924" PostHistoryTypeId="5" PostId="666" RevisionGUID="08414aff-7db2-4317-8b69-952400f74201" CreationDate="2016-05-30T04:49:32.770" UserId="462" Comment="added 205 characters in body" Text="I think I found it. It's called [COMIT](https://en.wikipedia.org/wiki/COMIT), and it dates back to 1957, just *one year* after Kleene's work was published. Wikipedia calls it the &quot;first string processing language&quot;, so it fits the bill very nicely.&#xD;&#xA;&#xD;&#xA;Wikipedia also says that its creation led to the creation of SNOBOL. After reading up on SNOBOL a bit, I realized it's actually pretty powerful too, capable of parsing Context-free grammars (CFGs).&#xD;&#xA;&#xD;&#xA;[*An introduction to COMIT programming*](https://babel.hathitrust.org/cgi/pt?id=mdp.39015040285333;view=1up;seq=13) is the best reference for the grammar that I've found so far. Keep in mind, it's an ENTIRE programming language. I am sure it's possible to do all of the things I mentioned; the language is Turing-complete, but it [seems](http://www.aclweb.org/anthology/T87-1009) like it is geared towards non-recursive parsing.&#xD;&#xA;&#xD;&#xA;The syntaxes for the &quot;patterns&quot; and the &quot;strings&quot; are a little weird (but mutually similar), so I doubt that modern regex syntax was derived from it. &#xD;&#xA;&#xD;&#xA;(The oldest regex flavor with syntax like modern regexes that I know of are Unix utilities, as dirkt mentioned: grep, ed, sed, awk. This could be an entirely different question to ask about.)&#xD;&#xA;&#xD;&#xA;Characters can be grouped together into arbitrary groups called *constituents*, which are separated by plus signs. Ironically, my initial example of concatenation is *exactly* how it looks:&#xD;&#xA;&#xD;&#xA;    C + A + T&#xD;&#xA;It can also be written as one constituent:&#xD;&#xA;&#xD;&#xA;    CAT&#xD;&#xA;To include a space, the dash (`-`) character is used:&#xD;&#xA;&#xD;&#xA;    THE + -CAT&#xD;&#xA;Or, as a single constituent:&#xD;&#xA;&#xD;&#xA;    THE-CAT&#xD;&#xA;Strings are stored in memory called the *workspace*. &quot;Rules&quot; are matched against the workspace, and replacements can be made. &#xD;&#xA;&#xD;&#xA;It's pretty easy to do a replacement, actually. To change `THE-CAT` into `THE-DOG`, you could use this rule:&#xD;&#xA;&#xD;&#xA;    * CAT = DOG *&#xD;&#xA;&#xD;&#xA;Deletion is easy too. To remove `THE-` from `THE-DOG`, you could use this rule:&#xD;&#xA;&#xD;&#xA;    * THE- = 0 *&#xD;&#xA;If you have `DOG` and wanted to double the `G`, you could use numbers. Numbers are meta characters, as my deletion example shows you. Ignoring `0`, they have a similar meaning to modern capture groups, if you imagine each constituent as a capture group. For example, `G` could be doubled by using the following rule:&#xD;&#xA;&#xD;&#xA;    * G = 1 + 1 *&#xD;&#xA;(No, one plus one isn't two, it's `GG`!)&#xD;&#xA;&#xD;&#xA;Moving onto more complex constructs, `$` is essentially equivalent to the modern `.*`. On the other hand, in order to do something similar to the modern `.{3}` (three characters), you would use `$3` in COMIT (assuming each constituent was a character, I think).&#xD;&#xA;&#xD;&#xA;If you had `THE-CAT + , + -WHO-WISHED + -IT-WAS + -A-DOG + , + -BARKED` and you wanted to remove everything between the commas, you would use:&#xD;&#xA;&#xD;&#xA;    * , + $ + , = 0 *&#xD;&#xA;&#xD;&#xA;-----&#xD;&#xA;&#xD;&#xA;Like I said, there's a whole lot more past this. It has some type of GOTO, but I don't have any experience with using GOTOs (I come from an era where GOTO is something to be avoided, not taught).&#xD;&#xA;&#xD;&#xA;It also might help me if I had a way to run this stuff. I guess I'll have to write up a flowchart instead or something `:)` &lt;sup&gt;&lt;sub&gt;Edit: Just remembered [this site](https://regexper.com/#%3C%5B%5E%3E%5D%2B%3E) gives me flowcharts automatically from regexes... No paper needed&lt;/sub&gt;&lt;/sup&gt; ." />
  <row Id="1926" PostHistoryTypeId="2" PostId="669" RevisionGUID="ce9dc9a2-1eef-4ace-95c6-b656fe61c272" CreationDate="2016-05-31T06:15:51.590" UserId="367" Text="The 'virtual tape' (let's say .TAP files) format will strongly depend on the actual tapes you're trying to back-up. &#xD;&#xA;For example, Commodore (64) only cares about tape signal crossing zero, so tape format simply emits those signals at given intervals. Markers (EOT, ECC) and others are also encoded as the same signals.&#xD;&#xA;If you're trying to backup tapes from another platform it may entirely have different format (such as wave type, often sine or square, amplitude coding, signal modulation etc)." />
  <row Id="1927" PostHistoryTypeId="5" PostId="669" RevisionGUID="144c2aae-6a2e-41ed-996c-53a5ea0e220f" CreationDate="2016-05-31T07:42:47.690" UserId="367" Comment="added 231 characters in body" Text="The 'virtual tape' (let's say .TAP files) format will strongly depend on the actual tapes you're trying to back-up. &#xD;&#xA;&#xD;&#xA;For example, Commodore (64) only cares about tape signal crossing zero, so tape format simply emits those signals at given intervals. Markers (EOT, ECC) and others are also encoded as the same signals.&#xD;&#xA;This format simply determines binary 0 or 1 using &quot;spacing&quot; between those zero points.&#xD;&#xA;&#xD;&#xA;More advanced system may use edge detection (ideally for a square wave), where it might recognize rising and falling edge for a 0 or 1.&#xD;&#xA;&#xD;&#xA;If you're trying to backup tapes from another platform it may entirely have different format (such as wave type, often sine or square, amplitude coding, signal modulation etc)." />
  <row Id="1928" PostHistoryTypeId="5" PostId="669" RevisionGUID="9fd0b410-b38c-4d13-b545-4a55f88eaa5f" CreationDate="2016-05-31T12:13:52.480" UserId="367" Comment="added 6 characters in body" Text="The 'virtual tape' (let's say .TAP files) format will strongly depend on the actual tapes you're trying to back-up. &#xD;&#xA;&#xD;&#xA;For example, Commodore (64) only cares about tape signal crossing zero, so a tape &quot;emulator&quot; simply emits those signals at given intervals. Markers (EOT, ECC) and others are also encoded as the same signals.&#xD;&#xA;This format simply determines binary 0 or 1 using &quot;spacing&quot; between those zero points.&#xD;&#xA;&#xD;&#xA;More advanced system may use edge detection (ideally for a square wave), where it might recognize rising and falling edge for a 0 or 1.&#xD;&#xA;&#xD;&#xA;If you're trying to backup tapes from another platform it may entirely have different format (such as wave type, often sine or square, amplitude coding, signal modulation etc)." />
  <row Id="1930" PostHistoryTypeId="2" PostId="670" RevisionGUID="9b43fac3-1fb4-49bb-8c8f-3dd365347068" CreationDate="2016-05-31T15:53:07.237" UserId="621" Text="This question was inspired by http://retrocomputing.stackexchange.com/q/239/621.&#xD;&#xA;&#xD;&#xA;Is there a comprehensive test suite for the Intel 808X series of processors?  Something that would test that the chip is operating properly, or an emulator has implemented all of the instructions properly." />
  <row Id="1931" PostHistoryTypeId="1" PostId="670" RevisionGUID="9b43fac3-1fb4-49bb-8c8f-3dd365347068" CreationDate="2016-05-31T15:53:07.237" UserId="621" Text="808X Instruction Test Suite" />
  <row Id="1932" PostHistoryTypeId="3" PostId="670" RevisionGUID="9b43fac3-1fb4-49bb-8c8f-3dd365347068" CreationDate="2016-05-31T15:53:07.237" UserId="621" Text="&lt;8080&gt;&lt;8085&gt;" />
  <row Id="1933" PostHistoryTypeId="2" PostId="671" RevisionGUID="8dc138d9-8482-49a3-91fc-360680e95532" CreationDate="2016-05-31T15:53:07.237" UserId="621" Text="I've found three programs which together make up quite a comprehensive test suite.&#xD;&#xA;&#xD;&#xA;* 8080/8085 CPU Diagnostic, version 1.0, by Microcosm Associates&#xD;&#xA;* Diagnostics II, version 1.2, CPU test by Supersoft Associates&#xD;&#xA;* 8080/8085 CPU Exerciser by Ian Bartholomew and Frank Cringles&#xD;&#xA;&#xD;&#xA;The assembly of the Microcosm tests, and compiled `COM` programs of the other two tests suites can be found in [Alexander Demin's i8080-core repo][1], or on [my fork][2] as a backup.  Unfortunately, it looks like the assembly is only available for Microcosm's test suite.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://github.com/begoon/i8080-core&#xD;&#xA;  [2]: https://github.com/JALsnipe/i8080-core" />
  <row Id="1934" PostHistoryTypeId="4" PostId="670" RevisionGUID="52610b59-8d17-43bc-aad0-269462f3a300" CreationDate="2016-05-31T15:57:19.853" UserId="621" Comment="edited title" Text="8080/8085 Instruction Test Suite" />
  <row Id="1935" PostHistoryTypeId="2" PostId="672" RevisionGUID="591a6288-4bcc-4c07-a211-c7f015a62ab4" CreationDate="2016-05-31T18:29:36.713" UserId="-1" Text="" />
  <row Id="1936" PostHistoryTypeId="2" PostId="673" RevisionGUID="538149ec-e492-4193-998e-0c4bb39c0427" CreationDate="2016-05-31T18:29:36.713" UserId="-1" Text="" />
  <row Id="1937" PostHistoryTypeId="2" PostId="674" RevisionGUID="a20ac6a8-a2ff-4aa2-8187-a52a2d6004a1" CreationDate="2016-05-31T19:05:52.283" UserId="462" Text="I recently learned about the existence of [COMIT](https://en.wikipedia.org/wiki/COMIT), which was the first string processing language. It's very old (1957), but it was used a lot in the first 10 years it was around, mainly in academic research. Eventually, it fell into obscurity.&#xD;&#xA;&#xD;&#xA;It seems pretty cool, and I'd like to be able to play with it a bit more. It would help me improve [my answer about COMIT](http://retrocomputing.stackexchange.com/a/666), too.&#xD;&#xA;&#xD;&#xA;&lt;sub&gt;Note that there are numerous things with the [same name](https://github.com/imshyam/ComIt/blob/master/run.py), but these seem to be unrelated to the COMIT language.&lt;/sub&gt;&#xD;&#xA;&#xD;&#xA;[This paper](http://www.mt-archive.info/IFIP-1959-Yngve.pdf) describes a bit about how COMIT programs were run:&#xD;&#xA;&#xD;&#xA;&gt;The programming of the compiler-interpreter by the MIT Computation Center Staff is well underway and may be completed by the time of the meeting. &#xD;&#xA;&#xD;&#xA;I'm looking for anything (namely software) that will allow me to run COMIT programs. At this point I don't have any other requirements, as I have found nothing so far and I don't want to limit my options.&#xD;&#xA;&#xD;&#xA;If no software is available, is there another way? I was thinking it could be fruitful to try the academic route. Most of what I've read about the language comes from research papers (none of which were written in the last 40 years, unfortunately). The authors obviously were able to run their COMIT programs, and it would be ideal for future researchers to have the ability to run COMIT programs too, even if for no other reason than to verify the original research." />
  <row Id="1938" PostHistoryTypeId="1" PostId="674" RevisionGUID="a20ac6a8-a2ff-4aa2-8187-a52a2d6004a1" CreationDate="2016-05-31T19:05:52.283" UserId="462" Text="How can I run COMIT code?" />
  <row Id="1939" PostHistoryTypeId="3" PostId="674" RevisionGUID="a20ac6a8-a2ff-4aa2-8187-a52a2d6004a1" CreationDate="2016-05-31T19:05:52.283" UserId="462" Text="&lt;software-recommendation&gt;&lt;compilers&gt;" />
  <row Id="1940" PostHistoryTypeId="34" PostId="605" RevisionGUID="91132829-d6f6-481b-ad23-cc6a1c297ddd" CreationDate="2016-05-31T19:45:51.133" UserId="-1" Comment="1" />
  <row Id="1942" PostHistoryTypeId="2" PostId="676" RevisionGUID="19fe48b4-a6cc-4ac9-933f-2969a05d94f9" CreationDate="2016-06-01T01:22:17.253" UserId="320" Text="It might not be the easiest way to go about it, but you could possibly try emulating the original IBM 700 / 7000 series mainframe that the code was written for.&#xD;&#xA;&#xD;&#xA;There is an emulator for System/370, [The Hercules System/370, ESA/390, and z/Architecture Emulator][1], and System/370 has built in backwards compatibility for the 7000 series.  It might be a great deal of work to get that all set up properly though.&#xD;&#xA;&#xD;&#xA;  [1]: http://www.hercules-390.org/" />
  <row Id="1947" PostHistoryTypeId="5" PostId="673" RevisionGUID="d6cbc5c7-0006-4a2f-95e9-521497d06395" CreationDate="2016-06-01T02:48:39.217" UserId="462" Comment="added 74 characters in body" Text="For questions about the maintenance, usage, or history of retro keyboards." />
  <row Id="1948" PostHistoryTypeId="24" PostId="673" RevisionGUID="d6cbc5c7-0006-4a2f-95e9-521497d06395" CreationDate="2016-06-01T02:48:39.217" Comment="Proposed by 462 approved by 107 edit id of 222" />
  <row Id="1949" PostHistoryTypeId="2" PostId="677" RevisionGUID="4b19da0e-a0f8-443f-abf1-edca6538eda8" CreationDate="2016-06-01T10:36:08.907" UserId="148" Text="Here's a quick, dirty and probably buggy implementation of COMIT in Haskell. &#xD;&#xA;The *COMIT programmers' reference manual* seems to be paywalled (I'm looking at you, ACM!), so I used the description in *An introduction to COMIT programming*. Numeral subscripts, shelves etc. are not implemented, and I don't know how to behave in corner cases (like `* A + $ + $ + B = 2 *`).&#xD;&#xA;&#xD;&#xA;There's no parser (yet), so instead of `LABEL A + $1 + $ = 2 + B NEXT`, you need to write `(&quot;LABEL&quot;, [LLit &quot;A&quot;, Repeat 1, Any], [Match 2, RLit &quot;B&quot;], &quot;NEXT&quot;)` etc.&#xD;&#xA;&#xD;&#xA;The output is just a list of the workspace states. The workspace itself is a list of strings. Here are two examples from the manual:&#xD;&#xA;&#xD;&#xA;    ws1 = [&quot; BILL&quot;, &quot;,&quot;, &quot; THEY&quot;, &quot; SAY&quot;, &quot;,&quot;, &quot; IS&quot;, &quot; RETIRED&quot;]&#xD;&#xA;    ex1 = [(&quot;*&quot;, [LLit &quot;,&quot;, Any, LLit &quot;,&quot;], [], &quot;*&quot;)]&#xD;&#xA;&#xD;&#xA;    *Main&gt; run ex1 ws1&#xD;&#xA;    [[&quot; BILL&quot;,&quot; IS&quot;,&quot; RETIRED&quot;]]&#xD;&#xA;&#xD;&#xA;and a 3-line program using the marker technique:&#xD;&#xA;&#xD;&#xA;    ws2 = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;A&quot;, &quot;B&quot;]&#xD;&#xA;    ex2 = [(&quot;*&quot;, [Any], [RLit &quot;*Q&quot;, Match 1], &quot;*&quot;),&#xD;&#xA;      (&quot;FIND&quot;, [LLit &quot;*Q&quot;, Any, LLit &quot;A&quot;], [Match 2, Match 3, Match 1], &quot;FIND&quot;),&#xD;&#xA;      (&quot;*&quot;, [LLit &quot;A&quot;, LLit &quot;*Q&quot;], [], &quot;*&quot;)]&#xD;&#xA;&#xD;&#xA;    *Main&gt; run ex2 ws2&#xD;&#xA;    [[&quot;*Q&quot;,&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;A&quot;,&quot;B&quot;],&#xD;&#xA;     [&quot;A&quot;,&quot;*Q&quot;,&quot;B&quot;,&quot;C&quot;,&quot;A&quot;,&quot;B&quot;],&#xD;&#xA;     [&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;A&quot;,&quot;*Q&quot;,&quot;B&quot;],&#xD;&#xA;     [&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;A&quot;,&quot;*Q&quot;,&quot;B&quot;],&#xD;&#xA;     [&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;B&quot;]]&#xD;&#xA;&#xD;&#xA;Code:&#xD;&#xA;&#xD;&#xA;    data LElem a = LLit a | Repeat Int | Any deriving (Show)&#xD;&#xA;    data RElem a = RLit a | Match Int deriving (Show)&#xD;&#xA;    &#xD;&#xA;    type Label = String&#xD;&#xA;    &#xD;&#xA;    type Workspace a = [a]&#xD;&#xA;    type Matching a = [[a]]&#xD;&#xA;    &#xD;&#xA;    type Rule a = (Label, [LElem a], [RElem a], Label)&#xD;&#xA;    &#xD;&#xA;    splits (x:xs) = ([], (x:xs)) : [(x:ys,zs) | (ys,zs) &lt;- splits xs]&#xD;&#xA;    splits [] = [([],[])]&#xD;&#xA;    &#xD;&#xA;    -- if the lhs deosn't start with Any, the zeroeth match takes the part of the&#xD;&#xA;    -- workspace before the actual match. Otherwise, it's empty.&#xD;&#xA;    match :: (Show a, Eq a) =&gt; [LElem a] -&gt; Workspace a -&gt; [Matching a]&#xD;&#xA;    match rs@(Any:_) ws = do { m &lt;- match' rs ws; return ([]:m) }&#xD;&#xA;    match rs ws = matchShortest rs ws&#xD;&#xA;    &#xD;&#xA;    match' :: (Show a, Eq a) =&gt; [LElem a] -&gt; Workspace a -&gt; [Matching a]&#xD;&#xA;    match' [] ws = [[ws]] -- keep end of workspace after match&#xD;&#xA;    match' (LLit l:rs) (w:ws)&#xD;&#xA;      | l == w    = do { m &lt;- match' rs ws; return ([w]:m) }&#xD;&#xA;      | otherwise = []&#xD;&#xA;    match' (Repeat n:rs) ws&#xD;&#xA;      | length ws &gt;= n = do { m &lt;- match' rs (drop n ws); return ((take n ws):m) }&#xD;&#xA;      | otherwise      = []&#xD;&#xA;    match' [Any] ws = [[ws,[]]] -- $ at end matches everything &#xD;&#xA;    match' (Any:rs) ws = matchShortest rs ws&#xD;&#xA;    match' rs ws = [] -- fail&#xD;&#xA;    &#xD;&#xA;    matchShortest rs ws = take 1 [xs:m | (xs, ys) &lt;- splits ws, m &lt;- match' rs ys]&#xD;&#xA;    &#xD;&#xA;    -- keep first and last part of match, apply rhs to everything else&#xD;&#xA;    replace :: [RElem a] -&gt; Matching a -&gt; Workspace a&#xD;&#xA;    replace rs m = (head m) ++ concatMap f rs ++ (last m) where&#xD;&#xA;      f (RLit w) = [w]&#xD;&#xA;      f (Match k) = m !! k&#xD;&#xA;    &#xD;&#xA;    next :: Label -&gt; [Rule a] -&gt; [Rule a]&#xD;&#xA;    next _ [] = []&#xD;&#xA;    next n rss@((n',_,_,_):rss') &#xD;&#xA;      | n == n'   = rss&#xD;&#xA;      | otherwise = next n rss'&#xD;&#xA;    &#xD;&#xA;    exec :: (Show a, Eq a) =&gt; [Rule a] -&gt; [Rule a] -&gt; Workspace a -&gt; [Workspace a]&#xD;&#xA;    exec _ [] ws = []&#xD;&#xA;    exec rss css ws = ws' : exec rss css' ws' where&#xD;&#xA;      (_, lhs, rhs, n):_ = css&#xD;&#xA;      m = match lhs ws&#xD;&#xA;      (ws', css') = case (m, n) of&#xD;&#xA;        ([], _)  -&gt; (ws,   tail css)   -- match failed&#xD;&#xA;        (_, &quot;*&quot;) -&gt; (ws'', tail css)   -- next line&#xD;&#xA;        (_, _)   -&gt; (ws'', next n rss) -- goto label&#xD;&#xA;      ws'' = replace rhs (head m)&#xD;&#xA;    &#xD;&#xA;    run rss ws = exec rss rss ws&#xD;&#xA;&#xD;&#xA;COMIT feels very similar to [sed](https://en.wikipedia.org/wiki/Sed) or [awk](https://en.wikipedia.org/wiki/Awk), except that it works on list of words (&quot;constituents&quot;) instead of just a list of characters, and so is obviously geared to represent grammars and term rewriting systems.&#xD;&#xA;" />
  <row Id="1950" PostHistoryTypeId="5" PostId="669" RevisionGUID="dcc81da9-98d5-43c3-a998-1ec026dc4252" CreationDate="2016-06-01T11:52:49.280" UserId="367" Comment="added 17 characters in body" Text="The 'virtual tape' (let's say .TAP files) format will strongly depend on the actual tapes you're trying to back-up. &#xD;&#xA;&#xD;&#xA;For example, Commodore (64) only cares about tape signal crossing zero, so a tape &quot;emulator&quot; simply emits those signals at given intervals. Markers (EOT, ECC) and others are also encoded as the same signals.&#xD;&#xA;This format simply determines binary 0 or 1 using &quot;spacing&quot; between those zero points.&#xD;&#xA;&#xD;&#xA;More advanced system may use edge detection (ideally for a square wave), where it might recognize rising and falling edge for a 0 or 1.&#xD;&#xA;&#xD;&#xA;If you're trying to backup tapes from another platform it may entirely have different format (such as wave type, often sine or square, amplitude coding, signal modulation, multiple tracks etc)." />
  <row Id="1951" PostHistoryTypeId="5" PostId="619" RevisionGUID="c6e3b2fd-3356-4c18-8a58-c390e97472b9" CreationDate="2016-06-01T12:04:44.460" UserId="276" Comment="Created wiki" Text="6502-based micorocomputer manufactured by Acorn Computers from 1982 and used by the BBC's Computer Literacy Project" />
  <row Id="1952" PostHistoryTypeId="5" PostId="618" RevisionGUID="98dc1648-e9d9-476d-ac56-dd54a6bba7aa" CreationDate="2016-06-01T12:07:14.457" UserId="276" Comment="Removed link" Text="6502-based micorocomputer manufactured by Acorn Computers from 1982.&#xD;&#xA;&#xD;&#xA;Used by the Computer Literacy Project of the British Broadcasting Corporation&#xD;&#xA;&#xD;&#xA;" />
  <row Id="1953" PostHistoryTypeId="2" PostId="678" RevisionGUID="36afe10e-715b-4434-94e1-9b0dbbaab5f3" CreationDate="2016-06-01T12:11:22.690" UserId="278" Text="Debuggers are carefully written programs that peek and poke other programs while they run. In retrocomputers, programs could use any part of the memory they could access.&#xD;&#xA;&#xD;&#xA;So how did debuggers insert themselves into memory so they could be executed, without overwriting - or being overwritten by - the target program or its data?" />
  <row Id="1954" PostHistoryTypeId="1" PostId="678" RevisionGUID="36afe10e-715b-4434-94e1-9b0dbbaab5f3" CreationDate="2016-06-01T12:11:22.690" UserId="278" Text="How did debuggers run without memory?" />
  <row Id="1955" PostHistoryTypeId="3" PostId="678" RevisionGUID="36afe10e-715b-4434-94e1-9b0dbbaab5f3" CreationDate="2016-06-01T12:11:22.690" UserId="278" Text="&lt;debug&gt;" />
  <row Id="1956" PostHistoryTypeId="2" PostId="679" RevisionGUID="0ac7ea0d-78c1-4a86-9be0-409a530d436c" CreationDate="2016-06-01T12:34:54.787" UserId="105" Text="A debugger thar runs inside the debugged machine is a program, so it does need memory.&#xD;&#xA;&#xD;&#xA;Sometimes the debugger is loaded as a ROM cartridge, usually with its own RAM, so it doesn´t need to take any RAM from the running program. This is the case with, for example, the Action Replay modules for the Amiga.&#xD;&#xA;&#xD;&#xA;Sometimes, it´s a regular program that takes some RAM, but it can be reallocated at load time so if you know by advance that the program to examine won´t use a certain block of RAM, you can load the debugger there. This is the case with, for example, the MONS 3 debugger for the ZX Spectrum&#xD;&#xA;&#xD;&#xA;Sometimes, the debugger cannot find any &quot;normal&quot; RAM to execute from, so there are debuggers that load themselves into the screen memory, like this one:&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;Yes, that's a program. You can try to dump this screen into a ZX Spectrum emulator screen and do a PRINT USR 16384 to execute it :)&#xD;&#xA;&#xD;&#xA;The only kind of debuggers that don´t really need any memory at all from the debugged machine are the so called ICE (In Circuit Emulators), which either take the place of the main CPU, emulating its behaviour and reporting data to a external machine, or logic analyzers that can decode bus cycles and present you a disassembly dump of real instructions actually executed in real time by the machine being debugged.&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/EjZrQ.gif" />
  <row Id="1957" PostHistoryTypeId="4" PostId="678" RevisionGUID="2a25b7ff-28ff-411f-bdf8-e20b78e23882" CreationDate="2016-06-01T13:59:50.327" UserId="278" Comment="Emphasised *software*." Text="How did debugging software run without memory?" />
  <row Id="1958" PostHistoryTypeId="2" PostId="680" RevisionGUID="4e37d08f-6463-42e8-84a8-815f840b354d" CreationDate="2016-06-01T14:27:23.823" UserId="79" Text="Without hardware support, there is no way for a debugger to protect itself from the program being debugged. A debugger needs to protect its code and working state, as well as any hooks it's set up for its debugging (*e.g.* single-stepping interrupts); but in typical &quot;retro&quot; systems (8-bit machines), a debugger would just insert itself into memory and hope for the best.&#xD;&#xA;&#xD;&#xA;Debuggers hosted on the same system as the code being debugged, and implemented entirely in software, would only be able to rely on the cooperation of the program being debugged and the person doing the debugging. Most debugging isn't adversarial: the code being debugged isn't actively taking measures against the debugger, so the debugger doesn't need to actively protect itself. (If a bug destroys the debugger as well as the program being debugged, well...) The debugger can offer configuration options to the end-user to facilitate things of course, but there will always be limitations that the end-user will have to live with (using a debugger leaves less RAM for the program being debugged, it might use some interrupts that the program would want for itself, etc.) — all told though the gain from having a hosted debugger makes it worthwhile.&#xD;&#xA;&#xD;&#xA;Some early debuggers used extra hardware, without special CPU support, to reduce the level of compromise:&#xD;&#xA;&#xD;&#xA;* hosting the debugger in a cartridge means the code can't be touched&#xD;&#xA;* a cartridge can also provide extra RAM, which means the debugger's working state doesn't reduce the amount of memory available (at least, on systems with less RAM than their address space)&#xD;&#xA;&#xD;&#xA;but, without a MMU, all this still happens in the same address space (even if banking is involved) so it's only reliable in non-adversarial debugging.&#xD;&#xA;&#xD;&#xA;Adversarial debugging, or any form of complex debugging really (kernel debugging etc.) requires hardware support. This can take a number of forms:&#xD;&#xA;&#xD;&#xA;* a MMU to provide memory and I/O protection&#xD;&#xA;* CPU support for some level of virtualisation (*e.g.* V86-mode on the 386)&#xD;&#xA;* outside hardware, using a second computer for debugging — this was very common, in a variety of forms (a small debugging shim running on the host and communicating with the debugger via a serial port, the network etc.; ICEs clipped to the CPU, or replacing the CPU...)&#xD;&#xA;&#xD;&#xA;Hosted debuggers, especially for adversarial debugging, only really took off with the arrival of MMUs and CPU-based protection; *e.g.* Turbo Debugger 32, SoftICE... Multi-host debugging is still used in many cases, *e.g.* embedded development, development on mobile phones (using emulators or real devices), kernel debugging...&#xD;&#xA;&#xD;&#xA;There were some systems where the whole operating environment was constantly debuggable, *e.g.* Lisp Machines, but again that's non-adversarial debugging in most cases." />
  <row Id="1959" PostHistoryTypeId="2" PostId="681" RevisionGUID="4b143496-7dcf-4a4a-bac4-e5f32c4f29e2" CreationDate="2016-06-01T15:42:03.657" UserId="762" Text="It's a mix of different smells.&#xD;&#xA;&#xD;&#xA;The most of it is just stale air, some computers stay days on a shelf, even if it's a new model. If you ever stepped in an old room or sat in a car, wich wasn't opened in days, you know, what it smells like.&#xD;&#xA;&#xD;&#xA;Outside of the air, there's a lot of plastic in that box. Both the polyetilen and the casing was made out of polymer, and if you leave it like that, it makes the box have a remarkable smell. &#xD;&#xA;&#xD;&#xA;It's not a parfume, if it would be, then they would just leave it on the air, instead of using up something, wich essentially costs money." />
  <row Id="1960" PostHistoryTypeId="5" PostId="681" RevisionGUID="6206c16b-e54e-429e-86ac-6c913ee53d11" CreationDate="2016-06-01T16:35:49.020" UserId="278" Comment="Corrected spelling, fixed grammar. (Not all of it!)" Text="It's a mix of different smells.&#xD;&#xA;&#xD;&#xA;Most of it is just stale air: some computers stay days on a shelf, even if it's a new model. If you have ever stepped into an old room or sat in a car which hasn't been opened for days, you'll know what that smells like.&#xD;&#xA;&#xD;&#xA;Other than the air, there's a lot of plastic in that box. Both the polyethylene and the casing are made out of polymers, and if you leave it like that, it gives the box a distinctive smell.&#xD;&#xA;&#xD;&#xA;It's not a perfume; if it was they wouldn't use it, because that costs money." />
  <row Id="1961" PostHistoryTypeId="5" PostId="681" RevisionGUID="62f2e1ff-5ad8-40b1-b002-1813288f0944" CreationDate="2016-06-01T16:40:18.553" UserId="762" Comment="deleted 12 characters in body" Text="It's a mix of different smells.&#xD;&#xA;&#xD;&#xA;Most of it is just stale air: some computers stay days on a shelf, even if it's a new model. If you have ever stepped into an old room or sat in a car which hasn't been opened for days, you'll know what that smells like.&#xD;&#xA;&#xD;&#xA;Other than the air, there's a lot of plastic in that box. Both the polyethylene and the casing are polymers, and if you leave it like that, it gives the box a distinctive smell.&#xD;&#xA;&#xD;&#xA;It's not a perfume; if it was they wouldn't use it, because that costs money." />
  <row Id="1962" PostHistoryTypeId="5" PostId="681" RevisionGUID="9867ee5b-be00-4fb2-ac4f-91bab143f3d5" CreationDate="2016-06-01T16:51:10.533" UserId="762" Comment="added 8 characters in body" Text="It's a mix of different smells.&#xD;&#xA;&#xD;&#xA;Most of it is just stale air: some computers stay days on a shelf, even if it's a new model. If you have ever stepped into an old room or sat in a car which hasn't been opened for days, you'll know what that smells like.&#xD;&#xA;&#xD;&#xA;Other than the air, there's a lot of plastic in that box. Both the polyethylene packing and the casing are polymers, and if you leave it like that, it gives the box a distinctive smell.&#xD;&#xA;&#xD;&#xA;It's not a perfume; if it was they wouldn't use it, because that costs money." />
  <row Id="1963" PostHistoryTypeId="5" PostId="638" RevisionGUID="a730c69a-eb3d-40af-a46b-822b8d4d1c7e" CreationDate="2016-06-01T18:03:45.360" UserId="105" Comment="added 17 characters in body" Text="Don't know if this is on-topic, but I will give it a chance to go. If you feel this is off-topic, act accordingly.&#xD;&#xA;&#xD;&#xA;Recently, a discussion has started about the feelings associated to the unboxing of your first computer. For me it's the smell of a ZX Spectrum rubber key model, wrapped in a plastic bag, placed in a polyestirene white box, inside a cardboard box.&#xD;&#xA;&#xD;&#xA;This was in 1984. Then, I felt the same smell many years after that, while opening the box of a Spectrum +2A &quot;Police Pack&quot;.&#xD;&#xA;&#xD;&#xA;Both computers were designed with different materials but the smell was the same. I wonder where does it come from. Plastic case? Bag? Poly? Printed manuals?  &#xD;&#xA;&#xD;&#xA;People are telling me that it is added perfume to cover the unpleasant odor from mass production. If this is so:&#xD;&#xA;&#xD;&#xA;- Does anyone know or remember where final assembly and packaging of ZX Spectrum took place (which factory)? Maybe that factory still exists and someone can find out what kind of perfume they used.&#xD;&#xA;&#xD;&#xA;- Did both models (48K and +2A) used the same factory to manufacture the case? Are both cases from the same plastic material?&#xD;&#xA;&#xD;&#xA;- &lt;strike&gt;Does anyone know about &quot;electronics perfume&quot; other than the &quot;new Apple electronics unboxing perfume&quot; you can buy? (by no means I want my Spectrum to smell like an Apple)&lt;/strike&gt;" />
  <row Id="1965" PostHistoryTypeId="2" PostId="682" RevisionGUID="fa287b65-f29a-4314-be99-ded482f1d79e" CreationDate="2016-06-01T19:35:15.387" UserId="340" Text="As noted, the 6502 has only single 8-bit adder, plus a special increment circuit for the top half of the program counter.  Having a full 16-bit adder would avoid the page-boundary penalty for branch instructions, but wouldn't help with indexed loads.  By the time the CPU fetches the upper byte of a base address, the 8-bit ALU will have already done everything it needs to do with the lower half of the address, and would be available to compute the upper half.  The reason the 6502 can't immediately issue the next access for a page-crossed address isn't that the ALU is too short, but rather that it's too slow.&#xD;&#xA;&#xD;&#xA;Each time the 6502 receives a byte of data it must *immediately* turn around and supply the next address.  In cases where the upper or lower byte of the next address matches the fetched data verbatim, the data can be latched and ready for the next cycle, but in all other cases the 6502 must output the next address before it has had a chance to examine the newly-fetched byte.&#xD;&#xA;&#xD;&#xA;Compare the execution of ADC 12,X and ADC $3456,X.  In either case, the&#xD;&#xA;6502 will start by fetching the opcode (possibly while finishing up the&#xD;&#xA;previous instruction).  Even while it's fetching the opcode, it knows&#xD;&#xA;what it will do next cycle (fetch the following byte).&#xD;&#xA;&#xD;&#xA;While the CPU is fetching the byte following the opcode, it can look at&#xD;&#xA;the first byte and determine that it's going to need to add the byte&#xD;&#xA;that it's fetching to the value in x.&#xD;&#xA;&#xD;&#xA;In the third cycle of either instruction, the CPU will add the value&#xD;&#xA;fetched in the second cycle to the value in X.  When using the ADC $3456,X&#xD;&#xA;instruction, the CPU will have something else useful it can do at&#xD;&#xA;the same time: fetch the upper byte of the address.  When using the&#xD;&#xA;ADC $12,X instruction, however, there won't be anything nothing useful&#xD;&#xA;for the CPU to do while performing the address computation, so it will&#xD;&#xA;just perform a dummy cycle with the last thing on the bus ($12).&#xD;&#xA;&#xD;&#xA;In either case, the fourth cycle will use the newly-calculated address along with either $00 [for the ZP,X form] or the newly-fetched upper byte [for the ABS,X form].  During that cycle, the ABS,X instruction will also compute&#xD;&#xA;the value of (upper byte + 1) in case that turns out to be needed, and will&#xD;&#xA;figure out what should happen on the cycle after that.&#xD;&#xA;&#xD;&#xA;If it turns out that there was no carry from the lower half, then instruction execution will be complete so the 6502 can fetch the next instruction while it actually adds the newly-fetched value to the accumulator.  Otherwise the 6502 will have to add another cycle to perform a fetch from the correct address.&#xD;&#xA;&#xD;&#xA;For the 6502 to avoid a cycle penalty when an indexed load crosses a page boundary, it would have to have something useful it could do during that cycle.  Adding a little sequencing logic might make it possible for the 6502 to unconditionally fetch of the first byte of the next opcode during the address computation stage, but the 6502 normally uses the first instruction-fetch cycle to perform &quot;cleanup&quot; from the previous instruction.  Pushing the cleanup to the second cycle of an instruction might be possible, but would require adding some additional internal registers and logic.  I don't think a 16-bit ALU would be needed, though:&#xD;&#xA;&#xD;&#xA;    ADC $1234,X&#xD;&#xA;    First byte was fetched during previous instruction&#xD;&#xA;    Fetch second byte while completing previous instruction&#xD;&#xA;    Fetch third byte while computing LSB of address&#xD;&#xA;    Fetch first byte of next instruction while computing MSB of address&#xD;&#xA;    Fetch byte from computed address&#xD;&#xA;    Fetch second byte of next instruction while performing ADC.&#xD;&#xA;&#xD;&#xA;Reordering operations that way would eliminate the page-boundary cycle&#xD;&#xA;penalty, but I don't know that the performance gain would be sufficient to&#xD;&#xA;justify the cost [as well as the quirky behavior that would result when&#xD;&#xA;switching banks while code is executing].&#xD;&#xA;" />
  <row Id="1966" PostHistoryTypeId="2" PostId="683" RevisionGUID="50b07f13-9430-41b6-b293-45d0aa01aba1" CreationDate="2016-06-01T23:40:22.113" UserId="221" Text="In my perception, the most common color for monochrome computer monitors is green or white/grey, though I have seen orange monitors. &#xD;&#xA;&#xD;&#xA;Is this genuinely the case, and if so, is there a reason for it?" />
  <row Id="1967" PostHistoryTypeId="1" PostId="683" RevisionGUID="50b07f13-9430-41b6-b293-45d0aa01aba1" CreationDate="2016-06-01T23:40:22.113" UserId="221" Text="Why are a lot of monochrome computer monitors green?" />
  <row Id="1968" PostHistoryTypeId="3" PostId="683" RevisionGUID="50b07f13-9430-41b6-b293-45d0aa01aba1" CreationDate="2016-06-01T23:40:22.113" UserId="221" Text="&lt;display&gt;" />
  <row Id="1969" PostHistoryTypeId="2" PostId="684" RevisionGUID="1f5ce929-8579-4388-879e-598854412ee5" CreationDate="2016-06-01T23:49:51.853" UserId="367" Text="There were a few reasons:&#xD;&#xA;&#xD;&#xA; - Old monitors had very low refresh rates (driven by hardware prices), and green phosphor has the&#xD;&#xA;   longest afterglow (remains on the screen for the longest time)&#xD;&#xA; - Green phosphor was the first available for use in monitors (and some&#xD;&#xA;   sources also say that monitors of this type were physically lighter)&#xD;&#xA; - It was the brightest type of phosphor&#xD;&#xA; - Human eye responds to the green color the best (compared to red or&#xD;&#xA;   blue)&#xD;&#xA;&#xD;&#xA;In short, green phosphor allowed to make cheaper monitors&#xD;&#xA;&#xD;&#xA;Orange (or Amber which is the proper name) came later under demand from businesses, it was easier on the eyes to read but required faster refresh rate and therefore was more expensive to manufacture.&#xD;&#xA;&#xD;&#xA;As a sidenote, many (if not all) black and white monitors only use green component from the color spectrum, they don't even bother mixing other colors in." />
  <row Id="1970" PostHistoryTypeId="2" PostId="685" RevisionGUID="cc5b2a21-87c0-46fd-8007-8643fe75c432" CreationDate="2016-06-01T23:54:57.853" UserId="46" Text="Green was certainly the most common phosphor for a long time, the orange and grey monochrome monitors started to appear in the 1980s, I think.  &#xD;&#xA;&#xD;&#xA;There are two factors that I think contribute to the choice of colour. One is the stability of the particular phosphor in operation, the other is the related issue of manufacturing quality and absence of contamination, as well as other technical caracteristics of the tubes which maybe offset the cost of the phosphor component.&#xD;&#xA;&#xD;&#xA;" />
  <row Id="1971" PostHistoryTypeId="5" PostId="684" RevisionGUID="4677be7a-4033-4c3b-a6df-aa2a55b179fc" CreationDate="2016-06-02T00:14:55.897" UserId="367" Comment="working on the references" Text="There were a few reasons:&#xD;&#xA;&#xD;&#xA; - Old monitors had very low [refresh rates][1] (driven by hardware prices), and green phosphor has the longest afterglow (remains on the screen for the longest time)&#xD;&#xA; - Green phosphor was the first available for use in monitors (and some&#xD;&#xA;   sources also say that monitors of this type were physically lighter)&#xD;&#xA; - It was the brightest type of phosphor&#xD;&#xA; - Human eye responds to the [green color the best][2], ([it's right in the middle of the visible spectrum)][3] (compared to red or&#xD;&#xA;   blue)&#xD;&#xA;&#xD;&#xA;In short, green phosphor allowed to make cheaper monitors&#xD;&#xA;&#xD;&#xA;Orange (or Amber which is the proper name) came later under demand from businesses, it was easier on the eyes to read but required faster refresh rate and therefore was more expensive to manufacture.&#xD;&#xA;&#xD;&#xA;As a sidenote, many (if not all) black and white monitors only use green component from the color spectrum, they don't even bother mixing other colors in.&#xD;&#xA;&#xD;&#xA;  [1]: https://books.google.co.jp/books?id=n_epgHWbpwkC&amp;pg=PA305&amp;lpg=PA305&amp;dq=green%20phosphor%20refresh%20rate&amp;source=bl&amp;ots=3bJMmOrMOe&amp;sig=RGPf3c6m-VZpSBNQ3os9tYkcd8U&amp;hl=en&amp;sa=X&amp;redir_esc=y#v=onepage&amp;q=green%20phosphor%20refresh%20rate&amp;f=false&#xD;&#xA;  [2]: https://micro.magnet.fsu.edu/primer/lightandcolor/humanvisionintro.html&#xD;&#xA;  [3]: https://en.wikipedia.org/wiki/Primary_color" />
  <row Id="1972" PostHistoryTypeId="5" PostId="684" RevisionGUID="81ba7815-bbc5-41e3-b88d-c589e6118fce" CreationDate="2016-06-02T00:19:55.393" UserId="367" Comment="added 40 characters in body" Text="There were a few reasons:&#xD;&#xA;&#xD;&#xA; - Old monitors had very low [refresh rates][1] (driven by hardware prices), and green phosphor has the longest afterglow (remains on the screen for the longest time)&#xD;&#xA; - Green phosphor was the first available for use in monitors (and some&#xD;&#xA;   sources also say that monitors of this type were physically lighter)&#xD;&#xA; - It was the brightest type of phosphor&#xD;&#xA; - Human eye responds to the [green color the best][2], ([it's right in the middle of the visible spectrum)][3] (compared to red or&#xD;&#xA;   blue)&#xD;&#xA;&#xD;&#xA;In short, green phosphor allowed to make cheaper monitors&#xD;&#xA;&#xD;&#xA;Orange (or Amber which is the proper name) came later under demand from businesses, it was easier on the eyes to read but required faster refresh rate and therefore was more expensive to manufacture.&#xD;&#xA;&#xD;&#xA;As a sidenote, many (if not all) black and white monitors only use green component (displayed as shades of grey obviously) from the color spectrum, they don't even bother mixing other colors in.&#xD;&#xA;&#xD;&#xA;  [1]: https://books.google.co.jp/books?id=n_epgHWbpwkC&amp;pg=PA305&amp;lpg=PA305&amp;dq=green%20phosphor%20refresh%20rate&amp;source=bl&amp;ots=3bJMmOrMOe&amp;sig=RGPf3c6m-VZpSBNQ3os9tYkcd8U&amp;hl=en&amp;sa=X&amp;redir_esc=y#v=onepage&amp;q=green%20phosphor%20refresh%20rate&amp;f=false&#xD;&#xA;  [2]: https://micro.magnet.fsu.edu/primer/lightandcolor/humanvisionintro.html&#xD;&#xA;  [3]: https://en.wikipedia.org/wiki/Primary_color" />
  <row Id="1975" PostHistoryTypeId="2" PostId="687" RevisionGUID="795a0adc-e39c-4255-9961-9516c4146676" CreationDate="2016-06-02T08:06:14.497" UserId="762" Text="I'm curious, what was the first book, about programming.&#xD;&#xA;&#xD;&#xA;I tried to google it, but it led me to multiple results.&#xD;&#xA;&#xD;&#xA;I'm mostly interested in the langusage it was about and the writer." />
  <row Id="1976" PostHistoryTypeId="1" PostId="687" RevisionGUID="795a0adc-e39c-4255-9961-9516c4146676" CreationDate="2016-06-02T08:06:14.497" UserId="762" Text="What was the first programming book" />
  <row Id="1977" PostHistoryTypeId="3" PostId="687" RevisionGUID="795a0adc-e39c-4255-9961-9516c4146676" CreationDate="2016-06-02T08:06:14.497" UserId="762" Text="&lt;programming&gt;" />
  <row Id="1978" PostHistoryTypeId="5" PostId="687" RevisionGUID="709993c1-0731-40ca-9bcf-b32537593116" CreationDate="2016-06-02T08:17:55.507" UserId="762" Comment="added 8 characters in body" Text="I'm curious, what was the first book, about programming for digital computers.&#xD;&#xA;&#xD;&#xA;I tried to google it, but it led me to multiple results.&#xD;&#xA;&#xD;&#xA;I'm mostly interested in the language it was about and the writer." />
  <row Id="1979" PostHistoryTypeId="2" PostId="688" RevisionGUID="ce996365-98d2-4cbc-b99b-8de8eb4034ae" CreationDate="2016-06-02T08:49:35.093" UserId="517" Text="I have a ZX Spectrum 48k on which the keyboard membrane has cracked over the years and, while the Speccy itself is operational, has rendered the computer unusable. I am now in possession of a replacement membrane keyboard for the Spectrum, but I can find no guides as to how I should replace it.&#xD;&#xA;&#xD;&#xA;What is the correct way to replace the membrane keyboard on a ZX Spectrum (48k)?" />
  <row Id="1980" PostHistoryTypeId="1" PostId="688" RevisionGUID="ce996365-98d2-4cbc-b99b-8de8eb4034ae" CreationDate="2016-06-02T08:49:35.093" UserId="517" Text="How do I replace a ZX Spectrum 48k keyboard membrane?" />
  <row Id="1981" PostHistoryTypeId="3" PostId="688" RevisionGUID="ce996365-98d2-4cbc-b99b-8de8eb4034ae" CreationDate="2016-06-02T08:49:35.093" UserId="517" Text="&lt;zx-spectrum&gt;&lt;keyboards&gt;&lt;maintenance&gt;" />
  <row Id="1982" PostHistoryTypeId="2" PostId="689" RevisionGUID="86f5c188-d090-467f-a410-d5aa2b5f8b43" CreationDate="2016-06-02T08:58:36.690" UserId="762" Text="In the past, a program could only use a specific part of the memory. If multiple instances of the same program was open, they shared this one memory block. To prevent this, some developers closed tgeir program automatically, if an instance of it was already opened.&#xD;&#xA;&#xD;&#xA;Why did this exist? Was it bad for the computer, when a program took up multiple blocks from the memory?" />
  <row Id="1983" PostHistoryTypeId="1" PostId="689" RevisionGUID="86f5c188-d090-467f-a410-d5aa2b5f8b43" CreationDate="2016-06-02T08:58:36.690" UserId="762" Text="Program memory limit" />
  <row Id="1984" PostHistoryTypeId="3" PostId="689" RevisionGUID="86f5c188-d090-467f-a410-d5aa2b5f8b43" CreationDate="2016-06-02T08:58:36.690" UserId="762" Text="&lt;programming&gt;" />
  <row Id="1985" PostHistoryTypeId="2" PostId="690" RevisionGUID="0d9895d5-f2e6-4658-bb64-43964d02681a" CreationDate="2016-06-02T09:19:01.877" UserId="276" Text="If a computer system was capable of running multiple programs simultaneously, it had an OS that could partition memory appropriately.  Microcomputers usually couldn't have two programs running.&#xD;&#xA;&#xD;&#xA;For a while in the 1970s - 1980s, RAM was the single most expensive component of a computer, and so was fitted sparingly.  Programmers had to be very aware of its use.&#xD;&#xA;&#xD;&#xA;If you had two copies of the same program running, especially with both trying to access the same peripheral, it had a negative effect.  It both slowed the whole system down and would impact availability of the heap.  &#xD;&#xA;&#xD;&#xA;It was usually a simple check if the programme was already running (it still is) and so worth doing.&#xD;&#xA;&#xD;&#xA;" />
  <row Id="1986" PostHistoryTypeId="2" PostId="691" RevisionGUID="535192dd-ec80-4fc3-99ec-bca26fb42a95" CreationDate="2016-06-02T09:26:04.763" UserId="712" Text="1956. FORTRAN for the IBM 704.&#xD;&#xA;&#xD;&#xA;[Link to a PDF here.][1]&#xD;&#xA;&#xD;&#xA;My justification for this choice is that FORTRAN is the earliest &quot;proper&quot; language in widespread use that I can think of.&#xD;&#xA;&#xD;&#xA;  [1]: http://www.fortran.com/FortranForTheIBM704.pdf" />
  <row Id="1987" PostHistoryTypeId="5" PostId="690" RevisionGUID="96840007-d533-495a-9382-3a46bf78fdfd" CreationDate="2016-06-02T09:49:26.657" UserId="276" Comment="Added detail" Text="If a computer system was capable of running multiple programs simultaneously, it had an OS that could partition memory appropriately.  Microcomputers usually couldn't have two programs running.&#xD;&#xA;&#xD;&#xA;For a while in the 1970s - 1980s, RAM was the single most expensive component of a computer, and so was fitted sparingly.  Programmers had to be very aware of its use.&#xD;&#xA;&#xD;&#xA;If you had two copies of the same program running, especially with both trying to access the same peripheral, it had a negative effect.  It both slowed the whole system down and would impact availability of the heap.  It was also possible, depending upon the program itself, for the two copies to affect each other.  Generally speaking, running two copies of a program was pointless and a bad idea.&#xD;&#xA;&#xD;&#xA;It was usually a simple check if the programme was already running (it still is) and so worth doing.&#xD;&#xA;&#xD;&#xA;" />
  <row Id="1988" PostHistoryTypeId="5" PostId="679" RevisionGUID="582b5833-7f55-4ecf-98e7-b3bbc15d008e" CreationDate="2016-06-02T09:53:02.383" UserId="278" Comment="Fixed grammar, improved punctuation." Text="A debugger that runs inside the debugged machine is a program, so it does need memory.&#xD;&#xA;&#xD;&#xA;Sometimes the debugger is loaded as a ROM cartridge, usually with its own RAM, so it doesn't need to take any RAM from the running program. This is the case with, for example, the Action Replay modules for the Amiga.&#xD;&#xA;&#xD;&#xA;Sometimes, it's a regular program that takes some RAM, but it can be reallocated at load time so if you know in advance that the program to examine won't use a certain block of RAM, you can load the debugger there. This is the case with, for example, the MONS 3 debugger for the ZX Spectrum&#xD;&#xA;&#xD;&#xA;Sometimes, the debugger cannot find any &quot;normal&quot; RAM to execute from, so there are debuggers that load themselves into the screen memory, like this one:&#xD;&#xA;&#xD;&#xA;[![Gray display with black garbage in the top third][1]][1]&#xD;&#xA;&#xD;&#xA;Yes, that's a program. You can try to dump this screen into a ZX Spectrum emulator screen and do a PRINT USR 16384 to execute it :)&#xD;&#xA;&#xD;&#xA;The only kind of debuggers that don't really need any memory at all from the debugged machine are the so called ICE (In Circuit Emulators), which either take the place of the main CPU, emulating its behaviour and reporting data to a external machine, or are logic analyzers that can decode bus cycles and present you a disassembly dump of real instructions actually executed in real time by the machine being debugged.&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/EjZrQ.gif" />
  <row Id="1989" PostHistoryTypeId="2" PostId="692" RevisionGUID="f7603066-f190-46c5-8697-4dbaa61f9999" CreationDate="2016-06-02T10:11:36.527" UserId="276" Text="For the keyboard itself:&#xD;&#xA;&#xD;&#xA;1.  Undo the screws from the bottom of the case.&#xD;&#xA;2.  Lift the top of the case gently off.&#xD;&#xA;3.  Disconnect the ribbon cables from the keyboard (CAREFUL fragile)&#xD;&#xA;4.  Slide out the keyboard.&#xD;&#xA;5.  Insert the new one and attach the ribbon cables.&#xD;&#xA;6.  Clip the case back together and do up the screws&#xD;&#xA;&#xD;&#xA;For the membrane:&#xD;&#xA;&#xD;&#xA;1.  Prise the top off the case - early models were clipped, later ones glued&#xD;&#xA;2.  Gently pull the keyboard membrane and its support out of the case.&#xD;&#xA;3.  Blow out the years of accumulated grot.&#xD;&#xA;4.  Slide the new keyboard and membrane back in.&#xD;&#xA;5.  Clip / tack the case back together.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;There is a much fuller, detailed guide &lt;a href=&quot;http://www.dataserve-retro.co.uk/contents/en-uk/d31.html&quot;&gt;here&lt;/a&gt; with pictures." />
  <row Id="1990" PostHistoryTypeId="5" PostId="692" RevisionGUID="ba2e7270-3b8f-459f-a4d6-b4b81187877e" CreationDate="2016-06-02T10:24:02.743" UserId="276" Comment="Tidied" Text="For the keyboard itself:&#xD;&#xA;&#xD;&#xA;1.  Undo the screws from the bottom of the case.&#xD;&#xA;2.  Lift the top of the case gently off.&#xD;&#xA;3.  Disconnect the ribbon cables from the keyboard (CAREFUL fragile)&#xD;&#xA;4.  Slide out the keyboard.&#xD;&#xA;5.  Insert the new one and attach the ribbon cables.&#xD;&#xA;6.  Clip the case back together and do up the screws&#xD;&#xA;&#xD;&#xA;For the membrane:&#xD;&#xA;&#xD;&#xA;1.  Prise the top off the case - early models were clipped, later ones glued&#xD;&#xA;2.  Gently pull the keyboard membrane and its support out of the case.&#xD;&#xA;3.  Blow out the years of accumulated grot.&#xD;&#xA;4.  Slide the new keyboard and membrane back in.&#xD;&#xA;5.  Clip / tack the case back together.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;There is a much longer guide &lt;a href=&quot;http://www.dataserve-retro.co.uk/contents/en-uk/d31.html&quot;&gt;here&lt;/a&gt; with pictures." />
  <row Id="1991" PostHistoryTypeId="5" PostId="684" RevisionGUID="5aa712ba-a30e-4119-b78f-f9498faa786d" CreationDate="2016-06-02T11:02:18.250" UserId="367" Comment="added 90 characters in body" Text="There were a few reasons:&#xD;&#xA;&#xD;&#xA; - Old monitors had very low [refresh rates][1] (driven by hardware prices), and green phosphor has the longest afterglow (remains on the screen for the longest time)&#xD;&#xA; - Green phosphor was the first available for use in monitors (and some&#xD;&#xA;   sources also say that monitors of this type were physically lighter)&#xD;&#xA; - It was the brightest type of phosphor&#xD;&#xA; - Human eye responds to the [green color the best][2], ([it's right in the middle of the visible spectrum)][3] (compared to red or&#xD;&#xA;   blue)&#xD;&#xA;&#xD;&#xA;In short, green phosphor allowed to make cheaper monitors&#xD;&#xA;&#xD;&#xA;Orange (or Amber which is the proper name) came later under demand from businesses, it was easier on the eyes to read but required faster refresh rate and therefore was more expensive to manufacture.&#xD;&#xA;&#xD;&#xA;As a sidenote, many (if not all) monochrome (includes black and white) monitors only use green component (displayed as shades of grey obviously) from the color spectrum, they don't even use other color components.&#xD;&#xA;This is easy to observe by hooking up a b/w monitor to VGA output.&#xD;&#xA;&#xD;&#xA;  [1]: https://books.google.co.jp/books?id=n_epgHWbpwkC&amp;pg=PA305&amp;lpg=PA305&amp;dq=green%20phosphor%20refresh%20rate&amp;source=bl&amp;ots=3bJMmOrMOe&amp;sig=RGPf3c6m-VZpSBNQ3os9tYkcd8U&amp;hl=en&amp;sa=X&amp;redir_esc=y#v=onepage&amp;q=green%20phosphor%20refresh%20rate&amp;f=false&#xD;&#xA;  [2]: https://micro.magnet.fsu.edu/primer/lightandcolor/humanvisionintro.html&#xD;&#xA;  [3]: https://en.wikipedia.org/wiki/Primary_color" />
  <row Id="1992" PostHistoryTypeId="2" PostId="693" RevisionGUID="bae47a03-821a-426d-9786-d64f924dea5a" CreationDate="2016-06-02T12:01:15.643" UserId="367" Text="I believe you're referring to systems without memory management, and specifically, Operating Systems running on hardware without MMU (memory management unit) and without virtual memory.&#xD;&#xA;&#xD;&#xA;Programs are actually pretty fixed when it comes to memory, from the very start (program always starts from a particular address), through execution (memory jumps, branches), until the end (returning from the program).&#xD;&#xA;&#xD;&#xA;Virtual memory and MMU allow a program to &quot;think&quot; that it's in a fixed memory space, but in reality the MMU and OS translate those addresses behind the scenes to actual hardware.&#xD;&#xA;&#xD;&#xA;Old computers simply didn't have any such hardware or even the need for it, especially when running one program at a time.&#xD;&#xA;&#xD;&#xA;Now, I don't think that multiple instances can ever occupy the same memory (block), in a single-tasking system you simply can't run multiple programs, and in a multi-tasking there will always be some piece translating memory between program and hardware." />
  <row Id="1994" PostHistoryTypeId="5" PostId="689" RevisionGUID="6d6b51fd-b626-4e70-92b9-79e676a8f7f5" CreationDate="2016-06-02T12:34:14.987" UserId="621" Comment="Fixed typo" Text="In the past, a program could only use a specific part of the computer's memory. If multiple instances of the same program were open, they shared this one memory block. To prevent this, some developers closed their program automatically, if an instance of it was already opened.&#xD;&#xA;&#xD;&#xA;Why did this exist? Was it bad for the computer, when a program took up multiple blocks from the memory?" />
  <row Id="1995" PostHistoryTypeId="24" PostId="689" RevisionGUID="6d6b51fd-b626-4e70-92b9-79e676a8f7f5" CreationDate="2016-06-02T12:34:14.987" Comment="Proposed by 621 approved by 276 edit id of 223" />
  <row Id="1997" PostHistoryTypeId="2" PostId="694" RevisionGUID="0a607af6-bc9c-4f43-929d-a957c7505dac" CreationDate="2016-06-02T12:43:47.137" UserId="778" Text="You've referred to Windows, and the question does only make sense on multitasking systems. I believe the reasoning comes not only from the need to save total memory usage but also beliefs at the time about how windowing systems should work: the MDI (multiple document interface) paradigm. So the user would open multiple documents all running within one instance of the program. It would also provide a means of getting back to the already running copy for inexperienced GUI users who'd task-switched away back to the launcher.&#xD;&#xA;&#xD;&#xA;For Windows WinMain hPrevInstance there is this: https://blogs.msdn.microsoft.com/oldnewthing/20040615-00/?p=38873" />
  <row Id="1998" PostHistoryTypeId="5" PostId="684" RevisionGUID="f53f2eec-b7b1-4a0b-a284-79d6cf783203" CreationDate="2016-06-02T13:04:41.417" UserId="367" Comment="added 40 characters in body" Text="There were a few reasons:&#xD;&#xA;&#xD;&#xA; - Old monitors had very low [refresh rates][1] (driven by hardware prices), and green phosphor has the longest afterglow (remains on the screen for the longest time)&#xD;&#xA; - Green phosphor was the first available for use in monitors (and some&#xD;&#xA;   sources also say that monitors of this type were physically lighter)&#xD;&#xA; - It was the brightest type of phosphor&#xD;&#xA; - Human eye responds to the [green color the best][2], ([it's right in the middle of the visible spectrum)][3] (compared to red or&#xD;&#xA;   blue)&#xD;&#xA;&#xD;&#xA;In short, green phosphor allowed to make cheaper monitors&#xD;&#xA;&#xD;&#xA;Orange (or Amber which is the proper name) came later under demand from businesses, it was easier on the eyes to read but required faster refresh rate and therefore was more expensive to manufacture.&#xD;&#xA;&#xD;&#xA;As a sidenote, many (if not all) monochrome (includes black and white) monitors only use green component (displayed as shades of grey obviously) from the color spectrum when connected to a color signal source, they don't even use other color components.&#xD;&#xA;This is easy to observe by hooking up a b/w monitor to VGA output.&#xD;&#xA;&#xD;&#xA;  [1]: https://books.google.co.jp/books?id=n_epgHWbpwkC&amp;pg=PA305&amp;lpg=PA305&amp;dq=green%20phosphor%20refresh%20rate&amp;source=bl&amp;ots=3bJMmOrMOe&amp;sig=RGPf3c6m-VZpSBNQ3os9tYkcd8U&amp;hl=en&amp;sa=X&amp;redir_esc=y#v=onepage&amp;q=green%20phosphor%20refresh%20rate&amp;f=false&#xD;&#xA;  [2]: https://micro.magnet.fsu.edu/primer/lightandcolor/humanvisionintro.html&#xD;&#xA;  [3]: https://en.wikipedia.org/wiki/Primary_color" />
  <row Id="1999" PostHistoryTypeId="2" PostId="695" RevisionGUID="b0fa7f82-0c9c-41e3-a4f1-7ab5404cc1d4" CreationDate="2016-06-02T13:19:08.847" UserId="585" Text="Yes, **back in the day monitors were green.** I don't know why white wasn't used (the stuff as used for tv screens). But amber became available in the 80s and &quot;paper white&quot; for specialty screens like early desktop publishing, last. But, the original Mac was white, unusual.&#xD;&#xA;&#xD;&#xA;Besides crt screens, there were bright orange &quot;ev&quot; screens which had a small niche and were also used for laptops before LCD was any good. They were the best for showing demos because they were clear and bright.  I recall IBM had a double-resolution ev panel that could display 4 pages at once.  These ev screens were really orange; the crt you speak of was amber.&#xD;&#xA;&#xD;&#xA;By the end of the 80s good quality monochrome crts became cheap, and available in amber and white for the same price as green. They new full-color screens that offered crisp picture and same resolution (EGA) was *much* more expensive and bulky, so the mono screens hung on for quite a few years for business and &quot;serious&quot; use.  It wasn't until &quot;multisync&quot; and even higher resolutions that they disappeared. &#xD;&#xA;&#xD;&#xA;For laptops, it's another story. Early color LCD was terrible in multiple respects.&#xD;&#xA;&#xD;&#xA;(From memory)" />
  <row Id="2000" PostHistoryTypeId="2" PostId="696" RevisionGUID="7e0b397b-ecb6-4854-8ff4-63690a1255b3" CreationDate="2016-06-02T13:42:26.350" UserId="105" Text="Building my own version of CP/M has always been a fascinating to-do project. Problem is that it seems that the source code is not in regular assembler, but some kind of macro-assembler like language Gary Kindall developed to ease CP/M maintenance, so:&#xD;&#xA;&#xD;&#xA;Is there a toolchain and documented workflow that I can use to customize my own version of CP/M (both BIOS and BDOS)? Is the CP7M source code available in regular Z80 assembler (I'm most used to Z80 nmemonics than 8080's)&#xD;&#xA;&#xD;&#xA;To clarify things, I'm looking for something like: grab this well-commented ASM source code, modify it, assemble it with PASMO (or SjASM or any other available Z80 assembler) to have a pure binary file with BIOS/BDOS/whatever. &#xD;&#xA;&#xD;&#xA;NOTE: I'm aware that after getting my binary, I would need some custom tools to put it in the boot sector of whatever media I use to boot the machine, but I'm not asking for that part of the workflow." />
  <row Id="2001" PostHistoryTypeId="1" PostId="696" RevisionGUID="7e0b397b-ecb6-4854-8ff4-63690a1255b3" CreationDate="2016-06-02T13:42:26.350" UserId="105" Text="Toolchain and workflow to build CP/M" />
  <row Id="2002" PostHistoryTypeId="3" PostId="696" RevisionGUID="7e0b397b-ecb6-4854-8ff4-63690a1255b3" CreationDate="2016-06-02T13:42:26.350" UserId="105" Text="&lt;cp-m&gt;" />
  <row Id="2003" PostHistoryTypeId="2" PostId="697" RevisionGUID="11b52cb6-8b57-42ff-84f3-ece33a2dae9d" CreationDate="2016-06-02T14:11:47.563" UserId="-1" Text="" />
  <row Id="2004" PostHistoryTypeId="2" PostId="698" RevisionGUID="dbc532e8-26cd-42e6-95b3-af3f61e01b38" CreationDate="2016-06-02T14:11:47.563" UserId="-1" Text="" />
  <row Id="2005" PostHistoryTypeId="5" PostId="696" RevisionGUID="a54b419b-0fe5-4977-bfa1-0ec60baabe9a" CreationDate="2016-06-02T14:12:10.280" UserId="105" Comment="edited body" Text="Building my own version of CP/M has always been a fascinating to-do project. Problem is that it seems that the source code is not in regular assembler, but some kind of macro-assembler like language Gary Kildall developed to ease CP/M maintenance, so:&#xD;&#xA;&#xD;&#xA;Is there a toolchain and documented workflow that I can use to customize my own version of CP/M (both BIOS and BDOS)? Is the CP7M source code available in regular Z80 assembler (I'm most used to Z80 nmemonics than 8080's)&#xD;&#xA;&#xD;&#xA;To clarify things, I'm looking for something like: grab this well-commented ASM source code, modify it, assemble it with PASMO (or SjASM or any other available Z80 assembler) to have a pure binary file with BIOS/BDOS/whatever. &#xD;&#xA;&#xD;&#xA;NOTE: I'm aware that after getting my binary, I would need some custom tools to put it in the boot sector of whatever media I use to boot the machine, but I'm not asking for that part of the workflow." />
  <row Id="2006" PostHistoryTypeId="5" PostId="697" RevisionGUID="1e2b7749-b995-4182-ba41-864abd6c4ecd" CreationDate="2016-06-02T14:14:35.247" UserId="105" Comment="added 632 characters in body" Text="The CP/M operative system (acronym for **C**ontrol **P**rogram for **M**icrocomputers) is an operative system developed by Gary Kildall at Digital Research for the 8080 microprocessor, although it can be used in Z80 environments, where it gained popularity.&#xD;&#xA;&#xD;&#xA;For questions related to a particular implementation of CP/M, please add the relevant tag indicating the target machine. For programming for CP/M, add a programming related tag (C, assembler, etc)&#xD;&#xA;&#xD;&#xA;More information about CP/M:&#xD;&#xA;https://en.wikipedia.org/wiki/CP/M&#xD;&#xA;&#xD;&#xA;Unofficial page devoted to the CP/M (with lots of information and source code):&#xD;&#xA;http://www.cpm.z80.de/" />
  <row Id="2007" PostHistoryTypeId="24" PostId="697" RevisionGUID="1e2b7749-b995-4182-ba41-864abd6c4ecd" CreationDate="2016-06-02T14:14:35.247" Comment="Proposed by 105 approved by 276 edit id of 224" />
  <row Id="2008" PostHistoryTypeId="5" PostId="698" RevisionGUID="70d230fa-cb3a-46d5-b6ad-c0c6606e3aa8" CreationDate="2016-06-02T14:14:39.653" UserId="105" Comment="added 80 characters in body" Text="Use this tag for questions related to the CP/M operative system by Gary Kildall." />
  <row Id="2009" PostHistoryTypeId="24" PostId="698" RevisionGUID="70d230fa-cb3a-46d5-b6ad-c0c6606e3aa8" CreationDate="2016-06-02T14:14:39.653" Comment="Proposed by 105 approved by 276 edit id of 225" />
  <row Id="2010" PostHistoryTypeId="2" PostId="699" RevisionGUID="da5113aa-a4e8-4610-857e-967dd2a168da" CreationDate="2016-06-02T14:43:32.190" UserId="789" Text="I remember in the mid 1980s there was a was a workbook around in UK schools for BBC Basic which mixed the programming language with basic mathematics concepts. I also remember around the same time there was a magazine for the Acorn Electron which, amongst other things, published various bits of code as plain text which you typed in yourself and could 'save' onto audio tape (in those days you really did need to save work regularly) " />
  <row Id="2012" PostHistoryTypeId="5" PostId="696" RevisionGUID="08f62536-3097-433c-adf5-871428a0eba6" CreationDate="2016-06-02T16:31:59.530" UserId="105" Comment="added 28 characters in body" Text="Building my own version of CP/M has always been a fascinating to-do project. Problem is that it seems that the source code is not in regular assembler, but some kind of macro-assembler like language Gary Kildall developed to ease CP/M maintenance, so:&#xD;&#xA;&#xD;&#xA;Is there a toolchain and documented workflow that I can use to customize my own version of CP/M (both BIOS and BDOS)? Is the CP/M source code available in regular Z80 assembler (I'm most used to Z80 nmemonics than 8080's)&#xD;&#xA;&#xD;&#xA;To clarify things, I'm looking for something like: grab this well-commented ASM source code, modify it, assemble it with PASMO (or SjASM or any other available Z80 assembler) to have a pure binary file with BIOS/BDOS/whatever. And if possible, CP/M Plus. &#xD;&#xA;&#xD;&#xA;NOTE: I'm aware that after getting my binary, I would need some custom tools to put it in the boot sector of whatever media I use to boot the machine, but I'm not asking for that part of the workflow." />
  <row Id="2013" PostHistoryTypeId="2" PostId="700" RevisionGUID="efeafac4-2fab-4ef4-896f-22677300d8e5" CreationDate="2016-06-02T16:39:41.540" UserId="26" Text="On 8-bit machines any debugging support would just be a normal program in memory, and the application could accidentally overwrite the debugger. To single step through a program involved replacing some code in the application with a call or software interrupt that returned control to the debugger. It was all too easy to get a breakpoint in the wrong place and completely lose control of the debugger and the application.&#xD;&#xA;&#xD;&#xA;Later on (in the early PC era), this principle was still the same.  MS-DOS had a DEBUG application, and this would load in memory first, in turn loading the application on top of itself higher in memory. The 8088/8086 chips had no way to protect one segment of memory from another, so MS-DOS was not designed to manage memory to protect applications from each other. Consequently it was quite possible for the application under test to accidentally clobber the debugger and prevent it from working properly. Sometimes the machine just locked up and you just had to start back at the beginning.&#xD;&#xA;" />
  <row Id="2014" PostHistoryTypeId="6" PostId="219" RevisionGUID="a29f5b14-e6a2-4302-b55c-bc202d46633c" CreationDate="2016-06-02T18:03:50.753" UserId="276" Comment="Removed the 'cpu' meta-tag" Text="&lt;80286&gt;&lt;intel&gt;&lt;real-mode&gt;&lt;protected-mode&gt;" />
  <row Id="2015" PostHistoryTypeId="5" PostId="345" RevisionGUID="6eb7a967-2b7c-4811-ac4a-eb45a3a82462" CreationDate="2016-06-02T18:05:01.743" UserId="276" Comment="Added body" Text="For questions regarding the products of Acorn Computers Ltd.  &#xD;&#xA;&#xD;&#xA;A British computer manufacturer founded in 1978.  The progenitor of the modern ARM processor manufacturer." />
  <row Id="2017" PostHistoryTypeId="10" PostId="689" RevisionGUID="d36f7380-6f81-4369-bd6a-f84038fa9220" CreationDate="2016-06-02T18:47:23.800" UserId="278" Comment="103" Text="{&quot;Voters&quot;:[{&quot;Id&quot;:12,&quot;DisplayName&quot;:&quot;jdv&quot;},{&quot;Id&quot;:621,&quot;DisplayName&quot;:&quot;JAL&quot;},{&quot;Id&quot;:278,&quot;DisplayName&quot;:&quot;wizzwizz4&quot;}]}" />
  <row Id="2018" PostHistoryTypeId="2" PostId="701" RevisionGUID="875414c4-ffc6-4588-a9b2-52eabe645a64" CreationDate="2016-06-02T18:49:10.670" UserId="462" Text="I found something from 1949; it's a 4 page article that describes programming for the EDSAC. It's *like* a book, but whether it counts as one for this question I leave open. In any case, I think it's worth mentioning in any case.&#xD;&#xA;&#xD;&#xA;There's one copy I found online, but it's behind a [paywall](http://iopscience.iop.org/article/10.1088/0950-7671/26/6/318/meta). Fortunately, I get access through my university, so I was able to copy a little from it. (Tell me if you think I missed an OCR error.)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Programme Design for a High-speed Automatic Calculating Machine &#xD;&#xA;=&#xD;&#xA;&#xD;&#xA;By M. V. Wilkes, M.A., Ph.D., The Mathematical Laboratory, University of Cambridge&#xD;&#xA;[MS. received 18 February 1949]&#xD;&#xA;&#xD;&#xA;&gt;A good deal has been written about the design and construction of high-speed automatic calculating machines, but little has been said about the detailed steps which are necessary to prepare a problem for a machine and to obtain a solution– a process which is usually referred to as 'programming'. Such aspects are, however, of primary interest to mathematical physicists and engineers who may be wondering what help they can expect from high-speed calculating machines in their own problems. It is intended in this article to supply some of this information; most of it will be well known to those engaged on calculating-machine development. &#xD;&#xA;&#xD;&#xA;&gt;As far as details go: reference will be made to a machine known as the&#xD;&#xA;EDSAC (Electronic Delay Storage Automatic Calculator) which is at present being built in the University Mathematical Laboratory at Cambridge, although certain complications which are unimportant for the present purpose will be ignored. The same principles will be applicable to other machines of similar type.&#xD;&#xA;&#xD;&#xA;Also note that it makes specific mention of things being *digital*:&#xD;&#xA;&#xD;&#xA;&gt;The matheniatical application of a digital machine can be&#xD;&#xA;discussed quite apart from any consideration of its construction." />
  <row Id="2019" PostHistoryTypeId="2" PostId="702" RevisionGUID="f963d0b2-a7fb-45ed-88fe-4f659852b9df" CreationDate="2016-06-02T19:23:01.947" UserId="801" Text="If you insist on a book, try ***The Preparation of Programs for an Electronic Digital Computer***, by Wilkes, Wheeler, and Gill, 1951.  Undoubtedly this book derives in large part from the article referenced by @Laurel." />
  <row Id="2020" PostHistoryTypeId="2" PostId="703" RevisionGUID="35500e9a-96f3-4ea2-9327-fb88b049d1a9" CreationDate="2016-06-02T20:11:48.207" UserId="805" Text="When I started programming, there was only BASIC and GW BASIC followed. In those days you had to plan and reserve your memory, because there wasn't not much. LET and DIM did that trick. LET assigned memory to a variable and with DIM you had the option to define how much memory." />
  <row Id="2021" PostHistoryTypeId="2" PostId="704" RevisionGUID="fc0a546f-6cc4-406f-a3be-5e8bbd640f4b" CreationDate="2016-06-02T21:35:24.767" UserId="808" Text="I would say one of the versions of the Menabrea paper, written in 1842 by Luigi F. Menabrea.&#xD;&#xA;&#xD;&#xA;Ada Lovelace became involved in computing when she was asked to translate this paper from Italian to French. She did so, and unlike many translators, was knowledgeable enough about the subject matter that rather than introducing errors into the translation, she actually corrected quite a few errors. In addition, she expanded the paper, adding a great deal of explanation not only about the machine itself, but about how it would be used to solve real problems.&#xD;&#xA;&#xD;&#xA;Babbage saw her translation in 1843, and was happy enough with it that he asked her to expand further. She added footnotes and more explanation--in fact, what she added was about twice the length of the original paper.&#xD;&#xA;&#xD;&#xA;The original was short enough that it might be open to argument whether it qualified as a book, but at least in my opinion, her edited version clearly did qualify.&#xD;&#xA;&#xD;&#xA;And yes, in case there should be any question, Babbage's analytical engines were digital computers, not analog. There were decimal, not binary, but still digital. Many early computers were analog in nature (e.g., slide rules of various sorts) but Babbage's was a mechanical, digital computer." />
  <row Id="2022" PostHistoryTypeId="2" PostId="705" RevisionGUID="7abdc702-c48e-4bc0-9f9d-6101d8672101" CreationDate="2016-06-02T22:20:15.200" UserId="149" Text="I've recently purchased a [HxC/Lotharek SD Card floppy drive emulator](http://hxc2001.free.fr/floppy_drive_emulator/). It's working well replacing DF0: but I'm seeing some odd behaviour with its emulation of DF1:.&#xD;&#xA;&#xD;&#xA;On the first boot after power-up, the Amiga detects both DF0: and DF1:. But after a reboot, DF1: disappears.&#xD;&#xA;&#xD;&#xA;The HxC does seem to be jumpered correctly (DS0 connected to drive A, DS1 connected to drive B) and there are no other drives, internal or external, connected.&#xD;&#xA;&#xD;&#xA;What could be causing this problem?" />
  <row Id="2023" PostHistoryTypeId="1" PostId="705" RevisionGUID="7abdc702-c48e-4bc0-9f9d-6101d8672101" CreationDate="2016-06-02T22:20:15.200" UserId="149" Text="HxC floppy emulator on Amiga 1200, second virtual drive disappears after reboot" />
  <row Id="2024" PostHistoryTypeId="3" PostId="705" RevisionGUID="7abdc702-c48e-4bc0-9f9d-6101d8672101" CreationDate="2016-06-02T22:20:15.200" UserId="149" Text="&lt;amiga&gt;&lt;floppy-disk&gt;&lt;hxc&gt;" />
  <row Id="2025" PostHistoryTypeId="2" PostId="706" RevisionGUID="cc49e6db-5f0b-4288-9f01-e583be5f03cf" CreationDate="2016-06-02T22:41:28.767" UserId="367" Text="You need the following jumper settings to have HxC correctly emulate two drives&#xD;&#xA;&#xD;&#xA;[![Jumper settings][1]][1]&#xD;&#xA;&#xD;&#xA;And also configure the SD card correctly using the tool, it will save a file HXCSDFE.CFG that needs to go to the root of the card.&#xD;&#xA;&#xD;&#xA;The image shows settings explicit for Amiga, you can also try using generic Shugart settings for the whole device and then &quot;From HFE&quot; in the interface setting section.&#xD;&#xA;&#xD;&#xA;[![enter image description here][2]][2]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/8QiiZ.png&#xD;&#xA;  [2]: http://i.stack.imgur.com/aQF4T.png" />
  <row Id="2026" PostHistoryTypeId="2" PostId="707" RevisionGUID="1204429d-749d-4167-bcca-4ba05f19b8a2" CreationDate="2016-06-02T23:08:38.247" UserId="621" Text="What kind of port did the iMac G3 use for its wireless AirPort card?  What kind of speeds were supported?  My G3 has an 802.11b 2.4GHz band card and I am wondering if I can upgrade to a faster card (if any were made) or if the machine itself can support faster speeds (on OS 9 or OS 10.0)." />
  <row Id="2027" PostHistoryTypeId="1" PostId="707" RevisionGUID="1204429d-749d-4167-bcca-4ba05f19b8a2" CreationDate="2016-06-02T23:08:38.247" UserId="621" Text="iMac G3 - Airport Card Port" />
  <row Id="2028" PostHistoryTypeId="3" PostId="707" RevisionGUID="1204429d-749d-4167-bcca-4ba05f19b8a2" CreationDate="2016-06-02T23:08:38.247" UserId="621" Text="&lt;apple-macintosh&gt;&lt;imac&gt;&lt;imac-g3&gt;" />
  <row Id="2029" PostHistoryTypeId="4" PostId="707" RevisionGUID="2522772a-ebf1-4d94-886b-29c9cce5c013" CreationDate="2016-06-03T03:45:50.487" UserId="621" Comment="edited title" Text="iMac G3 - AirPort Card Port" />
  <row Id="2030" PostHistoryTypeId="2" PostId="708" RevisionGUID="85a12449-5e22-462d-86a2-e7663a10be5b" CreationDate="2016-06-03T04:55:10.993" UserId="439" Text="I can confirm that some cheap car DVD players can be used as a multi-standard composite monitor. The one I bought — a refurb [Philips PD7016/37](http://www.philips.ca/c-p/PD7016_37/portable-dvd-player &quot;PD7016/37&quot;) — comes with two identical display/player units. If you use a 3½ mm TRRS to Composite cable, such as this [TechCraft 4' 3.5mm Stereo to Composite Video + Audio Cable (3 RCA)](http://www.newegg.ca/Product/Product.aspx?Item=9SIA4FT48H3621 &quot;TechCraft 4' 3.5mm Stereo to Composite Video + Audio Cable (3 RCA)&quot;), you get a usable picture." />
  <row Id="2031" PostHistoryTypeId="2" PostId="709" RevisionGUID="5bc03348-3de6-4a51-af15-38b69345e436" CreationDate="2016-06-03T05:55:22.447" UserId="148" Text="The [Zuse Z1](https://en.wikipedia.org/wiki/Z1_%28computer%29) was a binary electrical computer and finished in 1938. Zuse invented the programming language [Plankalkül](https://en.wikipedia.org/wiki/Plankalk%C3%BCl) for it between 1943 and 1945, however, the book that he wrote about Plankalkül wasn't published until [1972](http://web.archive.org/web/20100304210031/http://www.epemag.com/zuse/Bgraphy.htm#ZUSE72). &#xD;&#xA;&#xD;&#xA;Does that count?&#xD;&#xA;" />
  <row Id="2032" PostHistoryTypeId="2" PostId="710" RevisionGUID="1d1adab9-67bd-4fb2-8a8b-256ffb6577ca" CreationDate="2016-06-03T06:45:12.773" UserId="148" Text="[This page](http://www.cpm.z80.de/source.html) has quite a few variants of the source code, including compilers for [PL/M](https://en.wikipedia.org/wiki/PL/M), including Z80 variants, and including source marked as copyrighted by Digital Research.&#xD;&#xA;&#xD;&#xA;There's no documented workflow to build your own system from that, and it probably needs quite a bit of fiddling, especially the PL/M part (if you manage to do it, a writeup would be nice). But at first glance, everything you need should be there." />
  <row Id="2033" PostHistoryTypeId="5" PostId="360" RevisionGUID="0be9b452-6c0d-41f9-8f5d-7f6f002eee18" CreationDate="2016-06-03T08:05:21.537" UserId="276" Comment="Removed the 'CPU' meta-tag" Text="I've got a motherboard with a Am386/DX processor.&#xD;&#xA;&#xD;&#xA;I've also got an Intel 387 coprocessor.&#xD;&#xA;Is it possible to use the Intel 387 that I've got together with the Am386 or do I need a coprocessor from AMD?&#xD;&#xA;&#xD;&#xA;Also, the Intel coprocessor physically fits in the slot for the Am387 but it is a bit smaller which causes a row of socket pinholes to be visible at each side of the coprocessor." />
  <row Id="2034" PostHistoryTypeId="6" PostId="360" RevisionGUID="0be9b452-6c0d-41f9-8f5d-7f6f002eee18" CreationDate="2016-06-03T08:05:21.537" UserId="276" Comment="Removed the 'CPU' meta-tag" Text="&lt;hardware&gt;&lt;compatibility&gt;&lt;386&gt;" />
  <row Id="2035" PostHistoryTypeId="5" PostId="443" RevisionGUID="86d9323d-5a31-48a0-9889-e7e8cdf91a6e" CreationDate="2016-06-03T08:52:11.250" UserId="276" Comment="Removed the 'CPU' meta-tag" Text="The Amiga 1200 has a trapdoor expansion for CPU accelerators.  The Amiga 500 has a side expansion port and its CPU is socketed.  &#xD;&#xA;&#xD;&#xA;But Amiga 600's expansion port is  only useful for memory expansion and the 68000 is soldered to the motherboard.  So instead, A600 accelerators function by being placed on top of the CPU -- how does that work?" />
  <row Id="2036" PostHistoryTypeId="6" PostId="443" RevisionGUID="86d9323d-5a31-48a0-9889-e7e8cdf91a6e" CreationDate="2016-06-03T08:52:11.250" UserId="276" Comment="Removed the 'CPU' meta-tag" Text="&lt;amiga&gt;" />
  <row Id="2037" PostHistoryTypeId="5" PostId="541" RevisionGUID="a6f4085e-a5ab-4d15-85dd-cfcb87bb7c99" CreationDate="2016-06-03T09:35:56.030" UserId="276" Comment="Removed the 'CPU' meta-tag, replaced with 6502" Text="The Apple II and Commodore 64 are the obvious ones but which other computer systems used the 6502 and 65816 chips?" />
  <row Id="2038" PostHistoryTypeId="6" PostId="541" RevisionGUID="a6f4085e-a5ab-4d15-85dd-cfcb87bb7c99" CreationDate="2016-06-03T09:35:56.030" UserId="276" Comment="Removed the 'CPU' meta-tag, replaced with 6502" Text="&lt;6502&gt;&lt;chip&gt;" />
  <row Id="2039" PostHistoryTypeId="2" PostId="711" RevisionGUID="63535a07-1e79-4edd-9ad4-7de73a5babf1" CreationDate="2016-06-03T09:37:53.507" UserId="276" Text="This is a meta-tag to be deleted.  Please use a tag specific to the CPU types of your question." />
  <row Id="2040" PostHistoryTypeId="2" PostId="712" RevisionGUID="a720fbf5-aaf1-4e54-8fe8-c38a3fe0a193" CreationDate="2016-06-03T09:37:53.507" UserId="276" Text="*This tag is deprecated*" />
  <row Id="2041" PostHistoryTypeId="5" PostId="705" RevisionGUID="cfcdb76e-c2a8-4429-a2a3-baf4027c5d18" CreationDate="2016-06-03T09:55:41.897" UserId="149" Comment="Add further information" Text="I've recently purchased a [HxC/Lotharek SD Card floppy drive emulator](http://hxc2001.free.fr/floppy_drive_emulator/). It's working well replacing DF0: but I'm seeing some odd behaviour with its emulation of DF1:.&#xD;&#xA;&#xD;&#xA;On the first boot after power-up, the Amiga detects both DF0: and DF1:. But after a reboot, DF1: disappears.&#xD;&#xA;&#xD;&#xA;The HxC does seem to be jumpered correctly (DS0 connected to drive A, DS1 connected to drive B) and there are no other drives, internal or external, connected.&#xD;&#xA;&#xD;&#xA;What could be causing this problem?&#xD;&#xA;&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;**Update**: here is how I have configured the SD card.&#xD;&#xA;&#xD;&#xA;1. Format as FAT32&#xD;&#xA;2. Download the `QuickInstall_FloppyDiskImages.zip` file from the HxC website and unpack to a temporary location&#xD;&#xA;3. Unpack the `SDHxCFE_Amiga.zip` file onto the SD card&#xD;&#xA;4. Start the `HxCFloppyEmulator` app and go into the &quot;SD HxC Floppy Emulator Settings&quot; section&#xD;&#xA;5. Click &quot;Load config file&quot; and select the HXCSDFE.CFG file off the SD card&#xD;&#xA;6. Make these changes:&#xD;&#xA;   1. Switch off &quot;Load last loaded floppy&quot; and &quot;Enable auto boot mode&quot; as I don't want these options at the moment&#xD;&#xA;   2. Under &quot;HFE file interfacemode&quot;, switch off &quot;Auto&quot; and manually select &quot;Amiga&quot;&#xD;&#xA;   3. Verify that the SD HxC Floppy Emulator Interface setting has both Drive A and Drive B set to Amiga, and &quot;2 drives emulation&quot; switched on&#xD;&#xA;7. Click &quot;Save config file&quot;, and save to HXCSDFE.CFG on the SD card&#xD;&#xA;8. Quit the app&#xD;&#xA;9. Safely eject the SD card&#xD;&#xA;&#xD;&#xA;Worringly, if I then restart the app and load the same config back in, my changes in 6.1 have been preserved, but my changes in 6.2 have gone back to the default of auto. In fact, if I read the [specification for the config file](http://hxc2001.com/download/floppy_drive_emulator/SDCard_HxC_Floppy_Emulator_HXCSDFE_CFG_file.pdf), it seems that these fields are not even part of the config file! So how can they be set?" />
  <row Id="2042" PostHistoryTypeId="2" PostId="713" RevisionGUID="7675ab9b-b91a-4f97-a8b8-fcc483d26987" CreationDate="2016-06-03T11:15:03.083" UserId="832" Text="I have a number of items (among them a nylon flag that's about 2m², featuring the [Cupertino font](http://content.altfonts.com:88/img/C/U/Cupertino-Regulara.png)).&#xD;&#xA;&#xD;&#xA;I'm thinking of selling these (possibly in conjunction with some Apple-related anniversary), but I've no idea if they're worth $5 or $5000 -- and I'd hate to guess wrong.&#xD;&#xA;&#xD;&#xA;Where can I obtain a reasonable appraisal of such items?" />
  <row Id="2043" PostHistoryTypeId="1" PostId="713" RevisionGUID="7675ab9b-b91a-4f97-a8b8-fcc483d26987" CreationDate="2016-06-03T11:15:03.083" UserId="832" Text="Where can I obtain a reasonable appraisal of old (80s) Apple memorabilia?" />
  <row Id="2044" PostHistoryTypeId="3" PostId="713" RevisionGUID="7675ab9b-b91a-4f97-a8b8-fcc483d26987" CreationDate="2016-06-03T11:15:03.083" UserId="832" Text="&lt;apple&gt;" />
  <row Id="2049" PostHistoryTypeId="5" PostId="347" RevisionGUID="f66bbc5b-870e-4631-a807-db542684acf2" CreationDate="2016-06-03T12:46:30.193" UserId="276" Comment="Added detail to body" Text="A budget computer made by Acorn and released in 1983.  &#xD;&#xA;&#xD;&#xA;A cut-down version of the Acorn BBC Micro. It ran at a slower speed than the BBC due to bus-sharing with the video ULA." />
  <row Id="2050" PostHistoryTypeId="10" PostId="713" RevisionGUID="b41954a2-a7c4-4e20-b122-2f30db457f76" CreationDate="2016-06-03T13:00:29.417" UserId="276" Comment="105" Text="{&quot;Voters&quot;:[{&quot;Id&quot;:276,&quot;DisplayName&quot;:&quot;Chenmunka&quot;}]}" />
  <row Id="2051" PostHistoryTypeId="2" PostId="714" RevisionGUID="00f9c4f3-3fbc-4587-8418-ab1b48e58ffd" CreationDate="2016-06-03T13:04:27.777" UserId="276" Comment="Created body" Text="For questions about the Assembly Language of a microprocessor." />
  <row Id="2052" PostHistoryTypeId="2" PostId="715" RevisionGUID="06fad89f-4a36-477e-a399-674d96d649ce" CreationDate="2016-06-03T13:04:27.777" UserId="276" Text="For questions about Assembly Language" />
  <row Id="2053" PostHistoryTypeId="2" PostId="716" RevisionGUID="7293ebfe-302d-4a55-8bc8-258bf18e67bf" CreationDate="2016-06-03T14:01:16.380" UserId="611" Text="Although older books have already been cited, I just reached across onto my bookshelf and found:&#xD;&#xA;&#xD;&#xA;&quot;Ferranti Pegasus Computer, Programming Manual&quot;, Ferranti Ltd, Issue 1, September 1955.&#xD;&#xA;&#xD;&#xA;I have older ones, but at the moment I can't locate them!&#xD;&#xA;&#xD;&#xA;I'm sure I have an early Cambridge EDSAC programming manual somewhere.&#xD;&#xA;" />
  <row Id="2054" PostHistoryTypeId="5" PostId="701" RevisionGUID="edcb1dd5-1554-4da8-b876-9bdbb97a896c" CreationDate="2016-06-03T14:40:05.873" UserId="462" Comment="fixed OCR error" Text="I found something from 1949; it's a 4 page article that describes programming for the EDSAC. It's *like* a book, but whether it counts as one for this question I leave open. In any case, I think it's worth mentioning in any case.&#xD;&#xA;&#xD;&#xA;There's one copy I found online, but it's behind a [paywall](http://iopscience.iop.org/article/10.1088/0950-7671/26/6/318/meta). Fortunately, I get access through my university, so I was able to copy a little from it. (Tell me if you think I missed an OCR error.)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Programme Design for a High-speed Automatic Calculating Machine &#xD;&#xA;=&#xD;&#xA;&#xD;&#xA;By M. V. Wilkes, M.A., Ph.D., The Mathematical Laboratory, University of Cambridge&#xD;&#xA;[MS. received 18 February 1949]&#xD;&#xA;&#xD;&#xA;&gt;A good deal has been written about the design and construction of high-speed automatic calculating machines, but little has been said about the detailed steps which are necessary to prepare a problem for a machine and to obtain a solution– a process which is usually referred to as 'programming'. Such aspects are, however, of primary interest to mathematical physicists and engineers who may be wondering what help they can expect from high-speed calculating machines in their own problems. It is intended in this article to supply some of this information; most of it will be well known to those engaged on calculating-machine development. &#xD;&#xA;&#xD;&#xA;&gt;As far as details go: reference will be made to a machine known as the&#xD;&#xA;EDSAC (Electronic Delay Storage Automatic Calculator) which is at present being built in the University Mathematical Laboratory at Cambridge, although certain complications which are unimportant for the present purpose will be ignored. The same principles will be applicable to other machines of similar type.&#xD;&#xA;&#xD;&#xA;Also note that it makes specific mention of things being *digital*:&#xD;&#xA;&#xD;&#xA;&gt;The mathematical application of a digital machine can be&#xD;&#xA;discussed quite apart from any consideration of its construction." />
  <row Id="2055" PostHistoryTypeId="2" PostId="717" RevisionGUID="f47ce755-210f-4690-a886-e59ed3650e6d" CreationDate="2016-06-03T14:50:40.067" UserId="843" Text="&gt; Can you take these disks off the shelf 30 years later and still expect to read their data?&#xD;&#xA;&#xD;&#xA;Yes.&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;Although we all experienced floppies fragility, the magnetic media in fact is one of the longest-living we can practically manufacture. Typical streamer tapes are often guaranteed for 30 years. Of course, under very strict handling and storage conditions - but the point is that no other popular writable media can come even close to 30 years figure.&#xD;&#xA;&#xD;&#xA;The usage of one of the oldest, 8&quot; floppies is also not surprising here. They have pretty small capacity compared to their size - the largest ever are barely 1.2MB. This gives them tremendous advantage in reliability, as with wide and sparse tracks there is huge margin for error.&#xD;&#xA;&#xD;&#xA;&gt; Even the newest 8&quot; floppy disks must be around 25 years old (at least). &#xD;&#xA;&#xD;&#xA;Do not underestimate the power of a large, government organization. Eg in Poland one agency put on a tender for 130000 3.5&quot; floppies in... 2008. $40k budget. Brand-new ones, manufactured in same year, of course. It's expectable that Navy alone kept one factory afloat for all those years.&#xD;&#xA;&#xD;&#xA;And last but not least: You've assumed that they wrote those disk 30 years ago and never touched them since. I believe that's not reasonable assumptions. In long-term data storage there are procedures to cyclically read and re-write data on new storage." />
  <row Id="2056" PostHistoryTypeId="5" PostId="717" RevisionGUID="eda449d7-cee5-42af-9515-bd779a2a7ecf" CreationDate="2016-06-03T14:56:47.097" UserId="843" Comment="deleted 1 character in body" Text="&gt; Can you take these disks off the shelf 30 years later and still expect to read their data?&#xD;&#xA;&#xD;&#xA;Yes.&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;Although we all experienced floppies fragility, the magnetic media in fact is one of the longest-living we can practically manufacture. Typical streamer tapes are often guaranteed for 30 years. Of course, under very strict handling and storage conditions - but the point is that no other popular writable media can come even close to 30 years figure. Home and office floppies fail due to mishandling, physical damage, being put too close to speaker, getting dirty, etc - all those failure modes are well known and easily preventable with procedures.&#xD;&#xA;&#xD;&#xA;The usage of one of the oldest, 8&quot; floppies is also not surprising here. They have pretty small capacity compared to their size - the largest ever are barely 1.2MB. This gives them tremendous advantage in reliability, as with wide and sparse tracks there is huge margin for error.&#xD;&#xA;&#xD;&#xA;&gt; Even the newest 8&quot; floppy disks must be around 25 years old (at least). &#xD;&#xA;&#xD;&#xA;Do not underestimate the power of a large, government organization. Eg in Poland one agency put on a tender for 130000 3.5&quot; floppies in... 2008. $40k budget. Brand-new ones, manufactured in same year, of course. It's expectable that Navy alone kept one factory afloat for all those years.&#xD;&#xA;&#xD;&#xA;And last but not least: You've assumed that they wrote those disk 30 years ago and never touched them since. I believe that's not reasonable assumption. In long-term data storage there are procedures to cyclically read and re-write data on new storage." />
  <row Id="2057" PostHistoryTypeId="5" PostId="717" RevisionGUID="460e7270-329a-48a0-bdc0-a10fe3d4452b" CreationDate="2016-06-03T15:11:20.473" UserId="843" Comment="added 689 characters in body" Text="&gt; Can you take these disks off the shelf 30 years later and still expect to read their data?&#xD;&#xA;&#xD;&#xA;Yes.&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;Although we all experienced floppies fragility, the magnetic media in fact is one of the longest-living we can practically manufacture. Typical streamer tapes are often guaranteed for 30 years. Of course, under very strict handling and storage conditions - but the point is that no other popular writable media can come even close to 30 years figure. Home and office floppies fail due to mishandling, physical damage, being put too close to speaker, getting dirty, etc - all those failure modes are well known and easily preventable with procedures.&#xD;&#xA;&#xD;&#xA;The usage of one of the oldest, 8&quot; floppies is also not surprising here. They have pretty small capacity compared to their size - the largest ever are barely 1.2MB. This gives them tremendous advantage in reliability, as with wide and sparse tracks there is huge margin for error.&#xD;&#xA;&#xD;&#xA;&gt; Even the newest 8&quot; floppy disks must be around 25 years old (at least). &#xD;&#xA;&#xD;&#xA;Do not underestimate the power of a large, government organization. Eg in Poland one agency put on a tender for 130000 3.5&quot; floppies in... 2008. $40k budget. Brand-new ones, manufactured in same year, of course. It's expectable that Navy alone kept one factory afloat for all those years.&#xD;&#xA;&#xD;&#xA;And last but not least: You've assumed that they wrote those disk 30 years ago and never touched them since. I believe that's not reasonable assumption. In long-term data storage there are procedures to cyclically read and re-write data on new storage.&#xD;&#xA;&#xD;&#xA;/edit: On a second thought, this is just another example of an old tech being continuously used in professional environment despite newer tech being widespread among consumers. NASA using magnetic-core memory in 80's, cars using relays instead of solid-state to control starter motor, Amtrak using rotary converters, etc, etc. The main point is not about absolute reliability, it's about better understanding of failure modes. When you have good understanding of failure modes, you can simply overengineer that particular aspect or put in procedures to circumvent the problem. Being able to predict it with good certainty is all that it takes to achieve the best possible reliability. " />
  <row Id="2058" PostHistoryTypeId="5" PostId="713" RevisionGUID="b3051b85-f850-4d78-9eae-0de7c7bad875" CreationDate="2016-06-03T16:49:29.727" UserId="47" Comment="added 41 characters in body; edited tags; edited title" Text="I have a number of items (among them, old (80s) Apple memorabilia and a nylon flag that's about 2m², featuring the [Cupertino font](http://content.altfonts.com:88/img/C/U/Cupertino-Regulara.png)).&#xD;&#xA;&#xD;&#xA;I'm thinking of selling these (possibly in conjunction with some Apple-related anniversary), but I've no idea if they're worth $5 or $5000 &amp;mdash; and I'd hate to guess wrong.&#xD;&#xA;&#xD;&#xA;So how do you determine a reasonable value for such items? " />
  <row Id="2059" PostHistoryTypeId="4" PostId="713" RevisionGUID="b3051b85-f850-4d78-9eae-0de7c7bad875" CreationDate="2016-06-03T16:49:29.727" UserId="47" Comment="added 41 characters in body; edited tags; edited title" Text="How do you determine the value of vintage computer equipement?" />
  <row Id="2060" PostHistoryTypeId="6" PostId="713" RevisionGUID="b3051b85-f850-4d78-9eae-0de7c7bad875" CreationDate="2016-06-03T16:49:29.727" UserId="47" Comment="added 41 characters in body; edited tags; edited title" Text="&lt;apple&gt;&lt;collectability&gt;" />
  <row Id="2061" PostHistoryTypeId="11" PostId="713" RevisionGUID="36fb763e-0eac-422a-b73d-a2543c4df083" CreationDate="2016-06-03T18:32:39.230" UserId="276" Text="{&quot;Voters&quot;:[{&quot;Id&quot;:276,&quot;DisplayName&quot;:&quot;Chenmunka&quot;}]}" />
  <row Id="2062" PostHistoryTypeId="2" PostId="718" RevisionGUID="c63f3047-5fb9-4f87-ae6b-0bb986af5962" CreationDate="2016-06-03T20:29:31.587" UserId="46" Text="Ask an expert has to be the most obvious answer, and maybe sensible for higher value or rarer items. An auction house should be able to help (for a fee), although they can equally get these things quite wrong." />
  <row Id="2063" PostHistoryTypeId="2" PostId="719" RevisionGUID="5f1b41ec-4df9-4514-aba2-2275a3aa73c4" CreationDate="2016-06-03T22:00:08.653" UserId="621" Text="Part of the value of any item is the demand for it.  If there's not demand, even if there was only one made, it's unlikely to sell for a high price.  You have a few options.&#xD;&#xA;&#xD;&#xA;1. Scan eBay/Google Shopping/Craigslist for any equivalent equipment.  eBay has a great feature that lets you filter your search results by completed or sold listings (there is a difference).  Using those options you can see what people are listing items for vs what they're actually selling for.&#xD;&#xA;&#xD;&#xA;2. Find an expert.  You might want to look on reddit or other specialized Apple forums for people who might know about these things, or would be interested in buying them.&#xD;&#xA;&#xD;&#xA;3. Ask Apple.  This is more of a long-shot, but I've found that some companies actually value when people contact them about old promotional and collectable items.  Hell, Tops threw away most of their trading cards from their early days and even they don't have a complete set of their catalog." />
  <row Id="2064" PostHistoryTypeId="2" PostId="720" RevisionGUID="68dd6124-2261-4e92-ab55-69fe7a691e5e" CreationDate="2016-06-03T23:24:26.243" UserId="854" Text="To create boot disks for a apple 512k macintosh I had to take a 1.44MB floppy, tape the hole to make it into a 720KB floppy, and then format the floppy as an APPLE floppy and not a PC floppy with a superdrive equipped old world g3 mac tower running osx 10.3. Then I could write the image.&#xD;&#xA;&#xD;&#xA;A linux install on an oldworld machine with a superdrive may work to write the image IF there is a way to set the drive to 800KB mode instead of 720KB mode. For slightly newer macs, it looks like you can actually boot from a floppy with a 1.44MB format just by skipping some blocks. http://www.macfaq.org/software/macos.shtml#Q1.1.5" />
  <row Id="2065" PostHistoryTypeId="2" PostId="721" RevisionGUID="9918fe78-c838-495e-9b20-0d7fa8f2c36b" CreationDate="2016-06-03T23:36:01.483" UserId="855" Text="I developed Logo for the Commodore 64, based on work we did at MIT for the Apple ][ and TI 99/4.  Apple debugging was done with the ROM, via assembled-in breakpoints.  For the C64, Andy Finkelstein at Commodore ordered me a 6510 CPU with an extra pin that signalled the I/D line, and a clamp-on connector that led to a Nicolet-Paratronics logic analyzer, connected to a PET with a disassembler in BASIC.  I was having trouble with usage of page zero registers, both by the ROM and by Logo, which deferenced Nil (empy list [] in Logo), but on the 6510 locations 0 and 1 were the parallel port to peripherals such as the 1541 disk.&#xD;&#xA;&#xD;&#xA;So, I could set a breakpoint when dinner code wrote or even read an address.  What's even better is that I could set the breakpoint to start up to 255 bytes before the errant access occurred.  It was the only time I could set a breakpoint *in the past* before an error occurred.  And yes, it was more miraculous that the Lisp Machine debugger!&#xD;&#xA;" />
  <row Id="2066" PostHistoryTypeId="4" PostId="713" RevisionGUID="93d38a29-52f0-44a0-bd9f-1189dadf3af4" CreationDate="2016-06-04T07:50:04.170" UserId="621" Comment="Fixed typo in title" Text="How do you determine the value of vintage computer equipment?" />
  <row Id="2067" PostHistoryTypeId="24" PostId="713" RevisionGUID="93d38a29-52f0-44a0-bd9f-1189dadf3af4" CreationDate="2016-06-04T07:50:04.170" Comment="Proposed by 621 approved by 56, 278 edit id of 226" />
  <row Id="2068" PostHistoryTypeId="5" PostId="685" RevisionGUID="92c53adb-7623-4442-994e-208c6ab05bf5" CreationDate="2016-06-04T10:14:43.257" UserId="46" Comment="deleted 1 character in body" Text="Green was certainly the most common phosphor for a long time, the amber and grey monochrome monitors started to appear in the 1980s, I think.  &#xD;&#xA;&#xD;&#xA;There are two factors that I think contribute to the choice of colour. One is the stability of the particular phosphor in operation, the other is the related issue of manufacturing quality and absence of contamination, as well as other technical caracteristics of the tubes which maybe offset the cost of the phosphor component.&#xD;&#xA;&#xD;&#xA;" />
  <row Id="2069" PostHistoryTypeId="2" PostId="722" RevisionGUID="38b2e220-f903-4d4b-97b2-cfe2238e34a3" CreationDate="2016-06-04T13:05:22.057" UserId="857" Text="I have a 'perfect' set of ZX Spectrum games (in an .ipf format) that I would like to use in emulationstation (retropie) but the fuse emulator doesn't recognise .ipf files.&#xD;&#xA;&#xD;&#xA;Are there any tools that will convert .ipf files to a format that will work on said emulator?&#xD;&#xA;&#xD;&#xA;Many thanks" />
  <row Id="2070" PostHistoryTypeId="1" PostId="722" RevisionGUID="38b2e220-f903-4d4b-97b2-cfe2238e34a3" CreationDate="2016-06-04T13:05:22.057" UserId="857" Text="Converting ZX Spectrum .ipf files to .z80 ..tzx etc for use in fuse on retropie?" />
  <row Id="2071" PostHistoryTypeId="3" PostId="722" RevisionGUID="38b2e220-f903-4d4b-97b2-cfe2238e34a3" CreationDate="2016-06-04T13:05:22.057" UserId="857" Text="&lt;zx-spectrum&gt;&lt;emulation&gt;" />
  <row Id="2072" PostHistoryTypeId="5" PostId="719" RevisionGUID="36b6c5f4-b327-4ef5-a26b-1bd147e09be4" CreationDate="2016-06-04T13:08:15.083" UserId="621" Comment="added 1 character in body" Text="Part of the value of any item is the demand for it.  If there's not demand, even if there was only one made, it's unlikely to sell for a high price.  You have a few options.&#xD;&#xA;&#xD;&#xA;1. Scan eBay/Google Shopping/Craigslist for any equivalent equipment.  eBay has a great feature that lets you filter your search results by completed or sold listings (there is a difference).  Using those options you can see what people are listing items for vs what they're actually selling for.&#xD;&#xA;&#xD;&#xA;2. Find an expert.  You might want to look on reddit or other specialized Apple forums for people who might know about these things, or would be interested in buying them.&#xD;&#xA;&#xD;&#xA;3. Ask Apple.  This is more of a long-shot, but I've found that some companies actually value when people contact them about old promotional and collectable items.  Hell, Topps threw away most of their trading cards from their early days and even they don't have a complete set of their catalog." />
  <row Id="2073" PostHistoryTypeId="2" PostId="723" RevisionGUID="c66dd4df-4889-413f-a136-db197f41253c" CreationDate="2016-06-04T18:06:21.120" UserId="439" Text="Not currently. SPS's [IPF Support Library](http://www.softpres.org/download &quot;IPF Support Library&quot;) is only distributed as a binary, and is not provided for ARM as used by Retropie.&#xD;&#xA;&#xD;&#xA;IPF for ZX Spectrum +3 is supported by the commercial [Spectaculator](http://www.spectaculator.com/ &quot;Spectaculator&quot;) emulator for Windows." />
  <row Id="2074" PostHistoryTypeId="5" PostId="722" RevisionGUID="aeacbb39-c5cb-4d5e-a315-d9e38b92871c" CreationDate="2016-06-04T18:54:02.317" UserId="462" Comment="added relevant tag; removed fluff" Text="I have a 'perfect' set of ZX Spectrum games (in .ipf format) that I would like to use in emulationstation (retropie) but the fuse emulator doesn't recognize .ipf files.&#xD;&#xA;&#xD;&#xA;Are there any tools that will convert .ipf files to a format that will work on said emulator?" />
  <row Id="2075" PostHistoryTypeId="4" PostId="722" RevisionGUID="aeacbb39-c5cb-4d5e-a315-d9e38b92871c" CreationDate="2016-06-04T18:54:02.317" UserId="462" Comment="added relevant tag; removed fluff" Text="Converting ZX Spectrum .ipf files to .z80 or .tzx for use in fuse on retropie?" />
  <row Id="2076" PostHistoryTypeId="6" PostId="722" RevisionGUID="aeacbb39-c5cb-4d5e-a315-d9e38b92871c" CreationDate="2016-06-04T18:54:02.317" UserId="462" Comment="added relevant tag; removed fluff" Text="&lt;zx-spectrum&gt;&lt;emulation&gt;&lt;software-recommendation&gt;" />
  <row Id="2077" PostHistoryTypeId="24" PostId="722" RevisionGUID="aeacbb39-c5cb-4d5e-a315-d9e38b92871c" CreationDate="2016-06-04T18:54:02.317" Comment="Proposed by 462 approved by 278 edit id of 227" />
  <row Id="3079" PostHistoryTypeId="5" PostId="710" RevisionGUID="6b597dee-7b53-4ea4-a230-4e9fb4b37929" CreationDate="2016-06-05T05:08:17.103" UserId="148" Comment="Links to writeups to set up CP/M 2.2. on a new computer, including Z80 source." Text="[This page](http://www.cpm.z80.de/source.html) has quite a few variants of the source code, including compilers for [PL/M](https://en.wikipedia.org/wiki/PL/M), including Z80 variants, and including source marked as copyrighted by Digital Research.&#xD;&#xA;&#xD;&#xA;There's no documented workflow to build your own system from that, and it probably needs quite a bit of fiddling, especially the PL/M part (if you manage to do it, a writeup would be nice). But at first glance, everything you need should be there.&#xD;&#xA;&#xD;&#xA;**Edit**: [Here](https://ciernioo.wordpress.com/) is an article that describes how to modify CP/M 2.2 to set it up for a new computer. It references two other writeups on the same subject, [here](http://cpuville.com/cpm_on_new_computer.html) and [here](http://searle.hostei.com/grant/cpm/index.html), and the latter uses a CP/M 2.2 source converted to Z80-style using an awk script.&#xD;&#xA;&#xD;&#xA;Setting CP/M up for a new computer doesn't require recompiling the PL/M utility programs, but maybe the Z80-style source and the writeups themselves are helpful.&#xD;&#xA;" />
  <row Id="3080" PostHistoryTypeId="2" PostId="724" RevisionGUID="c1ed0df3-1f22-49d8-8a38-df80acbfba7e" CreationDate="2016-06-05T07:20:03.417" UserId="367" Text="I currently live in Japan and use PAL C64 from Europe, here the line voltage is 100V at 50Hz (Tokyo).&#xD;&#xA;&#xD;&#xA;I will be moving to the US in about 2 months.&#xD;&#xA;The US uses 110-120V (power supplies are usually for 117V) at 60Hz.&#xD;&#xA;&#xD;&#xA;Aside from PAL vs NTSC (which I have handled via XRGB-Mini Framemeister), will PAL C64 work on 60Hz ?&#xD;&#xA;&#xD;&#xA;This is mostly a question on whether the line frequency matters at all - I think the 9VAC is rectified to 12V or 5V for SID, but is the actual sine signal used in any way in C64 ? (by other chips perhaps?)&#xD;&#xA;" />
  <row Id="3081" PostHistoryTypeId="1" PostId="724" RevisionGUID="c1ed0df3-1f22-49d8-8a38-df80acbfba7e" CreationDate="2016-06-05T07:20:03.417" UserId="367" Text="PAL C64 in the US - 50Hz vs 60Hz AC Frequency, will that matter?" />
  <row Id="3082" PostHistoryTypeId="3" PostId="724" RevisionGUID="c1ed0df3-1f22-49d8-8a38-df80acbfba7e" CreationDate="2016-06-05T07:20:03.417" UserId="367" Text="&lt;commodore-64&gt;&lt;power&gt;" />
  <row Id="3083" PostHistoryTypeId="5" PostId="724" RevisionGUID="29c649b0-692a-4417-9369-682d35f9bf38" CreationDate="2016-06-05T08:09:16.393" UserId="367" Comment="added 44 characters in body" Text="I currently live in Japan and use PAL C64 from Europe, here the line voltage is 100V at 50Hz (Tokyo).&#xD;&#xA;&#xD;&#xA;I will be moving to the US in about 2 months.&#xD;&#xA;The US uses 110-120V (power supplies are usually for 117V) at 60Hz.&#xD;&#xA;&#xD;&#xA;Aside from PAL vs NTSC (which I have handled via XRGB-Mini Framemeister), will PAL C64 work on 60Hz ?&#xD;&#xA;&#xD;&#xA;This is mostly a question on whether the line frequency matters at all - I think the 9VAC is rectified to 12V or 5V for SID, but is the actual sine signal used in any way in C64 ? (by other chips perhaps?)&#xD;&#xA;&#xD;&#xA;The same question applies to C128 as well." />
  <row Id="3084" PostHistoryTypeId="2" PostId="725" RevisionGUID="8b49a3f3-e4e3-4b3f-a82c-071a6c2e7c95" CreationDate="2016-06-05T08:12:21.367" UserId="-1" Text="" />
  <row Id="3085" PostHistoryTypeId="2" PostId="726" RevisionGUID="4a9d506e-94bd-49f3-ba6a-92c6f3ecc8be" CreationDate="2016-06-05T08:12:21.367" UserId="-1" Text="" />
  <row Id="3086" PostHistoryTypeId="2" PostId="727" RevisionGUID="f76daffa-b51e-4c87-bea0-08a22ecb2b5f" CreationDate="2016-06-05T08:14:03.863" UserId="-1" Text="" />
  <row Id="3087" PostHistoryTypeId="2" PostId="728" RevisionGUID="b6cc5bd4-3919-465e-97a4-b997b81d75f7" CreationDate="2016-06-05T08:14:03.863" UserId="-1" Text="" />
  <row Id="3088" PostHistoryTypeId="5" PostId="724" RevisionGUID="25ec2864-c5f4-4cff-ab2c-3bf7ee970472" CreationDate="2016-06-05T08:24:42.387" UserId="367" Comment="added 42 characters in body" Text="I currently live in Japan and use PAL C64 from Europe, here the line voltage is 100V at 50Hz (Tokyo).&#xD;&#xA;&#xD;&#xA;I will be moving to the US in about 2 months.&#xD;&#xA;The US uses 110-120V (power supplies are usually for 117V) at 60Hz.&#xD;&#xA;&#xD;&#xA;Aside from PAL vs NTSC (which I have handled via XRGB-Mini Framemeister), will PAL C64 work on 60Hz ?&#xD;&#xA;&#xD;&#xA;This is mostly a question on whether the line frequency matters at all - I think the 9VAC is rectified to 12V or 5V for SID, but is the actual sine signal used in any way in C64 ? (by other chips perhaps?)&#xD;&#xA;&#xD;&#xA;The same question applies to C128 and conversely NTSC C64 in 50Hz side of the world." />
  <row Id="3089" PostHistoryTypeId="5" PostId="727" RevisionGUID="68866102-5f57-4108-b90b-f167a87f7529" CreationDate="2016-06-05T08:43:06.807" UserId="367" Comment="added 189 characters in body" Text="Examples of valid question include:&#xD;&#xA;&#xD;&#xA;&quot;Why does old white plastic become yellow over time&quot;&#xD;&#xA;&#xD;&#xA;&quot;How to remove the yellowing from plastic&quot;&#xD;&#xA;&#xD;&#xA;&quot;Will non-white plastic become yellow over time&quot;" />
  <row Id="3090" PostHistoryTypeId="24" PostId="727" RevisionGUID="68866102-5f57-4108-b90b-f167a87f7529" CreationDate="2016-06-05T08:43:06.807" Comment="Proposed by 367 approved by -1 edit id of 1230" />
  <row Id="3091" PostHistoryTypeId="5" PostId="727" RevisionGUID="5e683f40-53ee-4506-b47b-a6143131677e" CreationDate="2016-06-05T08:43:06.807" UserId="278" Comment="Improved formatting." Text="Examples of valid questions include:&#xD;&#xA;&#xD;&#xA;  * Why does old white plastic become yellow over time?&#xD;&#xA;  * How to remove the yellowing from plastic?&#xD;&#xA;  * Will non-white plastic become yellow over time?" />
  <row Id="3092" PostHistoryTypeId="5" PostId="728" RevisionGUID="b54a3914-45e5-4984-8c81-1bfde37dedfb" CreationDate="2016-06-05T08:43:15.183" UserId="367" Comment="added 85 characters in body" Text="Questions about Plastics - computer cases, yellowing, care, preservation, restoration" />
  <row Id="3093" PostHistoryTypeId="24" PostId="728" RevisionGUID="b54a3914-45e5-4984-8c81-1bfde37dedfb" CreationDate="2016-06-05T08:43:15.183" Comment="Proposed by 367 approved by 278 edit id of 1231" />
  <row Id="3094" PostHistoryTypeId="5" PostId="725" RevisionGUID="6436278e-7175-4a2e-bc85-e353da2518b1" CreationDate="2016-06-05T08:43:56.667" UserId="367" Comment="added 179 characters in body" Text="Examples of valid questions:&#xD;&#xA;&#xD;&#xA;&quot;What voltages are required to power a C64&quot;&#xD;&#xA;&#xD;&#xA;&quot;How to power an Amiga using PC ATX Power Supply&quot;&#xD;&#xA;&#xD;&#xA;&quot;What power supply is required for ZX spectrum&quot;" />
  <row Id="3095" PostHistoryTypeId="24" PostId="725" RevisionGUID="6436278e-7175-4a2e-bc85-e353da2518b1" CreationDate="2016-06-05T08:43:56.667" Comment="Proposed by 367 approved by -1 edit id of 1228" />
  <row Id="3096" PostHistoryTypeId="5" PostId="725" RevisionGUID="5737570e-ca40-46a2-9496-f43713367cb1" CreationDate="2016-06-05T08:43:56.667" UserId="278" Comment="Improved formatting" Text="Examples of valid questions:&#xD;&#xA;&#xD;&#xA;  * What voltages are required to power a C64?&#xD;&#xA;  * How to power an Amiga using PC ATX Power Supply?&#xD;&#xA;  * What power supply is required for ZX spectrum?" />
  <row Id="3097" PostHistoryTypeId="5" PostId="726" RevisionGUID="7f94cb7c-ac14-459b-8f15-467eaefe76e2" CreationDate="2016-06-05T08:44:01.730" UserId="367" Comment="added 59 characters in body" Text="Questions and problems related to powering retro equipment." />
  <row Id="3098" PostHistoryTypeId="24" PostId="726" RevisionGUID="7f94cb7c-ac14-459b-8f15-467eaefe76e2" CreationDate="2016-06-05T08:44:01.730" Comment="Proposed by 367 approved by 278 edit id of 1229" />
  <row Id="3099" PostHistoryTypeId="5" PostId="713" RevisionGUID="11b10ea5-65c6-49b7-b12a-b6262a6958be" CreationDate="2016-06-05T10:23:44.337" UserId="832" Comment="thanks, picture" Text="I have a number of items (among them, old (80s) Apple memorabilia and a nylon flag that's about 2m², featuring the [Cupertino font](http://content.altfonts.com:88/img/C/U/Cupertino-Regulara.png)).&#xD;&#xA;&#xD;&#xA;I'm thinking of selling these (possibly in conjunction with some Apple-related anniversary), but I've no idea if they're worth $5 or $5000 &amp;mdash; and I'd hate to guess wrong.&#xD;&#xA;&#xD;&#xA;So how do you determine a reasonable value for such items? &#xD;&#xA;&#xD;&#xA;**Edit:** @RobertCartaino, @Chenmunka, thanks for the way you have moderated this.&#xD;&#xA;&#xD;&#xA;**Update:** Here's a picture of the flag: [![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/XP27B.jpg" />
  <row Id="3100" PostHistoryTypeId="2" PostId="729" RevisionGUID="01b5e510-63e4-4238-9ec7-846ef527586c" CreationDate="2016-06-05T10:34:43.700" UserId="107" Text="So I've been cleaning up an Atari 400 that had a bad RF cable, and cleaned the machine thoroughly so it's looking great. It's working well apart from the keyboard, where most of the keys aren't working: some columns on the far left work (Q, A, Z and W, S, X) but almost everything else doesn't, and backspace even acts like reset.&#xD;&#xA;&#xD;&#xA;Is this likely to be an issue with the membrane or is it more likely that there's some cracked solder joints / faulty components on the main board. Is there a good way to test and diagnose the keyboard outside of the machine?" />
  <row Id="3101" PostHistoryTypeId="1" PostId="729" RevisionGUID="01b5e510-63e4-4238-9ec7-846ef527586c" CreationDate="2016-06-05T10:34:43.700" UserId="107" Text="Atari 400 Faulty Keyboard" />
  <row Id="3102" PostHistoryTypeId="3" PostId="729" RevisionGUID="01b5e510-63e4-4238-9ec7-846ef527586c" CreationDate="2016-06-05T10:34:43.700" UserId="107" Text="&lt;atari-400&gt;&lt;membrane-keyboard&gt;" />
  <row Id="3103" PostHistoryTypeId="2" PostId="730" RevisionGUID="645ccb6c-b97b-49e8-9c9c-2b600fdeb62e" CreationDate="2016-06-05T11:15:16.120" UserId="-1" Text="" />
  <row Id="3104" PostHistoryTypeId="2" PostId="731" RevisionGUID="38933884-cd8c-4265-a230-d9d2e9187bca" CreationDate="2016-06-05T11:15:16.120" UserId="-1" Text="" />
  <row Id="3105" PostHistoryTypeId="2" PostId="732" RevisionGUID="9bee0952-7687-41b1-8d00-3b83af9b757c" CreationDate="2016-06-05T11:15:26.307" UserId="105" Text="Yes, your C64 will work with a 60Hz mains, but programs may behave differently.&#xD;&#xA;&#xD;&#xA;The 9VAC supply is indeed used as a timebase. This is the part of the circuit that does the job:&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;As you can see, it is used to clock the TOD (Time Of Day) realtime clock inside both CIAs (CIA2 depicted here). The CIA can be clocked with 50 or 60Hz and it has a bit inside a register (bit 7 of CONTROL TIMER A) to tell it whether the input frequency is set to 50 or 60Hz. This is used to keep some counters that track tenths of a second, seconds, minutes and hours.&#xD;&#xA;&#xD;&#xA;It is the ROM which is different for PAL and NTSC systems, which actually set or reset this bit accordingly. C64s with a PAL ROM will set this bit. NTSC ROMs will reset it.&#xD;&#xA;&#xD;&#xA;If you plug your PAL-aware C64 into a 60Hz mains, you will notice that applications that use the realtime clock will show the wrong time, updating it too fast. So any application that uses this to time events will trigger them at wrong intervals, which may or may not be problematic.&#xD;&#xA;&#xD;&#xA;This timer is not the same as the VBlank. VBlank will keep updating at the vertical sync frequency your VIC-II is designed for (that is, 50Hz PAL in your system)&#xD;&#xA;&#xD;&#xA;[According to C64-Wiki][2], the TIME system variable doesn't depend on this TOD (???)&#xD;&#xA;&#xD;&#xA;There is a [great article at CODEBASE 64][3] which explains how you can figure out if your TOD is running at 50 or 60Hz, and configure it the right way.&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/UBMzJ.png&#xD;&#xA;  [2]: https://www.c64-wiki.com/index.php/TIME&#xD;&#xA;  [3]: http://codebase64.org/doku.php?id=base:initialize_tod_clock_on_all_platforms" />
  <row Id="3106" PostHistoryTypeId="2" PostId="733" RevisionGUID="3359bc98-9a53-47c9-8f9d-c9c1908b7adf" CreationDate="2016-06-05T11:19:09.297" UserId="-1" Text="" />
  <row Id="3107" PostHistoryTypeId="2" PostId="734" RevisionGUID="7b0625f9-4755-4179-a227-bca22488669c" CreationDate="2016-06-05T11:19:09.297" UserId="-1" Text="" />
  <row Id="3108" PostHistoryTypeId="2" PostId="735" RevisionGUID="60db614d-31ad-4e96-9b8c-4d5407b6c76a" CreationDate="2016-06-05T11:23:14.590" UserId="-1" Text="" />
  <row Id="3109" PostHistoryTypeId="2" PostId="736" RevisionGUID="1b217898-9c56-4196-9391-2743c9f19380" CreationDate="2016-06-05T11:23:14.590" UserId="-1" Text="" />
  <row Id="3110" PostHistoryTypeId="2" PostId="737" RevisionGUID="589bbec6-724b-451e-a23e-d8e706eb1454" CreationDate="2016-06-05T11:25:10.757" UserId="-1" Text="" />
  <row Id="3111" PostHistoryTypeId="2" PostId="738" RevisionGUID="bda8bade-095d-4a9c-b39c-70fcd1e45edf" CreationDate="2016-06-05T11:25:10.757" UserId="-1" Text="" />
  <row Id="3112" PostHistoryTypeId="2" PostId="739" RevisionGUID="db686432-29e8-474a-bcc1-bb90f1e92956" CreationDate="2016-06-05T11:26:59.470" UserId="-1" Text="" />
  <row Id="3113" PostHistoryTypeId="2" PostId="740" RevisionGUID="aa40758b-270a-4e2c-a6d1-7ff281f1ddeb" CreationDate="2016-06-05T11:26:59.470" UserId="-1" Text="" />
  <row Id="3114" PostHistoryTypeId="2" PostId="741" RevisionGUID="0fecb044-9e5c-4760-b90b-3279943969dc" CreationDate="2016-06-05T11:27:36.693" UserId="-1" Text="" />
  <row Id="3115" PostHistoryTypeId="2" PostId="742" RevisionGUID="79501dab-82d2-4076-ae96-820128279d12" CreationDate="2016-06-05T11:27:36.693" UserId="-1" Text="" />
  <row Id="3116" PostHistoryTypeId="5" PostId="732" RevisionGUID="9df465d9-5a2e-42e2-924b-e4bdc9b792b9" CreationDate="2016-06-05T11:28:28.093" UserId="105" Comment="added 55 characters in body" Text="Yes, your C64 will work with a 60Hz mains, but programs may behave differently.&#xD;&#xA;&#xD;&#xA;The 9VAC supply is indeed used as a timebase. This is the part of the circuit that does the job:&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;As you can see, it is used to clock the TOD (Time Of Day) realtime clock inside both CIAs (CIA2 depicted here). The CIA can be clocked with 50 or 60Hz and it has a bit inside a register (bit 7 of CONTROL TIMER A) to tell it whether the input frequency is set to 50 or 60Hz. This is used to keep some counters that track tenths of a second, seconds, minutes and hours.&#xD;&#xA;&#xD;&#xA;It is the ROM which is different for PAL and NTSC systems, which actually set or reset this bit accordingly. C64s with a PAL ROM will set this bit. NTSC ROMs will reset it.&#xD;&#xA;&#xD;&#xA;If you plug your PAL-aware C64 into a 60Hz mains, you will notice that applications that use the realtime clock will show the wrong time, updating it too fast. So any application that uses this to time events will trigger them at wrong intervals, which may or may not be problematic.&#xD;&#xA;&#xD;&#xA;This timer is not the same as the VBlank. VBlank will keep updating at the vertical sync frequency your VIC-II is designed for (that is, 50Hz PAL in your system) so I expect games and demos won't tell any difference.&#xD;&#xA;&#xD;&#xA;[According to C64-Wiki][2], the TIME system variable doesn't depend on this TOD (???)&#xD;&#xA;&#xD;&#xA;There is a [great article at CODEBASE 64][3] which explains how you can figure out if your TOD is running at 50 or 60Hz, and configure it the right way.&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/UBMzJ.png&#xD;&#xA;  [2]: https://www.c64-wiki.com/index.php/TIME&#xD;&#xA;  [3]: http://codebase64.org/doku.php?id=base:initialize_tod_clock_on_all_platforms" />
  <row Id="3117" PostHistoryTypeId="2" PostId="743" RevisionGUID="d933d7fe-6331-42ca-9d4d-17eb51b752b7" CreationDate="2016-06-05T11:34:27.513" UserId="-1" Text="" />
  <row Id="3118" PostHistoryTypeId="2" PostId="744" RevisionGUID="b043f816-f214-4de4-8ee4-a9429d3c0c92" CreationDate="2016-06-05T11:34:27.513" UserId="-1" Text="" />
  <row Id="3119" PostHistoryTypeId="2" PostId="745" RevisionGUID="cafacb5f-bcf2-4bb6-9866-0f67a7c15a9c" CreationDate="2016-06-05T11:43:28.630" UserId="-1" Text="" />
  <row Id="3120" PostHistoryTypeId="2" PostId="746" RevisionGUID="e7296a0e-ed61-466f-9ff9-a0534b4e9965" CreationDate="2016-06-05T11:43:28.630" UserId="-1" Text="" />
  <row Id="3121" PostHistoryTypeId="4" PostId="729" RevisionGUID="c7bc15a5-b6ea-42e9-9ff9-027299736727" CreationDate="2016-06-05T12:26:47.743" UserId="107" Comment="edited title" Text="Atari 400 Faulty Keyboard - Some columns work, most do not" />
  <row Id="3122" PostHistoryTypeId="5" PostId="742" RevisionGUID="83e72f5f-3850-4f61-ad7c-623a3fb628d4" CreationDate="2016-06-05T12:38:04.750" UserId="367" Comment="added 65 characters in body" Text="Questions related to PAL video standard (commonly used in Europe)" />
  <row Id="3123" PostHistoryTypeId="24" PostId="742" RevisionGUID="83e72f5f-3850-4f61-ad7c-623a3fb628d4" CreationDate="2016-06-05T12:38:04.750" Comment="Proposed by 367 approved by -1 edit id of 1243" />
  <row Id="3124" PostHistoryTypeId="5" PostId="742" RevisionGUID="3dfe502a-1ee8-43b3-920d-33ffaa3e38c4" CreationDate="2016-06-05T12:38:04.750" UserId="278" Comment="added 5 characters in body" Text="Questions related to the PAL video standard (commonly used in Europe)." />
  <row Id="3125" PostHistoryTypeId="5" PostId="735" RevisionGUID="68964114-910a-4c67-a15f-9c64ccbc5fd6" CreationDate="2016-06-05T12:38:48.533" UserId="367" Comment="added 157 characters in body" Text="Example questions:&#xD;&#xA;&#xD;&#xA;&quot;Can I use an NTSC machine in Europe&quot;&#xD;&#xA;&#xD;&#xA;&quot;Can I plan NTSC games on a PAL machine&quot;&#xD;&#xA;&#xD;&#xA;&quot;Can I convert video in PAL to NTSC or vice versa&quot;" />
  <row Id="3126" PostHistoryTypeId="24" PostId="735" RevisionGUID="68964114-910a-4c67-a15f-9c64ccbc5fd6" CreationDate="2016-06-05T12:38:48.533" Comment="Proposed by 367 approved by -1 edit id of 1236" />
  <row Id="3127" PostHistoryTypeId="5" PostId="735" RevisionGUID="7aaec060-951b-4593-b255-eab6937d2f97" CreationDate="2016-06-05T12:38:48.533" UserId="278" Comment="Improved formatting" Text="Example questions:&#xD;&#xA;&#xD;&#xA;  * Can I use an NTSC machine in Europe?&#xD;&#xA;  * Can I plan NTSC games on a PAL machine?&#xD;&#xA;  * Can I convert video in PAL to NTSC or vice versa?" />
  <row Id="3128" PostHistoryTypeId="5" PostId="741" RevisionGUID="04d0d550-e0a2-4aad-8d29-450eeadeb4b3" CreationDate="2016-06-05T12:39:38.237" UserId="367" Comment="added 152 characters in body" Text="Example questions:&#xD;&#xA;&#xD;&#xA;&quot;Can I use an PAL machine in US&quot;&#xD;&#xA;&#xD;&#xA;&quot;Can I plan PAL games on a NTSC machine&quot;&#xD;&#xA;&#xD;&#xA;&quot;Can I convert video in PAL to NTSC or vice versa&quot;" />
  <row Id="3129" PostHistoryTypeId="24" PostId="741" RevisionGUID="04d0d550-e0a2-4aad-8d29-450eeadeb4b3" CreationDate="2016-06-05T12:39:38.237" Comment="Proposed by 367 approved by -1 edit id of 1242" />
  <row Id="3130" PostHistoryTypeId="5" PostId="741" RevisionGUID="63139d37-92cb-4582-9be6-61ee3085a682" CreationDate="2016-06-05T12:39:38.237" UserId="278" Comment="Improved formatting." Text="Example questions:&#xD;&#xA;&#xD;&#xA;  * Can I use an PAL machine in US?&#xD;&#xA;  * Can I plan PAL games on a NTSC machine?&#xD;&#xA;  * Can I convert video in PAL to NTSC or vice versa?" />
  <row Id="3131" PostHistoryTypeId="5" PostId="745" RevisionGUID="3f961900-12f3-4d87-b667-593e485e576a" CreationDate="2016-06-05T12:40:02.673" UserId="367" Comment="added 137 characters in body" Text="Sample questions:&#xD;&#xA;&#xD;&#xA;&quot;What tapes are supported by Commodore 64's tape drive&quot;&#xD;&#xA;&#xD;&#xA;&quot;How to copy a ZX spectrum tape into a .TAP file on a PC&quot;" />
  <row Id="3132" PostHistoryTypeId="24" PostId="745" RevisionGUID="3f961900-12f3-4d87-b667-593e485e576a" CreationDate="2016-06-05T12:40:02.673" Comment="Proposed by 367 approved by -1 edit id of 1246" />
  <row Id="3133" PostHistoryTypeId="5" PostId="745" RevisionGUID="1bf34817-2901-4a8c-b181-6a418ce1cacf" CreationDate="2016-06-05T12:40:02.673" UserId="278" Comment="Improved formatting." Text="Sample questions:&#xD;&#xA;&#xD;&#xA;  * What tapes are supported by Commodore 64's tape drive?&#xD;&#xA;  * How to copy a ZX spectrum tape into a .TAP file on a PC?" />
  <row Id="3134" PostHistoryTypeId="5" PostId="734" RevisionGUID="60e73729-a5a9-4cdf-8a23-1c44496eb992" CreationDate="2016-06-05T12:40:50.613" UserId="367" Comment="added 55 characters in body" Text="Tag for Silicon Graphics (SGI) machines related matters" />
  <row Id="3135" PostHistoryTypeId="24" PostId="734" RevisionGUID="60e73729-a5a9-4cdf-8a23-1c44496eb992" CreationDate="2016-06-05T12:40:50.613" Comment="Proposed by 367 approved by -1 edit id of 1235" />
  <row Id="3136" PostHistoryTypeId="5" PostId="734" RevisionGUID="18d9be62-eaa6-4b85-a5d1-e59f8ee04412" CreationDate="2016-06-05T12:40:50.613" UserId="278" Comment="Reworded excerpt." Text="For questions related to Silicon Graphics (SGI) machines." />
  <row Id="3137" PostHistoryTypeId="5" PostId="736" RevisionGUID="cfb79a88-1f6b-41be-8562-514be65e1686" CreationDate="2016-06-05T12:41:28.270" UserId="367" Comment="added 83 characters in body" Text="Questions related to NTSC video standard (commonly used in North America and Japan)" />
  <row Id="3138" PostHistoryTypeId="24" PostId="736" RevisionGUID="cfb79a88-1f6b-41be-8562-514be65e1686" CreationDate="2016-06-05T12:41:28.270" Comment="Proposed by 367 approved by -1 edit id of 1237" />
  <row Id="3139" PostHistoryTypeId="5" PostId="736" RevisionGUID="237587cb-6655-4134-ac67-355bf65cfb26" CreationDate="2016-06-05T12:41:28.270" UserId="278" Comment="added 5 characters in body" Text="Questions related to the NTSC video standard (commonly used in North America and Japan)." />
  <row Id="3140" PostHistoryTypeId="5" PostId="737" RevisionGUID="ba0fdbcc-7a95-4817-a979-f8070fb1c930" CreationDate="2016-06-05T12:42:12.783" UserId="367" Comment="added 134 characters in body" Text="Example questions:&#xD;&#xA;&#xD;&#xA;&quot;Can I use a text-only WYSE terminal with my UNIX server&quot;&#xD;&#xA;&#xD;&#xA;&quot;Can I use a VT220 terminal on a VT100 only server&quot;" />
  <row Id="3141" PostHistoryTypeId="24" PostId="737" RevisionGUID="ba0fdbcc-7a95-4817-a979-f8070fb1c930" CreationDate="2016-06-05T12:42:12.783" Comment="Proposed by 367 approved by -1 edit id of 1238" />
  <row Id="3142" PostHistoryTypeId="5" PostId="737" RevisionGUID="ad8f1ca0-0a11-4e4f-afe2-4e4eb8f43616" CreationDate="2016-06-05T12:42:12.783" UserId="278" Comment="Improved formatting." Text="Example questions:&#xD;&#xA;&#xD;&#xA;  * Can I use a text-only WYSE terminal with my UNIX server?&#xD;&#xA;  * Can I use a VT220 terminal on a VT100 only server?" />
  <row Id="3143" PostHistoryTypeId="5" PostId="746" RevisionGUID="022ad91c-d660-461a-9cbe-ec763945d66f" CreationDate="2016-06-05T12:42:48.597" UserId="367" Comment="added 60 characters in body" Text="For data preservation , archiving, back-up related questions" />
  <row Id="3144" PostHistoryTypeId="24" PostId="746" RevisionGUID="022ad91c-d660-461a-9cbe-ec763945d66f" CreationDate="2016-06-05T12:42:48.597" Comment="Proposed by 367 approved by -1 edit id of 1247" />
  <row Id="3145" PostHistoryTypeId="5" PostId="746" RevisionGUID="59f74548-a81a-4e83-a1d9-be96db7bf65f" CreationDate="2016-06-05T12:42:48.597" UserId="278" Comment="Reworded excerpt." Text="For questions related to data preservation, archiving, and backups." />
  <row Id="3146" PostHistoryTypeId="5" PostId="738" RevisionGUID="a7f8dbc9-0cf4-4aaa-b3cf-1244369bbe3b" CreationDate="2016-06-05T12:45:29.397" UserId="367" Comment="added 97 characters in body" Text="Questions related to Terminals - possibly UNIX console terminals such as WYSE, VT100 and the like" />
  <row Id="3147" PostHistoryTypeId="24" PostId="738" RevisionGUID="a7f8dbc9-0cf4-4aaa-b3cf-1244369bbe3b" CreationDate="2016-06-05T12:45:29.397" Comment="Proposed by 367 approved by -1 edit id of 1239" />
  <row Id="3148" PostHistoryTypeId="5" PostId="738" RevisionGUID="ecd238a5-f0a2-44a3-a422-656097bca787" CreationDate="2016-06-05T12:45:29.397" UserId="278" Comment="Removed UNIX (terminals are independent of OS) and added Teletype." Text="For questions related to terminals such as WYSE, VT100 and Teletype." />
  <row Id="3149" PostHistoryTypeId="5" PostId="739" RevisionGUID="d4f4337f-f6d5-4188-8a7b-0fbcefbaedb0" CreationDate="2016-06-05T12:46:06.270" UserId="367" Comment="added 178 characters in body" Text="Example questions:&#xD;&#xA;&#xD;&#xA;&quot;Can I upgrade my m68k processor in Amiga 500&quot;&#xD;&#xA;&#xD;&#xA;&quot;What instruction set does m68k use&quot;&#xD;&#xA;&#xD;&#xA;&quot;How to emulate floating point instructions without FPU on a m68k&quot;" />
  <row Id="3150" PostHistoryTypeId="24" PostId="739" RevisionGUID="d4f4337f-f6d5-4188-8a7b-0fbcefbaedb0" CreationDate="2016-06-05T12:46:06.270" Comment="Proposed by 367 approved by -1 edit id of 1240" />
  <row Id="3151" PostHistoryTypeId="5" PostId="739" RevisionGUID="c5e8d152-92b8-436e-b5b7-989247035a3c" CreationDate="2016-06-05T12:46:06.270" UserId="278" Comment="Improved formatting." Text="Example questions:&#xD;&#xA;&#xD;&#xA;  * Can I upgrade my m68k processor in Amiga 500?&#xD;&#xA;  * What instruction set does m68k use?&#xD;&#xA;  * How to emulate floating point instructions without FPU on a m68k?" />
  <row Id="3152" PostHistoryTypeId="5" PostId="730" RevisionGUID="0a46be9f-2fc7-4a8c-94d6-4178834cfa08" CreationDate="2016-06-05T12:47:29.070" UserId="367" Comment="added 256 characters in body" Text="Example questions may include:&#xD;&#xA;&#xD;&#xA;&quot;What is the difference between narrow,wide,ultra-wide scsi&quot;&#xD;&#xA;&#xD;&#xA;&quot;Why does SCSI require termination and how to configure it&quot;&#xD;&#xA;&#xD;&#xA;&quot;How to connect SCSI devices to an Amiga&quot;&#xD;&#xA;&#xD;&#xA;&quot;What SCSI adapters are supported in SGI machines&quot;" />
  <row Id="3153" PostHistoryTypeId="24" PostId="730" RevisionGUID="0a46be9f-2fc7-4a8c-94d6-4178834cfa08" CreationDate="2016-06-05T12:47:29.070" Comment="Proposed by 367 approved by -1 edit id of 1232" />
  <row Id="3154" PostHistoryTypeId="5" PostId="730" RevisionGUID="68a30fcc-4cc5-497e-82bf-de0e218fd7f8" CreationDate="2016-06-05T12:47:29.070" UserId="278" Comment="Improved formatting." Text="Example questions may include:&#xD;&#xA;&#xD;&#xA;  * What is the difference between narrow, wide, and ultra-wide SCSI?&#xD;&#xA;  * Why does SCSI require termination and how to configure it?&#xD;&#xA;  * How to connect SCSI devices to an Amiga?&#xD;&#xA;  * What SCSI adapters are supported in SGI machines?" />
  <row Id="3155" PostHistoryTypeId="5" PostId="731" RevisionGUID="8a77e76b-a460-43bc-a08f-0b07ab969b11" CreationDate="2016-06-05T12:47:45.523" UserId="367" Comment="added 35 characters in body" Text="Questions related to SCSI interface" />
  <row Id="3156" PostHistoryTypeId="24" PostId="731" RevisionGUID="8a77e76b-a460-43bc-a08f-0b07ab969b11" CreationDate="2016-06-05T12:47:45.523" Comment="Proposed by 367 approved by -1 edit id of 1233" />
  <row Id="3157" PostHistoryTypeId="5" PostId="731" RevisionGUID="a484f3b1-cc52-4865-80d3-e7d4b4c4241d" CreationDate="2016-06-05T12:47:45.523" UserId="278" Comment="added 8 characters in body" Text="For questions related to the SCSI interface" />
  <row Id="3158" PostHistoryTypeId="5" PostId="744" RevisionGUID="0e413d1a-273a-4d8a-aa96-47e73eb71483" CreationDate="2016-06-05T12:48:40.477" UserId="367" Comment="added 74 characters in body" Text="Use this tag for VGA signal related questions, signal sources or receivers" />
  <row Id="3159" PostHistoryTypeId="24" PostId="744" RevisionGUID="0e413d1a-273a-4d8a-aa96-47e73eb71483" CreationDate="2016-06-05T12:48:40.477" Comment="Proposed by 367 approved by -1 edit id of 1245" />
  <row Id="3160" PostHistoryTypeId="5" PostId="744" RevisionGUID="d95e954c-e160-49a8-9111-7f872e4d6d6d" CreationDate="2016-06-05T12:48:40.477" UserId="278" Comment="Reworded excerpt." Text="For questions related to VGA signals, sources or recievers" />
  <row Id="3161" PostHistoryTypeId="5" PostId="740" RevisionGUID="7be71a5b-8748-4c86-a324-6087c2b4e76f" CreationDate="2016-06-05T12:49:21.587" UserId="367" Comment="added 123 characters in body" Text="Questions about Motorola 68k (68000 series) processors commonly used in Amiga, Atari ST, Machintosh, Sharp X68000 computers" />
  <row Id="3162" PostHistoryTypeId="24" PostId="740" RevisionGUID="7be71a5b-8748-4c86-a324-6087c2b4e76f" CreationDate="2016-06-05T12:49:21.587" Comment="Proposed by 367 approved by -1 edit id of 1241" />
  <row Id="3163" PostHistoryTypeId="5" PostId="740" RevisionGUID="3376f83a-1d28-4dc9-bb0d-2cfe27a21905" CreationDate="2016-06-05T12:49:21.587" UserId="278" Comment="added 8 characters in body" Text="For questions about Motorola 68k (68000 series) processors commonly used in Amiga, Atari ST, Macintosh, and Sharp X68000 computers." />
  <row Id="3164" PostHistoryTypeId="5" PostId="743" RevisionGUID="d1f55197-4151-4a63-9091-bfbbf73d7dea" CreationDate="2016-06-05T12:50:06.650" UserId="367" Comment="added 119 characters in body" Text="Example questions:&#xD;&#xA;&#xD;&#xA;&quot;How to connect my xxx computer to a VGA monitor&quot;&#xD;&#xA;&#xD;&#xA;&quot;How can I record video from VGA video card&quot;" />
  <row Id="3165" PostHistoryTypeId="24" PostId="743" RevisionGUID="d1f55197-4151-4a63-9091-bfbbf73d7dea" CreationDate="2016-06-05T12:50:06.650" Comment="Proposed by 367 approved by -1 edit id of 1244" />
  <row Id="3166" PostHistoryTypeId="5" PostId="743" RevisionGUID="bba967ef-9847-42b6-b747-253ede33f258" CreationDate="2016-06-05T12:50:06.650" UserId="278" Comment="Improved formatting." Text="Example questions:&#xD;&#xA;&#xD;&#xA;  * How to connect my *model* computer to a VGA monitor?&#xD;&#xA;  * How can I record video from VGA video card?" />
  <row Id="3167" PostHistoryTypeId="5" PostId="733" RevisionGUID="2029c732-b52f-459a-8427-81f1a8594fdd" CreationDate="2016-06-05T12:50:45.993" UserId="367" Comment="added 262 characters in body" Text="Example questions may include:&#xD;&#xA;&#xD;&#xA;&quot;What is maximum CPU module (PIMM) supported by SGI Fuel&quot;&#xD;&#xA;&#xD;&#xA;&quot;How to install IRIX on an Indy machine without CD-ROM drive&quot;&#xD;&#xA;&#xD;&#xA;&quot;How to power a Fuel machine using PC ATX power supply&quot;&#xD;&#xA;&#xD;&#xA;&quot;What monitor do I need for an SGI machine&quot;" />
  <row Id="3168" PostHistoryTypeId="24" PostId="733" RevisionGUID="2029c732-b52f-459a-8427-81f1a8594fdd" CreationDate="2016-06-05T12:50:45.993" Comment="Proposed by 367 approved by -1 edit id of 1234" />
  <row Id="3169" PostHistoryTypeId="5" PostId="733" RevisionGUID="132663fa-493a-4589-926c-f9c1fe386514" CreationDate="2016-06-05T12:50:45.993" UserId="278" Comment="Improved formatting." Text="Example questions may include:&#xD;&#xA;&#xD;&#xA;  * What is maximum CPU module (PIMM) supported by SGI Fuel?&#xD;&#xA;  * How to install IRIX on an Indy machine without CD-ROM drive?&#xD;&#xA;  * How to power a Fuel machine using PC ATX power supply?&#xD;&#xA;  * What monitor do I need for an SGI machine?" />
  <row Id="3170" PostHistoryTypeId="5" PostId="245" RevisionGUID="d541cb02-c74a-4848-b139-4cf79582e821" CreationDate="2016-06-05T12:50:55.370" UserId="367" Comment="fixed typo" Text="Questions about the MOS 6526 CIA (Complex Interface Adapter) chip, used in e.g. the Commodore 64 home computer and the Commodore 1570/1571 floppy drives. " />
  <row Id="3171" PostHistoryTypeId="24" PostId="245" RevisionGUID="d541cb02-c74a-4848-b139-4cf79582e821" CreationDate="2016-06-05T12:50:55.370" Comment="Proposed by 367 approved by 278 edit id of 1248" />
  <row Id="3172" PostHistoryTypeId="2" PostId="747" RevisionGUID="2975d9b2-c1ce-41cd-a128-8404c93eaf0a" CreationDate="2016-06-05T13:20:47.543" UserId="367" Text="I have C64, C128, SD2IEC, 1541-U2, 1541-II and a 1581 - that makes for 4 drives.&#xD;&#xA;Looking at the drives, those only allow 4 device ID settings (8,9,10,11), but looking at IEC bus documentation, it seems that practical limit is about 8 devices (given 40mA current drain per device).&#xD;&#xA;&#xD;&#xA;Is there any way to connect more than those 4 devices at once ?&#xD;&#xA;&#xD;&#xA;I'm not trying to hook up whole 8 devices, but possibly a 1571 or/and CMD FD-2000.&#xD;&#xA;&#xD;&#xA;Given that devices seem to only have 4 ID settings - would my approach require hardware modifications to enable additional ID's ?&#xD;&#xA;&#xD;&#xA;* I am aware of devices such as IEC switcher, which I do not have, I'm looking for a &quot;permanently connected&quot; solution with assigned addresses." />
  <row Id="3173" PostHistoryTypeId="1" PostId="747" RevisionGUID="2975d9b2-c1ce-41cd-a128-8404c93eaf0a" CreationDate="2016-06-05T13:20:47.543" UserId="367" Text="How many IEC drives can I connect to a C64 / C128?" />
  <row Id="3174" PostHistoryTypeId="3" PostId="747" RevisionGUID="2975d9b2-c1ce-41cd-a128-8404c93eaf0a" CreationDate="2016-06-05T13:20:47.543" UserId="367" Text="&lt;commodore-64&gt;&lt;disk-drive&gt;" />
  <row Id="3175" PostHistoryTypeId="2" PostId="748" RevisionGUID="3584e599-81f5-494a-a716-1c37470299c2" CreationDate="2016-06-05T16:23:35.163" UserId="439" Text="There are a few bios projects circling around the Z80 SBC homebrew scene that grew out of Andrew Lynch's N8___ computer project (name redacted as Andrew no longer wishes his radio call sign associated with the projects). I've found the developers to be exceptionally helpful when I was cluelessly building my [Zeta SBC V2](http://www.malinov.com/Home/sergeys-projects/zeta-sbc-v2 &quot;Zeta SBC V2&quot;) (which, incidentally, has RAM banking galore, should you wish to build hardware).&#xD;&#xA;&#xD;&#xA;The BIOS/BDOS projects include the [RomWBW Firmware](https://www.retrobrewcomputers.org/doku.php?id=software:firmwareos:romwbw:start &quot;RomWBW Firmware&quot;) and [UNA BIOS](https://www.retrobrewcomputers.org/doku.php?id=software:firmwareos:una:start &quot;UNA BIOS&quot;)." />
  <row Id="3176" PostHistoryTypeId="2" PostId="749" RevisionGUID="b0e648d5-84ad-4e26-806b-8bdda9635199" CreationDate="2016-06-05T20:43:35.060" UserId="413" Text="The cost of buying a withdrawn standard should be fairly minimal.  Yet the standards body still sells it at a price that is non-competitive.&#xD;&#xA;&#xD;&#xA;PDF/HTML	$187.0 (the current price for a withdrawn standard)&#xD;&#xA;&#xD;&#xA;" />
  <row Id="3177" PostHistoryTypeId="1" PostId="749" RevisionGUID="b0e648d5-84ad-4e26-806b-8bdda9635199" CreationDate="2016-06-05T20:43:35.060" UserId="413" Text="Need information on a withdrawn standard. Why are discontinued standards not freely avfailable?" />
  <row Id="3178" PostHistoryTypeId="3" PostId="749" RevisionGUID="b0e648d5-84ad-4e26-806b-8bdda9635199" CreationDate="2016-06-05T20:43:35.060" UserId="413" Text="&lt;hardware&gt;" />
  <row Id="3179" PostHistoryTypeId="2" PostId="750" RevisionGUID="407c21bf-44c5-4c2f-8adc-f9566a41a1ad" CreationDate="2016-06-05T21:07:05.547" UserId="780" Text="if1Bis (https://sites.google.com/site/interface1bis/) has, amongst numerous other goodies also a ps/2 port supporting keyboards and a mouse. &#xD;&#xA;&#xD;&#xA;The device mimicks an IF/1 and supports USB connection to a PC as well as a nice IF/1 file system replica on SD card." />
  <row Id="3180" PostHistoryTypeId="10" PostId="749" RevisionGUID="1717dad2-9a5c-4705-94a2-b6745be7848d" CreationDate="2016-06-05T21:50:38.897" UserId="47" Comment="102" Text="{&quot;Voters&quot;:[{&quot;Id&quot;:79,&quot;DisplayName&quot;:&quot;Stephen Kitt&quot;},{&quot;Id&quot;:367,&quot;DisplayName&quot;:&quot;Kuba Tyszko&quot;},{&quot;Id&quot;:47,&quot;DisplayName&quot;:&quot;Robert Cartaino&quot;}]}" />
  <row Id="3181" PostHistoryTypeId="5" PostId="750" RevisionGUID="085feccc-fc6d-4624-a2d6-95a2d4661e0f" CreationDate="2016-06-05T22:52:16.083" UserId="780" Comment="added 89 characters in body" Text="if1Bis (https://sites.google.com/site/interface1bis/) has, amongst numerous other goodies also a ps/2 port supporting keyboards and a mouse. &#xD;&#xA;&#xD;&#xA;The device mimicks an IF/1 and supports USB connection to a PC as well as a nice IF/1 file system replica on SD card. I have one myself (don't use the PS/2 keyboard, though) and can thoroughly recommend it." />
  <row Id="3182" PostHistoryTypeId="5" PostId="747" RevisionGUID="5fd61b6c-1e24-42ba-802a-f378b76e5851" CreationDate="2016-06-06T03:12:01.237" UserId="367" Comment="added 174 characters in body" Text="I have two C64's, a C128, and as for drives: SD2IEC, 1541-U2, 1541-II and a 1581 - that makes for 4 devices.&#xD;&#xA;Looking at the drives, those only allow 4 device ID settings (8,9,10,11), but according to IEC bus documentation, it seems that practical limit is about 8 devices (given 40mA current drain per device).&#xD;&#xA;&#xD;&#xA;Is there any way to connect more than those 4 devices at once ?&#xD;&#xA;&#xD;&#xA;I'm not trying to hook up whole 8 devices, but possibly a 1571 or/and CMD FD-2000.&#xD;&#xA;&#xD;&#xA;Given that devices seem to only have 4 ID settings - would my approach require hardware modifications to enable additional ID's ?&#xD;&#xA;&#xD;&#xA;I vaguely recall that some drives (aside from 1541-u2 and sd2iec) allow for software ID change, but I think that doesn't last through reboots.&#xD;&#xA;&#xD;&#xA;I am aware of devices such as IEC switcher, which I do not have, I'm looking for a &quot;permanently connected&quot; solution with assigned addresses." />
  <row Id="3183" PostHistoryTypeId="4" PostId="747" RevisionGUID="47494414-9a55-4f59-8094-b321b4a1737e" CreationDate="2016-06-06T04:58:43.543" UserId="367" Comment="edited title" Text="How many IEC devices can I connect to a C64 / C128?" />
  <row Id="3184" PostHistoryTypeId="2" PostId="751" RevisionGUID="54d856d4-0383-4c74-abf1-35ca071f5023" CreationDate="2016-06-06T05:19:32.333" UserId="1867" Text="No tools or fluids method, takes about a minute or two all total:&#xD;&#xA;&#xD;&#xA;Unscrew or unclick the retaining plate on the bottom, remove the ball, then find the two or three rollers.  Scratch off the accretion on the rollers with your sideways fingernail, (so the roller cannot turn more than a few degrees), turning each roller as needed to get all 360 degrees.  The lint-like stuff tends to come off in short strands.  (The ball is virtually never significantly dirty, leave it be.)  Shake the resulting detritus out of the mouse, then put in the ball and put on the plate.  &#xD;&#xA;&#xD;&#xA;(Alcohol dries out rubber and plastic, and it's pointless to be sterilize a mouse ball.  The mouse ball is like a tire, that's going to pick up lint and moisture by design.)" />
  <row Id="3185" PostHistoryTypeId="5" PostId="751" RevisionGUID="d67ab52e-c822-4609-bb04-f125ae6e943b" CreationDate="2016-06-06T05:40:25.517" UserId="1867" Comment="Clarified language." Text="No tools or fluids method, takes about a minute or two all total:&#xD;&#xA;&#xD;&#xA;Unscrew or unclick the retaining plate on the bottom, remove the ball, then find the two or three rollers.  Scratch off the accretion on each  roller with your sideways fingernail, (so the roller cannot turn more than a few degrees), turning as needed to get all 360 degrees.  The lint-like stuff tends to come off in short strands.  (The ball is virtually never significantly dirty, leave it be.)  Shake the resulting detritus out of the mouse, then pop the ball back in and put on the plate.  &#xD;&#xA;&#xD;&#xA;(Alcohol dries out rubber and plastic, and it's pointless to sterilize a mouse ball.  The mouse ball is like a tire, it picks up lint and moisture by design.)" />
  <row Id="3186" PostHistoryTypeId="5" PostId="740" RevisionGUID="ccb11295-fcce-438b-80cb-7b2510ad9ba7" CreationDate="2016-06-06T07:49:13.190" UserId="780" Comment="added 12 characters in body" Text="For questions about Motorola 68k (68000 series) processors commonly used in Amiga, Atari ST, Macintosh, Sinclair QL and Sharp X68000 computers." />
  <row Id="3187" PostHistoryTypeId="24" PostId="740" RevisionGUID="ccb11295-fcce-438b-80cb-7b2510ad9ba7" CreationDate="2016-06-06T07:49:13.190" Comment="Proposed by 780 approved by 56, 276 edit id of 1249" />
  <row Id="3188" PostHistoryTypeId="2" PostId="752" RevisionGUID="90ccc4a4-75fc-4c3f-9993-ab7c758c889e" CreationDate="2016-06-06T08:12:45.423" UserId="780" Text="I would guess there is a much smaller market for memorabilia in retro computing as there is for hardware - You cannot do quite as much with a flag than you can with a piece of hardware. On the other hand, non-hardware stuff has generally much earlier met the dustbin than real hardware, so it should be considerably more rare.&#xD;&#xA;&#xD;&#xA;Price for non-hardware stuff is definitely much more based on meeting the right buyer in the right mood for buying at the right time. I, for example, have a quite decent retro collection, but have never thought (and don't think I ever will) of spending money on anything else than hardware. &#xD;&#xA;&#xD;&#xA;In case you want to sell - I guess neither eBay nor auction houses would be the right place - Material like your example are too rare and too specialized for selling through generic channels IMHO (It definitively doesn't hurt looking, but don't have high hopes to get real guidance from there). Better try and ask in specialized Apple retro forums - a lot of them have &quot;for sale&quot; areas - whether someone would be interested to buy and what they would be willing to spend. I guess the proposal to try and contact the original manufacturer is a very useful one as well." />
  <row Id="3189" PostHistoryTypeId="5" PostId="752" RevisionGUID="9f6dbda7-3f79-4054-8b74-8624aa08d3fe" CreationDate="2016-06-06T09:04:31.697" UserId="780" Comment="added 298 characters in body" Text="I would guess there is a much smaller market for memorabilia in retro computing as there is for hardware - Things you can use your flag for are somewhat limited - A piece of (working) hardware promises basically unlimited fun. On the other hand, non-hardware stuff has generally much earlier met the dustbin than real hardware, so it should be considerably more rare.&#xD;&#xA;&#xD;&#xA;Price for non-hardware stuff is definitely much more based on meeting the right buyer in the right buying mood at the right time. I, for example, have a quite decent retro collection, but have never thought (and don't think I ever will) of spending money on anything else but hardware. Just blatantly assuming everyone else might be like me, I'd say the typical retro computing guy will consider such memorabilia a nice side dish, but not the main course he would be spending considerable money on. You are searching for an Apple memorabilia collector, not a retro computing hobbyist.&#xD;&#xA;&#xD;&#xA;In case you want to sell - I guess neither eBay nor auction houses would be the right place - Material like your example are too rare and too specialized for selling through generic channels IMHO (It definitively doesn't hurt looking, but don't have high hopes to get real guidance from there). Better try and ask in specialized Apple retro forums - a lot of them have &quot;for sale&quot; areas - whether someone would be interested to buy and what they would be willing to spend. I guess the proposal to try and contact the original manufacturer is a very useful one as well." />
  <row Id="3190" PostHistoryTypeId="2" PostId="753" RevisionGUID="e565dbc8-aa0e-4486-a1f4-54fad41e7c39" CreationDate="2016-06-06T10:14:09.170" UserId="276" Comment="Created body" Text="Questions regarding all versions of MS-DOS.  &#xD;&#xA;From the first release by Microsoft in 1981 to the versions underlying earlier versions of Windows." />
  <row Id="3191" PostHistoryTypeId="2" PostId="754" RevisionGUID="8e5255e5-9007-4d7b-9725-90f10003f755" CreationDate="2016-06-06T10:14:09.170" UserId="276" Text="For questions regarding MS-DOS, the Microsoft Disk Operating System" />
  <row Id="3193" PostHistoryTypeId="5" PostId="747" RevisionGUID="5190ec56-937c-4ef7-b18f-0875fde68c51" CreationDate="2016-06-06T12:40:46.630" UserId="367" Comment="added 37 characters in body" Text="I have two C64's, a C128, and as for drives: SD2IEC, 1541-U2, 1541-II and a 1581 - that makes for 4 devices.&#xD;&#xA;Looking at the drives, those only allow 4 device ID settings (8,9,10,11), but according to IEC bus documentation, it seems that practical limit is about 8 devices (given 40mA current drain per device).&#xD;&#xA;&#xD;&#xA;Is there any way to connect more than those 4 devices at once ?&#xD;&#xA;&#xD;&#xA;I'm not trying to hook up whole 8 devices, but possibly a 1571 or/and CMD FD-2000.&#xD;&#xA;&#xD;&#xA;Given that devices seem to only have 4 ID settings - would my approach require hardware modifications to enable additional ID's ?&#xD;&#xA;&#xD;&#xA;I vaguely recall that some drives (aside from 1541-u2 and sd2iec) allow for software ID change, but even if that let me go beyond ID 11, I think that doesn't last through reboots.&#xD;&#xA;&#xD;&#xA;I am aware of devices such as IEC switcher, which I do not have, I'm looking for a &quot;permanently connected&quot; solution with assigned addresses." />
  <row Id="3194" PostHistoryTypeId="5" PostId="633" RevisionGUID="f5cfead0-05a9-4e97-9096-e8023513323f" CreationDate="2016-06-06T14:25:23.673" UserId="175" Comment="Correction based on discussion, I was wrong" Text="&lt;s&gt;Real Mac/IIgs 800k floppy disks cannot be written from Linux because &lt;/s&gt;Apple used [GCR](https://en.wikipedia.org/wiki/Group_code_recording) to get 800k on the disk instead of the 720k that the PC did. You need a [Superdrive](https://en.wikipedia.org/wiki/Macintosh_External_Disk_Drive) to write Mac/IIgs format 800k disks. &#xD;&#xA;&#xD;&#xA;However as @Mark pointed out you can write 800k disk images to 1440k disks from a PC and a Mac with a Superdrive will read/boot them since the disk images are bits and not sectors. [Mac GUI](http://macgui.com/downloads/?cat_id=340) has 800k and 1440k floppy disk images for System 6 and System 7." />
  <row Id="3195" PostHistoryTypeId="2" PostId="755" RevisionGUID="96559492-12c9-464e-a1b6-e47d66dbd501" CreationDate="2016-06-06T16:23:03.960" UserId="637" Text="The best thing I ever found for cleaning mouse balls is denim. The texture seems to be perfect. New denim might be an issue due to the fuzzy fibres getting on the ball.&#xD;&#xA;&#xD;&#xA;Don't use anything sharp to clean the interior plastic rollers as the scratched plastic will collect dirt more quickly and extreme scratches could cause uneven rolling.&#xD;&#xA;&#xD;&#xA;Retr0brite will remove the yellowing of the exterior but it will yellow again if exposed to UV or heat. Of course you can also retr0brite it again if that happens." />
  <row Id="3196" PostHistoryTypeId="2" PostId="756" RevisionGUID="126289f0-41fc-48fe-9e7b-92acbcd330fd" CreationDate="2016-06-06T18:06:52.023" UserId="1872" Text="Where can I find an external floppy disk drive?&#xD;&#xA;&#xD;&#xA;I have some data I would like to retrieve from a really old 8-inch (200 mm) floppy disk, but have no working computer than has a drive to read it.&#xD;&#xA;&#xD;&#xA;Are external drives for that size still sold? Where can I find one? Either Linux or Windows solutions are okay with me." />
  <row Id="3197" PostHistoryTypeId="1" PostId="756" RevisionGUID="126289f0-41fc-48fe-9e7b-92acbcd330fd" CreationDate="2016-06-06T18:06:52.023" UserId="1872" Text="Where can I find an external floppy (the very old variety) disk drive?" />
  <row Id="3198" PostHistoryTypeId="3" PostId="756" RevisionGUID="126289f0-41fc-48fe-9e7b-92acbcd330fd" CreationDate="2016-06-06T18:06:52.023" UserId="1872" Text="&lt;floppy-disk&gt;&lt;disk-drive&gt;" />
  <row Id="3199" PostHistoryTypeId="2" PostId="757" RevisionGUID="1c5fd2e3-8427-4a7f-a6c6-0d8bb268f433" CreationDate="2016-06-06T18:25:06.643" UserId="79" Text="As far as I'm aware there is no source of new 8&quot; drives.&#xD;&#xA;&#xD;&#xA;If you do manage to find a working drive, there are a couple of options to connect it to a modern PC over USB:&#xD;&#xA;&#xD;&#xA;* the [KryoFlux][1] floppy controller, which has [successfully been used to connect an 8&quot; drive][2];&#xD;&#xA;* the [DiscFerret][3], which is also supposed to support 8&quot; drives, but is harder to find for purchase.&#xD;&#xA;&#xD;&#xA;As well as the 8&quot; drive, you'll need adapter cables to connect it; these are the connectors you'd use to adapt it for use in an old PC (with a 5.25&quot; drive connector).&#xD;&#xA;&#xD;&#xA;You could also use an old PC to read the floppies, or simply contact a recovery service. Herb Johnson has a [useful web page][4] with lots more detail; the Archive Team also maintains a [page on rescuing floppy disks][5].&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://kryoflux.com/&#xD;&#xA;  [2]: http://www.vcfed.org/forum/showthread.php?20970-Hooking-up-an-8-quot-floppy-to-a-modern-PC&#xD;&#xA;  [3]: http://www.discferret.com/wiki/DiscFerret&#xD;&#xA;  [4]: http://www.retrotechnology.com/herbs_stuff/s_drives_howto.html&#xD;&#xA;  [5]: http://archiveteam.org/index.php?title=Rescuing_Floppy_Disks" />
  <row Id="3200" PostHistoryTypeId="5" PostId="47" RevisionGUID="ada98e24-2430-43c2-a797-37eaec35cef6" CreationDate="2016-06-06T18:25:49.270" UserId="367" Comment="added 216 characters in body" Text="Sample questions:&#xD;&#xA;&#xD;&#xA;&quot;Which Commodore 64 emulator offers better compatibility for game ......&quot;&#xD;&#xA;&#xD;&#xA;&quot;What platforms are supported by MAME&quot;&#xD;&#xA;&#xD;&#xA;&quot;How does an ..... emulator handle 50Hz (PAL) games on a 60Hz (VGA) display&quot;" />
  <row Id="3201" PostHistoryTypeId="24" PostId="47" RevisionGUID="ada98e24-2430-43c2-a797-37eaec35cef6" CreationDate="2016-06-06T18:25:49.270" Comment="Proposed by 367 approved by 56, -1 edit id of 1250" />
  <row Id="3202" PostHistoryTypeId="5" PostId="47" RevisionGUID="799dfbf1-1ef6-4460-b372-03127fd9d15b" CreationDate="2016-06-06T18:25:49.270" UserId="278" Comment="added 6 characters in body" Text="Sample questions:&#xD;&#xA;&#xD;&#xA;  * Which Commodore 64 emulator offers better compatibility for game *game*?&#xD;&#xA;  * What platforms are supported by MAME?&#xD;&#xA;  * How does a *model* emulator handle 50Hz (PAL) games on a 60Hz (VGA) display?" />
  <row Id="3203" PostHistoryTypeId="2" PostId="758" RevisionGUID="37ba8b83-37de-4385-95d9-dd8484e8d7da" CreationDate="2016-06-06T20:12:52.227" UserId="637" Text="Normally Commodore drives are device numbers 8, 9, 10, and 11, and drives 0 and 1, giving 8 drives, but some newer products support device numbers up to 31 (although 31 is reserved for UNTALK/UNLISTEN command), giving 23 devices with two drives each for a theoretical total of 46 drives.&#xD;&#xA;&#xD;&#xA;Unfortunately, the 7406 chip on the IEC bus can only handle 40 mA of load current (5 mA per device), limiting the bus to 8 devices. It may be possible to increase this using both drive numbers 0 and 1.&#xD;&#xA;&#xD;&#xA;Edit: An example of a device which could achieve this is the 64HDD." />
  <row Id="3204" PostHistoryTypeId="2" PostId="759" RevisionGUID="dab626ad-73bd-40a7-941e-e190d752732c" CreationDate="2016-06-06T20:40:09.580" UserId="1875" Text="I'm thinking about turning my RaspberryPi into a retro gaming station. I found some interesting projects like [retropie][1] out there to accomplish this. &#xD;&#xA;&#xD;&#xA;But I keep wondering: What is the legal way to get gaming ROMs? Just downloading them somewhere sounds like piracy to me. The retropie documentation seems to agree on that:&#xD;&#xA;&#xD;&#xA;&gt; Due to the nature/complexity of Copyright/Intellectual Property Rights Law, which differs significantly from Country to Country, ROMs cannot be provided with RetroPie and must be provided by the user. You should only have ROMs of games that you own. &#xD;&#xA;&#xD;&#xA;So is downloading old gaming ROMs illegal? If yes, what the legal way to get or create them?&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://retropie.org.uk/" />
  <row Id="3205" PostHistoryTypeId="1" PostId="759" RevisionGUID="dab626ad-73bd-40a7-941e-e190d752732c" CreationDate="2016-06-06T20:40:09.580" UserId="1875" Text="Finding/creating gaming ROMs" />
  <row Id="3206" PostHistoryTypeId="3" PostId="759" RevisionGUID="dab626ad-73bd-40a7-941e-e190d752732c" CreationDate="2016-06-06T20:40:09.580" UserId="1875" Text="&lt;emulation&gt;&lt;gaming&gt;" />
  <row Id="3207" PostHistoryTypeId="2" PostId="760" RevisionGUID="81925e22-8c1d-4a7e-886f-5eabd4742022" CreationDate="2016-06-06T22:49:53.723" UserId="367" Text="I'm assuming your question is about ROM's (cartridge content) with games, if you mean ROM's that are built into consoles providing their internal proprietary OS and software - that requires pretty advanced electronics skills to read them, and owning the console yourself.&#xD;&#xA;&#xD;&#xA;There are exactly 2 legal way of &quot;getting ROM's&quot; that I can think of:&#xD;&#xA;&#xD;&#xA; 1. Buy an original game and read the ROM chip yourself (needs some electronics knowledge)&#xD;&#xA;&#xD;&#xA; 2. Find who owns the copyright and ask them for a license (that might be rather hard)&#xD;&#xA;&#xD;&#xA;If you already own a game on the cartridge, it's usually acceptable to just go and download the corresponding ROM from the internet (makes is equal to reading the ROM chip yourself), but you're still supporting the website that delivers unlicensed software.&#xD;&#xA;&#xD;&#xA;Chances are that the game you want is so old the manufacturer/publisher no longer exists and has no interest in the game,(but don't assume that due to age of the game alone, recent example is &quot;shadow of the beast&quot; game released for PS4).&#xD;&#xA;&#xD;&#xA;In retrogaming community it's widely accepted to simply download games from the web, most games ever released for platforms such as C64, Amiga (can't speak for other) are freely available (although still of questionable legal nature).&#xD;&#xA;&#xD;&#xA;BUT don't forget that copyrights usually expire after 90-120 years (this is not the same as patents expiring after 50)." />
  <row Id="3208" PostHistoryTypeId="2" PostId="761" RevisionGUID="32ecc6a8-8539-4e38-a44a-cb7ff8a409f3" CreationDate="2016-06-06T22:52:32.497" UserId="105" Text="Unless the copyright holder has given permission, **yes, it is illegal** to download and use a ROM, even if you have the physical ROM (note that this is different from using your actual ROM still in the cartridge). it is also illegal to download a ROM with the promise of erasing it from your hard disk in 24 hours. Quoting from the [Nintendo Legal Information webpage][1]:&#xD;&#xA;&#xD;&#xA;&gt; Can I Download a Nintendo ROM from the Internet if I Already Own the&#xD;&#xA;&gt; Authentic Game?&#xD;&#xA;&gt; &#xD;&#xA;&gt; There is a good deal of misinformation on the Internet regarding the&#xD;&#xA;&gt; backup/archival copy exception. It is not a &quot;second copy&quot; rule and is&#xD;&#xA;&gt; often mistakenly cited for the proposition that if you have one lawful&#xD;&#xA;&gt; copy of a copyrighted work, you are entitled to have a second copy of&#xD;&#xA;&gt; the copyrighted work even if that second copy is an infringing copy.&#xD;&#xA;&gt; The backup/archival copy exception is a very narrow limitation&#xD;&#xA;&gt; relating to a copy being made by the rightful owner of an authentic&#xD;&#xA;&gt; game to ensure he or she has one in the event of damage or destruction&#xD;&#xA;&gt; of the authentic. Therefore, whether you have an authentic game or&#xD;&#xA;&gt; not, or whether you have possession of a Nintendo ROM for a limited&#xD;&#xA;&gt; amount of time, i.e. 24 hours, it is illegal to download and play a&#xD;&#xA;&gt; Nintendo ROM from the Internet.&#xD;&#xA;&#xD;&#xA;In fact, the whole FAQ at that page answers many questions regarding the use of emulators and ROMs for vintage systems.&#xD;&#xA;&#xD;&#xA;[The MAME page has a section with links to legally downloadable ROMs][2], whose creators have granted permission to distribute them. For your peace of mind, you can start there.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://www.nintendo.com/corp/legal.jsp#download_rom&#xD;&#xA;  [2]: http://mamedev.org/roms/" />
  <row Id="3209" PostHistoryTypeId="5" PostId="760" RevisionGUID="016f17be-ad2f-45f0-9d47-00175702a55e" CreationDate="2016-06-06T22:57:15.857" UserId="367" Comment="added 193 characters in body" Text="I'm assuming your question is about ROM's (cartridge content) with games, if you mean ROM's that are built into consoles providing their internal proprietary OS and software - that requires pretty advanced electronics skills to read them, and owning the console yourself.&#xD;&#xA;&#xD;&#xA;There is exactly 1 way1 of &quot;getting ROM's&quot; that I can think of:&#xD;&#xA; &#xD;&#xA;&gt; Find who owns the copyright and ask them for a license (that might be&#xD;&#xA;&gt; rather hard)&#xD;&#xA;&#xD;&#xA;If you already own a game on the cartridge, it's usually acceptable (but may still be illegal) to just go and download the corresponding ROM from the internet (makes is equal to reading the ROM chip yourself), but you're still supporting the website that delivers unlicensed software.&#xD;&#xA;&#xD;&#xA;Chances are that the game you want is so old the manufacturer/publisher no longer exists and has no interest in the game,(but don't assume that due to age of the game alone, recent example is &quot;shadow of the beast&quot; game released for PS4).&#xD;&#xA;&#xD;&#xA;In retrogaming community it's widely accepted to simply download games from the web, most games ever released for platforms such as C64, Amiga (can't speak for other) are freely available (although still of questionable legal nature).&#xD;&#xA;&#xD;&#xA;BUT don't forget that copyrights usually expire after 90-120 years (this is not the same as patents expiring after 50).&#xD;&#xA;&#xD;&#xA;If you're talking about Nintendo ROM's - the company is still alive and kicking and as general practice Japanese companies are not lenient in their legal matters." />
  <row Id="3210" PostHistoryTypeId="2" PostId="762" RevisionGUID="99263836-b17a-4a01-b113-0dfd0ab1e745" CreationDate="2016-06-06T23:01:59.243" UserId="1876" Text="The 1946 Mark 1 (ASCC) manual by Howard Aiken, Grace Murray Hopper, et al, has to be the first one which:&#xD;&#xA;&#xD;&#xA;* Is a technical manual, for a digital machine, which was actually manufactured (only one ever was made, but that's more than the zero actually made of whatever the Lovelace/Menabrea paper(s))&#xD;&#xA;&#xD;&#xA;* Contains instructions for programmers, starting at page 98.&#xD;&#xA;&#xD;&#xA;* Pages before that have a lot of design information in the preface, and hardware data.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;[PDF is online here.][1]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://chimera.roma1.infn.it/SP/COMMON/MarkI_operMan_1946.pdf" />
  <row Id="3211" PostHistoryTypeId="5" PostId="760" RevisionGUID="fe21345e-ad9a-48a5-b73d-95347da64baf" CreationDate="2016-06-07T00:13:47.447" UserId="367" Comment="deleted 1 character in body" Text="I'm assuming your question is about ROM's (cartridge content) with games, if you mean ROM's that are built into consoles providing their internal proprietary OS and software - that requires pretty advanced electronics skills to read them, and owning the console yourself.&#xD;&#xA;&#xD;&#xA;There is exactly 1 way of &quot;getting ROM's&quot; that I can think of:&#xD;&#xA; &#xD;&#xA;&gt; Find who owns the copyright and ask them for a license (that might be&#xD;&#xA;&gt; rather hard)&#xD;&#xA;&#xD;&#xA;If you already own a game on the cartridge, it's usually acceptable (but may still be illegal) to just go and download the corresponding ROM from the internet (makes is equal to reading the ROM chip yourself), but you're still supporting the website that delivers unlicensed software.&#xD;&#xA;&#xD;&#xA;Chances are that the game you want is so old the manufacturer/publisher no longer exists and has no interest in the game,(but don't assume that due to age of the game alone, recent example is &quot;shadow of the beast&quot; game released for PS4).&#xD;&#xA;&#xD;&#xA;In retrogaming community it's widely accepted to simply download games from the web, most games ever released for platforms such as C64, Amiga (can't speak for other) are freely available (although still of questionable legal nature).&#xD;&#xA;&#xD;&#xA;BUT don't forget that copyrights usually expire after 90-120 years (this is not the same as patents expiring after 50).&#xD;&#xA;&#xD;&#xA;If you're talking about Nintendo ROM's - the company is still alive and kicking and as general practice Japanese companies are not lenient in their legal matters." />
  <row Id="3212" PostHistoryTypeId="2" PostId="763" RevisionGUID="4ddd3b72-27d9-4576-87df-fd5f4d8162ae" CreationDate="2016-06-07T02:43:02.023" UserId="-1" Text="" />
  <row Id="3213" PostHistoryTypeId="2" PostId="764" RevisionGUID="03783f8a-ad91-48dc-b134-8db636552612" CreationDate="2016-06-07T02:43:02.023" UserId="-1" Text="" />
  <row Id="3214" PostHistoryTypeId="2" PostId="765" RevisionGUID="6e4f2f49-3a97-4023-b7cd-386c70e14e03" CreationDate="2016-06-07T02:43:41.653" UserId="-1" Text="" />
  <row Id="3215" PostHistoryTypeId="2" PostId="766" RevisionGUID="0caba03f-3f2b-4687-a5c4-120733dd740f" CreationDate="2016-06-07T02:43:41.653" UserId="-1" Text="" />
  <row Id="3217" PostHistoryTypeId="5" PostId="765" RevisionGUID="484e8ef6-145c-48b7-a33c-aa3724aa4231" CreationDate="2016-06-07T07:37:13.940" UserId="621" Comment="added 30 characters in body" Text="Related tags:  [tag:atari-400]" />
  <row Id="3218" PostHistoryTypeId="24" PostId="765" RevisionGUID="484e8ef6-145c-48b7-a33c-aa3724aa4231" CreationDate="2016-06-07T07:37:13.940" Comment="Proposed by 621 approved by 79, 276 edit id of 1253" />
  <row Id="3219" PostHistoryTypeId="5" PostId="766" RevisionGUID="13227517-8b5e-48c4-b961-332ea302a725" CreationDate="2016-06-07T07:37:19.267" UserId="621" Comment="added 54 characters in body" Text="for questions relating to the Atari 800 8-bit computer" />
  <row Id="3220" PostHistoryTypeId="24" PostId="766" RevisionGUID="13227517-8b5e-48c4-b961-332ea302a725" CreationDate="2016-06-07T07:37:19.267" Comment="Proposed by 621 approved by 79, 276 edit id of 1254" />
  <row Id="3221" PostHistoryTypeId="5" PostId="764" RevisionGUID="2c3f5f3a-45ce-42aa-88d5-335d139c0dc7" CreationDate="2016-06-07T07:37:22.470" UserId="621" Comment="added 54 characters in body" Text="for questions relating to the Atari 400 8-bit computer" />
  <row Id="3222" PostHistoryTypeId="24" PostId="764" RevisionGUID="2c3f5f3a-45ce-42aa-88d5-335d139c0dc7" CreationDate="2016-06-07T07:37:22.470" Comment="Proposed by 621 approved by 79, 276 edit id of 1252" />
  <row Id="3223" PostHistoryTypeId="5" PostId="763" RevisionGUID="a8830930-2a17-4de1-834e-7f3e44cff31c" CreationDate="2016-06-07T07:37:25.753" UserId="621" Comment="added 30 characters in body" Text="Related tags:  [tag:atari-800]" />
  <row Id="3224" PostHistoryTypeId="24" PostId="763" RevisionGUID="a8830930-2a17-4de1-834e-7f3e44cff31c" CreationDate="2016-06-07T07:37:25.753" Comment="Proposed by 621 approved by 79, 276 edit id of 1251" />
  <row Id="3225" PostHistoryTypeId="2" PostId="767" RevisionGUID="9bd1b7db-42d8-4e4d-95e8-b2afe6286c16" CreationDate="2016-06-07T08:28:23.480" UserId="547" Text="A couple of things seem a little odd about the way the Spectrum display memory was arranged until you understand why it was done the way it was. The first thing is the odd division into three blocks -- this was done so that if you have a pointer to a scan line of a character block stored in a register pair (e.g. HL) you can just increment the high order byte (e.g. with an inc h instruction) to get a pointer to the next scan line of the same character block. In order for this to work, there must be exactly 256 character blocks between successive scan lines so the bitmap must be divided into groups of 256/32 = 8 rows. This simplifies (and accelerates) the code for printing a character substantially. &#xD;&#xA;&#xD;&#xA;The other odd thing is something that I've seen commented on less frequently, and this is the unusual order of the colour components in the attributes. AFAICT the reason for this is that the designers wanted a system that would produce reasonable grayscale output if hooked up to a black &amp; white TV. They therefore designed it so that each colour component was also associated with a brightness level, which were picked according to the human eye's sensitive for the colours, i.e. green brightest, then red, then blue.  Then, by putting the brightest in the most significant bit and the darkest in the least, they could have the colours appear in numeric order of brightness when viewed on a black and white output." />
  <row Id="3226" PostHistoryTypeId="5" PostId="374" RevisionGUID="7d3685e9-f812-45d9-82ac-8205a981cdd7" CreationDate="2016-06-07T09:18:31.133" UserId="276" Comment="Added summary" Text="For questions regarding the Motorola 6809 microprocessor." />
  <row Id="3227" PostHistoryTypeId="2" PostId="768" RevisionGUID="e6fa5ddc-5877-476d-80a1-ee25016105a4" CreationDate="2016-06-07T09:19:27.573" UserId="276" Comment="Created body" Text="The Z80 8-bit microprocessor was introduced by Zilog in 1976.&#xD;&#xA;&#xD;&#xA;Its instruction set was a superset of the Intel 8080." />
  <row Id="3228" PostHistoryTypeId="2" PostId="769" RevisionGUID="bbc45f1d-e374-484b-8a8a-a85f5fbdf1cd" CreationDate="2016-06-07T09:19:27.573" UserId="276" Text="For questions regarding the Zilog Z80 microprocessor" />
  <row Id="3229" PostHistoryTypeId="2" PostId="770" RevisionGUID="c69acaf0-6211-4120-88e4-a2aa3ecb46ac" CreationDate="2016-06-07T10:09:45.727" UserId="547" Text="As much as copmanies like Nintendo might want you to believe that it is clearly illegal to download software that you have already purchased, the legal position is not quite so clear cut as that.&#xD;&#xA;&#xD;&#xA;The first thing to note is that it varies radically depending on where you are: for example, [in Spain downloading any copyright content for personal non-commercial use is considered legal](http://www.theregister.co.uk/2006/11/03/spanish_judge_says_downloading_legal/).  In other countries it is nowhere near so clear cut.  There is a shortage in most countries of court cases where people have been prosecuted for *downloading* rather than *uploading*, which makes determining the precise legal position in those countries difficult. It may be true, for example, that if you have purchased a piece of software that this grants you a license to make any reproductions of that software that are necessary in order to be able to use it (see [page 9 of this document for a summary of the position in the US](https://www.publicknowledge.org/files/CopiesRightsCopyrightsPKThinks2013.pdf)).  It does not seem to be the case (at least in most countries' laws) that there is any restriction on *how you make those reproductions*, and if they come from the Internet rather than from your own original source, that seems to be a [distinction without a difference](http://rationalwiki.org/wiki/Phantom_distinction).  So I'd argue that, at least in many jurisdictions, if a case where a consumer who owned an original copy of software and then downloaded the same from the Internet because it was the only way they could make the software work ever came to court, such a prosecution would have at least a good chance of failing.&#xD;&#xA;&#xD;&#xA;(I am not a lawyer, and this is not legal advice.  If you're seriously concerned, talk to a local lawyer who understands the copyright law of your jurisdiction.  Show them this answer and ask them whether or not I'm right, might be a good start...)" />
  <row Id="3230" PostHistoryTypeId="2" PostId="771" RevisionGUID="789a0c71-0152-42ba-b52b-73207908596a" CreationDate="2016-06-07T10:29:21.573" UserId="276" Comment="Created body" Text="Linux is an open-source Unix-based operating system.&#xD;&#xA;&#xD;&#xA;This tag is for questions regarding the installation, configuration or operation of a version of Linux on retrocomputers." />
  <row Id="3231" PostHistoryTypeId="2" PostId="772" RevisionGUID="4eb38376-ded5-4bfe-bcd6-0cd1706999aa" CreationDate="2016-06-07T10:29:21.573" UserId="276" Text="For questions regarding the operation of the Linux operating system on retrocomputers." />
  <row Id="3233" PostHistoryTypeId="2" PostId="773" RevisionGUID="23c2cd59-b78c-4739-9cbe-de32b3531b63" CreationDate="2016-06-07T14:53:34.353" UserId="439" Text="My ZX Spectrum 48k seems very resistant to working with audio input. I no longer have any cassette players, so am relying on audio files from digital players. I have been able to save and verify a tiny BASIC program to a digital recorder, but getting the right volume to save files from playtzx or OTLA is eluding me.&#xD;&#xA;&#xD;&#xA;Things I've tried:&#xD;&#xA;&#xD;&#xA;* [TeeZiX - TZX/TAP player](https://play.google.com/store/apps/details?id=dk.rift.tzxdroid&amp;amp;hl=en &quot;TeeZiX - TZX/TAP player&quot;) on my phone&#xD;&#xA;* Many different audio cables, mono, stereo and TRRS&#xD;&#xA;* Edirol R-1 digital recorder/player (this is the one I got the save and verify to work on, and it has good input/output volume control)&#xD;&#xA;* a Sandisk Sansa player running Rockbox&#xD;&#xA;* an 800 Hz square wave tone at 0 dB to see if I could trigger the record level and make the screen border flicker. (summary: nope)&#xD;&#xA;* Audio files from [PlayTZX](http://www.worldofspectrum.org/utilities.html &quot;PlayTZX&quot;) and [otla](https://code.google.com/archive/p/otla/ &quot;otla&quot;) (via wine).&#xD;&#xA;&#xD;&#xA;What else should I try?" />
  <row Id="3234" PostHistoryTypeId="1" PostId="773" RevisionGUID="23c2cd59-b78c-4739-9cbe-de32b3531b63" CreationDate="2016-06-07T14:53:34.353" UserId="439" Text="Loading ZX Spectrum tape audio in a post-cassette world" />
  <row Id="3235" PostHistoryTypeId="3" PostId="773" RevisionGUID="23c2cd59-b78c-4739-9cbe-de32b3531b63" CreationDate="2016-06-07T14:53:34.353" UserId="439" Text="&lt;zx-spectrum&gt;&lt;cassette-tape&gt;&lt;audio&gt;" />
  <row Id="3236" PostHistoryTypeId="2" PostId="774" RevisionGUID="7ac3aea6-3372-4c03-bdbd-8f6e92638347" CreationDate="2016-06-07T15:22:09.240" UserId="105" Text="**If (and only if) your audio player is battery powered**, and your Spectrum is the 48K or 128K toastrack model, try the following:&#xD;&#xA;&#xD;&#xA;- Get one of these audio cables. The6y are very common. And yes, they are stereo.&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;Shy do wee need it to be stereo? Well. The trick is that both channels from the 3.5'' stero plug will make contact the jack inside the Spectrum this way:&#xD;&#xA;&#xD;&#xA;[![enter image description here][2]][2]&#xD;&#xA;&#xD;&#xA;So when you use it to load from a digital audio player, that will normally output the same level in both channels, you won't hear (or load) anything.&#xD;&#xA;&#xD;&#xA;Then what? Just invert one of the channels so the voltage level of one channel, reffered to the other channel, will appear to be double the value of any of both channel reffered to ground (which won't be connected at all in our setup)&#xD;&#xA;&#xD;&#xA;If the TAP/TZX conversion program allows this inversion, use it. If not, you can use an editor program like Audacity to perform the inversion. Here is how:&#xD;&#xA;&#xD;&#xA;First, load your generated WAV into Audacity. The generated WAV should be stereo, but if not, it doesn't matter. We can clone one channel to the other one to make it stereo.&#xD;&#xA;&#xD;&#xA;[![enter image description here][3]][3]&#xD;&#xA;&#xD;&#xA;Use the magnifier tool inside the wave window to amgnify it to the point you can clearly see both waves, that initially will look the same.&#xD;&#xA;&#xD;&#xA;[![enter image description here][4]][4]&#xD;&#xA;&#xD;&#xA;Now click on the wav name tab and select &quot;Split stereo track&quot;&#xD;&#xA;&#xD;&#xA;[![enter image description here][5]][5]&#xD;&#xA;&#xD;&#xA;Now we have the left and right channels in different tracks, so we can manipulate each one independently. &#xD;&#xA;&#xD;&#xA;Change to the select tool (above the magnifier tool) and click the second track (the one below the other) as near as possible to the beginning of it. Press Home to bring the selection mark to the very beginning of the track. From the menu, select Edit -&gt; Select -&gt; Cursor to Track End so the whole track is selected.&#xD;&#xA;&#xD;&#xA;[![enter image description here][6]][6]&#xD;&#xA;&#xD;&#xA;With that selection active, select Effect -&gt; Invert&#xD;&#xA;&#xD;&#xA;[![enter image description here][7]][7]&#xD;&#xA;&#xD;&#xA;Now we have two independent tracks, one of them with an inverted version of the sound of the other one.&#xD;&#xA;&#xD;&#xA;[![enter image description here][8]][8]&#xD;&#xA;&#xD;&#xA;Now select both tracks: press Shift and click on both tracks (the region where the properties of each track are displayed). Then, click on the name of any of them and select &quot;Make stereo track&quot;&#xD;&#xA;&#xD;&#xA;[![enter image description here][9]][9]&#xD;&#xA;&#xD;&#xA;The final result should be a stereo track with one channel inverted.&#xD;&#xA;&#xD;&#xA;[![enter image description here][10]][10]&#xD;&#xA;&#xD;&#xA;Save this wave as PCM stereo track by choosing File -&gt; Export&#xD;&#xA;&#xD;&#xA;[![enter image description here][11]][11]&#xD;&#xA;&#xD;&#xA;And then, WAV&#xD;&#xA;&#xD;&#xA;[![enter image description here][12]][12]&#xD;&#xA;&#xD;&#xA;Copy it to your digital audio player and use the stereo cable as described to play the resulting sound. Don't be surprised if you need to lower the volume in order to get it loaded.&#xD;&#xA;&#xD;&#xA;For example, in order to load this Bruce Lee example with a Samsung Onyx, I had to do it using the MIC input on the Spectrum, as the EAR input was too loud to be usable.&#xD;&#xA;&#xD;&#xA;[![enter image description here][13]][13]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/ICCz6.jpg&#xD;&#xA;  [2]: http://i.stack.imgur.com/dSZz8.jpg&#xD;&#xA;  [3]: http://i.stack.imgur.com/NPyzJ.png&#xD;&#xA;  [4]: http://i.stack.imgur.com/JTeVb.png&#xD;&#xA;  [5]: http://i.stack.imgur.com/dOiMk.png&#xD;&#xA;  [6]: http://i.stack.imgur.com/ZkTyH.png&#xD;&#xA;  [7]: http://i.stack.imgur.com/MbDCq.png&#xD;&#xA;  [8]: http://i.stack.imgur.com/Hg4kq.png&#xD;&#xA;  [9]: http://i.stack.imgur.com/uXiqy.png&#xD;&#xA;  [10]: http://i.stack.imgur.com/B69mX.png&#xD;&#xA;  [11]: http://i.stack.imgur.com/h6ljY.png&#xD;&#xA;  [12]: http://i.stack.imgur.com/54eE5.png&#xD;&#xA;  [13]: http://i.stack.imgur.com/Q9hsg.jpg" />
  <row Id="3237" PostHistoryTypeId="5" PostId="774" RevisionGUID="f1e5759c-9553-408d-8157-dddded0d6666" CreationDate="2016-06-07T15:31:56.320" UserId="105" Comment="added 99 characters in body" Text="**If (and only if) your audio player is battery powered**, and your Spectrum is the 48K or 128K toastrack model, try the following procedure, intended to boost the volume of your wave signal, as seen by the Spectrum EAR circuitry:&#xD;&#xA;&#xD;&#xA;- Get one of these audio cables. The6y are very common. And yes, they are stereo.&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;Shy do wee need it to be stereo? Well. The trick is that both channels from the 3.5'' stero plug will make contact the jack inside the Spectrum this way:&#xD;&#xA;&#xD;&#xA;[![enter image description here][2]][2]&#xD;&#xA;&#xD;&#xA;So when you use it to load from a digital audio player, that will normally output the same level in both channels, you won't hear (or load) anything.&#xD;&#xA;&#xD;&#xA;Then what? Just invert one of the channels so the voltage level of one channel, reffered to the other channel, will appear to be double the value of any of both channel reffered to ground (which won't be connected at all in our setup)&#xD;&#xA;&#xD;&#xA;If the TAP/TZX conversion program allows this inversion, use it. If not, you can use an editor program like Audacity to perform the inversion. Here is how:&#xD;&#xA;&#xD;&#xA;First, load your generated WAV into Audacity. The generated WAV should be stereo, but if not, it doesn't matter. We can clone one channel to the other one to make it stereo.&#xD;&#xA;&#xD;&#xA;[![enter image description here][3]][3]&#xD;&#xA;&#xD;&#xA;Use the magnifier tool inside the wave window to amgnify it to the point you can clearly see both waves, that initially will look the same.&#xD;&#xA;&#xD;&#xA;[![enter image description here][4]][4]&#xD;&#xA;&#xD;&#xA;Now click on the wav name tab and select &quot;Split stereo track&quot;&#xD;&#xA;&#xD;&#xA;[![enter image description here][5]][5]&#xD;&#xA;&#xD;&#xA;Now we have the left and right channels in different tracks, so we can manipulate each one independently. &#xD;&#xA;&#xD;&#xA;Change to the select tool (above the magnifier tool) and click the second track (the one below the other) as near as possible to the beginning of it. Press Home to bring the selection mark to the very beginning of the track. From the menu, select Edit -&gt; Select -&gt; Cursor to Track End so the whole track is selected.&#xD;&#xA;&#xD;&#xA;[![enter image description here][6]][6]&#xD;&#xA;&#xD;&#xA;With that selection active, select Effect -&gt; Invert&#xD;&#xA;&#xD;&#xA;[![enter image description here][7]][7]&#xD;&#xA;&#xD;&#xA;Now we have two independent tracks, one of them with an inverted version of the sound of the other one.&#xD;&#xA;&#xD;&#xA;[![enter image description here][8]][8]&#xD;&#xA;&#xD;&#xA;Now select both tracks: press Shift and click on both tracks (the region where the properties of each track are displayed). Then, click on the name of any of them and select &quot;Make stereo track&quot;&#xD;&#xA;&#xD;&#xA;[![enter image description here][9]][9]&#xD;&#xA;&#xD;&#xA;The final result should be a stereo track with one channel inverted.&#xD;&#xA;&#xD;&#xA;[![enter image description here][10]][10]&#xD;&#xA;&#xD;&#xA;Save this wave as PCM stereo track by choosing File -&gt; Export&#xD;&#xA;&#xD;&#xA;[![enter image description here][11]][11]&#xD;&#xA;&#xD;&#xA;And then, WAV&#xD;&#xA;&#xD;&#xA;[![enter image description here][12]][12]&#xD;&#xA;&#xD;&#xA;Copy it to your digital audio player and use the stereo cable as described to play the resulting sound. Don't be surprised if you need to lower the volume in order to get it loaded.&#xD;&#xA;&#xD;&#xA;For example, in order to load this Bruce Lee example with a Samsung Onyx, I had to do it using the MIC input on the Spectrum, as the EAR input was too loud to be usable.&#xD;&#xA;&#xD;&#xA;[![enter image description here][13]][13]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/ICCz6.jpg&#xD;&#xA;  [2]: http://i.stack.imgur.com/dSZz8.jpg&#xD;&#xA;  [3]: http://i.stack.imgur.com/NPyzJ.png&#xD;&#xA;  [4]: http://i.stack.imgur.com/JTeVb.png&#xD;&#xA;  [5]: http://i.stack.imgur.com/dOiMk.png&#xD;&#xA;  [6]: http://i.stack.imgur.com/ZkTyH.png&#xD;&#xA;  [7]: http://i.stack.imgur.com/MbDCq.png&#xD;&#xA;  [8]: http://i.stack.imgur.com/Hg4kq.png&#xD;&#xA;  [9]: http://i.stack.imgur.com/uXiqy.png&#xD;&#xA;  [10]: http://i.stack.imgur.com/B69mX.png&#xD;&#xA;  [11]: http://i.stack.imgur.com/h6ljY.png&#xD;&#xA;  [12]: http://i.stack.imgur.com/54eE5.png&#xD;&#xA;  [13]: http://i.stack.imgur.com/Q9hsg.jpg" />
  <row Id="3238" PostHistoryTypeId="2" PostId="775" RevisionGUID="f824bccc-2613-46d3-843a-d1e61c0165a2" CreationDate="2016-06-07T15:37:21.373" UserId="1880" Text="I was installing the OEM version of Windows 95 on VirtualBox the other day for reminiscence sake, and for some reason I had two different product keys. I tested both of them to see which one mapped to the CD, and to my surprise both product keys work with the installation. I always thought the product key and CD were one-to-one, but is this not so with Windows 95?" />
  <row Id="3239" PostHistoryTypeId="1" PostId="775" RevisionGUID="f824bccc-2613-46d3-843a-d1e61c0165a2" CreationDate="2016-06-07T15:37:21.373" UserId="1880" Text="Why Does Windows 95 Installation Allow Multiple Product Keys?" />
  <row Id="3240" PostHistoryTypeId="3" PostId="775" RevisionGUID="f824bccc-2613-46d3-843a-d1e61c0165a2" CreationDate="2016-06-07T15:37:21.373" UserId="1880" Text="&lt;emulation&gt;&lt;ms-dos&gt;" />
  <row Id="3241" PostHistoryTypeId="6" PostId="775" RevisionGUID="d38e4e56-1957-42d5-86a2-3d89aa16fd7f" CreationDate="2016-06-07T15:45:04.910" UserId="12" Comment="Added a win95 tag." Text="&lt;emulation&gt;&lt;ms-dos&gt;&lt;windows-95&gt;" />
  <row Id="3242" PostHistoryTypeId="24" PostId="775" RevisionGUID="d38e4e56-1957-42d5-86a2-3d89aa16fd7f" CreationDate="2016-06-07T15:45:04.910" Comment="Proposed by 12 approved by 1880 edit id of 1256" />
  <row Id="3243" PostHistoryTypeId="6" PostId="775" RevisionGUID="346ab545-479c-4b3a-acc7-0a91035889cb" CreationDate="2016-06-07T15:49:15.573" UserId="12" Comment="Added win95 and licensing tags" Text="&lt;emulation&gt;&lt;ms-dos&gt;&lt;windows-95&gt;&lt;licensing&gt;" />
  <row Id="3244" PostHistoryTypeId="24" PostId="775" RevisionGUID="346ab545-479c-4b3a-acc7-0a91035889cb" CreationDate="2016-06-07T15:49:15.573" Comment="Proposed by 12 approved by 278 edit id of 1257" />
  <row Id="3245" PostHistoryTypeId="2" PostId="776" RevisionGUID="f4d78b74-f675-425a-a010-ec77720fb7f5" CreationDate="2016-06-07T15:50:42.463" UserId="46" Text="The CD media are all the same, there is no unique code on the disc. Imagine what a problem thus would be for commercial users with multiple machines to support." />
  <row Id="3246" PostHistoryTypeId="5" PostId="774" RevisionGUID="6e93b216-f574-4013-af80-373268c71e9e" CreationDate="2016-06-07T15:56:08.477" UserId="12" Comment="Small typos" Text="**If (and only if) your audio player is battery powered**, and your Spectrum is the 48K or 128K toastrack model, try the following procedure, intended to boost the volume of your wave signal, as seen by the Spectrum EAR circuitry:&#xD;&#xA;&#xD;&#xA;- Get one of these audio cables. The6y are very common. And yes, they are stereo.&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;Why do we need it to be stereo? The trick is that both channels from the 3.5'' stereo plug will make contact inside the Spectrum jack this way:&#xD;&#xA;&#xD;&#xA;[![enter image description here][2]][2]&#xD;&#xA;&#xD;&#xA;So when you use it to load from a digital audio player, that will normally output the same level in both channels, you won't hear (or load) anything.&#xD;&#xA;&#xD;&#xA;Then what? Just invert one of the channels so the voltage level of one channel, reffered to the other channel, will appear to be double the value of any of both channel reffered to ground (which won't be connected at all in our setup)&#xD;&#xA;&#xD;&#xA;If the TAP/TZX conversion program allows this inversion, use it. If not, you can use an editor program like Audacity to perform the inversion. Here is how:&#xD;&#xA;&#xD;&#xA;First, load your generated WAV into Audacity. The generated WAV should be stereo, but if not, it doesn't matter. We can clone one channel to the other one to make it stereo.&#xD;&#xA;&#xD;&#xA;[![enter image description here][3]][3]&#xD;&#xA;&#xD;&#xA;Use the magnifier tool inside the wave window to amgnify it to the point you can clearly see both waves, that initially will look the same.&#xD;&#xA;&#xD;&#xA;[![enter image description here][4]][4]&#xD;&#xA;&#xD;&#xA;Now click on the wav name tab and select &quot;Split stereo track&quot;&#xD;&#xA;&#xD;&#xA;[![enter image description here][5]][5]&#xD;&#xA;&#xD;&#xA;Now we have the left and right channels in different tracks, so we can manipulate each one independently. &#xD;&#xA;&#xD;&#xA;Change to the select tool (above the magnifier tool) and click the second track (the one below the other) as near as possible to the beginning of it. Press Home to bring the selection mark to the very beginning of the track. From the menu, select Edit -&gt; Select -&gt; Cursor to Track End so the whole track is selected.&#xD;&#xA;&#xD;&#xA;[![enter image description here][6]][6]&#xD;&#xA;&#xD;&#xA;With that selection active, select Effect -&gt; Invert&#xD;&#xA;&#xD;&#xA;[![enter image description here][7]][7]&#xD;&#xA;&#xD;&#xA;Now we have two independent tracks, one of them with an inverted version of the sound of the other one.&#xD;&#xA;&#xD;&#xA;[![enter image description here][8]][8]&#xD;&#xA;&#xD;&#xA;Now select both tracks: press Shift and click on both tracks (the region where the properties of each track are displayed). Then, click on the name of any of them and select &quot;Make stereo track&quot;&#xD;&#xA;&#xD;&#xA;[![enter image description here][9]][9]&#xD;&#xA;&#xD;&#xA;The final result should be a stereo track with one channel inverted.&#xD;&#xA;&#xD;&#xA;[![enter image description here][10]][10]&#xD;&#xA;&#xD;&#xA;Save this wave as PCM stereo track by choosing File -&gt; Export&#xD;&#xA;&#xD;&#xA;[![enter image description here][11]][11]&#xD;&#xA;&#xD;&#xA;And then, WAV&#xD;&#xA;&#xD;&#xA;[![enter image description here][12]][12]&#xD;&#xA;&#xD;&#xA;Copy it to your digital audio player and use the stereo cable as described to play the resulting sound. Don't be surprised if you need to lower the volume in order to get it loaded.&#xD;&#xA;&#xD;&#xA;For example, in order to load this Bruce Lee example with a Samsung Onyx, I had to do it using the MIC input on the Spectrum, as the EAR input was too loud to be usable.&#xD;&#xA;&#xD;&#xA;[![enter image description here][13]][13]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/ICCz6.jpg&#xD;&#xA;  [2]: http://i.stack.imgur.com/dSZz8.jpg&#xD;&#xA;  [3]: http://i.stack.imgur.com/NPyzJ.png&#xD;&#xA;  [4]: http://i.stack.imgur.com/JTeVb.png&#xD;&#xA;  [5]: http://i.stack.imgur.com/dOiMk.png&#xD;&#xA;  [6]: http://i.stack.imgur.com/ZkTyH.png&#xD;&#xA;  [7]: http://i.stack.imgur.com/MbDCq.png&#xD;&#xA;  [8]: http://i.stack.imgur.com/Hg4kq.png&#xD;&#xA;  [9]: http://i.stack.imgur.com/uXiqy.png&#xD;&#xA;  [10]: http://i.stack.imgur.com/B69mX.png&#xD;&#xA;  [11]: http://i.stack.imgur.com/h6ljY.png&#xD;&#xA;  [12]: http://i.stack.imgur.com/54eE5.png&#xD;&#xA;  [13]: http://i.stack.imgur.com/Q9hsg.jpg" />
  <row Id="3247" PostHistoryTypeId="24" PostId="774" RevisionGUID="6e93b216-f574-4013-af80-373268c71e9e" CreationDate="2016-06-07T15:56:08.477" Comment="Proposed by 12 approved by 278 edit id of 1255" />
  <row Id="3248" PostHistoryTypeId="5" PostId="776" RevisionGUID="85e9df60-8a47-45b3-b9bb-8a516fe2f431" CreationDate="2016-06-07T15:56:24.027" UserId="12" Comment="Small typos and clarification" Text="The CD media for OSR (OEM Service Releases) are generally all the same; there is no unique code on the disc. Imagine what a problem this would be for commercial users with multiple machines to support." />
  <row Id="3249" PostHistoryTypeId="24" PostId="776" RevisionGUID="85e9df60-8a47-45b3-b9bb-8a516fe2f431" CreationDate="2016-06-07T15:56:24.027" Comment="Proposed by 12 approved by 278 edit id of 1258" />
  <row Id="3250" PostHistoryTypeId="5" PostId="776" RevisionGUID="7977e39d-7bb1-48db-adf7-0409e4e7a9f9" CreationDate="2016-06-07T15:59:04.327" UserId="46" Comment="added 178 characters in body" Text="The CD media are all the same, there is no unique code on the disc. Imagine what a problem thus would be for commercial users with multiple machines to support - they wouldn't want to archive multiple copies of the media.   Making the key unique to the disk doesn't add any protection if the disk image is easily writable (unless there is online checking to limit reuse of codes)" />
  <row Id="3251" PostHistoryTypeId="10" PostId="759" RevisionGUID="94d7bc7b-9d61-486c-97a9-ee7567adae66" CreationDate="2016-06-07T16:09:04.023" UserId="278" Comment="102" Text="{&quot;Voters&quot;:[{&quot;Id&quot;:621,&quot;DisplayName&quot;:&quot;JAL&quot;},{&quot;Id&quot;:79,&quot;DisplayName&quot;:&quot;Stephen Kitt&quot;},{&quot;Id&quot;:12,&quot;DisplayName&quot;:&quot;jdv&quot;},{&quot;Id&quot;:278,&quot;DisplayName&quot;:&quot;wizzwizz4&quot;}]}" />
  <row Id="3252" PostHistoryTypeId="5" PostId="776" RevisionGUID="5d76e737-bf25-448d-837b-99333824dd97" CreationDate="2016-06-07T16:09:39.200" UserId="46" Comment="disk-&gt;disc" Text="The CD media for OSR (OEM Service Releases) are generally all the same; there is no unique code on the disc. Imagine what a problem this would be for commercial users with multiple machines to support - they wouldn't want to archive multiple copies of the media.   &#xD;&#xA;&#xD;&#xA;Making the key unique to the disk doesn't add any protection if the disc image is easily writable (unless there is online checking to limit reuse of codes)" />
  <row Id="3253" PostHistoryTypeId="5" PostId="774" RevisionGUID="edeee50f-50c8-4f2b-a86a-510435d37095" CreationDate="2016-06-07T16:10:02.913" UserId="105" Comment="deleted 3 characters in body" Text="**If (and only if) your audio player is battery powered**, and your Spectrum is the 48K or 128K toastrack model, try the following procedure, intended to boost the volume of your wave signal, as seen by the Spectrum EAR circuitry:&#xD;&#xA;&#xD;&#xA;- Get one of these audio cables. They are very common. And yes, they are stereo.&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;Why do we need it to be stereo? The trick is that both channels from the 3.5'' stereo plug will make contact inside the Spectrum jack this way:&#xD;&#xA;&#xD;&#xA;[![enter image description here][2]][2]&#xD;&#xA;&#xD;&#xA;So when you use it to load from a digital audio player, that will normally output the same level in both channels, you won't hear (or load) anything.&#xD;&#xA;&#xD;&#xA;Then what? Just invert one of the channels so the voltage level of one channel, reffered to the other channel, will appear to be double the value of any of both channel reffered to ground (which won't be connected at all in our setup)&#xD;&#xA;&#xD;&#xA;If the TAP/TZX conversion program allows this inversion, use it. If not, you can use an editor program like Audacity to perform the inversion. Here is how:&#xD;&#xA;&#xD;&#xA;First, load your generated WAV into Audacity. The generated WAV should be stereo, but if not, it doesn't matter. We can clone one channel to the other one to make it stereo.&#xD;&#xA;&#xD;&#xA;[![enter image description here][3]][3]&#xD;&#xA;&#xD;&#xA;Use the magnifier tool inside the wave window to amgnify it to the point you can clearly see both waves, that initially will look the same.&#xD;&#xA;&#xD;&#xA;[![enter image description here][4]][4]&#xD;&#xA;&#xD;&#xA;Now click on the wav name tab and select &quot;Split stereo track&quot;&#xD;&#xA;&#xD;&#xA;[![enter image description here][5]][5]&#xD;&#xA;&#xD;&#xA;Now we have the left and right channels in different tracks, so we can manipulate each one independently. &#xD;&#xA;&#xD;&#xA;Change to the select tool (above the magnifier tool) and click the second track (the one below the other) as near as possible to the beginning of it. Press Home to bring the selection mark to the very beginning of the track. From the menu, select Edit -&gt; Select -&gt; Cursor to Track End so the whole track is selected.&#xD;&#xA;&#xD;&#xA;[![enter image description here][6]][6]&#xD;&#xA;&#xD;&#xA;With that selection active, select Effect -&gt; Invert&#xD;&#xA;&#xD;&#xA;[![enter image description here][7]][7]&#xD;&#xA;&#xD;&#xA;Now we have two independent tracks, one of them with an inverted version of the sound of the other one.&#xD;&#xA;&#xD;&#xA;[![enter image description here][8]][8]&#xD;&#xA;&#xD;&#xA;Now select both tracks: press Shift and click on both tracks (the region where the properties of each track are displayed). Then, click on the name of any of them and select &quot;Make stereo track&quot;&#xD;&#xA;&#xD;&#xA;[![enter image description here][9]][9]&#xD;&#xA;&#xD;&#xA;The final result should be a stereo track with one channel inverted.&#xD;&#xA;&#xD;&#xA;[![enter image description here][10]][10]&#xD;&#xA;&#xD;&#xA;Save this wave as PCM stereo track by choosing File -&gt; Export&#xD;&#xA;&#xD;&#xA;[![enter image description here][11]][11]&#xD;&#xA;&#xD;&#xA;And then, WAV&#xD;&#xA;&#xD;&#xA;[![enter image description here][12]][12]&#xD;&#xA;&#xD;&#xA;Copy it to your digital audio player and use the stereo cable as described to play the resulting sound. Don't be surprised if you need to lower the volume in order to get it loaded.&#xD;&#xA;&#xD;&#xA;For example, in order to load this Bruce Lee example with a Samsung Onyx, I had to do it using the MIC input on the Spectrum, as the EAR input was too loud to be usable.&#xD;&#xA;&#xD;&#xA;[![enter image description here][13]][13]&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/ICCz6.jpg&#xD;&#xA;  [2]: http://i.stack.imgur.com/dSZz8.jpg&#xD;&#xA;  [3]: http://i.stack.imgur.com/NPyzJ.png&#xD;&#xA;  [4]: http://i.stack.imgur.com/JTeVb.png&#xD;&#xA;  [5]: http://i.stack.imgur.com/dOiMk.png&#xD;&#xA;  [6]: http://i.stack.imgur.com/ZkTyH.png&#xD;&#xA;  [7]: http://i.stack.imgur.com/MbDCq.png&#xD;&#xA;  [8]: http://i.stack.imgur.com/Hg4kq.png&#xD;&#xA;  [9]: http://i.stack.imgur.com/uXiqy.png&#xD;&#xA;  [10]: http://i.stack.imgur.com/B69mX.png&#xD;&#xA;  [11]: http://i.stack.imgur.com/h6ljY.png&#xD;&#xA;  [12]: http://i.stack.imgur.com/54eE5.png&#xD;&#xA;  [13]: http://i.stack.imgur.com/Xx58r.jpg" />
  <row Id="3254" PostHistoryTypeId="5" PostId="722" RevisionGUID="148e1fcb-9717-4275-a2a3-6235c10b5ab5" CreationDate="2016-06-07T16:14:18.167" UserId="12" Comment="Fixup proper nouns" Text="I have a 'perfect' set of ZX Spectrum games (in .ipf format) that I would like to use in EmulationStation (RetroPie) but the Fuse emulator doesn't recognize .ipf files.&#xD;&#xA;&#xD;&#xA;Are there any tools that will convert .ipf files to a format that will work on said emulator?" />
  <row Id="3255" PostHistoryTypeId="4" PostId="722" RevisionGUID="148e1fcb-9717-4275-a2a3-6235c10b5ab5" CreationDate="2016-06-07T16:14:18.167" UserId="12" Comment="Fixup proper nouns" Text="Converting ZX Spectrum .ipf files to .z80 or .tzx for use in Fuse on RetroPie?" />
  <row Id="3256" PostHistoryTypeId="24" PostId="722" RevisionGUID="148e1fcb-9717-4275-a2a3-6235c10b5ab5" CreationDate="2016-06-07T16:14:18.167" Comment="Proposed by 12 approved by 278 edit id of 1259" />
  <row Id="3257" PostHistoryTypeId="4" PostId="420" RevisionGUID="9ed82966-85b5-4d4c-9fd2-a7cb00eb3f63" CreationDate="2016-06-07T16:16:40.153" UserId="12" Comment="Fixup title" Text="How to clean an old non-optical computer mouse" />
  <row Id="3258" PostHistoryTypeId="24" PostId="420" RevisionGUID="9ed82966-85b5-4d4c-9fd2-a7cb00eb3f63" CreationDate="2016-06-07T16:16:40.153" Comment="Proposed by 12 approved by -1 edit id of 1261" />
  <row Id="3259" PostHistoryTypeId="4" PostId="420" RevisionGUID="668b05e4-78c2-41ab-93f8-cedbd985a42e" CreationDate="2016-06-07T16:16:40.153" UserId="278" Comment="Fixup title" Text="How to clean an old computer ball-mouse" />
  <row Id="3260" PostHistoryTypeId="5" PostId="756" RevisionGUID="ff29011b-7fd1-4451-aac3-f1aef4620e90" CreationDate="2016-06-07T16:16:51.950" UserId="12" Comment="Clarified the floppy size, since this is really important to the question" Text="Where can I find an external 8-inch floppy disk drive?&#xD;&#xA;&#xD;&#xA;I have some data I would like to retrieve from a really old 8-inch (200 mm) floppy disk, but have no working computer than has a drive to read it.&#xD;&#xA;&#xD;&#xA;Are external drives for that size still sold? Where can I find one? Either Linux or Windows solutions are okay with me." />
  <row Id="3261" PostHistoryTypeId="4" PostId="756" RevisionGUID="ff29011b-7fd1-4451-aac3-f1aef4620e90" CreationDate="2016-06-07T16:16:51.950" UserId="12" Comment="Clarified the floppy size, since this is really important to the question" Text="Where can I find an external 8-inch floppy disk drive?" />
  <row Id="3262" PostHistoryTypeId="24" PostId="756" RevisionGUID="ff29011b-7fd1-4451-aac3-f1aef4620e90" CreationDate="2016-06-07T16:16:51.950" Comment="Proposed by 12 approved by 278 edit id of 1260" />
  <row Id="3263" PostHistoryTypeId="2" PostId="777" RevisionGUID="e9f7a249-75a7-4b70-a992-80e148b4f3ce" CreationDate="2016-06-07T16:40:40.317" UserId="1880" Text="I have had great success with the Qemu emulator! I have been able to run (emulate) DOS and MS-DOS on an Apple computer with it. Because some versions of DOS may require a different CPU architecture than what your Apple runs on, you can use Qemu to emulate another CPU architecture. Here is the homepage to help get you started: http://wiki.qemu.org/Main_Page&#xD;&#xA;" />
  <row Id="3264" PostHistoryTypeId="2" PostId="778" RevisionGUID="eb543308-e4d1-4079-a42d-808cce6851be" CreationDate="2016-06-07T18:25:39.303" UserId="12" Text="Is it legal to download older ROM images of software and games for non-commercial use in a retro computing system (emulated or otherwise)?" />
  <row Id="3265" PostHistoryTypeId="1" PostId="778" RevisionGUID="eb543308-e4d1-4079-a42d-808cce6851be" CreationDate="2016-06-07T18:25:39.303" UserId="12" Text="Is it legal to download ROM images from shared or internet archives?" />
  <row Id="3266" PostHistoryTypeId="3" PostId="778" RevisionGUID="eb543308-e4d1-4079-a42d-808cce6851be" CreationDate="2016-06-07T18:25:39.303" UserId="12" Text="&lt;rom&gt;&lt;licensing&gt;" />
  <row Id="3267" PostHistoryTypeId="2" PostId="779" RevisionGUID="b6a325ce-a181-4f51-bcb6-f2eaeb2d36b4" CreationDate="2016-06-07T18:25:39.303" UserId="12" Text="**I am not a lawyer. This is not legal advice.**&#xD;&#xA;&#xD;&#xA;That being said, some general comments about the legalities of retro system ROM images can be made.&#xD;&#xA;&#xD;&#xA;Legalities will differ depending on your locale but, in general, downloading ROM images for any system (regardless of age) is strictly **not** allowed by law. In fact, it _may_ even be considered piracy to make images of ROMs you legally own. This is why emulation sites shy away from showing you where or how to get ROMs for their software.&#xD;&#xA;&#xD;&#xA;Of course, there are many sites that offer ROM images of games and system firmware for download. These sites are almost certainly breaking the law, though in many cases the rightsholders may not have any interest in pursuing legal interests.&#xD;&#xA;&#xD;&#xA;Whether or not creating or downloading old or abandoned images is adhering to the spirit of the law is up to individuals." />
  <row Id="3268" PostHistoryTypeId="5" PostId="779" RevisionGUID="af590b36-ae90-4964-b273-3f4e46f88904" CreationDate="2016-06-07T18:33:26.073" UserId="12" Comment="Added more weasel words" Text="**I am not a lawyer. This is not legal advice.**&#xD;&#xA;&#xD;&#xA;That being said, some general comments about the legalities of retro system ROM images can be made.&#xD;&#xA;&#xD;&#xA;Legalities will differ depending on your locale but, in general, downloading ROM images for any system (regardless of age) is strictly **not** allowed by law. In fact, it _may_ even be considered piracy to make images of ROMs you legally own. This is why emulation sites shy away from showing you where or how to get ROMs for their software.&#xD;&#xA;&#xD;&#xA;There are locales, however, where it is legal to create and download copyrighted material for personal, non-commercial use. Check your local law.&#xD;&#xA;&#xD;&#xA;Of course, there are many sites that offer ROM images of games and system firmware for download. These sites are almost certainly breaking the law (or are in a legal grey area), though in many cases the rightsholders may not have any interest in pursuing legal interests. Such sites may also be operating out of countries where it is legal to offer such services, or the legal recourse for rightsholders are limited.&#xD;&#xA;&#xD;&#xA;Whether or not creating or downloading old or abandoned images is adhering to the spirit of the law is up to individuals." />
  <row Id="3269" PostHistoryTypeId="5" PostId="779" RevisionGUID="c4909248-6a0a-4236-ab91-5a53d331a3ef" CreationDate="2016-06-07T18:51:57.813" UserId="12" Comment="[Edit removed during grace period]" Text="**I am not a lawyer. This is not legal advice.**&#xD;&#xA;&#xD;&#xA;That being said, some general comments about the legalities of retro system ROM images can be made.&#xD;&#xA;&#xD;&#xA;Legalities will differ depending on your locale but, in general, downloading ROM images for any system (regardless of age) is strictly **not** allowed by law. In fact, it _may_ even be considered piracy to make images of ROMs you legally own. This is why emulation sites shy away from showing you where or how to get ROMs for their software.&#xD;&#xA;&#xD;&#xA;There are locales, however, where it is legal to create and download copyrighted material for personal, non-commercial use. Check your local law.&#xD;&#xA;&#xD;&#xA;Of course, there are many sites that offer ROM images of games and system firmware for download. These sites are almost certainly breaking the law (or are in a legal grey area), though in many cases the rightsholders may not have any interest in pursuing legal interests. Such sites may also be operating out of countries where it is legal to offer such services, or the legal recourse for rightsholders are limited.&#xD;&#xA;&#xD;&#xA;Whether or not creating or downloading old or abandoned images is adhering to the spirit of the law is up to individuals." />
  <row Id="3270" PostHistoryTypeId="2" PostId="780" RevisionGUID="cbea0705-1a78-4700-9a13-5a1460a87b60" CreationDate="2016-06-07T18:53:24.823" UserId="125" Text="I think one reason that it is very prolific, is that JDV is right:&#xD;&#xA;&#xD;&#xA;&gt; in many cases the rightsholders may not have any interest in pursuing legal interests.&#xD;&#xA;&#xD;&#xA;And in the case of very old games and companies (that may not exist any longer) that is probably true.  Nintendo however, has some very specific things to say about this on their [corporate legal page][1]:&#xD;&#xA;&#xD;&#xA;&gt; **Can I Download a Nintendo ROM from the Internet if I Already Own the&#xD;&#xA;&gt; Authentic Game?**&#xD;&#xA;&gt; &#xD;&#xA;&gt; There is a good deal of misinformation on the Internet regarding the&#xD;&#xA;&gt; backup/archival copy exception. It is not a &quot;second copy&quot; rule and is&#xD;&#xA;&gt; often mistakenly cited for the proposition that if you have one lawful&#xD;&#xA;&gt; copy of a copyrighted work, you are entitled to have a second copy of&#xD;&#xA;&gt; the copyrighted work even if that second copy is an infringing copy.&#xD;&#xA;&gt; The backup/archival copy exception is a very narrow limitation&#xD;&#xA;&gt; relating to a copy being made by the rightful owner of an authentic&#xD;&#xA;&gt; game to ensure he or she has one in the event of damage or destruction&#xD;&#xA;&gt; of the authentic. Therefore, ***whether you have an authentic game or&#xD;&#xA;&gt; not, or whether you have possession of a Nintendo ROM for a limited&#xD;&#xA;&gt; amount of time, i.e. 24 hours, it is illegal to download and play a&#xD;&#xA;&gt; Nintendo ROM from the Internet.***&#xD;&#xA;&#xD;&#xA;While other companies will vary in their willingness to pursue legal action, Nintendo's perspective on this topic seems to be pretty black-and-white.  Further documentation on that page also indicates that sites which provide links to ROM download pages may also be breaking the law.&#xD;&#xA;&#xD;&#xA;So it would seem that &quot;No&quot; it is not legal.  And prosecution of which can hinge on two aspects:&#xD;&#xA;&#xD;&#xA; - Whether or not the company which published/distributed the game is still a legal entity.&#xD;&#xA; - How willing that company is to pursue legal action against those who download or make available images of retro game ROMs.&#xD;&#xA;&#xD;&#xA;  [1]: https://www.nintendo.com/corp/legal.jsp" />
  <row Id="3271" PostHistoryTypeId="2" PostId="781" RevisionGUID="cd8ffe15-c7e0-4557-b13a-eda1575bc3e8" CreationDate="2016-06-07T18:57:11.367" UserId="46" Text="A very limited number of rights holders have retrospectively relaxed the license conditions (or re-released) their intelectual property, making it legal **in specific situations** and **for specific software**. In these cases rights such as redistribution or commercial use will vary, and it can be hard to track down the precise detail as ownership often changes over time - just because the owner is not easy to identify, you can't assume there is no owner." />
  <row Id="3272" PostHistoryTypeId="5" PostId="779" RevisionGUID="c618c275-159d-446a-94d5-2c9f2846f4ea" CreationDate="2016-06-07T19:18:55.133" UserId="12" Comment="Added scare quotes" Text="**I am not a lawyer. This is not legal advice.**&#xD;&#xA;&#xD;&#xA;That being said, some general comments about the legalities of retro system ROM images can be made.&#xD;&#xA;&#xD;&#xA;Legalities will differ depending on your locale but, in general, downloading ROM images for any system (regardless of age) is strictly **not** allowed by law. In fact, it _may_ even be considered &quot;software piracy&quot; to make images of ROMs you legally own. This is why emulation sites shy away from showing you where or how to get ROMs for their software.&#xD;&#xA;&#xD;&#xA;There are locales, however, where it is legal to create and download copyrighted material for personal, non-commercial use. Check your local law.&#xD;&#xA;&#xD;&#xA;Of course, there are many sites that offer ROM images of games and system firmware for download. These sites are almost certainly breaking the law (or are in a legal grey area), though in many cases the rightsholders may not have any interest in pursuing legal interests. Such sites may also be operating out of countries where it is legal to offer such services, or the legal recourse for rightsholders are limited.&#xD;&#xA;&#xD;&#xA;Whether or not creating or downloading old or abandoned images is adhering to the spirit of the law is up to individuals." />
  <row Id="3274" PostHistoryTypeId="5" PostId="719" RevisionGUID="882749e2-4497-481c-8f07-1e630275e787" CreationDate="2016-06-07T19:34:03.257" UserId="621" Comment="deleted 1 character in body" Text="Part of the value of any item is the demand for it.  If there's no demand, even if there was only one made, it's unlikely to sell for a high price.  You have a few options.&#xD;&#xA;&#xD;&#xA;1. Scan eBay/Google Shopping/Craigslist for any equivalent equipment.  eBay has a great feature that lets you filter your search results by completed or sold listings (there is a difference).  Using those options you can see what people are listing items for vs what they're actually selling for.&#xD;&#xA;&#xD;&#xA;2. Find an expert.  You might want to look on reddit or other specialized Apple forums for people who might know about these things, or would be interested in buying them.&#xD;&#xA;&#xD;&#xA;3. Ask Apple.  This is more of a long-shot, but I've found that some companies actually value when people contact them about old promotional and collectable items.  Hell, Topps threw away most of their trading cards from their early days and even they don't have a complete set of their catalog." />
  <row Id="3275" PostHistoryTypeId="2" PostId="782" RevisionGUID="81fd06a0-e25c-4e01-b945-c8eccf8db34e" CreationDate="2016-06-07T19:37:20.097" UserId="-1" Text="" />
  <row Id="3276" PostHistoryTypeId="2" PostId="783" RevisionGUID="f19afb62-c4d1-4e64-bfc5-30ae81c06de9" CreationDate="2016-06-07T19:37:20.097" UserId="-1" Text="" />
  <row Id="3277" PostHistoryTypeId="2" PostId="784" RevisionGUID="8384d51f-37d1-498e-8780-a45adac237e2" CreationDate="2016-06-07T19:39:10.807" UserId="-1" Text="" />
  <row Id="3278" PostHistoryTypeId="2" PostId="785" RevisionGUID="c26cae4c-2c5e-4d3c-a358-c9f0f1e3bc64" CreationDate="2016-06-07T19:39:10.807" UserId="-1" Text="" />
  <row Id="3279" PostHistoryTypeId="2" PostId="786" RevisionGUID="b1dc9bc1-a462-4cc5-8573-7373dddf15e8" CreationDate="2016-06-07T19:45:48.900" UserId="1880" Text="I have played around with the QEMU emulator, as it can emulate OS's that VirtualBox cannot. With QEMU being quite slow because it has to translate to different CPU architectures, is it ever used commercially or in business applications?" />
  <row Id="3280" PostHistoryTypeId="1" PostId="786" RevisionGUID="b1dc9bc1-a462-4cc5-8573-7373dddf15e8" CreationDate="2016-06-07T19:45:48.900" UserId="1880" Text="Is QEMU Used Commercially?" />
  <row Id="3281" PostHistoryTypeId="3" PostId="786" RevisionGUID="b1dc9bc1-a462-4cc5-8573-7373dddf15e8" CreationDate="2016-06-07T19:45:48.900" UserId="1880" Text="&lt;emulation&gt;" />
  <row Id="3282" PostHistoryTypeId="5" PostId="786" RevisionGUID="44aca929-9944-4875-91de-2bb2973e267e" CreationDate="2016-06-07T19:53:51.040" UserId="1880" Comment="Added last sentance. Looking for examples" Text="I have played around with the QEMU emulator, as it can emulate OS's that VirtualBox cannot. With QEMU being quite slow because it has to translate to different CPU architectures, is it ever used commercially or in business applications?&#xD;&#xA;&#xD;&#xA;**EDIT:**&#xD;&#xA;Does anyone know of any hardware or software that uses QEMU as a core element in the application?" />
  <row Id="3285" PostHistoryTypeId="5" PostId="786" RevisionGUID="3c6c8391-825e-4f0c-a118-b3bcc39f2854" CreationDate="2016-06-07T20:26:28.243" UserId="1880" Comment="Added detail that makes this question appropriate for retro computing." Text="I have played around with the QEMU emulator, as it can emulate OS's that VirtualBox cannot, especially older systems that cannot run on x86 or x64. With QEMU being quite slow because it has to translate to different CPU architectures, is it ever used commercially or in business applications?&#xD;&#xA;&#xD;&#xA;**EDIT:**&#xD;&#xA;Does anyone know of any hardware or software that uses QEMU as a core element in the application?" />
  <row Id="3286" PostHistoryTypeId="2" PostId="787" RevisionGUID="08c6281f-df7c-4229-b4c1-01fbb42eee2e" CreationDate="2016-06-07T20:27:33.657" UserId="423" Text="In Poland there was the `Commodore &amp; Amiga` magazine in 1992-1995. In it's 7th number (July '92, pages 22-23) there was an article on how to build your own power supply for C64 written by Jerzy Dudek. There is an archive of this magazine at http://stare.e-gry.net/czasopisma/commodore-amiga. It's in [DjVu][1] format.&#xD;&#xA;&#xD;&#xA;Here is the schema from this article:&#xD;&#xA;[![C64 power supply schema][2]][2]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://djvu.org/&#xD;&#xA;  [2]: http://i.stack.imgur.com/Dt1my.png" />
  <row Id="3287" PostHistoryTypeId="5" PostId="778" RevisionGUID="cd112852-a7dd-4381-b196-a4ca9544a081" CreationDate="2016-06-07T20:51:17.997" UserId="12" Comment="added 314 characters in body" Text="Is it legal to download older ROM images of software and games for non-commercial use in a retro computing system (emulated or otherwise)?&#xD;&#xA;&#xD;&#xA;(Note that this question implies no special knowledge of those ROMs where rightsholders have expressly provided distribution and non-commercial use of their intellectual property, freely or for a fee. The assumption is that if you are in possession of one of those, you already know what legal right to use or download it you have.)" />
  <row Id="3288" PostHistoryTypeId="4" PostId="775" RevisionGUID="574e2910-75fc-4413-80f7-16cc9a501c5c" CreationDate="2016-06-07T20:55:44.673" UserId="-1" Comment="improved title, also Title Case is bad for internet" Text="Why are Windows 95 installation disks not uniquely bound to a single product key?" />
  <row Id="3289" PostHistoryTypeId="24" PostId="775" RevisionGUID="574e2910-75fc-4413-80f7-16cc9a501c5c" CreationDate="2016-06-07T20:55:44.673" Comment="Proposed by 86.62.99.132|a08a9caa-7d19-485d-a195-0a5fdb70f796 approved by -1 edit id of 1266" />
  <row Id="3290" PostHistoryTypeId="4" PostId="775" RevisionGUID="c3d3c8f7-c21a-45bb-b8e3-8545ca8064aa" CreationDate="2016-06-07T20:55:44.673" UserId="1880" Comment="improved title, also Title Case is bad for internet" Text="Why are Windows 95 Installation Disks Not Uniquely Bound to a Single Product Key?" />
  <row Id="3291" PostHistoryTypeId="5" PostId="779" RevisionGUID="d81321fb-2cbb-4314-b7f0-e7ccc6049d80" CreationDate="2016-06-07T20:56:53.757" UserId="12" Comment="Added even more weasel words!" Text="**I am not a lawyer. This is not legal advice.**&#xD;&#xA;&#xD;&#xA;That being said, some general comments about the legalities of retro system ROM images can be made.&#xD;&#xA;&#xD;&#xA;Legalities will differ depending on your locale but, in general, downloading ROM images for any system (regardless of age) is strictly **not** allowed by law. In fact, it _may_ even be considered &quot;software piracy&quot; to make images of ROMs you legally own. This is why emulation sites shy away from showing you where or how to get ROMs for their software.&#xD;&#xA;&#xD;&#xA;There are locales, however, where it is legal to create and download copyrighted material for personal, non-commercial use. **Check with an expert about your local statutes on the subject.**&#xD;&#xA;&#xD;&#xA;The inverse is also true: **there is no global, over-arching law that governs or specifically allows downloading ROM images**, especially those that make special claims regarding some specific number of hours that intellectual property can be in your possession.&#xD;&#xA;&#xD;&#xA;And even if downloading an image *is* legal where you are, it's not like a particularly litigious rightsholder won't try to pursue legal recourse if they think they have a case. (Perhaps an unlikely situation, but words are small comfort if your ISP is suddenly pressured to disconnect you.)&#xD;&#xA;&#xD;&#xA;Of course, there are many sites that offer ROM images of games and system firmware for download. These sites are almost certainly breaking the law (or are in a legal grey area), though in many cases the rightsholders may not have any interest in pursuing legal interests. Such sites may also be operating out of countries where it is legal to offer such services, or the legal recourse for rightsholders are limited.&#xD;&#xA;&#xD;&#xA;Whether or not creating or downloading old or abandoned images is adhering to the spirit of the law is up to individuals." />
  <row Id="3292" PostHistoryTypeId="7" PostId="775" RevisionGUID="2d7f8362-c622-4f7f-81ed-a736066d5b0c" CreationDate="2016-06-07T20:57:43.747" UserId="1880" Comment="Rollback to [574e2910-75fc-4413-80f7-16cc9a501c5c]" Text="Why are Windows 95 installation disks not uniquely bound to a single product key?" />
  <row Id="3293" PostHistoryTypeId="7" PostId="775" RevisionGUID="73c25d41-2236-4b33-aff1-0110e22727d6" CreationDate="2016-06-07T20:58:06.700" UserId="1880" Comment="Rollback to [c3d3c8f7-c21a-45bb-b8e3-8545ca8064aa]" Text="Why are Windows 95 Installation Disks Not Uniquely Bound to a Single Product Key?" />
  <row Id="3294" PostHistoryTypeId="2" PostId="788" RevisionGUID="072d01e3-9b36-4de6-bbed-5fc7a88fe9d7" CreationDate="2016-06-07T21:03:34.493" UserId="64" Text="These ROM images are like all other software and are protected by copyright law.  Most are commercial software that do not permit copying and distributing.  Some copyright holders have allowed their games to be freely distributable, for example the Sega Mega Drive game, Zero Tolerance, and it's unfinished prototype sequel, Beyond Zero Tolerance.  There are also homebrew games and demos with permissive licenses available for most every gaming console.&#xD;&#xA;&#xD;&#xA;This question is, for example, why the Debian project was reluctant to include the at-the-time-recently-GPL'd ZSNES SNES emulator in its distribution.  What good would a Free emulator be if there was little to no Free or even free software available to use with it?&#xD;&#xA;" />
  <row Id="3295" PostHistoryTypeId="2" PostId="789" RevisionGUID="fe153629-1f27-4696-94b0-3436bcddbb7b" CreationDate="2016-06-07T21:05:25.177" UserId="46" Text="According to [this linaro page][1] the Android emulator _was_ based on QEMU, and although its not too specific on performance, it is talking about running a full modern stack in emulation - specifically around the early adoption of a new architecture.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.linaro.org/blog/core-dump/running-64bit-android-l-qemu/" />
  <row Id="3296" PostHistoryTypeId="5" PostId="719" RevisionGUID="234a91d4-8276-4329-8f99-5aee51aaac24" CreationDate="2016-06-07T22:14:20.203" UserId="621" Comment="added 257 characters in body" Text="Part of the value of any item is the demand for it.  If there's no demand, even if there was only one made, it's unlikely to sell for a high price.  You have a few options.&#xD;&#xA;&#xD;&#xA;1. Scan eBay/Google Shopping/Craigslist for any equivalent equipment.  eBay has a great feature that lets you filter your search results by completed or sold listings (there is a difference).  Using those options you can see what people are listing items for vs what they're actually selling for.&#xD;&#xA;&#xD;&#xA;2. Find an expert.  You might want to look on reddit or other specialized Apple forums for people who might know about these things, or would be interested in buying them.&#xD;&#xA;&#xD;&#xA;3. Ask Apple.  This is more of a long-shot, but I've found that some companies actually value when people contact them about old promotional and collectable items.  Hell, Topps threw away most of their trading cards from their early days and even they don't have a complete set of their catalog.&#xD;&#xA;&#xD;&#xA;Another thought (mostly related to Apple).  Have you ever heard of [RedLightRunner][1]?  It's a site dedicated to Apple memorabilia.  They have some items for sale as well as a near-complete catalog of other items.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://redlightrunner.com/" />
  <row Id="3297" PostHistoryTypeId="2" PostId="790" RevisionGUID="34cdd6f7-f042-4220-a50e-c79c75a57b98" CreationDate="2016-06-07T23:10:25.093" UserId="1892" Text="QEMU is used in used in malware/virus research extensively as it also can emulate the hardware. By emulating the hardware into full detail it is almost impossible for malware to detect that it is running in a virtual and controlled environment. This as a lot of malware turns off when it detects it is running in a virtual environment as it indicates a server where no user would ever logon and would give away its existence or an environment where its behaviour is going to be recorded and studied." />
  <row Id="3298" PostHistoryTypeId="5" PostId="790" RevisionGUID="3ba9a9a3-8c9c-41df-9e7e-b7d1bc9e9b37" CreationDate="2016-06-07T23:20:55.347" UserId="1880" Comment="fixed a couple minor spelling issues" Text="QEMU is used in malware/virus research extensively as it also can emulate the hardware. By emulating the hardware into full detail it is almost impossible for malware to detect that it is running in a virtual and controlled environment. This is because a lot of malware turns off when it detects when it is running in a virtual environment as it indicates a server where no user would ever logon and would give away its existence or an environment where its behaviour is going to be recorded and studied." />
  <row Id="3299" PostHistoryTypeId="24" PostId="790" RevisionGUID="3ba9a9a3-8c9c-41df-9e7e-b7d1bc9e9b37" CreationDate="2016-06-07T23:20:55.347" Comment="Proposed by 1880 approved by 1892 edit id of 1267" />
  <row Id="3300" PostHistoryTypeId="2" PostId="791" RevisionGUID="af748377-7cc1-4245-8fd8-94eda2691175" CreationDate="2016-06-07T23:25:40.107" UserId="1893" Text="Windows in its earliest days was simply a shell that ran on top of MS-DOS, which means that Windows 3.1 itself was actually just a standard MS-DOS application like any other.&#xD;&#xA;&#xD;&#xA;Yet, MS-DOS is not a multitasking operating system, and at the same time, Windows applications were compiled native-code binaries that ran without any form of managed environment. So, how exactly was multitasking of Windows binaries achieved if Windows 3.1 was simply a regular old MS-DOS program itself? Are there any old technical documents still floating around that describe the early Windows architecture internally?" />
  <row Id="3301" PostHistoryTypeId="1" PostId="791" RevisionGUID="af748377-7cc1-4245-8fd8-94eda2691175" CreationDate="2016-06-07T23:25:40.107" UserId="1893" Text="How did Windows 3.1 implement multitasking?" />
  <row Id="3302" PostHistoryTypeId="3" PostId="791" RevisionGUID="af748377-7cc1-4245-8fd8-94eda2691175" CreationDate="2016-06-07T23:25:40.107" UserId="1893" Text="&lt;ms-dos&gt;" />
  <row Id="3303" PostHistoryTypeId="2" PostId="792" RevisionGUID="92b4fea2-be67-43f5-bb5c-94fff0c44689" CreationDate="2016-06-07T23:45:17.637" UserId="499" Text="CDs are made by pressing, having a new master made is expensive so the content of the disk would rarely be changed, certainly not for a single copy.&#xD;&#xA;&#xD;&#xA;Yes there are recordable CDs now but they were not common at the time windows 95 was released, cost more in bulk than pressing and generally have worse longevity.&#xD;&#xA;&#xD;&#xA;Even for media that is not pressed making a load of identical copies is simpler than uniqely serialising disks.&#xD;&#xA;&#xD;&#xA;I guess this was a large part of the motivation for having product keys in the first place, to allow a copy sold to be uniquely identified even though it was shipped on bulk-copied media." />
  <row Id="3304" PostHistoryTypeId="2" PostId="793" RevisionGUID="8fb3ec1c-732c-4343-ba38-78d8a037371d" CreationDate="2016-06-07T23:53:37.417" UserId="1880" Text="Found a great article that explains it really well!&#xA;&#xA;&quot;Windows 3.1 uses cooperative multi-tasking – meaning that each application that is in the process of running is instructed to periodically check a message queue to find out if any other application is asking for use of the CPU and, if so, to yield control to that application. However, many Windows 3.1 applications would check the message queue only infrequently, or not at all, and monopolize control of the CPU for as much time as they required. A pre-emptive multi-tasking system like Windows 95 will take CPU control away from a running application and distribute it to those that have a higher priority based on the system’s needs.&quot; http://www.howtogeek.com/187631/how-was-multi-tasking-possible-in-older-versions-of-windows/" />
  <row Id="3305" PostHistoryTypeId="2" PostId="794" RevisionGUID="ace1a247-53c9-463e-a1fe-f544f73ce556" CreationDate="2016-06-07T23:58:39.270" UserId="105" Text="I'm talking about true MSX computers, not MSX-ish, or partly compatible MSX computers (Spectravideo 318, I'm looking at you). Was any of them released, or designed before the announcement of the standard (June, 27, 1983)" />
  <row Id="3306" PostHistoryTypeId="1" PostId="794" RevisionGUID="ace1a247-53c9-463e-a1fe-f544f73ce556" CreationDate="2016-06-07T23:58:39.270" UserId="105" Text="Which was the first true compatible MSX computer available in the market?" />
  <row Id="3307" PostHistoryTypeId="3" PostId="794" RevisionGUID="ace1a247-53c9-463e-a1fe-f544f73ce556" CreationDate="2016-06-07T23:58:39.270" UserId="105" Text="&lt;msx&gt;" />
  <row Id="3308" PostHistoryTypeId="5" PostId="794" RevisionGUID="961dd182-e731-4bac-a554-abdc5868a528" CreationDate="2016-06-08T00:40:03.443" UserId="105" Comment="deleted 95 characters in body" Text="I'm talking about true MSX computers, not MSX-ish, or partially compatible MSX computers (Spectravideo 318, I'm looking at you)." />
  <row Id="3309" PostHistoryTypeId="2" PostId="795" RevisionGUID="a9650a8e-608b-429b-aede-256f27ff61e5" CreationDate="2016-06-08T00:52:08.887" UserId="105" Text="I'm trying to replicate the Vectrex, but I don't want to deal with bare CRTs, death-level voltages and the like. So I need my Vectrex implementation to be able to be hooked to a regular CRT/LCD screen.&#xD;&#xA;&#xD;&#xA;I am well aware of the vector nature of the Vectrex hardware, but due to the Vectrex manipulates the beam deflection using discrete values stored in a register, then converted to an analog voltage using a D/A converter, I suspect that not every position in the CRT can be reached by the beam, but only discrete positions, as well as not every bright level is available, but only (64?) levels.&#xD;&#xA;&#xD;&#xA;So, is this true? Can we place the beam only in certain positions? If so, which ones? If not, how can we place the beam wherever we like using discrete values for X and Y?&#xD;&#xA;&#xD;&#xA;On the other way, the beam may not be placed in any position, but if we change from a position to another position and then to the previous one in a loop, does the beam traces a straight line from one point to the other one? Or will we see two points, each of them at each starting and ending positions?&#xD;&#xA;&#xD;&#xA;So at the end, my questions can be summarized as: which is the minimum resolution I would have to adopt in order to emulate the vector screen of a Vectrex?" />
  <row Id="3310" PostHistoryTypeId="1" PostId="795" RevisionGUID="a9650a8e-608b-429b-aede-256f27ff61e5" CreationDate="2016-06-08T00:52:08.887" UserId="105" Text="Which is the &quot;equivalent bit-map resolution&quot; of a Vectrex display?" />
  <row Id="3311" PostHistoryTypeId="3" PostId="795" RevisionGUID="a9650a8e-608b-429b-aede-256f27ff61e5" CreationDate="2016-06-08T00:52:08.887" UserId="105" Text="&lt;vectrex&gt;" />
  <row Id="3312" PostHistoryTypeId="2" PostId="796" RevisionGUID="4996acf9-7992-43fd-9cce-b235ca301946" CreationDate="2016-06-08T01:30:05.313" UserId="105" Text="For win16 programs, Windows implemented cooperative multitasking. Its implementation was based upon the &quot;message loop&quot; architecture of every Windows program.&#xD;&#xA;&#xD;&#xA;The duty of every program was to endlessly run in a loop in which a call to `GetMessage()` function was performed. This function call looks whether a message to this process is in the queue. If there is one, it is retrieved (`GetMessage`), optionally translated (`TranslateMessage`, this is done to convert keyboard shortcuts into menu actions) and finally, passed to the window procedure (`DispatchMessage`).&#xD;&#xA;&#xD;&#xA;If there is no message available in the queue, Windows suspends the current task and gives the CPU to other task, which will try to retrieve a message from its queue as well, yielding the CPU to another task if no message is present.&#xD;&#xA;&#xD;&#xA;If a program needed to perform background tasks while there was no pending messages in its queue, it would call `PeekMessage` instead of `GetMessage`. This didn't make the task to relinquish the CPU, as `PeekMessage` would inmediately return to the caller task informing whether a message is available or not. This was used to time-multiplex message processing with another time-consuming task (think of a 3D program doing a render, but allowing the user to cancel that render by pressing a &quot;Cancel&quot; button).&#xD;&#xA;&#xD;&#xA;If this time-consumning task was actually very time-consuming, a well-behaved program should call the `yield()` function from time to time in order to relinquish the CPU and let other task to run.&#xD;&#xA;&#xD;&#xA;A bad-behaved program could easily hog the CPU by not retrieving messages too often, or spending too much time in a window procedure function.&#xD;&#xA;&#xD;&#xA;The situation was quite different for MS DOS boxes. They ran using the V8086 mode of the 80386 (if Windows was running in enhanced mode). Windows-aware programs ran in the so-called VM 0 (virtual machine 0). DOS boxes ran from VM 1 upwards.&#xD;&#xA;&#xD;&#xA;As DOS programs were not aware of CPU sharing and thus, there was no `yield()` function in the DOS world, Windows assigned each DOS box a different virtual machine. Virtual machines used preemptive multitasking in Windows 3.1 and thus, each DOS box could run concurrently of each others, and concurrently of any Windodws-aware program.&#xD;&#xA;&#xD;&#xA;" />
  <row Id="3313" PostHistoryTypeId="5" PostId="779" RevisionGUID="be5b064d-d925-47ff-8504-933f23dccf93" CreationDate="2016-06-08T02:29:49.800" UserId="12" Comment="added 215 characters in body" Text="**I am not a lawyer. This is not legal advice. Intellectual property law at a local and global level is a complex subject most lawyers don't even fully understand. Trying to distill all of that into a single SE answer is a fool's errand.**&#xD;&#xA;&#xD;&#xA;That being said, some general comments about the legalities of retro system ROM images can be made by this particular fool.&#xD;&#xA;&#xD;&#xA;Legalities will differ depending on your locale but, in general, downloading ROM images for any system (regardless of age) is strictly **not** allowed by law. In fact, it _may_ even be considered &quot;software piracy&quot; to make images of ROMs you legally own. This is why emulation sites shy away from showing you where or how to get ROMs for their software.&#xD;&#xA;&#xD;&#xA;There are locales, however, where it is legal to create and download copyrighted material for personal, non-commercial use. **Check with an expert about your local statutes on the subject.**&#xD;&#xA;&#xD;&#xA;The inverse is also true: **there is no global, over-arching law that governs or specifically allows downloading ROM images**, especially those that make special claims regarding some specific number of hours that intellectual property can be in your possession.&#xD;&#xA;&#xD;&#xA;And even if downloading an image *is* legal where you are (or is not specifically _illegal_, as the case may be), it's not like a particularly litigious rightsholder won't try to pursue legal recourse if they think they have a case. (Perhaps an unlikely situation, but words are small comfort if your ISP is suddenly pressured to disconnect you.)&#xD;&#xA;&#xD;&#xA;Of course, there are many sites that offer ROM images of games and system firmware for download. These sites are almost certainly breaking the law (or are in a legal grey area), though in many cases the rightsholders may not have any interest in pursuing legal interests. Such sites may also be operating out of countries where it is legal to offer such services, or the legal recourse for rightsholders are limited.&#xD;&#xA;&#xD;&#xA;Whether or not creating or downloading old or abandoned images is adhering to the spirit of the law is up to individuals." />
  <row Id="3314" PostHistoryTypeId="2" PostId="797" RevisionGUID="ded60d3f-ff0c-4f05-bd44-adbaa2507db8" CreationDate="2016-06-08T02:31:47.000" UserId="1880" Text="I'm sure a lot of us have come across WinWorldPC online. With the valuable resources that it has for obsolete systems, is it actually legal? For example, I could download almost any Windows system I wanted (theoretically) that came out earlier than Windows XP. If it is legal, I think it's a great site that preserves the history of computers.&#xD;&#xA;&#xD;&#xA;**EDIT:**&#xD;&#xA;After taking a look at their ABOUT page, this is something they said: &quot;A consequence of heavy bandwidth usage and copyright issues, finding adequate hosting proved to be one of the most significant challenges in WinWorld's early years...&quot;" />
  <row Id="3315" PostHistoryTypeId="1" PostId="797" RevisionGUID="ded60d3f-ff0c-4f05-bd44-adbaa2507db8" CreationDate="2016-06-08T02:31:47.000" UserId="1880" Text="Is WinWorldPC legal?" />
  <row Id="3316" PostHistoryTypeId="3" PostId="797" RevisionGUID="ded60d3f-ff0c-4f05-bd44-adbaa2507db8" CreationDate="2016-06-08T02:31:47.000" UserId="1880" Text="&lt;ms-dos&gt;&lt;windows-95&gt;" />
  <row Id="3317" PostHistoryTypeId="5" PostId="797" RevisionGUID="90fe6ba1-7f08-4b0a-8d3c-297779d73a43" CreationDate="2016-06-08T02:51:04.063" UserId="1880" Comment="added 38 characters in body" Text="I'm sure a lot of us have come across WinWorldPC online. With the valuable resources that it has for obsolete systems, is it actually legal? For example, I could download almost any Windows system I wanted (theoretically) that came out earlier than Windows XP. If it is legal, I think it's a great site that preserves the history of computers.&#xD;&#xA;&#xD;&#xA;**EDIT:**&#xD;&#xA;After taking a look at their ABOUT page, this is something they said: &quot;A consequence of heavy bandwidth usage and copyright issues, finding adequate hosting proved to be one of the most significant challenges in WinWorld's early years&quot; ...but I'm still not sure if it's legal." />
  <row Id="3318" PostHistoryTypeId="5" PostId="779" RevisionGUID="5c05ac8d-507d-457a-9fde-0fe3a7578ef2" CreationDate="2016-06-08T03:03:08.773" UserId="12" Comment="added 178 characters in body" Text="**I am not a lawyer. This is not legal advice. Intellectual property law at a local and global level is a complex subject most lawyers don't even fully understand. Trying to distill all of that into a single SE answer is a fool's errand.**&#xD;&#xA;&#xD;&#xA;That being said, some general comments about the legalities of retro system ROM images can be made by this particular fool.&#xD;&#xA;&#xD;&#xA;Legalities will differ depending on your locale but, in general, downloading ROM images for any system (regardless of age) is strictly **not** allowed by law. In fact, it _may_ even be considered &quot;software piracy&quot; to make images of ROMs you legally own. This is why emulation sites shy away from showing you where or how to get ROMs for their software.&#xD;&#xA;&#xD;&#xA;There are locales, however, where it is legal to create and download copyrighted material for personal, non-commercial use. **Check with an expert about your local statutes on the subject.**&#xD;&#xA;&#xD;&#xA;The inverse is also true: **there is no global, over-arching law that governs or specifically allows downloading ROM images**, especially those that make special claims regarding some specific number of hours that intellectual property can be in your possession.&#xD;&#xA;&#xD;&#xA;And even if downloading an image *is* legal where you are (or is not specifically _illegal_, as the case may be), it's not like a particularly litigious rightsholder won't try to pursue legal recourse if they think they have a case. (Perhaps an unlikely situation, but words are small comfort if your ISP is suddenly pressured to disconnect you.)&#xD;&#xA;&#xD;&#xA;Of course, there are many sites that offer ROM images of games and system firmware for download. These sites are almost certainly breaking the law (or are in a legal grey area), though in many cases the rightsholders may not have any interest in pursuing legal interests. Such sites may also be operating out of countries where it is legal to offer such services, or the legal recourse for rightsholders are limited.&#xD;&#xA;&#xD;&#xA;Finally, I would be remiss if I did not link to the [Wikipedia article on the legal implications of abandonware][1].&#xD;&#xA;&#xD;&#xA;Whether or not creating or downloading old or abandoned images is adhering to the spirit of the law is up to individuals.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://en.wikipedia.org/wiki/Abandonware#Law" />
  <row Id="3319" PostHistoryTypeId="2" PostId="798" RevisionGUID="d73dfbe5-c41b-4bac-b017-5ebe84ecba03" CreationDate="2016-06-08T03:19:09.407" UserId="12" Text="In a nutshell, if that site is hosting intellectual property, then they are technically breaking some law, somewhere. As are you if you download that property, or share it with others.&#xD;&#xA;&#xD;&#xA;Laying aside any specific public domain material they are hosting, or specific law that you feel allows you access to copyrighted material. Both of which are specific exceptions to the general rule that Berne Convenction signatories are places where copyright enforcement is a real thing.&#xD;&#xA;&#xD;&#xA;As it says on the [WinWorldPC forum](https://winworldpc.com/winboards/viewtopic.php?f=14&amp;t=6324) when asked if the site is hosting copyrighted material:&#xD;&#xA;&#xD;&#xA;&gt; Technically, yes. But all the software that WinWorld carries is no&#xD;&#xA;&gt; longer supported and therefore considered abandoned. It's highly&#xD;&#xA;&gt; unlikely that anyone even remotely cares anymore.&#xD;&#xA;&#xD;&#xA;But Abandonware [doesn't mean legally unencumbered][1] (large quote, because this really gets to the heart of the matter):&#xD;&#xA;&#xD;&#xA;&gt; In most cases, software classed as abandonware is not in the public&#xD;&#xA;&gt; domain, as it has never had its original copyright officially revoked&#xD;&#xA;&gt; and some company or individual may still own rights. While sharing of&#xD;&#xA;&gt; such software is usually considered copyright infringement, in&#xD;&#xA;&gt; practice copyright holders rarely enforce their abandonware copyrights&#xD;&#xA;&gt; for a number of reasons – chiefly among which the software is&#xD;&#xA;&gt; technologically obsolete and therefore has no commercial value,&#xD;&#xA;&gt; therefore rendering copyright enforcement a pointless enterprise. By&#xD;&#xA;&gt; default, this may allow the product to de facto lapse into the public&#xD;&#xA;&gt; domain to such an extent that enforcement becomes impractical.&#xD;&#xA;&gt; &#xD;&#xA;&gt; Rarely has any abandonware case gone to court. But it is still&#xD;&#xA;&gt; unlawful to distribute copies of old copyrighted software and games,&#xD;&#xA;&gt; with or without compensation, in any Berne Convention signatory&#xD;&#xA;&gt; country.&#xD;&#xA;&#xD;&#xA;So, most of what they are hosting is technically under copyright, and those rightsholders could exercise the rights at any time. It is probably _technically_ breaking some law where you live to download what they are offering.&#xD;&#xA;&#xD;&#xA;Of course, the ramifications for you, personally, for doing so are probably pretty small.&#xD;&#xA;&#xD;&#xA;But, no. Strictly speaking, this site is not allowed to offer most of the software they offer. And no, it is not legal for you to acquire the software. Strictly speaking.&#xD;&#xA;&#xD;&#xA;  [1]: https://en.wikipedia.org/wiki/Abandonware#Law" />
  <row Id="3320" PostHistoryTypeId="5" PostId="798" RevisionGUID="decc25ff-55a7-4d94-9573-e640da03c713" CreationDate="2016-06-08T03:25:41.827" UserId="12" Comment="added 9 characters in body" Text="In a nutshell, if that site is hosting copyrighted intellectual property not owned or licensed by whoever owns the site, then they are technically breaking some law, somewhere. As are you if you download that property, or share it with others.&#xD;&#xA;&#xD;&#xA;Laying aside any specific public domain material they are hosting, or specific law that you feel allows you access to copyrighted material. Both of which are specific exceptions to the general rule that Berne Convenction signatories are places where copyright enforcement is a real thing.&#xD;&#xA;&#xD;&#xA;As it says on the [WinWorldPC forum](https://winworldpc.com/winboards/viewtopic.php?f=14&amp;t=6324) when asked if the site is hosting copyrighted material:&#xD;&#xA;&#xD;&#xA;&gt; Technically, yes. But all the software that WinWorld carries is no&#xD;&#xA;&gt; longer supported and therefore considered abandoned. It's highly&#xD;&#xA;&gt; unlikely that anyone even remotely cares anymore.&#xD;&#xA;&#xD;&#xA;But Abandonware [doesn't mean legally unencumbered][1] (large quote, because this really gets to the heart of the matter):&#xD;&#xA;&#xD;&#xA;&gt; In most cases, software classed as abandonware is not in the public&#xD;&#xA;&gt; domain, as it has never had its original copyright officially revoked&#xD;&#xA;&gt; and some company or individual may still own rights. While sharing of&#xD;&#xA;&gt; such software is usually considered copyright infringement, in&#xD;&#xA;&gt; practice copyright holders rarely enforce their abandonware copyrights&#xD;&#xA;&gt; for a number of reasons – chiefly among which the software is&#xD;&#xA;&gt; technologically obsolete and therefore has no commercial value,&#xD;&#xA;&gt; therefore rendering copyright enforcement a pointless enterprise. By&#xD;&#xA;&gt; default, this may allow the product to de facto lapse into the public&#xD;&#xA;&gt; domain to such an extent that enforcement becomes impractical.&#xD;&#xA;&gt; &#xD;&#xA;&gt; Rarely has any abandonware case gone to court. But it is still&#xD;&#xA;&gt; unlawful to distribute copies of old copyrighted software and games,&#xD;&#xA;&gt; with or without compensation, in any Berne Convention signatory&#xD;&#xA;&gt; country.&#xD;&#xA;&#xD;&#xA;So, most of what they are hosting is technically under copyright, and those rightsholders could exercise their rights at any time. It is also (probably) _technically_ breaking some law where you live to download what they are offering.&#xD;&#xA;&#xD;&#xA;Of course, the ramifications for you, personally, for doing so are probably pretty small.&#xD;&#xA;&#xD;&#xA;But, no. Strictly speaking, this site is not allowed to offer most of the software they offer. And no, it is not legal for you to acquire the software. Strictly speaking.&#xD;&#xA;&#xD;&#xA;  [1]: https://en.wikipedia.org/wiki/Abandonware#Law" />
  <row Id="3321" PostHistoryTypeId="5" PostId="798" RevisionGUID="b9da853c-bb9c-4098-874a-2e5da6b959bf" CreationDate="2016-06-08T03:37:58.983" UserId="12" Comment="&quot;Berne Convection&quot; is an awesome typo, and I nearly left it in for fun." Text="In a nutshell, if that site is hosting copyrighted intellectual property not owned or licensed by whoever owns the site, then they are technically breaking some law, somewhere. As are you if you download that property, or share it with others.&#xD;&#xA;&#xD;&#xA;Laying aside any specific public domain material they are hosting, or specific law that you feel allows you access to copyrighted material. Both of which are specific exceptions to the general rule that Berne Convention signatories are places where copyright enforcement is a real thing.&#xD;&#xA;&#xD;&#xA;As it says on the [WinWorldPC forum](https://winworldpc.com/winboards/viewtopic.php?f=14&amp;t=6324) when asked if the site is hosting copyrighted material:&#xD;&#xA;&#xD;&#xA;&gt; Technically, yes. But all the software that WinWorld carries is no&#xD;&#xA;&gt; longer supported and therefore considered abandoned. It's highly&#xD;&#xA;&gt; unlikely that anyone even remotely cares anymore.&#xD;&#xA;&#xD;&#xA;But Abandonware [doesn't mean legally unencumbered][1] (large quote, because this really gets to the heart of the matter):&#xD;&#xA;&#xD;&#xA;&gt; In most cases, software classed as abandonware is not in the public&#xD;&#xA;&gt; domain, as it has never had its original copyright officially revoked&#xD;&#xA;&gt; and some company or individual may still own rights. While sharing of&#xD;&#xA;&gt; such software is usually considered copyright infringement, in&#xD;&#xA;&gt; practice copyright holders rarely enforce their abandonware copyrights&#xD;&#xA;&gt; for a number of reasons – chiefly among which the software is&#xD;&#xA;&gt; technologically obsolete and therefore has no commercial value,&#xD;&#xA;&gt; therefore rendering copyright enforcement a pointless enterprise. By&#xD;&#xA;&gt; default, this may allow the product to de facto lapse into the public&#xD;&#xA;&gt; domain to such an extent that enforcement becomes impractical.&#xD;&#xA;&gt; &#xD;&#xA;&gt; Rarely has any abandonware case gone to court. But it is still&#xD;&#xA;&gt; unlawful to distribute copies of old copyrighted software and games,&#xD;&#xA;&gt; with or without compensation, in any Berne Convention signatory&#xD;&#xA;&gt; country.&#xD;&#xA;&#xD;&#xA;So, most of what they are hosting is technically under copyright, and those rightsholders could exercise their rights at any time. It is also (probably) _technically_ breaking some law where you live to download what they are offering.&#xD;&#xA;&#xD;&#xA;Of course, the ramifications for you, personally, for doing so are probably pretty small.&#xD;&#xA;&#xD;&#xA;But, no. Strictly speaking, this site is not allowed to offer most of the software they offer. And no, it is not legal for you to acquire the software. Strictly speaking.&#xD;&#xA;&#xD;&#xA;  [1]: https://en.wikipedia.org/wiki/Abandonware#Law" />
  <row Id="3322" PostHistoryTypeId="2" PostId="799" RevisionGUID="78f53a87-26d8-4fe5-9940-b52e9af9cc5e" CreationDate="2016-06-08T04:19:30.330" UserId="-1" Text="" />
  <row Id="3323" PostHistoryTypeId="2" PostId="800" RevisionGUID="1ed279b2-9635-4ecf-a671-4da83472a148" CreationDate="2016-06-08T04:19:30.330" UserId="-1" Text="" />
  <row Id="3324" PostHistoryTypeId="2" PostId="801" RevisionGUID="56e3cfcf-32d1-4210-ab2f-b1db2d44b573" CreationDate="2016-06-08T04:21:13.683" UserId="-1" Text="" />
  <row Id="3325" PostHistoryTypeId="2" PostId="802" RevisionGUID="2e81789b-2102-4cbb-adf2-05b6c1e11886" CreationDate="2016-06-08T04:21:13.683" UserId="-1" Text="" />
  <row Id="3326" PostHistoryTypeId="2" PostId="803" RevisionGUID="2de0a9b9-bdfd-4e4f-8e0b-a8693c5fbcdc" CreationDate="2016-06-08T04:34:19.757" UserId="621" Text="[64DD.org][1] has some game dumps and information on how to play 64DD games in MAME or Project64.  Is there any way to play 64DD dumps on a Mac using [sixtyforce][2] (my version is registered)?  I was thinking about sending Gerrit Goossen an email about adding support as a feature request or asking to help with code the 64DD IPL support.&#xD;&#xA;&#xD;&#xA;If not, what are my options?  Can I build the source of Project64 on Mac if sixtyforce does not support 64DD dumps?&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://64dd.org/index.html&#xD;&#xA;  [2]: http://sixtyforce.com/" />
  <row Id="3327" PostHistoryTypeId="1" PostId="803" RevisionGUID="2de0a9b9-bdfd-4e4f-8e0b-a8693c5fbcdc" CreationDate="2016-06-08T04:34:19.757" UserId="621" Text="How can I play Nintendo 64DD Games with sixtyforce (on Mac)?" />
  <row Id="3328" PostHistoryTypeId="3" PostId="803" RevisionGUID="2de0a9b9-bdfd-4e4f-8e0b-a8693c5fbcdc" CreationDate="2016-06-08T04:34:19.757" UserId="621" Text="&lt;emulation&gt;&lt;nintendo&gt;&lt;nintendo-64&gt;&lt;nintendo-64dd&gt;" />
  <row Id="3329" PostHistoryTypeId="2" PostId="804" RevisionGUID="97f77338-2107-465c-b45d-bac3bcaa81a3" CreationDate="2016-06-08T04:36:09.643" UserId="-1" Text="" />
  <row Id="3330" PostHistoryTypeId="2" PostId="805" RevisionGUID="6109246e-caa0-4cb8-abb1-899a951ee60b" CreationDate="2016-06-08T04:36:09.643" UserId="-1" Text="" />
  <row Id="3331" PostHistoryTypeId="2" PostId="806" RevisionGUID="5b2d1524-fddc-45c0-925d-a1b67e647c25" CreationDate="2016-06-08T04:36:55.363" UserId="-1" Text="" />
  <row Id="3332" PostHistoryTypeId="2" PostId="807" RevisionGUID="7963091c-fa4a-42e7-af61-d664a09c08b2" CreationDate="2016-06-08T04:36:55.363" UserId="-1" Text="" />
  <row Id="3333" PostHistoryTypeId="2" PostId="808" RevisionGUID="2e04844e-94fb-4bcb-8f16-bbd76b1efe42" CreationDate="2016-06-08T04:40:22.383" UserId="-1" Text="" />
  <row Id="3334" PostHistoryTypeId="2" PostId="809" RevisionGUID="deb4448e-b9ed-4462-a310-0b55cc0438d5" CreationDate="2016-06-08T04:40:22.383" UserId="-1" Text="" />
  <row Id="3335" PostHistoryTypeId="2" PostId="810" RevisionGUID="1aa3c91a-d515-4b40-8b3e-5ff3748cff17" CreationDate="2016-06-08T04:40:58.023" UserId="-1" Text="" />
  <row Id="3336" PostHistoryTypeId="2" PostId="811" RevisionGUID="4df9481c-aa56-4ee3-b904-0c4b4c79509d" CreationDate="2016-06-08T04:40:58.023" UserId="-1" Text="" />
  <row Id="3338" PostHistoryTypeId="5" PostId="577" RevisionGUID="42cec8be-9872-45c5-838b-26390af62e99" CreationDate="2016-06-08T04:48:10.333" UserId="621" Comment="Layout." Text="According to Intel's *8080-8085 Assembly Language Programming* guide, the OP Code `20` corresponds to the Read Interrupt Mask (RIM) instruction, and `30` corresponds to the Set Interrupt Mask (SIM) instruction.&#xD;&#xA;&#xD;&#xA;[![RIM][1]][1]&#xD;&#xA;[![SIM][2]][2]&#xD;&#xA;&#xD;&#xA;[![Instruction Set Guide][3]][4]&#xD;&#xA;&#xD;&#xA;But these interrupts were only available on the 8085. What did these instructions do on the earlier 8080 chipset? How do they work on the 8085?&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/zE5O7.png&#xD;&#xA;  [2]: http://i.stack.imgur.com/Em2ZP.png&#xD;&#xA;  [3]: http://i.stack.imgur.com/f2pC2m.png (click to enlarge)&#xD;&#xA;  [4]: http://i.stack.imgur.com/f2pC2.png" />
  <row Id="3339" PostHistoryTypeId="2" PostId="812" RevisionGUID="91857d11-7a4e-4097-b777-fc262cf73ad6" CreationDate="2016-06-08T04:49:53.747" UserId="75" Text="[This page on gamasutra][1] says 330x410.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.gamasutra.com/view/feature/3117/a_history_of_gaming_platforms_the_.php?print=1" />
  <row Id="3340" PostHistoryTypeId="2" PostId="813" RevisionGUID="327f739d-29b8-43af-9893-6c166f6827af" CreationDate="2016-06-08T05:20:01.730" UserId="808" Text="The situation isn't nearly as cut and dried as Wikipedia might make it sound.&#xD;&#xA;&#xD;&#xA;For example, under US copyright law:&#xD;&#xA;&#xD;&#xA;&gt; § 117 . Limitations on exclusive rights: Computer programs&#xD;&#xA;&#xD;&#xA;&gt; (a) Making of Additional Copy or Adaptation by Owner of Copy.—Notwithstanding the provisions of section 106, it is **not an infringement** for the owner of a copy of a computer program to make or authorize the making of another copy or adaptation of that computer program provided:&#xD;&#xA;&#xD;&#xA;&gt; (1) that such a new copy or adaptation is created as an essential step in the utilization of the computer program in conjunction with a machine and that it is used in no other manner,&#xD;&#xA;&#xD;&#xA;I doubt that this was the *intent* of that bit of law, but this does give some wiggle room for the site owners to at least argue that what they/their users are doing is legal.&#xD;&#xA;&#xD;&#xA;Of course, copyright law does also vary (somewhat) with locale. Depending on where their servers are located, it's at least possible that the law there is somewhat less strict.&#xD;&#xA;&#xD;&#xA;There's another technicality that figures in here as well: most of copyright law is more or less aimed at a situation such as another publisher taking a work and selling the misappropriated work for their own profit. To do that, the person/group who's misappropriated the work normally has to make copies, then offer them for sale--and much of most copyright law is written to prevent that.&#xD;&#xA;&#xD;&#xA;In a case like this, where the site isn't actually making copies, but is merely placing the work in a situation where somebody else can make copies, many of those provisions sort of fall apart. So, the basic rights under US copyright law are:&#xD;&#xA;&#xD;&#xA;&gt; § 106 . Exclusive rights in copyrighted works&#xD;&#xA;&#xD;&#xA;&gt; Subject to sections 107 through 122, the owner of copyright under this title has the exclusive rights to do and to authorize any of the following:&#xD;&#xA;&#xD;&#xA;&gt; (1) to reproduce the copyrighted work in copies or phonorecords;&#xD;&#xA;&#xD;&#xA;&gt; (2) to prepare derivative works based upon the copyrighted work;&#xD;&#xA;&#xD;&#xA;&gt; (3) to distribute copies or phonorecords of the copyrighted work to the public by sale or other transfer of ownership, or by rental, lease, or lending;&#xD;&#xA;&#xD;&#xA;&gt; (4) in the case of literary, musical, dramatic, and choreographic works, pantomimes, and motion pictures and other audiovisual works, to perform the copyrighted work publicly;&#xD;&#xA;&#xD;&#xA;&gt; (5) in the case of literary, musical, dramatic, and choreographic works, pantomimes, and pictorial, graphic, or sculptural works, including the individual images of a motion picture or other audiovisual work, to display the copyrighted work publicly; and&#xD;&#xA;&#xD;&#xA;&gt; (6) in the case of sound recordings, to perform the copyrighted work publicly by means of a digital audio transmission.&#xD;&#xA;&#xD;&#xA;So, let's consider these one at a time:&#xD;&#xA;&#xD;&#xA;1. The site isn't really reproducing the copyrighted work, except to the degree that (for example) a web cache server held all or part of a copy of the work.&#xD;&#xA;2. It doesn't appear that they're preparing any derivative works. &#xD;&#xA;3. I don't see anything indicating that they're claiming to transfer ownership, lease, or lend the work (&quot;lending&quot; carries the specific &#xD;&#xA;4. through 6. clearly don't apply to an operating system (nor probably to any computer program).&#xD;&#xA;&#xD;&#xA;This leave us with very little in the way of a really obvious infringement (on the part of the site) and a provision that could at least be argued to say that what they're doing is legal.&#xD;&#xA;&#xD;&#xA;That means just about any infringement that might occur would have to be in the part of the person doing the downloading, not the web site itself. Here (again) the first point brought up from §117 still (at least potentially) applies--it may still be legal. Of course, there's also the possibility that the downloader is simply somebody who (at some point in the past) actually bought a license to the program they're downloading/using. In that case, if that license hasn't ever been transferred to anybody else (and most contain provisions saying you *can't* transfer them) then the user is probably still authorized to install and use it (most don't contain any limit on how long the license lasts).&#xD;&#xA;&#xD;&#xA;" />
  <row Id="3341" PostHistoryTypeId="2" PostId="814" RevisionGUID="b4e8e344-0394-4346-b30a-f2344333f191" CreationDate="2016-06-08T05:54:10.370" UserId="808" Text="The limitations in the registers do not make a Vectrex display equivalent to any particular resolution of bitmap.&#xD;&#xA;&#xD;&#xA;The registers place limits on the resolution at which you can specify positions to move the beam to--that much is absolutely correct. For example, if you decided to draw a dot at each possible position on the screen, you would indeed be limited to specific, discrete positions.&#xD;&#xA;&#xD;&#xA;That's not the whole story though. Much of the reason for high resolution on a raster display is to keep lines from looking &quot;jaggy&quot;:&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;With a raster display, the slanted line is made up of discrete pixels at specific positions. Especially with a line like this that's nearly horizontal (or nearly vertical) those discrete steps are quite visible (even on a display with fairly high resolution).&#xD;&#xA;&#xD;&#xA;With a vector display, you don't get that though. What happens is that you move the beam to a position, turn on the beam, then move it to some other position. The line that's drawn is essentially perfectly straight from the start point to the end point. You don't get a stair-step effect from one to the other at all.&#xD;&#xA;&#xD;&#xA;Modern graphics hardware has a number of tricks (mostly anti-aliasing of various sorts) to minimize the visibility of these jagged artifacts--but they never really eliminate them like a vector display does.&#xD;&#xA;&#xD;&#xA;Bottom line: from one perspective, the Vectrex display has quite low resolution--but from another perspective, its resolution is essentially infinite. It's enough different that there's no resolution of raster display that's really equivalent.&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/SMuuY.png" />
  <row Id="3342" PostHistoryTypeId="10" PostId="786" RevisionGUID="a95bdf6d-be62-408f-b372-4961f52bb037" CreationDate="2016-06-08T07:02:43.573" UserId="-1" Comment="102" Text="{&quot;Voters&quot;:[{&quot;Id&quot;:333,&quot;DisplayName&quot;:&quot;pipe&quot;},{&quot;Id&quot;:12,&quot;DisplayName&quot;:&quot;jdv&quot;},{&quot;Id&quot;:621,&quot;DisplayName&quot;:&quot;JAL&quot;},{&quot;Id&quot;:320,&quot;DisplayName&quot;:&quot;mnem&quot;},{&quot;Id&quot;:367,&quot;DisplayName&quot;:&quot;Kuba Tyszko&quot;}]}" />
  <row Id="3343" PostHistoryTypeId="2" PostId="815" RevisionGUID="653f1e68-bc7c-4e5b-a373-97ecb115d1cf" CreationDate="2016-06-08T07:11:17.943" UserId="1903" Text="First to answer it: **No, it's not legal.** Others have already pointed out why.&#xD;&#xA;&#xD;&#xA;As an addition I'd like to point out the usual consequences:&#xD;&#xA;&#xD;&#xA; - As for old software, in general ROMs are **tolerated**, actually even Nintendo doesn't care about, I think, GCN and older.&#xD;&#xA; - A ROM is **less likely to be tolerated** if it has been **remastered, or re-released as is, on a up-to-date console**. For example, now that the first Pokemon editions are available for Virtual Console, you should delete them from your PC.&#xD;&#xA; - If you, however, **load an emulator on another game engine**, e.g. the Wii GCN emulator Nintendont on your Wii or Wii U, your **warranty might be voided** because it's an unauthorized modification.&#xD;&#xA; - A **modded ROM**, i.e. a ROM with a substantial difference from all original games existing, is even **more likely to be tolerated**. As a few well-known examples, I'd like to mention Super Mario Star Road (modded SM64) and Kaizo Mario (modded SMW)." />
  <row Id="3344" PostHistoryTypeId="5" PostId="802" RevisionGUID="88b3efa9-8b35-4467-9734-b043c5729452" CreationDate="2016-06-08T07:40:04.163" UserId="621" Comment="added 78 characters in body" Text="for questions about the worth or value of retrocomputing hardware and software" />
  <row Id="3345" PostHistoryTypeId="24" PostId="802" RevisionGUID="88b3efa9-8b35-4467-9734-b043c5729452" CreationDate="2016-06-08T07:40:04.163" Comment="Proposed by 621 approved by 276 edit id of 1271" />
  <row Id="3346" PostHistoryTypeId="5" PostId="804" RevisionGUID="8f1ae730-c5e2-4540-a2b7-52befa294bf0" CreationDate="2016-06-08T07:40:10.037" UserId="621" Comment="added 46 characters in body" Text="Related tags: [tag:nintendo] [tag:nintendo-64]" />
  <row Id="3347" PostHistoryTypeId="24" PostId="804" RevisionGUID="8f1ae730-c5e2-4540-a2b7-52befa294bf0" CreationDate="2016-06-08T07:40:10.037" Comment="Proposed by 621 approved by 276 edit id of 1272" />
  <row Id="3348" PostHistoryTypeId="5" PostId="799" RevisionGUID="ca47f5f1-0c0d-43a2-baa5-0e54dd0b617a" CreationDate="2016-06-08T07:40:14.210" UserId="621" Comment="added 123 characters in body" Text="The Vectrex is a vector display-based home video game console that was developed by Western Technologies/Smith Engineering." />
  <row Id="3349" PostHistoryTypeId="24" PostId="799" RevisionGUID="ca47f5f1-0c0d-43a2-baa5-0e54dd0b617a" CreationDate="2016-06-08T07:40:14.210" Comment="Proposed by 621 approved by 276 edit id of 1268" />
  <row Id="3350" PostHistoryTypeId="5" PostId="807" RevisionGUID="edc8f929-bc67-4ec7-8ba8-4a6d338424e4" CreationDate="2016-06-08T07:40:18.740" UserId="621" Comment="added 54 characters in body" Text="for questions about the Nintendo 64 home video console" />
  <row Id="3351" PostHistoryTypeId="24" PostId="807" RevisionGUID="edc8f929-bc67-4ec7-8ba8-4a6d338424e4" CreationDate="2016-06-08T07:40:18.740" Comment="Proposed by 621 approved by 276 edit id of 1275" />
  <row Id="3352" PostHistoryTypeId="5" PostId="811" RevisionGUID="f8e7be7b-686a-4a8e-8deb-3f38a73e8776" CreationDate="2016-06-08T07:40:22.147" UserId="621" Comment="added 62 characters in body" Text="for questions about Apple's iMac G3 line of personal computers" />
  <row Id="3353" PostHistoryTypeId="24" PostId="811" RevisionGUID="f8e7be7b-686a-4a8e-8deb-3f38a73e8776" CreationDate="2016-06-08T07:40:22.147" Comment="Proposed by 621 approved by 276 edit id of 1279" />
  <row Id="3354" PostHistoryTypeId="5" PostId="810" RevisionGUID="f3d7e8df-2d92-4956-b66b-e44c99b7bde3" CreationDate="2016-06-08T07:40:25.647" UserId="621" Comment="added 46 characters in body" Text="Related tags: [tag:apple-macintosh] [tag:imac]" />
  <row Id="3355" PostHistoryTypeId="24" PostId="810" RevisionGUID="f3d7e8df-2d92-4956-b66b-e44c99b7bde3" CreationDate="2016-06-08T07:40:25.647" Comment="Proposed by 621 approved by 276 edit id of 1278" />
  <row Id="3356" PostHistoryTypeId="5" PostId="782" RevisionGUID="c02d9102-05e1-4199-924b-05ea3f452843" CreationDate="2016-06-08T07:40:28.993" UserId="621" Comment="added 46 characters in body" Text="Related tags: [tag:floppy-disk] [tag:software]" />
  <row Id="3357" PostHistoryTypeId="24" PostId="782" RevisionGUID="c02d9102-05e1-4199-924b-05ea3f452843" CreationDate="2016-06-08T07:40:28.993" Comment="Proposed by 621 approved by 276 edit id of 1262" />
  <row Id="3358" PostHistoryTypeId="5" PostId="785" RevisionGUID="27048f1e-2e5a-4d62-98a1-572f21adf46e" CreationDate="2016-06-08T07:46:17.677" UserId="621" Comment="added 59 characters in body" Text="for questions about Microsoft's Windows 95 operating system" />
  <row Id="3359" PostHistoryTypeId="24" PostId="785" RevisionGUID="27048f1e-2e5a-4d62-98a1-572f21adf46e" CreationDate="2016-06-08T07:46:17.677" Comment="Proposed by 621 approved by 56, 276 edit id of 1265" />
  <row Id="3360" PostHistoryTypeId="5" PostId="809" RevisionGUID="156536cc-eb26-4d58-8890-0cc0ae2131f4" CreationDate="2016-06-08T07:46:45.180" UserId="621" Comment="added 68 characters in body" Text="for questions about Apple's iMac line of Macintosh desktop computers" />
  <row Id="3361" PostHistoryTypeId="24" PostId="809" RevisionGUID="156536cc-eb26-4d58-8890-0cc0ae2131f4" CreationDate="2016-06-08T07:46:45.180" Comment="Proposed by 621 approved by 276 edit id of 1277" />
  <row Id="3362" PostHistoryTypeId="5" PostId="784" RevisionGUID="2b5c0e28-cb57-4a2f-8d89-7bec4ae3ab42" CreationDate="2016-06-08T07:47:35.967" UserId="621" Comment="added 81 characters in body" Text="For questions about software that runs on Windows 95, use the [tag:software] tag." />
  <row Id="3363" PostHistoryTypeId="24" PostId="784" RevisionGUID="2b5c0e28-cb57-4a2f-8d89-7bec4ae3ab42" CreationDate="2016-06-08T07:47:35.967" Comment="Proposed by 621 approved by 56, 276 edit id of 1264" />
  <row Id="3364" PostHistoryTypeId="5" PostId="783" RevisionGUID="e9006670-5dd6-4027-8bff-9642f3915103" CreationDate="2016-06-08T07:47:39.607" UserId="621" Comment="added 79 characters in body" Text="for questions relating to the licensing of retrocomputing hardware and software" />
  <row Id="3365" PostHistoryTypeId="24" PostId="783" RevisionGUID="e9006670-5dd6-4027-8bff-9642f3915103" CreationDate="2016-06-08T07:47:39.607" Comment="Proposed by 621 approved by 56, 276 edit id of 1263" />
  <row Id="3366" PostHistoryTypeId="5" PostId="800" RevisionGUID="6413b2f1-f032-4d5a-a76f-d3e2cd3ba38d" CreationDate="2016-06-08T07:47:44.140" UserId="621" Comment="added 55 characters in body" Text="for questions about the Vectrex home video game console" />
  <row Id="3367" PostHistoryTypeId="24" PostId="800" RevisionGUID="6413b2f1-f032-4d5a-a76f-d3e2cd3ba38d" CreationDate="2016-06-08T07:47:44.140" Comment="Proposed by 621 approved by 276 edit id of 1269" />
  <row Id="3368" PostHistoryTypeId="5" PostId="806" RevisionGUID="2ede018d-6f66-41bb-a72d-38c5b3b1d86d" CreationDate="2016-06-08T07:47:46.967" UserId="621" Comment="added 48 characters in body" Text="Related tags: [tag:nintendo] [tag:nintendo-64dd]" />
  <row Id="3369" PostHistoryTypeId="24" PostId="806" RevisionGUID="2ede018d-6f66-41bb-a72d-38c5b3b1d86d" CreationDate="2016-06-08T07:47:46.967" Comment="Proposed by 621 approved by 276 edit id of 1274" />
  <row Id="3370" PostHistoryTypeId="5" PostId="801" RevisionGUID="befb616b-28db-48bb-a505-b33b05d68eab" CreationDate="2016-06-08T07:47:51.890" UserId="621" Comment="added 73 characters in body" Text="Notable Questions:&#xD;&#xA;&#xD;&#xA;* http://retrocomputing.stackexchange.com/q/713/621" />
  <row Id="3371" PostHistoryTypeId="24" PostId="801" RevisionGUID="befb616b-28db-48bb-a505-b33b05d68eab" CreationDate="2016-06-08T07:47:51.890" Comment="Proposed by 621 approved by 276 edit id of 1270" />
  <row Id="3372" PostHistoryTypeId="5" PostId="805" RevisionGUID="80757a83-60ba-4e44-8662-b9d2c88066ed" CreationDate="2016-06-08T07:47:56.843" UserId="621" Comment="added 100 characters in body" Text="for questions about the Nintendo 64 Disk Drive, a magnetic disk drive peripheral for the Nintendo 64" />
  <row Id="3373" PostHistoryTypeId="24" PostId="805" RevisionGUID="80757a83-60ba-4e44-8662-b9d2c88066ed" CreationDate="2016-06-08T07:47:56.843" Comment="Proposed by 621 approved by 276 edit id of 1273" />
  <row Id="3374" PostHistoryTypeId="5" PostId="808" RevisionGUID="98893f06-e8b2-480b-aba5-64c4d2a6f352" CreationDate="2016-06-08T07:48:02.640" UserId="621" Comment="added 49 characters in body" Text="Related tags: [tag:apple-macintosh] [tag:imac-g3]" />
  <row Id="3375" PostHistoryTypeId="24" PostId="808" RevisionGUID="98893f06-e8b2-480b-aba5-64c4d2a6f352" CreationDate="2016-06-08T07:48:02.640" Comment="Proposed by 621 approved by 276 edit id of 1276" />
  <row Id="3376" PostHistoryTypeId="5" PostId="222" RevisionGUID="85f31a8b-c75a-4dc7-a610-491cdd736a9d" CreationDate="2016-06-08T08:40:43.447" UserId="276" Comment="Created summary" Text="For questions regarding graphical - as opposed to text - processing and display." />
  <row Id="3377" PostHistoryTypeId="5" PostId="221" RevisionGUID="07739a32-c3db-4faa-8e39-ab63b1c4f5f5" CreationDate="2016-06-08T08:42:35.363" UserId="276" Comment="Refined body" Text="Use this tag for retro-computing questions related to graphics.  &#xD;&#xA;&#xD;&#xA;This can be about the way the hardware worked or about software techniques specific to older computers.&#xD;&#xA;&#xD;&#xA;" />
  <row Id="3379" PostHistoryTypeId="2" PostId="816" RevisionGUID="e211c918-4f6b-464a-9bbc-f5fdff723761" CreationDate="2016-06-08T09:18:04.880" UserId="276" Comment="Created body" Text="For questions regarding the production of video output signals from retrocomputers.&#xD;&#xA;&#xD;&#xA;See also [tag:display]" />
  <row Id="3380" PostHistoryTypeId="2" PostId="817" RevisionGUID="f624ec56-a5b1-4666-a8eb-4dbf216517f1" CreationDate="2016-06-08T09:18:04.880" UserId="276" Text="Questions regarding the hardware or drivers for video output from retrocomputers." />
  <row Id="3381" PostHistoryTypeId="2" PostId="818" RevisionGUID="192f9c4a-4346-4467-b629-72ded7142ab6" CreationDate="2016-06-08T10:26:56.677" UserId="276" Comment="Created body" Text="The display formats of retrocomputers.&#xD;&#xA;&#xD;&#xA;See also [tag:video]" />
  <row Id="3382" PostHistoryTypeId="2" PostId="819" RevisionGUID="d71886dd-9047-4d93-9ffd-8f1ec044d209" CreationDate="2016-06-08T10:26:56.677" UserId="276" Text="For questions regarding the display formats of retrocomputers." />
  <row Id="3383" PostHistoryTypeId="5" PostId="793" RevisionGUID="84d2c9fd-d988-4ab9-a573-7908e70554b9" CreationDate="2016-06-08T10:43:43.853" UserId="-1" Comment="Made the quote an actual formatted quote and clarified what was the final url." Text="Found a great article that explains it really well!&#xD;&#xA;&#xD;&#xA;&gt; Windows 3.1 uses cooperative multi-tasking – meaning that each&#xD;&#xA;&gt; application that is in the process of running is instructed to&#xD;&#xA;&gt; periodically check a message queue to find out if any other&#xD;&#xA;&gt; application is asking for use of the CPU and, if so, to yield control&#xD;&#xA;&gt; to that application. However, many Windows 3.1 applications would&#xD;&#xA;&gt; check the message queue only infrequently, or not at all, and&#xD;&#xA;&gt; monopolize control of the CPU for as much time as they required. A&#xD;&#xA;&gt; pre-emptive multi-tasking system like Windows 95 will take CPU control&#xD;&#xA;&gt; away from a running application and distribute it to those that have a&#xD;&#xA;&gt; higher priority based on the system’s needs.&#xD;&#xA;&#xD;&#xA;Source: http://www.howtogeek.com/187631/how-was-multi-tasking-possible-in-older-versions-of-windows/" />
  <row Id="3384" PostHistoryTypeId="24" PostId="793" RevisionGUID="84d2c9fd-d988-4ab9-a573-7908e70554b9" CreationDate="2016-06-08T10:43:43.853" Comment="Proposed by 129.215.90.67|21fa99d9-ecad-49e7-84ec-93e24df53c64 approved by 276 edit id of 1281" />
  <row Id="3385" PostHistoryTypeId="5" PostId="750" RevisionGUID="7aa34519-e0fe-4f88-bed3-277179a20d76" CreationDate="2016-06-08T10:43:44.253" UserId="780" Comment="added 75 characters in body" Text="In case you are looking for something that can be bought off-the-shelf:&#xD;&#xA;&#xD;&#xA;if1Bis (https://sites.google.com/site/interface1bis/) has, amongst numerous other goodies also a ps/2 port supporting keyboards and a mouse. &#xD;&#xA;&#xD;&#xA;The device mimicks an IF/1 and supports USB connection to a PC as well as a nice IF/1 file system replica on SD card. I have one myself (don't use the PS/2 keyboard, though) and can thoroughly recommend it." />
  <row Id="3386" PostHistoryTypeId="2" PostId="820" RevisionGUID="637fa445-69ec-4462-b65f-d48dc5feb3e0" CreationDate="2016-06-08T11:10:44.970" UserId="1912" Text="If you want to build CP/M Plus, the second and third links in the &quot;CP/M 3&quot; section at www.cpm.z80.de contain the CP/M 3 source tree and build scripts, for cross-compiling under DRDOS (second link) or UNIX (third link). &#xD;&#xA;&#xD;&#xA;In the case of the UNIX one in particular, it should just be a matter of installing [ZXCC][1] and [Thames][2], unpacking the source tree and typing 'make'.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.seasip.info/Unix/Zxcc/&#xD;&#xA;  [2]: http://www.seasip.info/Unix/Thames/index.html" />
  <row Id="3387" PostHistoryTypeId="2" PostId="821" RevisionGUID="61b9ec84-1794-4112-a099-a52c03d72a6f" CreationDate="2016-06-08T11:53:51.413" UserId="276" Comment="Created body" Text="Retrocomputing formats and configurations of hard disk drives.&#xD;&#xA;&#xD;&#xA;Subjects may include the use of classic drives on either modern or classic computers.&#xD;&#xA;&#xD;&#xA;Related [tag:floppy-disk]" />
  <row Id="3388" PostHistoryTypeId="2" PostId="822" RevisionGUID="2a2ae24a-1c4b-4e25-8e45-b94ee46e1e71" CreationDate="2016-06-08T11:53:51.413" UserId="276" Text="For questions regarding hard disk drive usage.  The hardware, connection, format and drivers." />
  <row Id="3389" PostHistoryTypeId="2" PostId="823" RevisionGUID="23360b67-ff03-47d1-91b1-a77f539d1b26" CreationDate="2016-06-08T12:46:46.980" UserId="-1" Text="" />
  <row Id="3390" PostHistoryTypeId="2" PostId="824" RevisionGUID="e4dfbaf9-8fe7-4ca9-b699-e1135b996ac9" CreationDate="2016-06-08T12:46:46.980" UserId="-1" Text="" />
  <row Id="3391" PostHistoryTypeId="2" PostId="825" RevisionGUID="b4d70225-bbe6-4b55-b87e-e81cedad6e0b" CreationDate="2016-06-08T12:49:51.450" UserId="-1" Text="" />
  <row Id="3392" PostHistoryTypeId="2" PostId="826" RevisionGUID="42c6064b-d3fb-497b-8067-abc7319c6e3c" CreationDate="2016-06-08T12:49:51.450" UserId="-1" Text="" />
  <row Id="3393" PostHistoryTypeId="2" PostId="827" RevisionGUID="18ef78f1-ccab-473e-89a5-428bd67ddcd6" CreationDate="2016-06-08T12:50:47.247" UserId="-1" Text="" />
  <row Id="3394" PostHistoryTypeId="2" PostId="828" RevisionGUID="223bb7fd-08e9-4d5a-b2f3-6e1288a11547" CreationDate="2016-06-08T12:50:47.247" UserId="-1" Text="" />
  <row Id="3395" PostHistoryTypeId="5" PostId="827" RevisionGUID="a013733e-c32f-4a8c-b484-3fec182b861f" CreationDate="2016-06-08T12:52:57.437" UserId="621" Comment="added 138 characters in body" Text="The HxC Floppy Emulator software allows to create an virtual FAT12 (Atari ST/ MS DOS) floppy disk containing files present in a PC folder." />
  <row Id="3396" PostHistoryTypeId="24" PostId="827" RevisionGUID="a013733e-c32f-4a8c-b484-3fec182b861f" CreationDate="2016-06-08T12:52:57.437" Comment="Proposed by 621 approved by 276 edit id of 1286" />
  <row Id="3397" PostHistoryTypeId="5" PostId="824" RevisionGUID="9298007a-dd1e-44a9-8e51-8aac6552b35a" CreationDate="2016-06-08T12:53:05.000" UserId="621" Comment="added 46 characters in body" Text="for questions about membrane keyboard hardware" />
  <row Id="3398" PostHistoryTypeId="24" PostId="824" RevisionGUID="9298007a-dd1e-44a9-8e51-8aac6552b35a" CreationDate="2016-06-08T12:53:05.000" Comment="Proposed by 621 approved by 276 edit id of 1283" />
  <row Id="3399" PostHistoryTypeId="2" PostId="829" RevisionGUID="dd9779c0-4906-44d7-8d89-ff9f2e37ef76" CreationDate="2016-06-08T12:53:05.340" UserId="-1" Text="" />
  <row Id="3400" PostHistoryTypeId="2" PostId="830" RevisionGUID="dacc6123-3b98-4176-8b42-f705a7f22a43" CreationDate="2016-06-08T12:53:05.340" UserId="-1" Text="" />
  <row Id="3401" PostHistoryTypeId="5" PostId="825" RevisionGUID="a6341ed6-1e7f-406e-b0c8-95f5f3e2b969" CreationDate="2016-06-08T12:53:10.640" UserId="621" Comment="added 112 characters in body" Text="Magnetic tape data storage is a system for storing digital information on magnetic tape using digital recording." />
  <row Id="3402" PostHistoryTypeId="24" PostId="825" RevisionGUID="a6341ed6-1e7f-406e-b0c8-95f5f3e2b969" CreationDate="2016-06-08T12:53:10.640" Comment="Proposed by 621 approved by 276 edit id of 1284" />
  <row Id="3403" PostHistoryTypeId="5" PostId="829" RevisionGUID="a8ea4fec-2879-4199-bf40-5dccfe71d4b1" CreationDate="2016-06-08T12:53:17.517" UserId="621" Comment="added 207 characters in body" Text="Also known as the iAPX 286 or Intel 286, the 80286 was the first 8086 based CPU with separate, non-multiplexed, address and data buses and also the first with memory management and wide protection abilities." />
  <row Id="3404" PostHistoryTypeId="24" PostId="829" RevisionGUID="a8ea4fec-2879-4199-bf40-5dccfe71d4b1" CreationDate="2016-06-08T12:53:17.517" Comment="Proposed by 621 approved by 276 edit id of 1288" />
  <row Id="3405" PostHistoryTypeId="5" PostId="823" RevisionGUID="4b53b936-592c-4a93-a256-f5b4326422a9" CreationDate="2016-06-08T12:53:24.547" UserId="621" Comment="added 230 characters in body" Text="A membrane keyboard is a computer keyboard whose &quot;keys&quot; are not separate, moving parts, as with the majority of other keyboards, but rather are pressure pads that have only outlines and symbols printed on a flat, flexible surface." />
  <row Id="3406" PostHistoryTypeId="24" PostId="823" RevisionGUID="4b53b936-592c-4a93-a256-f5b4326422a9" CreationDate="2016-06-08T12:53:24.547" Comment="Proposed by 621 approved by 276 edit id of 1282" />
  <row Id="3407" PostHistoryTypeId="5" PostId="828" RevisionGUID="af3af99b-a0cf-430c-8c5f-10e595e75929" CreationDate="2016-06-08T12:53:29.517" UserId="621" Comment="added 58 characters in body" Text="for questions about HxC Floppy Emulator usage and hardware" />
  <row Id="3408" PostHistoryTypeId="24" PostId="828" RevisionGUID="af3af99b-a0cf-430c-8c5f-10e595e75929" CreationDate="2016-06-08T12:53:29.517" Comment="Proposed by 621 approved by 276 edit id of 1287" />
  <row Id="3409" PostHistoryTypeId="5" PostId="826" RevisionGUID="3c439f62-75bb-43db-9724-2ec7d6e78981" CreationDate="2016-06-08T12:53:33.563" UserId="621" Comment="added 52 characters in body" Text="for questions about the magnetic tape storage format" />
  <row Id="3410" PostHistoryTypeId="24" PostId="826" RevisionGUID="3c439f62-75bb-43db-9724-2ec7d6e78981" CreationDate="2016-06-08T12:53:33.563" Comment="Proposed by 621 approved by 276 edit id of 1285" />
  <row Id="3411" PostHistoryTypeId="5" PostId="830" RevisionGUID="01ff6bb8-17a7-4e49-8d37-a7ccf137a56c" CreationDate="2016-06-08T12:53:40.347" UserId="621" Comment="added 57 characters in body" Text="for questions about the Intel 80286 16-bit microprocessor" />
  <row Id="3412" PostHistoryTypeId="24" PostId="830" RevisionGUID="01ff6bb8-17a7-4e49-8d37-a7ccf137a56c" CreationDate="2016-06-08T12:53:40.347" Comment="Proposed by 621 approved by 276 edit id of 1289" />
  <row Id="3413" PostHistoryTypeId="2" PostId="831" RevisionGUID="40c9aba7-b913-4f3d-8664-1a35aa4a3a7d" CreationDate="2016-06-08T12:55:39.233" UserId="-1" Text="" />
  <row Id="3414" PostHistoryTypeId="2" PostId="832" RevisionGUID="cc5cb40a-8255-4b81-80e0-c485f85d3051" CreationDate="2016-06-08T12:55:39.233" UserId="-1" Text="" />
  <row Id="3415" PostHistoryTypeId="2" PostId="833" RevisionGUID="a5ff19e3-7729-492d-9622-5f75268451c3" CreationDate="2016-06-08T12:57:05.360" UserId="-1" Text="" />
  <row Id="3416" PostHistoryTypeId="2" PostId="834" RevisionGUID="c9c3ee28-c530-48a0-bb6e-5e1a31def4e2" CreationDate="2016-06-08T12:57:05.360" UserId="-1" Text="" />
  <row Id="3417" PostHistoryTypeId="2" PostId="835" RevisionGUID="e7b609ce-196e-41b7-b2e0-ec575aba6a2d" CreationDate="2016-06-08T12:57:17.483" UserId="439" Text="I've confirmed that mcleod_ideafix's method is reliable for regular tape images. Here is a shell script to do (effectively) the same thing:&#xD;&#xA;&#xD;&#xA;    #!/bin/bash&#xD;&#xA;    # wav2differential.sh - convert mono game tape audio to 2× stereo&#xD;&#xA;    # usage:   wav2differential.sh infile.wav&#xD;&#xA;    #          (creates  infile-differential.wav)&#xD;&#xA;    # scruss - 2016-06-07&#xD;&#xA;    # method by ‘mcleod_ideafix’; many thanks / greetz&#xD;&#xA;    #   — https://retrocomputing.stackexchange.com/a/774/439&#xD;&#xA;    &#xD;&#xA;    base=&quot;${1%.wav}&quot;&#xD;&#xA;    sox -q --norm=-3 &quot;$1&quot; -b 16 &quot;${base}-n.wav&quot;&#xD;&#xA;    sox -q  &quot;${base}-n.wav&quot; &quot;${base}-ni.wav&quot; vol -1.0&#xD;&#xA;    sox -q  --norm=-0.1 -M -c 1 &quot;${base}-n.wav&quot; -c 1 &quot;${base}-ni.wav&quot; &quot;${base}-differential.wav&quot;&#xD;&#xA;    rm -f  &quot;${base}-n.wav&quot; &quot;${base}-ni.wav&quot;&#xD;&#xA;&#xD;&#xA;Ultimately I'd like to encode these as MP3s, tag them properly, and add loading screens as cover art. But that can come later." />
  <row Id="3418" PostHistoryTypeId="5" PostId="834" RevisionGUID="dc78cd05-94eb-48b0-88d9-bc6a2fb468cb" CreationDate="2016-06-08T13:39:52.110" UserId="621" Comment="added 96 characters in body" Text="for questions about the Apple DOS operating system used on the Apple II series of microcomputers" />
  <row Id="3419" PostHistoryTypeId="24" PostId="834" RevisionGUID="dc78cd05-94eb-48b0-88d9-bc6a2fb468cb" CreationDate="2016-06-08T13:39:52.110" Comment="Proposed by 621 approved by 79, 276 edit id of 1293" />
  <row Id="3420" PostHistoryTypeId="5" PostId="833" RevisionGUID="8f6a7c04-8349-425f-9102-ab1db9af9db6" CreationDate="2016-06-08T13:39:58.517" UserId="621" Comment="added 52 characters in body" Text="For general DOS questions, use the [tag:ms-dos] tag." />
  <row Id="3421" PostHistoryTypeId="24" PostId="833" RevisionGUID="8f6a7c04-8349-425f-9102-ab1db9af9db6" CreationDate="2016-06-08T13:39:58.517" Comment="Proposed by 621 approved by 79, 276 edit id of 1292" />
  <row Id="3422" PostHistoryTypeId="5" PostId="831" RevisionGUID="7b16d827-92f2-4165-8cb1-6930839ece37" CreationDate="2016-06-08T13:40:03.457" UserId="621" Comment="added 31 characters in body" Text="Related tags: [tag:floppy-disk]" />
  <row Id="3423" PostHistoryTypeId="24" PostId="831" RevisionGUID="7b16d827-92f2-4165-8cb1-6930839ece37" CreationDate="2016-06-08T13:40:03.457" Comment="Proposed by 621 approved by 79, 276 edit id of 1290" />
  <row Id="3424" PostHistoryTypeId="5" PostId="832" RevisionGUID="eff7ce31-a9d5-413a-94ab-0a93d9d3d0b4" CreationDate="2016-06-08T13:40:07.877" UserId="621" Comment="added 57 characters in body" Text="for questions about Apple's Disk II Floppy Disk Subsystem" />
  <row Id="3425" PostHistoryTypeId="24" PostId="832" RevisionGUID="eff7ce31-a9d5-413a-94ab-0a93d9d3d0b4" CreationDate="2016-06-08T13:40:07.877" Comment="Proposed by 621 approved by 79, 276 edit id of 1291" />
  <row Id="3426" PostHistoryTypeId="2" PostId="836" RevisionGUID="4f93fa59-e24a-4ddd-a80f-a15bd4ce4207" CreationDate="2016-06-08T15:06:07.610" UserId="276" Comment="Created body" Text="Regarding Operating Systems in general.&#xD;&#xA;&#xD;&#xA;For questions regarding a specific OS, please use the tag appropriate for that OS." />
  <row Id="3427" PostHistoryTypeId="2" PostId="837" RevisionGUID="18ce81a8-c43b-471c-b5b6-43c303b8a2a7" CreationDate="2016-06-08T15:06:07.610" UserId="276" Text="For questions regarding operating systems generally on retrocomputers." />
  <row Id="3428" PostHistoryTypeId="2" PostId="838" RevisionGUID="6d73abcb-6cf7-4f68-b7cd-8d87f3503738" CreationDate="2016-06-08T15:07:44.133" UserId="632" Text="MSDN always uses the key 335-XXXXXX6 for legacy software which works for old visual studio &amp; windows 95/98 editions. I just checked and VB6 still has the same key.&#xD;&#xA;&#xD;&#xA;I don't think I ever remember typing other key back at the time (and don't forget internet access was a very new thing) I don't remember if it even came with a SLIP/PPP driver at the time." />
  <row Id="3429" PostHistoryTypeId="2" PostId="839" RevisionGUID="0fa77fe0-fbf5-4200-8f46-1e8772ad2374" CreationDate="2016-06-08T15:09:09.477" UserId="1923" Text="Polymers and flame retardant, perhaps. Me too I'm skeptikal about added perfumes.&#xD;&#xA;&#xD;&#xA;In Europe since 2006 some chemicals, like PBB and PBDE retardants, are banned from electronics manifacturing (2002 [ROHS][1] directive) and electronics trade.&#xD;&#xA;&#xD;&#xA;Equipment manifactured in prior times - much more before the second half of the nineties - smells today (and smelled at the time) very &quot;different&quot; to me... Is this due to the power of suggestion?&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://en.wikipedia.org/wiki/Restriction_of_Hazardous_Substances_Directive" />
  <row Id="3431" PostHistoryTypeId="5" PostId="839" RevisionGUID="2550ecb6-5a38-4d12-809d-5b30a562c117" CreationDate="2016-06-08T15:45:08.943" UserId="12" Comment="Small typos" Text="Polymers and flame retardant, perhaps. Me too I'm skeptical about added perfumes.&#xD;&#xA;&#xD;&#xA;In Europe since 2006 some chemicals, like PBB and PBDE retardants, are banned from electronics manufacturing (2002 [ROHS][1] directive) and electronics trade.&#xD;&#xA;&#xD;&#xA;Equipment manufactured in prior times - much more before the second half of the nineties - smells today (and smelled at the time) very &quot;different&quot; to me. Is this due to the power of suggestion?&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://en.wikipedia.org/wiki/Restriction_of_Hazardous_Substances_Directive" />
  <row Id="3433" PostHistoryTypeId="5" PostId="793" RevisionGUID="a33043d6-f172-4296-8189-f01c56d0e775" CreationDate="2016-06-08T16:04:48.277" UserId="278" Comment="Change source to Super User (original source of content)" Text="Found a great question on Super User that explains it really well!&#xD;&#xA;&#xD;&#xA;&gt; Windows 3.1 uses cooperative multi-tasking – meaning that each&#xD;&#xA;&gt; application that is in the process of running is instructed to&#xD;&#xA;&gt; periodically check a message queue to find out if any other&#xD;&#xA;&gt; application is asking for use of the CPU and, if so, to yield control&#xD;&#xA;&gt; to that application. However, many Windows 3.1 applications would&#xD;&#xA;&gt; check the message queue only infrequently, or not at all, and&#xD;&#xA;&gt; monopolize control of the CPU for as much time as they required. A&#xD;&#xA;&gt; pre-emptive multi-tasking system like Windows 95 will take CPU control&#xD;&#xA;&gt; away from a running application and distribute it to those that have a&#xD;&#xA;&gt; higher priority based on the system’s needs.&#xD;&#xA;&#xD;&#xA;Source: http://superuser.com/a/726367/541767" />
  <row Id="3434" PostHistoryTypeId="5" PostId="813" RevisionGUID="bb190015-73e8-407e-80df-ccbebce7b98a" CreationDate="2016-06-08T16:22:57.153" UserId="808" Comment="added 2426 characters in body" Text="The situation isn't nearly as cut and dried as Wikipedia might make it sound.&#xD;&#xA;&#xD;&#xA;For example, under US copyright law:&#xD;&#xA;&#xD;&#xA;&gt; § 117 . Limitations on exclusive rights: Computer programs&#xD;&#xA;&#xD;&#xA;&gt; (a) Making of Additional Copy or Adaptation by Owner of Copy.—Notwithstanding the provisions of section 106, it is **not an infringement** for the owner of a copy of a computer program to make or authorize the making of another copy or adaptation of that computer program provided:&#xD;&#xA;&#xD;&#xA;&gt; (1) that such a new copy or adaptation is created as an essential step in the utilization of the computer program in conjunction with a machine and that it is used in no other manner,&#xD;&#xA;&#xD;&#xA;I doubt that this was the *intent* of that bit of law, but this does give some wiggle room for the site owners to at least argue that what they/their users are doing is legal.&#xD;&#xA;&#xD;&#xA;Of course, copyright law does also vary (somewhat) with locale. Depending on where their servers are located, it's at least possible that the law there is somewhat less strict.&#xD;&#xA;&#xD;&#xA;There's another technicality that figures in here as well: most of copyright law is more or less aimed at a situation such as another publisher taking a work and selling the misappropriated work for their own profit. To do that, the person/group who's misappropriated the work normally has to make copies, then offer them for sale--and much of most copyright law is written to prevent that.&#xD;&#xA;&#xD;&#xA;In a case like this, where the site isn't actually making copies, but is merely placing the work in a situation where somebody else can make copies, many of those provisions sort of fall apart. So, the basic rights under US copyright law are:&#xD;&#xA;&#xD;&#xA;&gt; § 106 . Exclusive rights in copyrighted works&#xD;&#xA;&#xD;&#xA;&gt; Subject to sections 107 through 122, the owner of copyright under this title has the exclusive rights to do and to authorize any of the following:&#xD;&#xA;&#xD;&#xA;&gt; (1) to reproduce the copyrighted work in copies or phonorecords;&#xD;&#xA;&#xD;&#xA;&gt; (2) to prepare derivative works based upon the copyrighted work;&#xD;&#xA;&#xD;&#xA;&gt; (3) to distribute copies or phonorecords of the copyrighted work to the public by sale or other transfer of ownership, or by rental, lease, or lending;&#xD;&#xA;&#xD;&#xA;&gt; (4) in the case of literary, musical, dramatic, and choreographic works, pantomimes, and motion pictures and other audiovisual works, to perform the copyrighted work publicly;&#xD;&#xA;&#xD;&#xA;&gt; (5) in the case of literary, musical, dramatic, and choreographic works, pantomimes, and pictorial, graphic, or sculptural works, including the individual images of a motion picture or other audiovisual work, to display the copyrighted work publicly; and&#xD;&#xA;&#xD;&#xA;&gt; (6) in the case of sound recordings, to perform the copyrighted work publicly by means of a digital audio transmission.&#xD;&#xA;&#xD;&#xA;So, let's consider these one at a time:&#xD;&#xA;&#xD;&#xA;1. The site isn't really reproducing the copyrighted work, except to the degree that (for example) a web cache server held all or part of a copy of the work.&#xD;&#xA;2. It doesn't appear that they're preparing any derivative works. &#xD;&#xA;3. I don't see anything indicating that they're claiming to transfer ownership, lease, or lend the work (&quot;lending&quot; carries the specific &#xD;&#xA;4. through 6. clearly don't apply to an operating system (nor probably to any computer program).&#xD;&#xA;&#xD;&#xA;There's another provision in §108, that says:&#xD;&#xA;&#xD;&#xA;&gt; (d) The rights of reproduction and distribution under this section apply to a copy, made from the collection of a library or archives where the user makes his or her request or from that of another library or archives, of no more than one article or other contribution to a copyrighted collection or periodical issue, or to a copy or phonorecord of a small part of any other copyrighted work, if—&lt;br&gt;&#xD;&#xA;&gt; (1) the copy or phonorecord becomes the property of the user, and the library or archives has had no notice that the copy or phonorecord would be used for any purpose other than private study, scholarship, or research; and&lt;br&gt;&#xD;&#xA;&gt; (2) the library or archives displays prominently, at the place where orders are accepted, and includes on its order form, a warning of copyright in accordance with requirements that the Register of Copyrights shall prescribe by regulation.&#xD;&#xA;&#xD;&#xA;This was originally intended to apply to things like a copying machine at a library. If I go to the library and make a copy of something on the copying machine, *I'm* responsible, not the library. If (for example) I'm disabled, and ask one of their employees to make the copy, I'm still responsible for it, not them.&#xD;&#xA;&#xD;&#xA;The question in this case would be whether the web site qualifies as a library or archive. The fact that the site at least appears to be open to the general public seems to let it meet the legal requirements to qualify.&#xD;&#xA;&#xD;&#xA;This leave us with very little in the way of a really obvious infringement (on the part of the site) and a couple of provisions that could at least be argued to say that what they're doing is legal.&#xD;&#xA;&#xD;&#xA;That means just about any infringement that might occur would have to be on the part of the person doing the downloading, not the web site itself. Here (again) the first point brought up from §117 still (at least potentially) applies--it may still be legal. Of course, there's also the possibility that the downloader is simply somebody who (at some point in the past) actually bought a license to the program they're downloading/using. In that case, if that license hasn't ever been transferred to anybody else (and most contain provisions saying you *can't* transfer them) then the user is probably still authorized to install and use it (most don't contain any limit on how long the license lasts).&#xD;&#xA;&#xD;&#xA;Much of this ends up turning on questions that may initially seem quite obvious, but aren't necessarily so. For example, §117 specifically talks about &quot;...the owner of a copy of a computer program...&quot;. If I go to Best Buy and get a copy of Windows, am I &quot;the owner&quot; of that copy of Windows? Most people's common sense would say &quot;yes, of course&quot;. The license agreement usually says something to the effect that &quot;this is licensed, not sold&quot;.&#xD;&#xA;&#xD;&#xA;Some courts have gone along with that license provision and ruled that the person would bought and paid for the software didn't own it. Others have disagreed, and ruled that they were (at least as the word is used there).&#xD;&#xA;&#xD;&#xA;Bottom line: as I originally said, the situation here isn't really cut and dried. If the site were to be sued and the case came to court, I'd guess there was about a 70% chance that the court would shut them down--but that still leaves a 30% chance (or so) that they wouldn't." />
  <row Id="3435" PostHistoryTypeId="5" PostId="813" RevisionGUID="0b413a50-460a-45ea-9b23-6c182b24d5db" CreationDate="2016-06-08T16:39:02.457" UserId="808" Comment="added 2426 characters in body" Text="The situation isn't nearly as cut and dried as Wikipedia might make it sound.&#xD;&#xA;&#xD;&#xA;For example, under US copyright law:&#xD;&#xA;&#xD;&#xA;&gt; § 117 . Limitations on exclusive rights: Computer programs&#xD;&#xA;&#xD;&#xA;&gt; (a) Making of Additional Copy or Adaptation by Owner of Copy.—Notwithstanding the provisions of section 106, it is **not an infringement** for the owner of a copy of a computer program to make or authorize the making of another copy or adaptation of that computer program provided:&#xD;&#xA;&#xD;&#xA;&gt; (1) that such a new copy or adaptation is created as an essential step in the utilization of the computer program in conjunction with a machine and that it is used in no other manner,&#xD;&#xA;&#xD;&#xA;I doubt that this was the *intent* of that bit of law, but this does give some wiggle room for the site owners to at least argue that what they/their users are doing is legal.&#xD;&#xA;&#xD;&#xA;Of course, copyright law does also vary (somewhat) with locale. Depending on where their servers are located, it's at least possible that the law there is somewhat less strict.&#xD;&#xA;&#xD;&#xA;There's another technicality that figures in here as well: most of copyright law is more or less aimed at a situation such as another publisher taking a work and selling the misappropriated work for their own profit. To do that, the person/group who's misappropriated the work normally has to make copies, then offer them for sale--and much of most copyright law is written to prevent that.&#xD;&#xA;&#xD;&#xA;In a case like this, where the site isn't actually making copies, but is merely placing the work in a situation where somebody else can make copies, many of those provisions sort of fall apart. So, the basic rights under US copyright law are:&#xD;&#xA;&#xD;&#xA;&gt; § 106 . Exclusive rights in copyrighted works&#xD;&#xA;&#xD;&#xA;&gt; Subject to sections 107 through 122, the owner of copyright under this title has the exclusive rights to do and to authorize any of the following:&#xD;&#xA;&#xD;&#xA;&gt; (1) to reproduce the copyrighted work in copies or phonorecords;&#xD;&#xA;&#xD;&#xA;&gt; (2) to prepare derivative works based upon the copyrighted work;&#xD;&#xA;&#xD;&#xA;&gt; (3) to distribute copies or phonorecords of the copyrighted work to the public by sale or other transfer of ownership, or by rental, lease, or lending;&#xD;&#xA;&#xD;&#xA;&gt; (4) in the case of literary, musical, dramatic, and choreographic works, pantomimes, and motion pictures and other audiovisual works, to perform the copyrighted work publicly;&#xD;&#xA;&#xD;&#xA;&gt; (5) in the case of literary, musical, dramatic, and choreographic works, pantomimes, and pictorial, graphic, or sculptural works, including the individual images of a motion picture or other audiovisual work, to display the copyrighted work publicly; and&#xD;&#xA;&#xD;&#xA;&gt; (6) in the case of sound recordings, to perform the copyrighted work publicly by means of a digital audio transmission.&#xD;&#xA;&#xD;&#xA;So, let's consider these one at a time:&#xD;&#xA;&#xD;&#xA;1. The site isn't really reproducing the copyrighted work, except to the degree that (for example) a web cache server held all or part of a copy of the work.&#xD;&#xA;2. It doesn't appear that they're preparing any derivative works. &#xD;&#xA;3. I don't see anything indicating that they're claiming to transfer ownership, lease, or lend the work (&quot;lending&quot; carries the specific &#xD;&#xA;4. through 6. clearly don't apply to an operating system (nor probably to any computer program).&#xD;&#xA;&#xD;&#xA;There's another provision in §108, that says:&#xD;&#xA;&#xD;&#xA;&gt; (d) The rights of reproduction and distribution under this section apply to a copy, made from the collection of a library or archives where the user makes his or her request or from that of another library or archives, of no more than one article or other contribution to a copyrighted collection or periodical issue, or to a copy or phonorecord of a small part of any other copyrighted work, if—&lt;br&gt;&#xD;&#xA;&gt; (1) the copy or phonorecord becomes the property of the user, and the library or archives has had no notice that the copy or phonorecord would be used for any purpose other than private study, scholarship, or research; and&lt;br&gt;&#xD;&#xA;&gt; (2) the library or archives displays prominently, at the place where orders are accepted, and includes on its order form, a warning of copyright in accordance with requirements that the Register of Copyrights shall prescribe by regulation.&#xD;&#xA;&#xD;&#xA;This was originally intended to apply to things like a copying machine at a library. If I go to the library and make a copy of something on the copying machine, *I'm* responsible, not the library. If (for example) I'm disabled, and ask one of their employees to make the copy, I'm still responsible for it, not them.&#xD;&#xA;&#xD;&#xA;The question in this case would be whether the web site qualifies as a library or archive. The fact that the site at least appears to be open to the general public seems to let it meet the legal requirements to qualify.&#xD;&#xA;&#xD;&#xA;This isn't just stretching a technicality to apply to the current situation either. The basic idea is fairly simple: a library or archive should be free to provide source material, and even provide copying equipment to their patrons. As long as they take the steps required by the law to tell/remind the patrons that wholesale copying may infringe a copyright, it's the patrons, not the library/archive, who are responsible for the copyright infringement. That seems to fit extremely well with what's happening here.&#xD;&#xA;&#xD;&#xA;That means just about any infringement that might occur would have to be on the part of the person doing the downloading, not the web site itself. Here (again) the first point brought up from §117 still (at least potentially) applies--it may still be legal. Of course, there's also the possibility that the downloader is simply somebody who (at some point in the past) actually bought a license to the program they're downloading/using. In that case, if that license hasn't ever been transferred to anybody else (and most contain provisions saying you *can't* transfer them) then the user is *probably* still authorized to install and use it (e.g., most older license agreements don't contain any limit on how long the license lasts).&#xD;&#xA;&#xD;&#xA;Bottom line: as I originally said, the situation here isn't really cut and dried. If the site were to be sued and the case were being heard in a US court, I'd guess there would be better than even odds that the court would shut down the site--but honestly, only a *little* better than even odds. I wouldn't come as a huge surprise to me at all if the site could successfully defend themselves as being a publicly available archive, and any copyright infringement was the responsibility of the users, not the archive itself." />
  <row Id="3436" PostHistoryTypeId="5" PostId="813" RevisionGUID="feed8dfe-6b75-44d8-9d0e-65dbacf3d0f7" CreationDate="2016-06-08T16:46:25.957" UserId="808" Comment="added 2426 characters in body" Text="The situation isn't nearly as cut and dried as Wikipedia might make it sound.&#xD;&#xA;&#xD;&#xA;For example, under US copyright law:&#xD;&#xA;&#xD;&#xA;&gt; § 117 . Limitations on exclusive rights: Computer programs&#xD;&#xA;&#xD;&#xA;&gt; (a) Making of Additional Copy or Adaptation by Owner of Copy.—Notwithstanding the provisions of section 106, it is **not an infringement** for the owner of a copy of a computer program to make or authorize the making of another copy or adaptation of that computer program provided:&#xD;&#xA;&#xD;&#xA;&gt; (1) that such a new copy or adaptation is created as an essential step in the utilization of the computer program in conjunction with a machine and that it is used in no other manner,&#xD;&#xA;&#xD;&#xA;I doubt that this was the *intent* of that bit of law, but this does give some wiggle room for the site owners to at least argue that what they/their users are doing is legal.&#xD;&#xA;&#xD;&#xA;Of course, copyright law does also vary (somewhat) with locale. Depending on where their servers are located, it's at least possible that the law there is somewhat less strict.&#xD;&#xA;&#xD;&#xA;There's another technicality that figures in here as well: most of copyright law is more or less aimed at a situation such as another publisher taking a work and selling the misappropriated work for their own profit. To do that, the person/group who's misappropriated the work normally has to make copies, then offer them for sale--and much of most copyright law is written to prevent that.&#xD;&#xA;&#xD;&#xA;In a case like this, where the site isn't actually making copies, but is merely placing the work in a situation where somebody else can make copies, many of those provisions sort of fall apart. So, the basic rights under US copyright law are:&#xD;&#xA;&#xD;&#xA;&gt; § 106 . Exclusive rights in copyrighted works&#xD;&#xA;&#xD;&#xA;&gt; Subject to sections 107 through 122, the owner of copyright under this title has the exclusive rights to do and to authorize any of the following:&#xD;&#xA;&#xD;&#xA;&gt; (1) to reproduce the copyrighted work in copies or phonorecords;&#xD;&#xA;&#xD;&#xA;&gt; (2) to prepare derivative works based upon the copyrighted work;&#xD;&#xA;&#xD;&#xA;&gt; (3) to distribute copies or phonorecords of the copyrighted work to the public by sale or other transfer of ownership, or by rental, lease, or lending;&#xD;&#xA;&#xD;&#xA;&gt; (4) in the case of literary, musical, dramatic, and choreographic works, pantomimes, and motion pictures and other audiovisual works, to perform the copyrighted work publicly;&#xD;&#xA;&#xD;&#xA;&gt; (5) in the case of literary, musical, dramatic, and choreographic works, pantomimes, and pictorial, graphic, or sculptural works, including the individual images of a motion picture or other audiovisual work, to display the copyrighted work publicly; and&#xD;&#xA;&#xD;&#xA;&gt; (6) in the case of sound recordings, to perform the copyrighted work publicly by means of a digital audio transmission.&#xD;&#xA;&#xD;&#xA;So, let's consider these one at a time:&#xD;&#xA;&#xD;&#xA;1. The site isn't really reproducing the copyrighted work, except to the degree that (for example) a web cache server held all or part of a copy of the work.&#xD;&#xA;2. It doesn't appear that they're preparing any derivative works. &#xD;&#xA;3. I don't see anything indicating that they're claiming to transfer ownership, lease, or lend the work (&quot;lending&quot; carries the specific &#xD;&#xA;4. through 6. clearly don't apply to an operating system (nor probably to any computer program).&#xD;&#xA;&#xD;&#xA;There's another provision in §108, that says:&#xD;&#xA;&#xD;&#xA;&gt; (d) The rights of reproduction and distribution under this section apply to a copy, made from the collection of a library or archives where the user makes his or her request or from that of another library or archives, of no more than one article or other contribution to a copyrighted collection or periodical issue, or to a copy or phonorecord of a small part of any other copyrighted work, if—&lt;br&gt;&#xD;&#xA;&gt; (1) the copy or phonorecord becomes the property of the user, and the library or archives has had no notice that the copy or phonorecord would be used for any purpose other than private study, scholarship, or research; and&lt;br&gt;&#xD;&#xA;&gt; (2) the library or archives displays prominently, at the place where orders are accepted, and includes on its order form, a warning of copyright in accordance with requirements that the Register of Copyrights shall prescribe by regulation.&#xD;&#xA;&#xD;&#xA;This was originally intended to apply to things like a copying machine at a library. If I go to the library and make a copy of something on the copying machine, *I'm* responsible, not the library. If (for example) I'm disabled, and ask one of their employees to make the copy, I'm still responsible for it, not them.&#xD;&#xA;&#xD;&#xA;The question in this case would be whether the web site qualifies as a library or archive. The fact that the site at least appears to be open to the general public seems to let it meet the legal requirements to qualify.&#xD;&#xA;&#xD;&#xA;This isn't just stretching a technicality to apply to the current situation either. The basic idea is fairly simple: a library or archive should be free to provide source material, and even provide copying equipment to their patrons. As long as they take the steps required by the law to tell/remind the patrons that wholesale copying may infringe a copyright, it's the patrons, not the library/archive, who are responsible for the copyright infringement. That seems to fit extremely well with what's happening here.&#xD;&#xA;&#xD;&#xA;That means just about any infringement that might occur would have to be on the part of the person doing the downloading, not the web site itself. Here (again) the first point brought up from §117 still (at least potentially) applies--it may still be legal. Of course, there's also the possibility that the downloader is simply somebody who (at some point in the past) actually bought a license to the program they're downloading/using. In that case, if that license hasn't ever been transferred to anybody else (and most contain provisions saying you *can't* transfer them) then the user is *probably* still authorized to install and use it (e.g., most older license agreements don't contain any limit on how long the license lasts).&#xD;&#xA;&#xD;&#xA;Bottom line: as I originally said, the situation here isn't really cut and dried. If the site were to be sued and the case were being heard in a US court, I'd guess there would be better than even odds that the court would shut down the site--but honestly, only a *little* better than even odds. I wouldn't come as a huge surprise to me at all if the site could successfully defend themselves as being a publicly available archive, and any copyright infringement was the responsibility of the users, not the archive itself.&#xD;&#xA;&#xD;&#xA;As far as other countries go: in theory, copyright law is fairly uniform between a large number of countries. There are quite a few international agreements (starting from the Berne convention of 1886) about copyrights and copyright law. In reality, however, there's still quite a bit of variation--but I'd say the US tends to favor copyright holders at least as much as almost any country, so if such a suit were brought in another country, the chances of the site being held responsible would be no greater, and in many cases would be much lower." />
  <row Id="3437" PostHistoryTypeId="5" PostId="796" RevisionGUID="40cca731-1fb6-4a52-bf6a-958a284966b0" CreationDate="2016-06-08T16:55:53.340" UserId="105" Comment="deleted 55 characters in body" Text="For win16 programs, Windows implemented cooperative multitasking. Its implementation was based upon the &quot;message loop&quot; architecture of every Windows program.&#xD;&#xA;&#xD;&#xA;The duty of every program was to endlessly run in a loop in which a call to `GetMessage()` function was performed. This function call looks whether a message to this process is in the queue. If there is one, it is retrieved (`GetMessage`), optionally translated (`TranslateMessage`, this is done to convert keyboard shortcuts into menu actions) and finally, passed to the window procedure (`DispatchMessage`).&#xD;&#xA;&#xD;&#xA;If there is no message available in the queue, Windows suspends the current task and gives the CPU to other task, which will try to retrieve a message from its queue as well, yielding the CPU to another task if no message is present.&#xD;&#xA;&#xD;&#xA;If a program needed to perform background tasks while there was no pending messages in its queue, it would call `PeekMessage` instead of `GetMessage`. This didn't make the task to relinquish the CPU, as `PeekMessage` would inmediately return to the caller task informing whether a message is available or not. This was used to time-multiplex message processing with another time-consuming task (think of a 3D program doing a render, but allowing the user to cancel that render by pressing a &quot;Cancel&quot; button).&#xD;&#xA;&#xD;&#xA;If this time-consumning task was actually very time-consuming, a well-behaved program should call the `yield()` function from time to time in order to relinquish the CPU and let other task to run.&#xD;&#xA;&#xD;&#xA;A bad-behaved program could easily hog the CPU by not retrieving messages too often, or spending too much time in a window procedure function.&#xD;&#xA;&#xD;&#xA;The situation was quite different for MS DOS boxes. They ran using the V8086 mode of the 80386 (if Windows was running in enhanced mode). Windows-aware programs ran in the so-called VM 0 (virtual machine 0). DOS boxes ran from VM 1 upwards.&#xD;&#xA;&#xD;&#xA;DOS programs usually were bad-behaved programs, so Windows assigned each DOS box a different virtual machine. Virtual machines used preemptive multitasking in Windows 3.1 and thus, each DOS box could run concurrently of each others, and concurrently of any Windodws-aware program.&#xD;&#xA;&#xD;&#xA;" />
  <row Id="3438" PostHistoryTypeId="5" PostId="779" RevisionGUID="ce910240-1191-4b28-bed5-b16f42413693" CreationDate="2016-06-08T17:39:52.777" UserId="12" Comment="added 199 characters in body" Text="&gt; TL;DR: sharing or downloaded ROM images is probably illegal, or at&#xD;&#xA;&gt; least legally complicated. However, most rightsholders are likely not&#xD;&#xA;&gt; interested in pursuing action against individuals.&#xD;&#xA;&#xD;&#xA;**I am not a lawyer. This is not legal advice. Intellectual property law at a local and global level is a complex subject most lawyers don't even fully understand. Trying to distill all of that into a single SE answer is a fool's errand.**&#xD;&#xA;&#xD;&#xA;That being said, some general comments about the legalities of retro system ROM images can be made by this particular fool.&#xD;&#xA;&#xD;&#xA;Legalities will differ depending on your locale but, in general, downloading ROM images for any system (regardless of age) is strictly **not** allowed by law. In fact, it _may_ even be considered &quot;software piracy&quot; to make images of ROMs you legally own. This is why emulation sites shy away from showing you where or how to get ROMs for their software.&#xD;&#xA;&#xD;&#xA;There are locales, however, where it is legal to create and download copyrighted material for personal, non-commercial use. **Check with an expert about your local statutes on the subject.**&#xD;&#xA;&#xD;&#xA;The inverse is also true: **there is no global, over-arching law that governs or specifically allows downloading ROM images**, especially those that make special claims regarding some specific number of hours that intellectual property can be in your possession.&#xD;&#xA;&#xD;&#xA;And even if downloading an image *is* legal where you are (or is not specifically _illegal_, as the case may be), it's not like a particularly litigious rightsholder won't try to pursue legal recourse if they think they have a case. (Perhaps an unlikely situation, but words are small comfort if your ISP is suddenly pressured to disconnect you.)&#xD;&#xA;&#xD;&#xA;Of course, there are many sites that offer ROM images of games and system firmware for download. These sites are almost certainly breaking the law (or are in a legal grey area), though in many cases the rightsholders may not have any interest in pursuing legal interests. Such sites may also be operating out of countries where it is legal to offer such services, or the legal recourse for rightsholders are limited.&#xD;&#xA;&#xD;&#xA;Finally, I would be remiss if I did not link to the [Wikipedia article on the legal implications of abandonware][1].&#xD;&#xA;&#xD;&#xA;Whether or not creating or downloading old or abandoned images is adhering to the spirit of the law is up to individuals.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://en.wikipedia.org/wiki/Abandonware#Law" />
  <row Id="3439" PostHistoryTypeId="5" PostId="779" RevisionGUID="46224c23-7f8c-4f24-b52a-501ae7d1637e" CreationDate="2016-06-08T18:30:46.757" UserId="12" Comment="added 8 characters in body" Text="&gt; TL;DR: sharing or downloaded ROM images is almost certainly illegal, or at&#xD;&#xA;&gt; least legally complicated. However, most rightsholders are likely not&#xD;&#xA;&gt; interested in pursuing action against individuals.&#xD;&#xA;&#xD;&#xA;**I am not a lawyer. This is not legal advice. Intellectual property law at a local and global level is a complex subject most lawyers don't even fully understand. Trying to distill all of that into a single SE answer is a fool's errand.**&#xD;&#xA;&#xD;&#xA;That being said, some general comments about the legalities of retro system ROM images can be made by this particular fool.&#xD;&#xA;&#xD;&#xA;Legalities will differ depending on your locale but, in general, downloading ROM images for any system (regardless of age) is strictly **not** allowed by law. In fact, it _may_ even be considered &quot;software piracy&quot; to make images of ROMs you legally own. This is why emulation sites shy away from showing you where or how to get ROMs for their software.&#xD;&#xA;&#xD;&#xA;There are locales, however, where it is legal to create and download copyrighted material for personal, non-commercial use. **Check with an expert about your local statutes on the subject.**&#xD;&#xA;&#xD;&#xA;The inverse is also true: **there is no global, over-arching law that governs or specifically allows downloading ROM images**, especially those that make special claims regarding some specific number of hours that intellectual property can be in your possession.&#xD;&#xA;&#xD;&#xA;And even if downloading an image *is* legal where you are (or is not specifically _illegal_, as the case may be), it's not like a particularly litigious rightsholder won't try to pursue legal recourse if they think they have a case. (Perhaps an unlikely situation, but words are small comfort if your ISP is suddenly pressured to disconnect you.)&#xD;&#xA;&#xD;&#xA;Of course, there are many sites that offer ROM images of games and system firmware for download. These sites are almost certainly breaking the law (or are in a legal grey area), though in many cases the rightsholders may not have any interest in pursuing legal interests. Such sites may also be operating out of countries where it is legal to offer such services, or the legal recourse for rightsholders are limited.&#xD;&#xA;&#xD;&#xA;Finally, I would be remiss if I did not link to the [Wikipedia article on the legal implications of abandonware][1].&#xD;&#xA;&#xD;&#xA;Whether or not creating or downloading old or abandoned images is adhering to the spirit of the law is up to individuals.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://en.wikipedia.org/wiki/Abandonware#Law" />
  <row Id="3440" PostHistoryTypeId="2" PostId="840" RevisionGUID="e14bbfb3-9de3-45a0-9f59-74130ae3418d" CreationDate="2016-06-08T19:31:46.667" UserId="1933" Text="I had an old TI Basic computer (Texas Instruments) and remember always using the LET statement.  I recall that I was mostly copying BASIC programs from a textbook and since the textbook used the LET statement I did too for consistency sake. " />
  <row Id="3441" PostHistoryTypeId="2" PostId="841" RevisionGUID="19db5f24-8e7a-406a-9183-4699633d1ea1" CreationDate="2016-06-08T19:40:14.287" UserId="1933" Text="I was in elementary school (4th grade) in 1984 and our teacher introduced us to LOGO. [https://en.wikipedia.org/wiki/Logo_(programming_language)][1] program that allowed a &quot;turtle&quot; to paint a line on the screen.  You could give it commands to tell it to turn left/right and how long the line should be etc.  We were given an 8&quot; floppy disk to save our work.  I found this disk about 10 years ago in my closet and a friend had access to a drive connected to an old IBM.  I didn't have the logo program installed but I recall being able to read the file name on the disk from the drive.  &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://en.wikipedia.org/wiki/Logo_(programming_language)" />
  <row Id="3442" PostHistoryTypeId="2" PostId="842" RevisionGUID="80dea4b5-38ed-4123-95e8-af536e22447c" CreationDate="2016-06-08T20:09:09.870" UserId="1933" Text="My very first computer was a TI Basic (Texas Instruments).  Great little machine, came with cartridges you could plug in to play games.  When you first booted up you were in Basic.  I remember a few years later getting a Commodore 64 and that the instructions booklet that came with it had lots of different BASIC commands.  They also included a bunch of programs you could just type in and save.  These two machines were very different.  The Commodore had a 5&quot; floppy drive while the TI had a cassette tape player as a drive.  I think a lot of the differences in hardware probably drove the different versions of BASIC.  " />
  <row Id="3443" PostHistoryTypeId="2" PostId="843" RevisionGUID="a25668a2-8af6-4e6a-8fb1-7be15a8397ae" CreationDate="2016-06-08T20:29:50.913" UserId="1933" Text="You might want to check this site out. It appears there are a bunch of utilities that help &quot;clean&quot; the sound, the fact that these exist probably mean that these UEF files are especially sensitive to signal/noise issues. &#xD;&#xA;http://www.retroisle.com/others/acornelectron/software.php&#xD;&#xA;" />
  <row Id="3444" PostHistoryTypeId="2" PostId="844" RevisionGUID="1da0dcf0-c752-4115-83c2-737caf4bc538" CreationDate="2016-06-09T00:37:55.823" UserId="367" Text="Commodore 64 has a known bug which doesn't allow to use tape drive together with a 1581 drive.&#xD;&#xA;C128 has this bug fixed.&#xD;&#xA;&#xD;&#xA;Is there any hardware fix that can resolve the problem in C64 ?" />
  <row Id="3445" PostHistoryTypeId="1" PostId="844" RevisionGUID="1da0dcf0-c752-4115-83c2-737caf4bc538" CreationDate="2016-06-09T00:37:55.823" UserId="367" Text="Is there any existing hardware mod for C64 to decouple tape drive from IEC (1581 drive collision)" />
  <row Id="3446" PostHistoryTypeId="3" PostId="844" RevisionGUID="1da0dcf0-c752-4115-83c2-737caf4bc538" CreationDate="2016-06-09T00:37:55.823" UserId="367" Text="&lt;commodore-64&gt;&lt;cassette-tape&gt;&lt;disk-drive&gt;" />
  <row Id="3447" PostHistoryTypeId="2" PostId="845" RevisionGUID="a199a63c-d297-46ae-8edc-0c82d43c431b" CreationDate="2016-06-09T04:00:07.153" UserId="1937" Text="I would like to save and load BASIC programs with my TI-99/4A.  The TI-99/4A can be connected to a cassette recorder for this purpose.  Buying a cassette recorder and cassette tapes seems unnecessary by modern means.  Is it possible to use the official TI Dual Cassette adapter to load and save data to a smartphone or other modern digital recorder/playback device?  " />
  <row Id="3448" PostHistoryTypeId="1" PostId="845" RevisionGUID="a199a63c-d297-46ae-8edc-0c82d43c431b" CreationDate="2016-06-09T04:00:07.153" UserId="1937" Text="Is it possible to use a TI-99/4A cartridge cable with Digital Audio devices?" />
  <row Id="3449" PostHistoryTypeId="3" PostId="845" RevisionGUID="a199a63c-d297-46ae-8edc-0c82d43c431b" CreationDate="2016-06-09T04:00:07.153" UserId="1937" Text="&lt;cassette-tape&gt;&lt;data-transfer&gt;&lt;digital-audio&gt;" />
  <row Id="3450" PostHistoryTypeId="4" PostId="844" RevisionGUID="bd196ebf-7fc0-4cb2-be7a-75a45bbb5808" CreationDate="2016-06-09T05:19:25.380" UserId="367" Comment="edited title" Text="Is there any existing hardware mod for C64 to decouple tape drive from IEC (1581 drive collision)?" />
  <row Id="3451" PostHistoryTypeId="4" PostId="845" RevisionGUID="ab1c4a61-694c-4b82-aaed-52815909f2e9" CreationDate="2016-06-09T05:19:41.007" UserId="1937" Comment="edited title" Text="Is it possible to use a TI-99/4A cassette cable with Digital Audio devices?" />
  <row Id="3452" PostHistoryTypeId="2" PostId="846" RevisionGUID="a7d06ece-5ccc-47ef-a59f-6dccee4bf014" CreationDate="2016-06-09T05:28:06.507" UserId="10" Text="From a quick search, it sounds like the quickest way to solve it is to update the 1581's ROM (see [this thread](http://www.lemon64.com/forum/viewtopic.php?p=558874&amp;sid=cd5ea85b7ca51145c512b470a35091f4) on Lemon64) - either by buying JiffyDOS, or finding the newer version of Commodore's own firmware (such as from [this page](ftp://www.zimmers.net/pub/cbm/firmware/drives/new/1581/index.html)).&#xD;&#xA;" />
  <row Id="3453" PostHistoryTypeId="2" PostId="847" RevisionGUID="10d331a2-8c27-4dbe-bcf8-4a2c955ea811" CreationDate="2016-06-09T08:27:17.563" UserId="276" Comment="Created body" Text="This tag is for questions that are relevant to several or all microcomputers with 8-bit processors.&#xD;&#xA;&#xD;&#xA;Please use specific tags if your question is relevant to a specific machine.   &#xD;&#xA;e.g. [tag:apple-ii] , [tag:bbc-micro] or [tag:c64]" />
  <row Id="3454" PostHistoryTypeId="2" PostId="848" RevisionGUID="39123392-a8eb-47f4-b470-ad7485740462" CreationDate="2016-06-09T08:27:17.563" UserId="276" Text="For generic questions about 8-bit microcomputers.  For specific computers please use the appropriate specific tag." />
  <row Id="3455" PostHistoryTypeId="5" PostId="113" RevisionGUID="0f82805f-065b-4bde-a07a-24c38484358d" CreationDate="2016-06-09T09:49:44.230" UserId="276" Comment="Added image descriptions for text-based browsers" Text="I'm using Workbench 1.3 in Amiga 500.&#xD;&#xA;&#xD;&#xA;I managed to change the Spanish keyboard in &quot;SetMap&quot;, as shown in the following figure:&#xD;&#xA;&#xD;&#xA;[![Screenshot of Configuration][1]][1]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;And I can write text with special spanish characters (ñ,ç,ó,á,...) from regular application like NotePad:&#xD;&#xA;&#xD;&#xA;[![Screenshot with Spanish text][2]][2]&#xD;&#xA;&#xD;&#xA;But when I try to use AmigaShell, keyboard layout is in USA key-map always, and its very difficult to write in Spanish Keyboard. &#xD;&#xA;&#xD;&#xA;How I could change Amiga Shell Key Layout to Spanish Key Layout?&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/QwJQJ.png&#xD;&#xA;  [2]: http://i.stack.imgur.com/bfGjh.png" />
  <row Id="3456" PostHistoryTypeId="2" PostId="849" RevisionGUID="c88b5985-ac9e-4460-8625-1e8aca1b421c" CreationDate="2016-06-09T10:35:45.953" UserId="616" Text="I acquired a Williams &quot;Earthshaker!&quot; pinball machine several years ago. It came with the version `L-1` ROM installed. I noticed that sometimes balls would get stuck in the shelter kick-back-up mechanism for a bit (it seemed it didn't kick a first ball up fast enough if a second ball entered the shelter). This was fixed when I upgraded to ROM `L-3`.&#xD;&#xA;&#xD;&#xA;I'm now interested in changing to to ROM `F-1` which removes a less-than-completely-family-friendly word so I can feel more comfortable tinkering with the machine with my kids. But I can't tell if `F-1` is the same as `L-3` with just a word removed, or if it is based on a prior version and has some of the older bugs. Is there a changelog available anywhere, or anybody with experience, who can let me know what the differences are between the `L-3` version and the `F-1` version? Or will I just need to buy the chip with the F-1 version and try it out?" />
  <row Id="3457" PostHistoryTypeId="1" PostId="849" RevisionGUID="c88b5985-ac9e-4460-8625-1e8aca1b421c" CreationDate="2016-06-09T10:35:45.953" UserId="616" Text="What's the difference between Williams Earthshaker pinball ROMs L-3 and F-1?" />
  <row Id="3458" PostHistoryTypeId="3" PostId="849" RevisionGUID="c88b5985-ac9e-4460-8625-1e8aca1b421c" CreationDate="2016-06-09T10:35:45.953" UserId="616" Text="&lt;rom&gt;" />
  <row Id="3459" PostHistoryTypeId="2" PostId="850" RevisionGUID="0e07ae53-febb-4094-b8f5-1468ab2ecd01" CreationDate="2016-06-09T11:22:53.520" UserId="276" Comment="Created body" Text="The running and playing of game software." />
  <row Id="3460" PostHistoryTypeId="2" PostId="851" RevisionGUID="4f7ef96f-4627-47a2-8ecc-4fd3b754e15c" CreationDate="2016-06-09T11:22:53.520" UserId="276" Text="For questions about the playing of games on retrocomputers." />
  <row Id="3461" PostHistoryTypeId="2" PostId="852" RevisionGUID="105ba3e6-4ed7-4c23-9ea3-9e575b0e040e" CreationDate="2016-06-09T13:21:59.153" UserId="105" Text="The +2A and the +3 versions of the ZX Spectrum, made by Amstrad, had a new banking mode, called &quot;special&quot;. This banking mode is entered by setting bit 0 of port `1FFD`. When active, two bits from this port allows the programmer to choose one from four possible schemes (figure taken from http://www.worldofspectrum.org/faq/reference/128kreference.htm#Plus3):&#xD;&#xA;&#xD;&#xA;             Bit 2 =0    Bit 2 =0    Bit 2 =1    Bit 2 =1&#xD;&#xA;             Bit 1 =0    Bit 1 =1    Bit 1 =0    Bit 1 =1&#xD;&#xA;     0xffff +--------+  +--------+  +--------+  +--------+&#xD;&#xA;            | Bank 3 |  | Bank 7 |  | Bank 3 |  | Bank 3 |&#xD;&#xA;            |        |  |        |  |        |  |        |&#xD;&#xA;            |        |  |        |  |        |  |        |&#xD;&#xA;            |        |  | screen |  |        |  |        |&#xD;&#xA;     0xc000 +--------+  +--------+  +--------+  +--------+&#xD;&#xA;            | Bank 2 |  | Bank 6 |  | Bank 6 |  | Bank 6 |&#xD;&#xA;            |        |  |        |  |        |  |        |&#xD;&#xA;            |        |  |        |  |        |  |        |&#xD;&#xA;            |        |  |        |  |        |  |        |&#xD;&#xA;     0x8000 +--------+  +--------+  +--------+  +--------+&#xD;&#xA;            | Bank 1 |  | Bank 5 |  | Bank 5 |  | Bank 7 |&#xD;&#xA;            |        |  |        |  |        |  |        |&#xD;&#xA;            |        |  |        |  |        |  |        |&#xD;&#xA;            |        |  | screen |  | screen |  | screen |&#xD;&#xA;     0x4000 +--------+  +--------+  +--------+  +--------+&#xD;&#xA;            | Bank 0 |  | Bank 4 |  | Bank 4 |  | Bank 4 |&#xD;&#xA;            |        |  |        |  |        |  |        |&#xD;&#xA;            |        |  |        |  |        |  |        |&#xD;&#xA;            |        |  |        |  |        |  |        |&#xD;&#xA;     0x0000 +--------+  +--------+  +--------+  +--------+&#xD;&#xA;&#xD;&#xA;It is known that this banking scheem was added in order to support CP/M. I can see that the first scheme allows all the address space to be used by programs and data, leaving the screen out of the map.&#xD;&#xA;&#xD;&#xA;Using the third and/or fourth scheme would allow CP/M (which I assume is resident at the top of the address space) to stay in place while updating the screen. I can see that this might be a bit difficult because once you enter a scheme other than first, you loose any pointer to memory from 0000h to BFFFh, making tasks like outputting a string to be more complex.&#xD;&#xA;&#xD;&#xA;So,&#xD;&#xA;&#xD;&#xA;- How did they use this set of schemes to support CP/M?&#xD;&#xA;- What was the purpose of second scheme?" />
  <row Id="3462" PostHistoryTypeId="1" PostId="852" RevisionGUID="105ba3e6-4ed7-4c23-9ea3-9e575b0e040e" CreationDate="2016-06-09T13:21:59.153" UserId="105" Text="Why Amstrad chose such bank combinations for its all-RAM mode in +2A and +3 Spectrum computers?" />
  <row Id="3463" PostHistoryTypeId="3" PostId="852" RevisionGUID="105ba3e6-4ed7-4c23-9ea3-9e575b0e040e" CreationDate="2016-06-09T13:21:59.153" UserId="105" Text="&lt;zx-spectrum&gt;&lt;cp-m&gt;" />
  <row Id="3464" PostHistoryTypeId="4" PostId="852" RevisionGUID="d3d0efca-9446-4aa9-b1dd-9d046f5629d1" CreationDate="2016-06-09T13:53:20.997" UserId="105" Comment="edited title" Text="Why did Amstrad choose such bank combinations for its all-RAM mode in +2A and +3 Spectrum computers?" />
  <row Id="3465" PostHistoryTypeId="2" PostId="853" RevisionGUID="24d8a895-a81b-4781-9c44-2fa9c3c1cbdc" CreationDate="2016-06-09T14:18:02.213" UserId="276" Comment="Created body" Text="For questions regarding Read Only Memory as a storage mechanism.  &#xD;&#xA;&#xD;&#xA;Decoding, recreating, etc." />
  <row Id="3466" PostHistoryTypeId="2" PostId="854" RevisionGUID="84772312-59bb-414d-a4de-6a1a0efd009b" CreationDate="2016-06-09T14:18:02.213" UserId="276" Text="Questions about Read Only Memory" />
  <row Id="3467" PostHistoryTypeId="2" PostId="855" RevisionGUID="5487fea3-9b10-4d16-bd39-f4e7c2ce8280" CreationDate="2016-06-09T14:22:33.010" UserId="1880" Text="I have some disc images that run only on PowerPC. I've heard a lot about PowerPC being popular back in the day, especially being used with older Apple computers. I don't hear much about them anymore, yet they are used in game consoles such as the Wii and Wii U. Are power PC processors still used in desktop/home computers, or has Intel processors taken over? If I wanted to get a PowerPC computer, is there a place I can still get them? Or is the only option to use QEMU emulation?" />
  <row Id="3468" PostHistoryTypeId="1" PostId="855" RevisionGUID="5487fea3-9b10-4d16-bd39-f4e7c2ce8280" CreationDate="2016-06-09T14:22:33.010" UserId="1880" Text="Are PowerPC processors still manufactured and implemented in desktop computers?" />
  <row Id="3469" PostHistoryTypeId="3" PostId="855" RevisionGUID="5487fea3-9b10-4d16-bd39-f4e7c2ce8280" CreationDate="2016-06-09T14:22:33.010" UserId="1880" Text="&lt;restoration&gt;" />
  <row Id="3470" PostHistoryTypeId="2" PostId="856" RevisionGUID="60d14a07-a26d-4ef2-b51a-ae0414ed34af" CreationDate="2016-06-09T14:38:10.620" UserId="79" Text="As far as I'm aware, the only currently-produced (for some value of &quot;produced&quot;) desktop computers using PowerPC processors are Amiga replacements: [ACube Systems' AmigaOne 500][1] and [A-EON Technology's AmigaOne X1000][2]. Nowadays on the desktop it's pretty much all Intel/AMD, with a sprinkling of ARM.&#xD;&#xA;&#xD;&#xA;The Power architecture lives on in IBM's [POWER CPUs][3], the current iteration of which is the [POWER8][4]; but they're only available in (expensive) servers.&#xD;&#xA;&#xD;&#xA;You should be able to find lots of PowerPC-based Apple computers second-hand, capable of running your discs (assuming the operating system is compatible).&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.acube-systems.biz/index.php?page=hardware&amp;pid=7&#xD;&#xA;  [2]: http://www.a-eon.com/?page=x1000&#xD;&#xA;  [3]: https://en.wikipedia.org/wiki/IBM_POWER_microprocessors&#xD;&#xA;  [4]: https://en.wikipedia.org/wiki/POWER8" />
  <row Id="3471" PostHistoryTypeId="5" PostId="855" RevisionGUID="3abbf7c2-68b2-4e1b-bc02-80ab72b0669b" CreationDate="2016-06-09T14:44:42.790" UserId="12" Comment="Fixup proper nouns and simplify language a little, added `powerpc` tag. Added wikipedia link to PowerPC page." Text="I have some disc images that run only on [PowerPC](https://en.wikipedia.org/wiki/PowerPC). I've heard a lot about PowerPC being popular back in the day, especially being used with older Apple computers. I don't hear much about them anymore, yet they are used in game consoles such as the Wii and Wii U.&#xD;&#xA;&#xD;&#xA;Are PowerPC processors still used in desktop/home computers, or has Intel processors taken over? If I wanted to get a PowerPC computer, is there a place I can still get them? Or is the only option to use QEMU emulation?" />
  <row Id="3472" PostHistoryTypeId="4" PostId="855" RevisionGUID="3abbf7c2-68b2-4e1b-bc02-80ab72b0669b" CreationDate="2016-06-09T14:44:42.790" UserId="12" Comment="Fixup proper nouns and simplify language a little, added `powerpc` tag. Added wikipedia link to PowerPC page." Text="Are PowerPC processors still manufactured and used in desktop computers?" />
  <row Id="3473" PostHistoryTypeId="6" PostId="855" RevisionGUID="3abbf7c2-68b2-4e1b-bc02-80ab72b0669b" CreationDate="2016-06-09T14:44:42.790" UserId="12" Comment="Fixup proper nouns and simplify language a little, added `powerpc` tag. Added wikipedia link to PowerPC page." Text="&lt;restoration&gt;&lt;powerpc&gt;" />
  <row Id="3474" PostHistoryTypeId="5" PostId="779" RevisionGUID="732ad6c9-9422-4246-ba26-ec0b2647dc12" CreationDate="2016-06-09T14:51:45.453" UserId="12" Comment="added 1 character in body" Text="&gt; TL;DR: sharing or downloading ROM images is almost certainly illegal, or at&#xD;&#xA;&gt; least legally complicated. However, most rightsholders are likely not&#xD;&#xA;&gt; interested in pursuing action against individuals.&#xD;&#xA;&#xD;&#xA;**I am not a lawyer. This is not legal advice. Intellectual property law at a local and global level is a complex subject most lawyers don't even fully understand. Trying to distill all of that into a single SE answer is a fool's errand.**&#xD;&#xA;&#xD;&#xA;That being said, some general comments about the legalities of retro system ROM images can be made by this particular fool.&#xD;&#xA;&#xD;&#xA;Legalities will differ depending on your locale but, in general, downloading ROM images for any system (regardless of age) is strictly **not** allowed by law. In fact, it _may_ even be considered &quot;software piracy&quot; to make images of ROMs you legally own. This is why emulation sites shy away from showing you where or how to get ROMs for their software.&#xD;&#xA;&#xD;&#xA;There are locales, however, where it is legal to create and download copyrighted material for personal, non-commercial use. **Check with an expert about your local statutes on the subject.**&#xD;&#xA;&#xD;&#xA;The inverse is also true: **there is no global, over-arching law that governs or specifically allows downloading ROM images**, especially those that make special claims regarding some specific number of hours that intellectual property can be in your possession.&#xD;&#xA;&#xD;&#xA;And even if downloading an image *is* legal where you are (or is not specifically _illegal_, as the case may be), it's not like a particularly litigious rightsholder won't try to pursue legal recourse if they think they have a case. (Perhaps an unlikely situation, but words are small comfort if your ISP is suddenly pressured to disconnect you.)&#xD;&#xA;&#xD;&#xA;Of course, there are many sites that offer ROM images of games and system firmware for download. These sites are almost certainly breaking the law (or are in a legal grey area), though in many cases the rightsholders may not have any interest in pursuing legal interests. Such sites may also be operating out of countries where it is legal to offer such services, or the legal recourse for rightsholders are limited.&#xD;&#xA;&#xD;&#xA;Finally, I would be remiss if I did not link to the [Wikipedia article on the legal implications of abandonware][1].&#xD;&#xA;&#xD;&#xA;Whether or not creating or downloading old or abandoned images is adhering to the spirit of the law is up to individuals.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://en.wikipedia.org/wiki/Abandonware#Law" />
  <row Id="3476" PostHistoryTypeId="5" PostId="856" RevisionGUID="7ec73571-e3d7-4b25-a962-da0046521fea" CreationDate="2016-06-09T14:59:15.820" UserId="79" Comment="Answer the first part of the question!" Text="PowerPC CPUs are still produced, mainly for embedded applications, *e.g.* [the Qorivva MPC55xx MCUs][1].&#xD;&#xA;&#xD;&#xA;As far as I'm aware, the only currently-produced (for some value of &quot;produced&quot;) desktop computers using PowerPC processors are Amiga replacements: [ACube Systems' AmigaOne 500][2] and [A-EON Technology's AmigaOne X1000][3]. Nowadays on the desktop it's pretty much all Intel/AMD, with a sprinkling of ARM.&#xD;&#xA;&#xD;&#xA;The Power architecture lives on in IBM's [POWER CPUs][4], the current iteration of which is the [POWER8][5]; but they're only available in (expensive) servers.&#xD;&#xA;&#xD;&#xA;You should be able to find lots of PowerPC-based Apple computers second-hand, capable of running your discs (assuming the operating system is compatible).&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.nxp.com/products/microcontrollers-and-processors/power-architecture-processors/mpc5xxx-5xxx-32-bit-mcus/mpc55xx-mcus:MPC5500&#xD;&#xA;  [2]: http://www.acube-systems.biz/index.php?page=hardware&amp;pid=7&#xD;&#xA;  [3]: http://www.a-eon.com/?page=x1000&#xD;&#xA;  [4]: https://en.wikipedia.org/wiki/IBM_POWER_microprocessors&#xD;&#xA;  [5]: https://en.wikipedia.org/wiki/POWER8" />
  <row Id="3477" PostHistoryTypeId="2" PostId="857" RevisionGUID="f31f2956-95ae-499d-8059-b7d92513ddf0" CreationDate="2016-06-09T15:34:34.760" UserId="1912" Text="The first question is answered in the [+3 CP/M manual][1] (search for 'Memory Map'): 4-5-6-3 for CP/M bank 0, 0-1-2-3 for CP/M bank 1, and 4-7-6-3 for CP/M bank 2. &#xD;&#xA;&#xD;&#xA;The design of CP/M is that programs load at 0100h, and occupy memory up to the base of CP/M. Therefore CP/M (or, in CP/M Plus, at least the 'resident' portion of it) needs to live at the top of memory, and not page itself out when it switches to a different bank. The three configurations used by CP/M were no doubt chosen with this idea in mind: all three have bank 3 in the top 16k.&#xD;&#xA;&#xD;&#xA;The other configuration (4-5-6-7) isn't used by CP/M. It may have been done for symmetry (0-1-2-3 is all uncontended, so 4-5-6-7 is a matching all-contended configuration). Or it may have been included in case there was a requirement for CP/M code or loadable drivers in bank 5 to access the second screen in bank 7.&#xD;&#xA;&#xD;&#xA;CP/M does character I/O one byte at a time (each character is passed to the BIOS call CONOUT in the C register), so the screen update code doesn't need to access the running program. If areas of memory have to be transferred between banks, this is done in small chunks using a buffer at the top of RAM.&#xD;&#xA;&#xD;&#xA;  [1]: http://www.worldofspectrum.org/Plus3CPMManual/appendix6.html" />
  <row Id="3478" PostHistoryTypeId="5" PostId="857" RevisionGUID="2107a5e3-1e1b-4d2b-9a7d-c4799a97252c" CreationDate="2016-06-09T15:43:33.500" UserId="1912" Comment="added 164 characters in body" Text="The first question is answered in the [+3 CP/M manual][1] (search for 'Memory Map'): 4-5-6-3 for CP/M bank 0, 0-1-2-3 for CP/M bank 1, and 4-7-6-3 for CP/M bank 2. The arrangement (doubtless by design) is very similar to that used for PCW CP/M, where CP/M banks 2,3,4 etc. are the same as bank 0, except for the 4000-7FFF range.&#xD;&#xA;&#xD;&#xA;The design of CP/M is that programs load at 0100h, and occupy memory up to the base of CP/M. Therefore CP/M (or, in CP/M Plus, at least the 'resident' portion of it) needs to live at the top of memory, and not page itself out when it switches to a different bank. The three configurations used by CP/M were no doubt chosen with this idea in mind: all three have bank 3 in the top 16k.&#xD;&#xA;&#xD;&#xA;The other configuration (4-5-6-7) isn't used by CP/M. It may have been done for symmetry (0-1-2-3 is all uncontended, so 4-5-6-7 is a matching all-contended configuration). Or it may have been included in case there was a requirement for CP/M code or loadable drivers in bank 5 to access the second screen in bank 7.&#xD;&#xA;&#xD;&#xA;CP/M does character I/O one byte at a time (each character is passed to the BIOS call CONOUT in the C register), so the screen update code doesn't need to access the running program. If areas of memory have to be transferred between banks, this is done in small chunks using a buffer at the top of RAM.&#xD;&#xA;&#xD;&#xA;  [1]: http://www.worldofspectrum.org/Plus3CPMManual/appendix6.html" />
  <row Id="3479" PostHistoryTypeId="2" PostId="858" RevisionGUID="6c530d92-5be3-4ec0-80e2-0176601d6dd2" CreationDate="2016-06-09T18:14:44.213" UserId="1951" Text="I can't add much to the above answer, except that the additional modes would have been there either because they were a harmless side effect of the primary 64k CP/M mode that would have cost more to mask out than to leave, ot they were there to mirror modes in other Amstrad Z80 boxes and help porting. &#xD;&#xA;&#xD;&#xA;Richard Altwasser may know for sure, but he's run away.&#xD;&#xA;&#xD;&#xA;R" />
  <row Id="3480" PostHistoryTypeId="5" PostId="858" RevisionGUID="3262d151-eba8-4fd1-969a-d5ba2da19ca7" CreationDate="2016-06-09T19:49:34.200" UserId="12" Comment="Cleanups" Text="I can't add much to the above answer, except that the additional modes would have been there either because they were a harmless side effect of the primary 64k CP/M mode that would have cost more to mask out than to leave, or they were there to mirror modes in other Amstrad Z80 boxes and help porting. &#xD;&#xA;&#xD;&#xA;Richard Altwasser may know for sure, but he's run away." />
  <row Id="3481" PostHistoryTypeId="2" PostId="859" RevisionGUID="f52f1ecf-d7e6-4920-a6be-81bad93f8325" CreationDate="2016-06-09T20:19:33.980" UserId="1880" Text="I was wondering if it is possible to run 8-bit applications within QEMU. I know that the x86 architecture can run 16-bit applications, but can it also run 8-bit applications?" />
  <row Id="3482" PostHistoryTypeId="1" PostId="859" RevisionGUID="f52f1ecf-d7e6-4920-a6be-81bad93f8325" CreationDate="2016-06-09T20:19:33.980" UserId="1880" Text="Can x86 processors run 8-bit applications?" />
  <row Id="3483" PostHistoryTypeId="3" PostId="859" RevisionGUID="f52f1ecf-d7e6-4920-a6be-81bad93f8325" CreationDate="2016-06-09T20:19:33.980" UserId="1880" Text="&lt;emulation&gt;" />
  <row Id="3485" PostHistoryTypeId="2" PostId="860" RevisionGUID="d2bd563c-8bc9-42ae-a359-abfa299fddee" CreationDate="2016-06-09T20:31:52.710" UserId="454" Text="You can run Rosetta (Apples PowerPC support on Intel platforms) on a Intel mac running Snow Leopard.  You can now run Snow Leopard in a VM. That's a lot of hoops to run through, but might be worth it. &#xD;&#xA;&#xD;&#xA;There is also http://sheepshaver.cebix.net/ but I have no idea how well it works. &#xD;&#xA;&#xD;&#xA;The short answer is that your either going to have to find an old mac or emulate." />
  <row Id="3486" PostHistoryTypeId="6" PostId="859" RevisionGUID="4c0c310f-7793-4d3a-a6b4-bff5e980e38a" CreationDate="2016-06-09T21:05:29.453" UserId="1880" Comment="Added qemu tag." Text="&lt;emulation&gt;&lt;qemu&gt;" />
  <row Id="3487" PostHistoryTypeId="2" PostId="861" RevisionGUID="c6dd36f7-fbf1-4a25-a28a-9a9a4d9812d1" CreationDate="2016-06-09T21:18:16.327" UserId="105" Text="The 8086 is source-code compatible with the 8080 (the other way around is not true). This means that most assembly code written for the 8080 can be assembled so that 8086 instructions are emitted. The only exceptions would be self-modifying code or code that relies on interrupts, which are handled differently on both processors.&#xD;&#xA;&#xD;&#xA;In fact, some assemblers, like PASMO, are able to [generate .COM programs for DOS][1] or CP/M 86 from the same 8080 assembly code.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://pasmo.speccy.org/pasmodoc.html#intro" />
  <row Id="3488" PostHistoryTypeId="2" PostId="862" RevisionGUID="f1f0746c-220d-40a9-8e43-2ad56f41c096" CreationDate="2016-06-09T21:22:52.993" UserId="857" Text="I am creating a black Amiga 500 casing for my retro pi unit. Have bought the casing, a 1200 keyboard and keyrah unit to convert the keyboard to USB. I have some vinyl dye paint for the plastic but have a quandary regarding the keys. If I dye them black, does anyone know if there are any white character transfers / stickers for the a500 keyboard characters that I could get my hands on which will look professional, or does anyone have any solutions on getting black keys? I could get an old cd32 keyboard which was black but last look on ebay...£100...not paying that! :)" />
  <row Id="3489" PostHistoryTypeId="1" PostId="862" RevisionGUID="f1f0746c-220d-40a9-8e43-2ad56f41c096" CreationDate="2016-06-09T21:22:52.993" UserId="857" Text="Black Amiga 500 Keys" />
  <row Id="3490" PostHistoryTypeId="3" PostId="862" RevisionGUID="f1f0746c-220d-40a9-8e43-2ad56f41c096" CreationDate="2016-06-09T21:22:52.993" UserId="857" Text="&lt;amiga&gt;&lt;hardware-mods&gt;" />
  <row Id="3491" PostHistoryTypeId="2" PostId="863" RevisionGUID="0578b153-6acd-4f7b-bfdb-8ae655f002a7" CreationDate="2016-06-09T21:46:54.827" UserId="149" Text="I've had an Amiga on a shelf for a long time. Today I took it down and tried to use it but it's not working. There's some basic activity - the power LED illuminates, and there is a video signal - but the screen remains dark and the drives inactive.&#xD;&#xA;&#xD;&#xA;What are the most likely causes of failure in old Amigas?" />
  <row Id="3492" PostHistoryTypeId="1" PostId="863" RevisionGUID="0578b153-6acd-4f7b-bfdb-8ae655f002a7" CreationDate="2016-06-09T21:46:54.827" UserId="149" Text="I've taken my Amiga computer out of storage after several years and it doesn't work. What's the likely cause?" />
  <row Id="3493" PostHistoryTypeId="3" PostId="863" RevisionGUID="0578b153-6acd-4f7b-bfdb-8ae655f002a7" CreationDate="2016-06-09T21:46:54.827" UserId="149" Text="&lt;amiga&gt;&lt;repair&gt;" />
  <row Id="3494" PostHistoryTypeId="2" PostId="864" RevisionGUID="2e2e72cd-97c5-459d-8f2b-7e8953d16418" CreationDate="2016-06-09T21:46:54.827" UserId="149" Text="Amiga computers of all models have two particular weaknesses which often appear with age.&#xD;&#xA;&#xD;&#xA;The first is the capacitors tend to fail as they get old. This can manifest itself as the Amiga showing some signs of life (power LED and video signal) but not booting. I've also heard that poor-quality video and audio can be a symptom of failing capacitors.&#xD;&#xA;&#xD;&#xA;The fix for this is straightforward - replace the capacitors! Expired capacitors generally won't cause any knock-on damage so replacing the capacitor will often fix problems. Those experienced at soldering can do this job themselves, and the replacement parts are relatively cheap. There are some specialist Amiga online stores who often stock capacitor packs for the different models of Amiga. For those not willing to put a soldering iron to their precious Amiga mainboard, there are again Amiga specialists who provide a &quot;recapping&quot; service.&#xD;&#xA;&#xD;&#xA;The second problem you're likely to see is a leaking battery. Not all Amigas have onboard batteries, but those that did used an NiCd rechargeable battery. When these get old they tend to leak, and this is more likely if it has not been actively used for a while.&#xD;&#xA;&#xD;&#xA;Unlike failing capacitors, a failing NiCd battery is **bad** news. They leak a corrosive alkaline which can eat through the traces of the mainboard, and corrode metal parts - a leaking battery can cause extensive damage. If your Amiga has an NiCd battery you would be advised to remove it immediately! Even if it hasn't leaked *yet* it is still a potential problem in the near future. Removing it is a simple as using snips to cut through the metal connections to the mainboard, or even just rocking the battery back-and-forth until the connections shear off. Remember that the battery has corrosive alkaline so protect your hands suitably.&#xD;&#xA;&#xD;&#xA;If the battery *has* leaked, then you should immediately take steps to clean off the corrosive alkaline before the damage gets any worse. A web search for cleaning PCBs should provide some guides to this, but essentially you should use a brush to apply a weak acid (such as vinegar) to the corroded areas of the board (don't be surprised if it starts fizzing - this means that the acid is neutralising the alkaline) followed by rinsing with deionised water and leaving to dry thoroughly. Then you will need to carefully inspect and test for whatever damage the alkaline may have done. Repairing may take some advanced skills. Finally, if you still want to have a working RTC battery, then there are ways to attach a socket for a CR2032 button cell in place of the NiCd battery, which is a much safer alternative.&#xD;&#xA;&#xD;&#xA;Fortunately not all Amigas had onboard batteries - only the &quot;big box&quot; Amigas and the A500+. The basic 500, 600 and 1200 do not have batteries. However RAM expansions such as the A501 may have NiCd batteries and therefore the same problem applies there too.&#xD;&#xA;&#xD;&#xA;[Disclaimer: the above is guidance based on what I have read elsewhere and my own experiences, but it is not expert advice. Proceed with caution before making modifications to your computer.]" />
  <row Id="3495" PostHistoryTypeId="5" PostId="861" RevisionGUID="6d0b541d-e574-4040-9487-dbc8ac291824" CreationDate="2016-06-09T21:59:00.343" UserId="105" Comment="added 329 characters in body" Text="The 8086 is source-code compatible with the 8080 (the other way around is not true). This means that most assembly code written for the 8080 can be assembled so that 8086 instructions are emitted. The only exceptions would be self-modifying code or code that relies on interrupts, which are handled differently on both processors.&#xD;&#xA;&#xD;&#xA;In fact, some assemblers, like PASMO, are able to [generate .COM programs for DOS][1] or CP/M 86 from the same 8080 assembly code. Digital Research also had [XLT86][2], a 8080 to 8086 translator.&#xD;&#xA;&#xD;&#xA;Even if they were not source code compatible, the x86 architecture has 8-bit registers, and can perform 8-bit loads and stores, and 8-bit ALU operations, so it is capable of running 8-bit applications (understanding that 8-bit applications are those applications that use 8 bit data types, 8 bit operations, and 16 bit addresses)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://pasmo.speccy.org/pasmodoc.html#intro&#xD;&#xA;  [2]: http://www.s100computers.com/Software%20Folder/Assembler%20Collection/Digital%20Research%20XLT86%20Manual.pdf" />
  <row Id="3496" PostHistoryTypeId="2" PostId="865" RevisionGUID="4987d3a1-8b0a-4fe6-b115-b2dff95a59e8" CreationDate="2016-06-09T21:59:55.787" UserId="79" Text="There are several aspects to consider to answer your question.&#xD;&#xA;&#xD;&#xA;The *x86* architecture is backwards-compatible with the first CPU of the line, the 8088 (and its sibling, the 8086). What this means is that, when a modern Intel (or AMD) processor boots up, it starts in a mode which is compatible with the 8088 — if the motherboard's BIOS support is good enough, you can still boot MS-DOS on a brand-new PC (albeit not from a floppy disk!). (Presumably you could also boot CP/M-86, but I haven't tried that. Other 16-bit operating systems, such as OS/2, Coherent or Xenix, are more demanding and tend not to work — [Fun with virtualization][1] goes into the specifics). The 8088 is a 16-bit CPU, inasmuch as it processes data internally 16 bits at a time. As newer CPUs introduced wider internal data busses, new modes were added to support them, so you get 32-bit binaries and now 64-bit binaries, and it's even possible to mix and match. So a modern, 64-bit *x86*-compatible CPU can still run 16-bit binary code, at least in some modes (64-bit mode, or &quot;long mode&quot;, doesn't support 16-bit code).&#xD;&#xA;&#xD;&#xA;Running an application doesn't just require CPU support though, it also requires operating system support. So you can't just take a 16-bit DOS or Windows binary and run it on a Linux system, or even on a Windows 10 system — you need some sort of emulation layer, not for the CPU, but for the operating system services. This is where tools such as [DOSBox][2] or [Wine][3] come in.&#xD;&#xA;&#xD;&#xA;What would it mean to run an 8-bit binary on an *x86* CPU? On the CPU side, the closest 8-bit CPU is the 8080, but the 8088/8086 is different enough that it's not binary-compatible with the 8080; so you can't directly run an 8080 binary on an 8088, let alone on a more modern *x86* CPU. On the operating system side, the best you could hope for would be that your application was built for CP/M; so you'd need some sort of CP/M-compatible layer (or perhaps CP/M-86 or DOS which was somewhat backwards-compatible).&#xD;&#xA;&#xD;&#xA;As [mcleod_ideafix][4] points out, the *x86* is source-code compatible with the 8080, *i.e.* the 8088 supports all the features of the 8080 and the Intel assembler mnemonics for the 8080 can be (in most cases) mechanically converted to equivalent 8088 assembly. But you'd still need to adapt the application to the target operating system, as well as the new target CPU. (Stephen P. Morse's [8086 history][5] covers this in more detail.)&#xD;&#xA;&#xD;&#xA;So in summary, you can't take an 8-bit binary and run it directly on an *x86* processor. If you're careful, you may be able to rebuild an 8-bit 8080 assembly language program for the 8088, and run it under CP/M-86 or DOS.&#xD;&#xA;&#xD;&#xA;QEMU itself doesn't emulate any 8-bit CPUs. There are many 8-bit emulators for modern systems though, some including the operating environment — examples include [Stefan Tramm's 8080 CP/M emulator][6], the [Toledo 8080 emulator][7], [Z80pack][8]...&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://virtuallyfun.superglobalmegacorp.com/&#xD;&#xA;  [2]: http://www.dosbox.com/&#xD;&#xA;  [3]: http://www.winehq.org/&#xD;&#xA;  [4]: http://retrocomputing.stackexchange.com/users/105/mcleod-ideafix&#xD;&#xA;  [5]: http://stevemorse.org/8086history/8086history.doc&#xD;&#xA;  [6]: http://www.tramm.li/i8080/&#xD;&#xA;  [7]: http://www.nanochess.org/emulator.html&#xD;&#xA;  [8]: http://www.autometer.de/unix4fun/z80pack/" />
  <row Id="3497" PostHistoryTypeId="2" PostId="866" RevisionGUID="5bf6cf35-c239-4414-8607-fa62a5a9c143" CreationDate="2016-06-09T22:02:46.120" UserId="637" Text="Any cassette tape system which can utilize a standard cassette tape recorder can be plugged into any audio device, with sufficient quality, and will work. &#xD;&#xA;&#xD;&#xA;You can record saved files with any audio recording app and load it back in by playing it back. I know this is regularly done on the Apple II, Sinclair ZX Spectrum, and Tandy Color Computer systems, and surely many others.&#xD;&#xA;&#xD;&#xA;This cannot be done (at least easily) on Commodore or Atari 8-bit computer systems because the cassette tape recorder has special circuitry which makes it incompatible with standard cassette tape recorders or other audio devices." />
  <row Id="3498" PostHistoryTypeId="5" PostId="856" RevisionGUID="7dd0aacd-de86-473c-806e-b6bc8770cd64" CreationDate="2016-06-09T22:06:33.383" UserId="79" Comment="Mention emulation." Text="PowerPC CPUs are still produced, mainly for embedded applications, *e.g.* [the Qorivva MPC55xx MCUs][1].&#xD;&#xA;&#xD;&#xA;As far as I'm aware, the only currently-produced (for some value of &quot;produced&quot;) desktop computers using PowerPC processors are Amiga replacements: [ACube Systems' AmigaOne 500][2] and [A-EON Technology's AmigaOne X1000][3]. Nowadays on the desktop it's pretty much all Intel/AMD, with a sprinkling of ARM.&#xD;&#xA;&#xD;&#xA;The Power architecture lives on in IBM's [POWER CPUs][4], the current iteration of which is the [POWER8][5]; but they're only available in (expensive) servers.&#xD;&#xA;&#xD;&#xA;You should be able to find lots of PowerPC-based Apple computers second-hand, capable of running your discs (assuming the operating system is compatible).&#xD;&#xA;&#xD;&#xA;If your disc images are for Macintosh-style computers, you could try running them with [QEMU's PowerPC emulator][6]. For more direct Mac OS on PowerPC emulation, you could also try [PearPC][7] or [SheepShaver][8].&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.nxp.com/products/microcontrollers-and-processors/power-architecture-processors/mpc5xxx-5xxx-32-bit-mcus/mpc55xx-mcus:MPC5500&#xD;&#xA;  [2]: http://www.acube-systems.biz/index.php?page=hardware&amp;pid=7&#xD;&#xA;  [3]: http://www.a-eon.com/?page=x1000&#xD;&#xA;  [4]: https://en.wikipedia.org/wiki/IBM_POWER_microprocessors&#xD;&#xA;  [5]: https://en.wikipedia.org/wiki/POWER8&#xD;&#xA;  [6]: http://wiki.qemu.org/PowerPC&#xD;&#xA;  [7]: http://pearpc.sf.net/&#xD;&#xA;  [8]: http://sheepshaver.cebix.net/" />
  <row Id="3499" PostHistoryTypeId="2" PostId="867" RevisionGUID="fd480321-e17d-4ca7-a52f-0289d4652d7a" CreationDate="2016-06-09T22:38:10.907" UserId="1955" Text="Not a desktop PC, but the [Nintendo Wii U][1] is still manufactured and contains a Power PC processor.&#xD;&#xA;&#xD;&#xA;Also the recently discontinued Xbox 360 and Playstation 3 consoles ran on Power PC too.&#xD;&#xA;&#xD;&#xA;If you wanted to get a Power PC computer to run Linux on, you could potentially find an older generation Playstation 3 with older firmware on eBay, and use the [OtherOS][2] functionality which was removed in subsequent firmware updates.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://en.wikipedia.org/wiki/Wii_U&#xD;&#xA;  [2]: https://en.wikipedia.org/wiki/OtherOS" />
  <row Id="3500" PostHistoryTypeId="2" PostId="868" RevisionGUID="fcfc74de-3bb9-4294-8e57-1d9575a4f691" CreationDate="2016-06-09T22:47:29.380" UserId="1939" Text="I just replaced the idprom (AKA NVRAM + battery; I used an ST M48T08-100PC1) in my Sun SPARCstation 20. The original one was inside a rectangular holder with a tab on each short end; it had passthrough holes on the inside so the pins of the chip could connect to the motherboard.&#xD;&#xA;&#xD;&#xA;I was having trouble getting my system to boot (as far as I can tell, I just needed to wait for it to go through the lengthy POST, since the only output you get during that is keyboard LEDs and terminal output), so I tried inserting the new chip directly into the motherboard (without the enclosure), and I found that it worked.&#xD;&#xA;&#xD;&#xA;What is this thing called? And what is it used for?&#xD;&#xA;&#xD;&#xA;*Pictured is the enclosure on the left and the chip on the right.*[![Mystery enclosure on left; chip on right][1]][1]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/EdWqt.jpg" />
  <row Id="3501" PostHistoryTypeId="1" PostId="868" RevisionGUID="fcfc74de-3bb9-4294-8e57-1d9575a4f691" CreationDate="2016-06-09T22:47:29.380" UserId="1939" Text="What is this (seemingly optional) box around my Sun's idprom chip?" />
  <row Id="3502" PostHistoryTypeId="3" PostId="868" RevisionGUID="fcfc74de-3bb9-4294-8e57-1d9575a4f691" CreationDate="2016-06-09T22:47:29.380" UserId="1939" Text="&lt;hardware&gt;&lt;chip&gt;" />
  <row Id="3503" PostHistoryTypeId="2" PostId="869" RevisionGUID="974e3017-1f19-4569-8c8e-ad2146e2db62" CreationDate="2016-06-09T22:50:34.143" UserId="1912" Text="A few 16-bit processors can run 8-bit code: the NEC V20 series. The V20 and V30 are the ones you might encounter in a PC. The V20 is a pin-compatible substitute for the 8088, and the V30 for the 8086. These processors have a BRKEM instruction (in Intel's notation it would most likely be 'INTEM') which  switches to the 8080 instruction set and jumps to an interrupt vector. A RETEM instruction would switch back. Some CP/M emulators, such as [22NICE][1] could use this mode to virtualise CP/M programs rather than emulating the CPU -- provided the CP/M program only used 8080 instructions, not any of the Z80 extensions.&#xD;&#xA;&#xD;&#xA;As far as I know QEMU does not emulate this aspect of the  V20 / V30, so it wouldn't be possible to run 8-bit programs within mainline QEMU. The QEMU wiki does mention a separate [Z80 fork][2] that can run Spectrum programs.&#xD;&#xA;&#xD;&#xA;  [1]: http://cd.textfiles.com/230/EMULATOR/DIVERSE/CPM/22NICE/&#xD;&#xA;  [2]: http://wiki.qemu.org/Features/Z80" />
  <row Id="3504" PostHistoryTypeId="2" PostId="870" RevisionGUID="4a278240-2251-43a0-a1b7-d22f16fda6f1" CreationDate="2016-06-09T22:58:00.883" UserId="547" Text="There are single board computers (&quot;SBCs&quot;) available with Power architecture processors that could possibly double as desktop machines, e.g. [this one](https://www.curtisswrightds.com/products/cots-boards/processor-cards/6u-ppc-sbc/vpx6-185.html) has USB and can apparently be configured with a PCI Express port, which could be used to run a graphics card (although I suspect you'll need a PCI Express 1x graphics card to make it work -- I'm aware that Matrox make one of those; not sure if anyone else does).  Price could be an issue too, as the primary customer of such things is apparently military/aerospace.  But perhaps if you shop around you can find something a little more reasonably priced that can do it as well?" />
  <row Id="3505" PostHistoryTypeId="2" PostId="871" RevisionGUID="0bb1dc39-60b1-408a-afd5-8ce97a58a21a" CreationDate="2016-06-09T23:17:16.343" UserId="1957" Text="Not sure what it is called, but as far as I know it is just a tool that helps in the removal of the chip buy allowing you to pull up on the tabs.&#xD;&#xA;&#xD;&#xA;In my experience its just much easier to take a screwdriver to the chip socket so I just removed it on my Sun Ultra 10, especially considering where it sits on the board. Not easy to remove by hand with this installed. Also you could accidentally bend the pins removing it that way.&#xD;&#xA;&#xD;&#xA;Of-course this didn't matter when they were new because you were replacing the chips, but nowadays you will likely be modding the chip to take a CR2032 so that you don't have to find NOS expensive replacements." />
  <row Id="3506" PostHistoryTypeId="5" PostId="871" RevisionGUID="d1f99c43-4a57-4d9b-968f-07277562ce20" CreationDate="2016-06-10T00:44:33.493" UserId="12" Comment="fixup spelling and tweak the reading flow a little" Text="Not sure what it is called, but as far as I know it is just a tool that helps in the removal of the chip by allowing you to pull up on the tabs.&#xD;&#xA;&#xD;&#xA;In my experience its just much easier to take a screwdriver to the chip socket, so I just removed it on my Sun Ultra 10. (Especially considering where it sits on the board.) Not easy to remove by hand with this installed. Also you could accidentally bend the pins removing it that way.&#xD;&#xA;&#xD;&#xA;Of course, this didn't matter when they were new because you were replacing the chips, but nowadays you will likely be modding the chip to take a CR2032 so that you don't have to find NOS expensive replacements." />
  <row Id="3507" PostHistoryTypeId="5" PostId="862" RevisionGUID="c581a9ed-76e8-4c29-adad-9a151d5502a4" CreationDate="2016-06-10T01:37:37.010" UserId="462" Comment="clarity and format" Text="I am creating a black Amiga 500 casing for my retro pi unit. I have already bought the casing, a 1200 keyboard and keyrah unit to convert the keyboard to USB. &#xD;&#xA;&#xD;&#xA;I have some vinyl dye paint for the plastic, but I also have a quandary regarding the keys. If I dye them black, are there any professional-looking white character transfers/stickers for the a500 keyboard characters available?&#xD;&#xA;&#xD;&#xA;Or is there another solution to get black keys? I could get an old cd32 keyboard which was black, but the last time I checked eBay they were going for £100 and I'm not paying that much!" />
  <row Id="3508" PostHistoryTypeId="6" PostId="862" RevisionGUID="c581a9ed-76e8-4c29-adad-9a151d5502a4" CreationDate="2016-06-10T01:37:37.010" UserId="462" Comment="clarity and format" Text="&lt;amiga&gt;&lt;keyboards&gt;&lt;hardware-mods&gt;" />
  <row Id="3509" PostHistoryTypeId="24" PostId="862" RevisionGUID="c581a9ed-76e8-4c29-adad-9a151d5502a4" CreationDate="2016-06-10T01:37:37.010" Comment="Proposed by 462 approved by 367, 56 edit id of 1294" />
  <row Id="3512" PostHistoryTypeId="2" PostId="872" RevisionGUID="90aed988-0137-4739-af2d-ec3bc6a0ed06" CreationDate="2016-06-10T04:04:16.610" UserId="621" Text="Apple created a dynamic binary translator called [Rosetta][1] and bundled it into their OS X operating system.  As of OS 10.7, however, Rosetta was removed, and PowerPC applications are no longer supported on Intel-based boxes running the latest OS X software.  Is there a way to bring Rosetta back?  How can I run PowerPC applications on an Intel Mac?&#xD;&#xA;&#xD;&#xA;  [1]: https://en.wikipedia.org/wiki/Rosetta_%28software%29" />
  <row Id="3513" PostHistoryTypeId="1" PostId="872" RevisionGUID="90aed988-0137-4739-af2d-ec3bc6a0ed06" CreationDate="2016-06-10T04:04:16.610" UserId="621" Text="How do I run PowerPC Applications on an Intel Mac" />
  <row Id="3514" PostHistoryTypeId="3" PostId="872" RevisionGUID="90aed988-0137-4739-af2d-ec3bc6a0ed06" CreationDate="2016-06-10T04:04:16.610" UserId="621" Text="&lt;apple-macintosh&gt;&lt;apple&gt;&lt;intel&gt;&lt;powerpc&gt;" />
  <row Id="3515" PostHistoryTypeId="2" PostId="873" RevisionGUID="7d570b99-deb1-47ed-b89a-a623cfa9dfd7" CreationDate="2016-06-10T05:10:19.053" UserId="340" Text="A seldom-appreciated difficulty in emulating vector displays is that they don't necessarily have a well-defined frame rate, and time resolution can be just as important an issue as spacial resolution.  Consider, for example, the effect of drawing two 128-pointed stars--one with lines connecting every 17th point, and one with lines connecting every 15th point, drawing one line on each star millisecond.  Drawing each whole star would take 128ms, but the first star will look like a 15-pointed star redrawn once every 15ms, turning 1/128 rotation each time, while the second will appear as a 17-pointed star redrawn once every 17ms, likewise rotating 1/128 second each time.  On a vector display, both stars can appear to rotate smoothly, but a 60Hz raster display will have trouble capturing the motion nicely." />
  <row Id="3516" PostHistoryTypeId="2" PostId="874" RevisionGUID="75f1078d-59df-4bab-b3d3-3c09ea6b7c15" CreationDate="2016-06-10T05:44:35.053" UserId="10" Text="As far as I know, there's no way to bring Rosetta back - so your only option (providing you have OS X install discs with PPC support), would be to set up [PearPC](http://pearpc.sourceforge.net) - which emulates an entire system.&#xD;&#xA;&#xD;&#xA;That being said, I don't know how well it runs - I only played with an 0.1 a very long time ago, and none of the more recent versions." />
  <row Id="3517" PostHistoryTypeId="2" PostId="875" RevisionGUID="40da1fd4-1a2f-4a18-889a-beaeb935f993" CreationDate="2016-06-10T05:47:40.100" UserId="857" Text="I may have found a possible solution. &#xD;&#xA;&#xD;&#xA;http://www.4keyboard.com/commodore/586-commodore-commodore-a500-a1200-a1200hd-non-transparent-keyboard-stickers-882798355421.html&#xD;&#xA;&#xD;&#xA;The company above sell black stickers for A1200 keyboard caps. Anyone had any experience with these? " />
  <row Id="3518" PostHistoryTypeId="2" PostId="876" RevisionGUID="c49e4ec7-fbbc-482c-a2c3-27f94c7cc49e" CreationDate="2016-06-10T07:43:03.560" UserId="79" Text="You can &quot;bring Rosetta back&quot; by installing an older version of Mac OS X which supports it — Tiger, Leopard or Snow Leopard (on the latter it's an optional component). Rosetta was removed from later version for licensing reasons.&#xD;&#xA;&#xD;&#xA;If you have an installation CD for PowerPC Mac OS X, you can use a full-system emulator to run it. Currently it seems your best bet is [QEMU][1]. If your application works on MacOS 9, and you have the appropriate installation media, you could also try [SheepShaver][2] (which emulates PowerPC Macs but doesn't support Mac OS X). [PearPC][3] is another PowerPC system emulator but I'm not sure how well it works (compared to QEMU).&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://wiki.qemu.org/PowerPC&#xD;&#xA;  [2]: http://sheepshaver.cebix.net/&#xD;&#xA;  [3]: http://pearpc.sf.net" />
  <row Id="3519" PostHistoryTypeId="2" PostId="877" RevisionGUID="83da04fd-dfa2-4bf1-a480-efd58aba4077" CreationDate="2016-06-10T07:58:55.370" UserId="276" Comment="Created body" Text="Regarding the connection, use, restoration and maintenance of mouse peripherals.&#xD;&#xA;&#xD;&#xA;Includes the use of a modern mouse on old equipment." />
  <row Id="3520" PostHistoryTypeId="2" PostId="878" RevisionGUID="1827953b-99d8-45ee-b202-a28b5d9dddef" CreationDate="2016-06-10T07:58:55.370" UserId="276" Text="For questions about the use of a mouse on retrocomputers." />
  <row Id="3521" PostHistoryTypeId="2" PostId="879" RevisionGUID="4660ffe7-35ec-4681-baaa-ce2277d77f69" CreationDate="2016-06-10T08:43:09.823" UserId="1965" Text="As mcleod_ideafix pointed out, the x86 architecture is source-compatible with the x80 architecture. This basically means that if you have the original assembly file of a program, you can rougly translate it to x86 bytecode. Of course, you still need some form of assembly file to compile it, but you might have a look at [Dynamic Recompilation](https://en.wikipedia.org/wiki/Dynamic_recompilation).&#xD;&#xA;&#xD;&#xA;However, just executing code isn't everything for an emulated system. In fact, most 8-bit systems will use some form of Memory-mapped I/O or Port-mapped I/O. Of course, there is always the possibility to detect those, and then replace them with a call to a function defined by the emulator. The same goes, for example, for [Z-80](https://en.wikipedia.org/wiki/Zilog_Z80) opcodes, which are used a lot and which are basically incompatible with x86.&#xD;&#xA;&#xD;&#xA;The real matter, however, is the fact that you wont need recompilation. In fact, most of those systems from the 80's did have clock rates in the 1-5mHz rate. When you run this on a Gigahertz CPU, you would only need a really tiny fraction of the CPU time. Of course, this is a little different when implementing a later system, like some arcade systems, but those doesn't tend to use 8-bit CPU's.&#xD;&#xA;&#xD;&#xA;To be honest, the complexity of using dynamic recompilation to catch all those cases isn't worth the try. Use a good, well tested x80/z80 emulation library, or write your own for the matter, it is much easier, saver, and makes your code also a little bit more portable, in case you would have to port it to a smartphone, for exemple.&#xD;&#xA;" />
  <row Id="3522" PostHistoryTypeId="5" PostId="865" RevisionGUID="5143cce3-ffa4-4cb3-8311-2fbb3ce7cf99" CreationDate="2016-06-10T09:38:37.850" UserId="79" Comment="Clarify long v. 16-bit mode, and 8-bit v. 16-bit support." Text="There are several aspects to consider to answer your question.&#xD;&#xA;&#xD;&#xA;The *x86* architecture is backwards-compatible with the first CPU of the line, the 8088 (and its sibling, the 8086). What this means is that, when a modern Intel (or AMD) processor boots up, it starts in a mode which is compatible with the 8088 — if the motherboard's BIOS support is good enough, you can still boot MS-DOS on a brand-new PC (albeit not from a floppy disk!). (Presumably you could also boot CP/M-86, but I haven't tried that. Other 16-bit operating systems, such as OS/2, Coherent or Xenix, are more demanding and tend not to work — [Fun with virtualization][1] goes into the specifics). The 8088 is a 16-bit CPU, inasmuch as it processes data internally 16 bits at a time. As newer CPUs introduced wider internal data busses, new modes were added to support them, so you get 32-bit binaries and now 64-bit binaries, and it's even possible to mix and match. So a modern, 64-bit *x86*-compatible CPU can still run 16-bit binary code, at least in some modes (64-bit mode, or &quot;long mode&quot;, doesn't support real-mode 16-bit code; [it's possible to work around this using VT-x][2]).&#xD;&#xA;&#xD;&#xA;Running an application doesn't just require CPU support though, it also requires operating system support. So you can't just take a 16-bit DOS or Windows binary and run it on a Linux system, or even on a Windows 10 system — you need some sort of emulation layer, not for the CPU, but for the operating system services. This is where tools such as [DOSBox][3] or [Wine][4] come in.&#xD;&#xA;&#xD;&#xA;What would it mean to run an 8-bit binary on an *x86* CPU? On the CPU side, the closest 8-bit CPU is the 8080, but the 8088/8086 is different enough that it's not binary-compatible with the 8080; so you can't directly run an 8080 binary on an 8088, let alone on a more modern *x86* CPU. On the operating system side, the best you could hope for would be that your application was built for CP/M; so you'd need some sort of CP/M-compatible layer (or perhaps CP/M-86 or DOS which was somewhat backwards-compatible).&#xD;&#xA;&#xD;&#xA;As [mcleod_ideafix][5] points out, the *x86* is source-code compatible with the 8080, *i.e.* the 8088 supports all the features of the 8080 and the Intel assembler mnemonics for the 8080 can be (in most cases) mechanically converted to equivalent 8088 assembly. But you'd still need to adapt the application to the target operating system, as well as the new target CPU. (Stephen P. Morse's [8086 history][6] covers this in more detail.)&#xD;&#xA;&#xD;&#xA;So in summary, you can't take an 8-bit binary and run it directly on an *x86* processor. If you're careful, you may be able to rebuild an 8-bit 8080 assembly language program for the 8088, and run it under CP/M-86 or DOS. Thanks to the *x86* architecture's support for 8-bit operations, you can write an 8-bit style application (*i.e.* using only 8-bit arithmetic and logical operations, but 16-bit pointers) and run it on a 16-bit operating system (the BIOS supports this rather well, as does DOS). But to me this isn't quite the same as the 16-bit and 32-bit support on modern 64-bit systems, because the 16-bit nature of the architecture leaks into its 8-bit support: for example, 8-bit `DIV` always divides the 16-bit `AX`, which means you can't simply pretend `AL` and `AH` are separate 8-bit registers unless you avoid `DIV`, `MUL` etc. entirely.&#xD;&#xA;&#xD;&#xA;QEMU itself doesn't emulate any 8-bit CPUs. There are many 8-bit emulators for modern systems though, some including the operating environment — examples include [Stefan Tramm's 8080 CP/M emulator][7], the [Toledo 8080 emulator][8], [Z80pack][9]...&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://virtuallyfun.superglobalmegacorp.com/&#xD;&#xA;  [2]: https://en.wikipedia.org/wiki/Virtual_8086_mode#64-bit_and_VMX_support&#xD;&#xA;  [3]: http://www.dosbox.com/&#xD;&#xA;  [4]: http://www.winehq.org/&#xD;&#xA;  [5]: http://retrocomputing.stackexchange.com/users/105/mcleod-ideafix&#xD;&#xA;  [6]: http://stevemorse.org/8086history/8086history.doc&#xD;&#xA;  [7]: http://www.tramm.li/i8080/&#xD;&#xA;  [8]: http://www.nanochess.org/emulator.html&#xD;&#xA;  [9]: http://www.autometer.de/unix4fun/z80pack/" />
  <row Id="3524" PostHistoryTypeId="2" PostId="880" RevisionGUID="987215ab-9adc-4a9d-b237-83730fef4d5e" CreationDate="2016-06-10T10:33:20.033" UserId="1969" Text="There is no such thing as an 8-bit application for the x86 architecture, because the x86 architecture has always been at least 16-bit right from the first generation of x86 processors.&#xD;&#xA;&#xD;&#xA;The x86 does allow access to 8-bit registers, but the code is still 16-bit and the processor is still running as a 16-bit processor.&#xD;&#xA;&#xD;&#xA;Of course, if you're trying to run 8-bit applications for a different architecture (a lot of people use the term &quot;8-bit&quot; generically to refer to old games and applications made for e.g. the BBC Micro, Commodore 64, early Nintendo game systems, and many other classic retrocomputers) then you will need to find an emulator for that system. In that case, your x86 processor is not running the application directly, but is running the emulator application (just like any other application that you run on your x86 processor) which in turn is running the 8-bit application &quot;in software&quot;. You should take a look at MESS if this is what you want." />
  <row Id="3525" PostHistoryTypeId="2" PostId="881" RevisionGUID="2f67099e-9455-4885-b89c-d7cd7b4c59e3" CreationDate="2016-06-10T11:20:41.053" UserId="1969" Text="This is the usual issue faced by abandonware sites. Technically the material hosted is illegal, but the sites usually get around this with a combination of a disclaimer saying &quot;we are not responsible for any of the content hosted on this site&quot; and relying on the fact that most companies aren't going to bother with enforcing the copyright on their old software, and neither are most law enforcement agencies.&#xD;&#xA;&#xD;&#xA;The latter part is particularly significant, as most companies are more likely to understand the viewpoint of people whose aim is to preserve and enjoy old software than to squeeze money out of people illegally copying software that isn't particularly usable in the modern world and which the company would make exactly zero dollars from as they aren't even selling it anymore.&#xD;&#xA;&#xD;&#xA;This isn't always the case though, as in some cases (particularly games) the original company (or a modern equivalent, as often the original companies have been bought by other companies or have sold the rights to their older products to another company) have started re-selling old software, sometimes bundled with emulation software to run it on a modern computing system. Some abandonware sites don't host software when this is done, but how the companies feel about illegal copying of the original versions of the software is difficult to assess and probably varies from company to company. This is particularly an issue among die-hard retrocomputing enthusiasts, as often the re-released version of the software is modified slightly (all sorts of reasons, ranging from censoring previously-accepted content to &quot;locking&quot; the software so that it will only run with the bundled emulation software and not on original hardware, or even just changing the title screen with a new copyright date) and some enthusiasts want a more authentic experience and still try to obtain the original version (usually illegally).&#xD;&#xA;&#xD;&#xA;In short, WinWorldPC is most likely illegal but most people don't care what they do with old software and so neither themselves nor you are very likely to get into any trouble. Hosting companies, of course, might have a problem with a site such as WinWorldPC because they don't want to get involved in a legal situation and usually have blanket policies such as &quot;if it's illegal, we don't want it here&quot; and aren't going to be willing to say &quot;if it's illegal but nobody cares about it then we're OK with it&quot;, because if it's illegal then ultimately the responsibility falls on the host for hosting illegal content, should a legal investigator turn up." />
  <row Id="3526" PostHistoryTypeId="5" PostId="881" RevisionGUID="ca4f2f3a-f766-4ba1-8cdb-6caa7b002ebd" CreationDate="2016-06-10T11:25:50.460" UserId="1969" Comment="added 299 characters in body" Text="This is the usual issue faced by abandonware sites. Technically the material hosted is illegal, but the sites usually get around this with a combination of a disclaimer saying &quot;we are not responsible for any of the content hosted on this site&quot; and relying on the fact that most companies aren't going to bother with enforcing the copyright on their old software, and neither are most law enforcement agencies.&#xD;&#xA;&#xD;&#xA;The latter part is particularly significant, as most companies are more likely to understand the viewpoint of people whose aim is to preserve and enjoy old software than to squeeze money out of people illegally copying software that isn't particularly usable in the modern world and which the company would make exactly zero dollars from as they aren't even selling it anymore.&#xD;&#xA;&#xD;&#xA;This isn't always the case though, as in some cases (particularly games) the original company (or a modern equivalent, as often the original companies have been bought by other companies or have sold the rights to their older products to another company) have started re-selling old software, sometimes bundled with emulation software to run it on a modern computing system. Some abandonware sites don't host software when this is done, but how the companies feel about illegal copying of the original versions of the software is difficult to assess and probably varies from company to company. This is particularly an issue among die-hard retrocomputing enthusiasts, as often the re-released version of the software is modified slightly (all sorts of reasons, ranging from censoring previously-accepted content to &quot;locking&quot; the software so that it will only run with the bundled emulation software and not on original hardware, or even just changing the title screen with a new copyright date) and some enthusiasts want a more authentic experience and still try to obtain the original version (usually illegally).&#xD;&#xA;&#xD;&#xA;In short, WinWorldPC is most likely illegal but most people don't care what they do with old software and so neither themselves nor you are very likely to get into any trouble. Hosting companies, of course, might have a problem with a site such as WinWorldPC because they don't want to get involved in a legal situation and usually have blanket policies such as &quot;if it's illegal, we don't want it here&quot; and aren't going to be willing to say &quot;if it's illegal but nobody cares about it then we're OK with it&quot;, because if it's illegal then ultimately the responsibility falls on the host for hosting illegal content, should a legal investigator turn up.&#xD;&#xA;&#xD;&#xA;EDIT: WinWorldPC has actually stated on their front page that they will not be hosting Windows XP currently out of respect for Microsoft's position regarding it and its commercial value in today's market. This would go a long way in favour of WinWorldPC should they get involved in a legal case." />
  <row Id="3529" PostHistoryTypeId="4" PostId="775" RevisionGUID="c015a257-0e0d-4a83-86ab-dacf5b0cd6a4" CreationDate="2016-06-10T16:33:21.433" UserId="1880" Comment="Changed title to lowercase." Text="Why are Windows 95 installation disks not uniquely bound to a single product key?" />
  <row Id="3532" PostHistoryTypeId="2" PostId="882" RevisionGUID="67abfa37-b995-400a-b4e3-0c2c0ae4da7e" CreationDate="2016-06-10T18:31:42.370" UserId="1939" Text="Are there any advantages to installing a parallel port in a C1541-family drive and using a parallel cable to a PC to image disks, other than increased speed (i.e. since the standard IEC protocol is serial, one bit at a time)? I got the impression years ago that some nibblers (i.e. very low-level copiers, for things like copy-protected software) *only* work with parallel, but I can't reason out why." />
  <row Id="3533" PostHistoryTypeId="1" PostId="882" RevisionGUID="67abfa37-b995-400a-b4e3-0c2c0ae4da7e" CreationDate="2016-06-10T18:31:42.370" UserId="1939" Text="Advantages to installing a parallel port in a C1541-family drive other than speed" />
  <row Id="3534" PostHistoryTypeId="3" PostId="882" RevisionGUID="67abfa37-b995-400a-b4e3-0c2c0ae4da7e" CreationDate="2016-06-10T18:31:42.370" UserId="1939" Text="&lt;hardware&gt;&lt;disk-drive&gt;&lt;copy-protection&gt;&lt;archival&gt;" />
  <row Id="3535" PostHistoryTypeId="2" PostId="883" RevisionGUID="b7679468-6c75-4beb-9ad3-abecb1f70aba" CreationDate="2016-06-10T18:40:43.600" UserId="462" Text="The first MSX, the [Mitsubishi &quot;ML-8000&quot;](https://www.msx.org/wiki/Mitsubishi_ML-8000), was released on October 21&lt;sup&gt;st&lt;/sup&gt;, 1983. Four days later, the second MSX, the Sanyo &quot;MPC-10&quot;, was released.&#xD;&#xA;&#xD;&#xA;As you mentioned, the earlier SpectreVideo *claimed* to be MSX, [but wasn't](https://en.wikipedia.org/wiki/MSX#Similar_systems):&#xD;&#xA;&#xD;&#xA;&gt;The system most similar to the MSX was the Spectravideo SV-328 home computer (Spectravideo even claimed to be MSX compatible in advertisements before the actual launch of MSX systems, but it was in fact not completely compatible with the MSX).&#xD;&#xA;&#xD;&#xA;I also feel it's worthwhile to include a picture of the first issue of MSX magazine (which for some reason features a cigar-smoking horse-man taking a bath in outer space):&#xD;&#xA;&#xD;&#xA;![msx magazine][1]&#xD;&#xA;&#xD;&#xA;&lt;sub&gt;Source (Japanese): http://weekly.ascii.jp/elem/000/000/179/179415/&lt;/sub&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/iWE8a.jpg" />
  <row Id="3540" PostHistoryTypeId="2" PostId="884" RevisionGUID="46b3d71f-6779-4d89-8855-ac3c9442cdf5" CreationDate="2016-06-10T19:41:57.697" UserId="-1" Text="" />
  <row Id="3541" PostHistoryTypeId="2" PostId="885" RevisionGUID="3e750693-8c89-4219-ab20-1446af4c7bf0" CreationDate="2016-06-10T19:41:57.697" UserId="-1" Text="" />
  <row Id="3542" PostHistoryTypeId="2" PostId="886" RevisionGUID="75661c65-5302-4bc0-8a35-b11ec54daf1c" CreationDate="2016-06-10T22:48:42.507" UserId="1976" Text="Seems like I remember always using X=RND(-TIMER) to seed the random numbers in all the stuff I used to do in BASIC.  However that may be limited to ECB users." />
  <row Id="3543" PostHistoryTypeId="2" PostId="887" RevisionGUID="3acf285f-3b20-4986-8ae8-290992508014" CreationDate="2016-06-10T23:14:16.293" UserId="1977" Text="I've just got my commodore Vic-20 working and I found out that my cartridges are not loading and I couldn't find anything about this problem" />
  <row Id="3544" PostHistoryTypeId="1" PostId="887" RevisionGUID="3acf285f-3b20-4986-8ae8-290992508014" CreationDate="2016-06-10T23:14:16.293" UserId="1977" Text="Vic-20 not loading cart" />
  <row Id="3545" PostHistoryTypeId="3" PostId="887" RevisionGUID="3acf285f-3b20-4986-8ae8-290992508014" CreationDate="2016-06-10T23:14:16.293" UserId="1977" Text="&lt;hardware&gt;" />
  <row Id="3547" PostHistoryTypeId="5" PostId="886" RevisionGUID="d8ab5b4a-c912-43f6-8a88-1665602ab72a" CreationDate="2016-06-11T01:04:26.327" UserId="320" Comment="Clarified acronym." Text="Seems like I remember always using X=RND(-TIMER) to seed the random numbers in all the stuff I used to do in BASIC.  However that may be limited to ECB (Europe Card Bus) users." />
  <row Id="3548" PostHistoryTypeId="24" PostId="886" RevisionGUID="d8ab5b4a-c912-43f6-8a88-1665602ab72a" CreationDate="2016-06-11T01:04:26.327" Comment="Proposed by 320 approved by 56, 367 edit id of 1297" />
  <row Id="3549" PostHistoryTypeId="5" PostId="887" RevisionGUID="4623c7b3-e696-4b1f-8e3f-cb7f07efb7cd" CreationDate="2016-06-11T02:18:33.107" UserId="462" Comment="Added Wikipedia link (for more information/context); grammar; comment info" Text="I've just got my [Commodore Vic-20](https://en.wikipedia.org/wiki/Commodore_VIC-20) working, but I found out that my cartridges are not loading.&#xD;&#xA;&#xD;&#xA;It does a normal boot saying &quot;READY&quot; and it will load a cassette game for some reason.&#xD;&#xA;&#xD;&#xA;I couldn't find anything about this problem." />
  <row Id="3550" PostHistoryTypeId="24" PostId="887" RevisionGUID="4623c7b3-e696-4b1f-8e3f-cb7f07efb7cd" CreationDate="2016-06-11T02:18:33.107" Comment="Proposed by 462 approved by -1 edit id of 1298" />
  <row Id="3551" PostHistoryTypeId="5" PostId="887" RevisionGUID="b681ffd4-b391-4b37-ab1f-494ecbf6c057" CreationDate="2016-06-11T02:18:33.107" UserId="12" Comment="Added Wikipedia link (for more information/context); grammar; comment info" Text="I've just got my [Commodore VIC-20](https://en.wikipedia.org/wiki/Commodore_VIC-20) working, but I found out that my cartridges are not loading.&#xD;&#xA;&#xD;&#xA;It does a normal boot saying &quot;READY&quot; and it will load a cassette game." />
  <row Id="3552" PostHistoryTypeId="6" PostId="887" RevisionGUID="b681ffd4-b391-4b37-ab1f-494ecbf6c057" CreationDate="2016-06-11T02:18:33.107" UserId="12" Comment="Added Wikipedia link (for more information/context); grammar; comment info" Text="&lt;hardware&gt;&lt;vic-20&gt;" />
  <row Id="3553" PostHistoryTypeId="4" PostId="887" RevisionGUID="b681ffd4-b391-4b37-ab1f-494ecbf6c057" CreationDate="2016-06-11T02:18:33.107" UserId="12" Comment="Added Wikipedia link (for more information/context); grammar; comment info" Text="VIC-20 not loading cart" />
  <row Id="3555" PostHistoryTypeId="4" PostId="329" RevisionGUID="6c628ea9-9a56-431c-aed7-945ba77a0934" CreationDate="2016-06-11T02:55:56.477" UserId="12" Comment="Tweaked title a little" Text="Color BASIC RND function not so random" />
  <row Id="3556" PostHistoryTypeId="5" PostId="813" RevisionGUID="27559fda-a3ae-45b2-b452-c9fbf734885a" CreationDate="2016-06-11T03:07:50.173" UserId="808" Comment="added 60 characters in body" Text="The situation isn't nearly as cut and dried as Wikipedia might make it sound.&#xD;&#xA;&#xD;&#xA;For example, under US copyright law:&#xD;&#xA;&#xD;&#xA;&gt; § 117 . Limitations on exclusive rights: Computer programs&#xD;&#xA;&#xD;&#xA;&gt; (a) Making of Additional Copy or Adaptation by Owner of Copy.—Notwithstanding the provisions of section 106, it is **not an infringement** for the owner of a copy of a computer program to make or authorize the making of another copy or adaptation of that computer program provided:&#xD;&#xA;&#xD;&#xA;&gt; (1) that such a new copy or adaptation is created as an essential step in the utilization of the computer program in conjunction with a machine and that it is used in no other manner,&#xD;&#xA;&#xD;&#xA;I doubt that this was the *intent* of that bit of law, but this does give some wiggle room for the site owners to at least argue that what they/their users are doing is legal.&#xD;&#xA;&#xD;&#xA;Of course, copyright law does also vary (somewhat) with locale. Depending on where their servers are located, it's at least possible that the law there is somewhat less strict.&#xD;&#xA;&#xD;&#xA;There's another technicality that figures in here as well: most of copyright law is more or less aimed at a situation such as another publisher taking a work and selling the misappropriated work for their own profit. To do that, the person/group who's misappropriated the work normally has to make copies, then offer them for sale--and much of most copyright law is written to prevent that.&#xD;&#xA;&#xD;&#xA;In a case like this, where the site isn't actually making copies, but is merely placing the work in a situation where somebody else can make copies, many of those provisions sort of fall apart. So, the basic rights under US copyright law are:&#xD;&#xA;&#xD;&#xA;&gt; § 106 . Exclusive rights in copyrighted works&#xD;&#xA;&#xD;&#xA;&gt; Subject to sections 107 through 122, the owner of copyright under this title has the exclusive rights to do and to authorize any of the following:&#xD;&#xA;&#xD;&#xA;&gt; (1) to reproduce the copyrighted work in copies or phonorecords;&#xD;&#xA;&#xD;&#xA;&gt; (2) to prepare derivative works based upon the copyrighted work;&#xD;&#xA;&#xD;&#xA;&gt; (3) to distribute copies or phonorecords of the copyrighted work to the public by sale or other transfer of ownership, or by rental, lease, or lending;&#xD;&#xA;&#xD;&#xA;&gt; (4) in the case of literary, musical, dramatic, and choreographic works, pantomimes, and motion pictures and other audiovisual works, to perform the copyrighted work publicly;&#xD;&#xA;&#xD;&#xA;&gt; (5) in the case of literary, musical, dramatic, and choreographic works, pantomimes, and pictorial, graphic, or sculptural works, including the individual images of a motion picture or other audiovisual work, to display the copyrighted work publicly; and&#xD;&#xA;&#xD;&#xA;&gt; (6) in the case of sound recordings, to perform the copyrighted work publicly by means of a digital audio transmission.&#xD;&#xA;&#xD;&#xA;So, let's consider these one at a time:&#xD;&#xA;&#xD;&#xA;1. The site isn't really reproducing the copyrighted work, except to the degree that (for example) a web cache server held all or part of a copy of the work.&#xD;&#xA;2. It doesn't appear that they're preparing any derivative works. &#xD;&#xA;3. I don't see anything indicating that they're claiming to transfer ownership, lease, or lend the work (&quot;lending&quot; carries the specific idea of the item being returned, not being permanently transferred).&#xD;&#xA;4. through 6. clearly don't apply to an operating system (nor probably to any computer program).&#xD;&#xA;&#xD;&#xA;There's another provision in §108, that says:&#xD;&#xA;&#xD;&#xA;&gt; (d) The rights of reproduction and distribution under this section apply to a copy, made from the collection of a library or archives where the user makes his or her request or from that of another library or archives, of no more than one article or other contribution to a copyrighted collection or periodical issue, or to a copy or phonorecord of a small part of any other copyrighted work, if—&lt;br&gt;&#xD;&#xA;&gt; (1) the copy or phonorecord becomes the property of the user, and the library or archives has had no notice that the copy or phonorecord would be used for any purpose other than private study, scholarship, or research; and&lt;br&gt;&#xD;&#xA;&gt; (2) the library or archives displays prominently, at the place where orders are accepted, and includes on its order form, a warning of copyright in accordance with requirements that the Register of Copyrights shall prescribe by regulation.&#xD;&#xA;&#xD;&#xA;This was originally intended to apply to things like a copying machine at a library. If I go to the library and make a copy of something on the copying machine, *I'm* responsible, not the library. If (for example) I'm disabled, and ask one of their employees to make the copy, I'm still responsible for it, not them.&#xD;&#xA;&#xD;&#xA;The question in this case would be whether the web site qualifies as a library or archive. The fact that the site at least appears to be open to the general public seems to let it meet the legal requirements to qualify.&#xD;&#xA;&#xD;&#xA;This isn't just stretching a technicality to apply to the current situation either. The basic idea is fairly simple: a library or archive should be free to provide source material, and even provide copying equipment to their patrons. As long as they take the steps required by the law to tell/remind the patrons that wholesale copying may infringe a copyright, it's the patrons, not the library/archive, who are responsible for the copyright infringement. That seems to fit extremely well with what's happening here.&#xD;&#xA;&#xD;&#xA;That means just about any infringement that might occur would have to be on the part of the person doing the downloading, not the web site itself. Here (again) the first point brought up from §117 still (at least potentially) applies--it may still be legal. Of course, there's also the possibility that the downloader is simply somebody who (at some point in the past) actually bought a license to the program they're downloading/using. In that case, if that license hasn't ever been transferred to anybody else (and most contain provisions saying you *can't* transfer them) then the user is *probably* still authorized to install and use it (e.g., most older license agreements don't contain any limit on how long the license lasts).&#xD;&#xA;&#xD;&#xA;Bottom line: as I originally said, the situation here isn't really cut and dried. If the site were to be sued and the case were being heard in a US court, I'd guess there would be better than even odds that the court would shut down the site--but honestly, only a *little* better than even odds. I wouldn't come as a huge surprise to me at all if the site could successfully defend themselves as being a publicly available archive, and any copyright infringement was the responsibility of the users, not the archive itself.&#xD;&#xA;&#xD;&#xA;As far as other countries go: in theory, copyright law is fairly uniform between a large number of countries. There are quite a few international agreements (starting from the Berne convention of 1886) about copyrights and copyright law. In reality, however, there's still quite a bit of variation--but I'd say the US tends to favor copyright holders at least as much as almost any country, so if such a suit were brought in another country, the chances of the site being held responsible would be no greater, and in many cases would be much lower." />
  <row Id="3557" PostHistoryTypeId="2" PostId="888" RevisionGUID="4b92b698-72d9-44a0-b0bf-8c6e43ed0c5d" CreationDate="2016-06-11T03:47:58.637" UserId="367" Text="For PC connectivity you win absolutely nothing.&#xD;&#xA;Various devices that allow connecting a 1541 (and others) to PC will still talk IEC to the drive, regardless whether they use USB, serial or parallel to PC.&#xD;&#xA;&#xD;&#xA;There exists a parallel interface for 1541 that connects directly onto VIA chip in a C64 - that allows for much faster transfer because it bypasses the IEC bus completely.&#xD;&#xA;But there are no devices on the market that would use such connection to a PC." />
  <row Id="3558" PostHistoryTypeId="6" PostId="688" RevisionGUID="451a270c-0367-4836-9122-3baa3e921198" CreationDate="2016-06-11T04:59:27.853" UserId="462" Comment="This tag is new, but it fits" Text="&lt;zx-spectrum&gt;&lt;keyboards&gt;&lt;maintenance&gt;&lt;membrane-keyboard&gt;" />
  <row Id="3559" PostHistoryTypeId="24" PostId="688" RevisionGUID="451a270c-0367-4836-9122-3baa3e921198" CreationDate="2016-06-11T04:59:27.853" Comment="Proposed by 462 approved by 367, 517 edit id of 1299" />
  <row Id="3560" PostHistoryTypeId="5" PostId="884" RevisionGUID="48ab85b6-c34e-4b27-ba7b-12ced5caa2d4" CreationDate="2016-06-11T08:55:20.750" UserId="621" Comment="added 88 characters in body" Text="Use this tag for retrocomputing questions about the PowerPC hardware or instruction set." />
  <row Id="3561" PostHistoryTypeId="24" PostId="884" RevisionGUID="48ab85b6-c34e-4b27-ba7b-12ced5caa2d4" CreationDate="2016-06-11T08:55:20.750" Comment="Proposed by 621 approved by 56, 278 edit id of 1295" />
  <row Id="3562" PostHistoryTypeId="5" PostId="885" RevisionGUID="447e55a9-f94d-47ea-ad6a-c7e087735c7f" CreationDate="2016-06-11T08:55:25.593" UserId="621" Comment="added 38 characters in body" Text="for questions about PowerPC processors" />
  <row Id="3563" PostHistoryTypeId="24" PostId="885" RevisionGUID="447e55a9-f94d-47ea-ad6a-c7e087735c7f" CreationDate="2016-06-11T08:55:25.593" Comment="Proposed by 621 approved by 56, 278 edit id of 1296" />
  <row Id="3564" PostHistoryTypeId="10" PostId="887" RevisionGUID="1cc5f819-ca96-4eac-8392-b4ad118cfd27" CreationDate="2016-06-11T09:52:17.373" UserId="278" Comment="103" Text="{&quot;Voters&quot;:[{&quot;Id&quot;:278,&quot;DisplayName&quot;:&quot;wizzwizz4&quot;}]}" />
  <row Id="3565" PostHistoryTypeId="2" PostId="889" RevisionGUID="38406421-7936-4578-a041-c7d15bbbafc8" CreationDate="2016-06-11T10:43:39.877" UserId="1979" Text="Some supplemental things:&#xD;&#xA;&#xD;&#xA;1. Years ago, I used a program that emulated 8 bit CP/M on 16 bit DOS machines that were not the special NEC V20/V30 nor the dual-CPU AT&amp;T design.  It worked quite well and was not that much slower than the real thing.  And since modern x86_64 CPUs can still run DOS, that program would still work if I could find it.&#xD;&#xA;&#xD;&#xA;2. x86_64 CPUs can run 16 bit code and even virtual-86 code without resorting to the hardware-virtualization extensions.  It is just that due to some historical accidents, Microsoft Windows was written on the assumption that any CPU other than 32 bit x86 wouldn't have any of the PC features, so for no good reason 64 bit Windows lacks support for such things as hardware accelerated full screen command prompts, the fallback 640x480 VGA Driver and the subsystems that run 16 bit x86 programs.&#xD;&#xA;&#xD;&#xA;3. The trick to run 16 bit x86 modes from a long mode x86_64 OS is that ever since the 386, switching the entire CPU to any of its other modes is quick and painless for any OS designer who understands the architecture (rather than just the &quot;suggested&quot; ways to use it).  So to run 16 bit code, a 64 bit OS would need duplicate copies of some of the smaller control tables (GDT, LDT, IDT, but not the page tables), plus mode switching glue code.  Then at any context switch, the OS can freely enter whichever mode supports the code being switched to.&#xD;&#xA;&#xD;&#xA;4. If you are looking for modern emulators for classic 8 bit CPUs, you may need to first decide if you are looking for a game focused emulator, a productivity/compatibility code emulator or a research cycle-counting emulator (slow).  Each will do its primary job to the detriment of its ability to do the others.&#xD;&#xA;&#xD;&#xA;5. There are also modern 8 bit CPUs, such as the PIC and AVR CPUs from Microchip Inc.  Most of those have excellent emulation tools as part of their development packages.&#xD;&#xA;" />
  <row Id="3566" PostHistoryTypeId="5" PostId="844" RevisionGUID="4907887a-3559-4b22-83e9-6d71e5cb820e" CreationDate="2016-06-11T12:39:03.040" UserId="367" Comment="added 269 characters in body" Text="Commodore 64 has a known bug which doesn't allow to use tape drive together with a 1581 drive.&#xD;&#xA;&#xD;&#xA;Basically, in C64 the SRQ (Serial ReQuest) line is connected between IEC bus, CIA chip and the tape drive, burst mode drives (such as 1581) hang when both device in question and tape drive are connected.&#xD;&#xA;The bug does not affect older drives such as 1541 or 1571.&#xD;&#xA;&#xD;&#xA;C128 has this bug fixed.&#xD;&#xA;&#xD;&#xA;Is there any hardware fix that can resolve the problem in C64 ?" />
  <row Id="3567" PostHistoryTypeId="5" PostId="773" RevisionGUID="cf4adf70-a9a9-413b-aa78-fab1269a20c9" CreationDate="2016-06-11T14:23:55.720" UserId="439" Comment="forgot about Fuse's tape2wav" Text="My ZX Spectrum 48k seems very resistant to working with audio input. I no longer have any cassette players, so am relying on audio files from digital players. I have been able to save and verify a tiny BASIC program to a digital recorder, but getting the right volume to save files from playtzx or OTLA is eluding me.&#xD;&#xA;&#xD;&#xA;Things I've tried:&#xD;&#xA;&#xD;&#xA;* [TeeZiX - TZX/TAP player](https://play.google.com/store/apps/details?id=dk.rift.tzxdroid&amp;amp;hl=en &quot;TeeZiX - TZX/TAP player&quot;) on my phone&#xD;&#xA;* Many different audio cables, mono, stereo and TRRS&#xD;&#xA;* Edirol R-1 digital recorder/player (this is the one I got the save and verify to work on, and it has good input/output volume control)&#xD;&#xA;* a Sandisk Sansa player running Rockbox&#xD;&#xA;* an 800 Hz square wave tone at 0 dB to see if I could trigger the record level and make the screen border flicker. (summary: nope)&#xD;&#xA;* Audio files from tape2wav/[PlayTZX](http://www.worldofspectrum.org/utilities.html &quot;PlayTZX&quot;) and [otla](https://code.google.com/archive/p/otla/ &quot;otla&quot;) (via wine).&#xD;&#xA;&#xD;&#xA;What else should I try?" />
  <row Id="3569" PostHistoryTypeId="2" PostId="890" RevisionGUID="5ee2960c-5bae-4130-bc5a-810caa739cb4" CreationDate="2016-06-11T23:04:00.053" UserId="621" Text="I've seen various posts online about Nintendo cartridge dumping.  Two popular posts which come to mind are Thijs Alkemade's [Game Boy cartridge dumping on a Raspberry Pi][1] series and NintendoPlayer's [feature][2] on preserving N64 prototype carts.&#xD;&#xA;&#xD;&#xA;The &quot;current&quot; process to dump an N64 game requires a GameShark Pro and older hardware (a box with a parallel port running Windows XP or below).  I put current in quotes because the guides I've been reading are at least 10 years old.&#xD;&#xA;&#xD;&#xA;Assuming I am using a MacBook Pro (or other modern system), what is the feasibility of dumping a Nintendo 64 game using a Raspberry Pi or other tool (possibly an 8 bit Saleae logic analyzer) without having to fall back on older hardware?&#xD;&#xA;&#xD;&#xA;  [1]: https://blog.thijsalkema.de/blog/2013/05/14/game-boy-cartridge-dumping-on-a-raspberry-pi-part-1/&#xD;&#xA;  [2]: http://www.nintendoplayer.com/feature/n64/" />
  <row Id="3570" PostHistoryTypeId="1" PostId="890" RevisionGUID="5ee2960c-5bae-4130-bc5a-810caa739cb4" CreationDate="2016-06-11T23:04:00.053" UserId="621" Text="Dumping Nintendo 64 cartridges without a backup device" />
  <row Id="3571" PostHistoryTypeId="3" PostId="890" RevisionGUID="5ee2960c-5bae-4130-bc5a-810caa739cb4" CreationDate="2016-06-11T23:04:00.053" UserId="621" Text="&lt;nintendo&gt;&lt;rom&gt;&lt;nintendo-64&gt;" />
  <row Id="3572" PostHistoryTypeId="2" PostId="891" RevisionGUID="4a7955ec-79c1-4866-8334-af0a56f12467" CreationDate="2016-06-12T00:41:44.047" UserId="-1" Text="" />
  <row Id="3573" PostHistoryTypeId="2" PostId="892" RevisionGUID="d75d5482-6641-4cce-a461-cb2832ceb2e4" CreationDate="2016-06-12T00:41:44.047" UserId="-1" Text="" />
  <row Id="3574" PostHistoryTypeId="2" PostId="893" RevisionGUID="2c6ce62f-a587-4278-8087-a937c32b57a1" CreationDate="2016-06-12T00:42:45.020" UserId="-1" Text="" />
  <row Id="3575" PostHistoryTypeId="2" PostId="894" RevisionGUID="d72dceb9-0d0e-4300-9bc1-d226341b89ca" CreationDate="2016-06-12T00:42:45.020" UserId="-1" Text="" />
  <row Id="3576" PostHistoryTypeId="2" PostId="895" RevisionGUID="dab5ce1b-6295-4154-a320-a0af2e52473d" CreationDate="2016-06-12T00:44:24.370" UserId="-1" Text="" />
  <row Id="3577" PostHistoryTypeId="2" PostId="896" RevisionGUID="b9b3f32a-00fd-4be4-a32d-7d9dcf8eb5f6" CreationDate="2016-06-12T00:44:24.370" UserId="-1" Text="" />
  <row Id="3578" PostHistoryTypeId="2" PostId="897" RevisionGUID="2e2f7595-518b-458c-b6f2-c0dd2c151664" CreationDate="2016-06-12T00:57:28.557" UserId="-1" Text="" />
  <row Id="3579" PostHistoryTypeId="2" PostId="898" RevisionGUID="8b65e481-c75d-4501-ae96-088616364609" CreationDate="2016-06-12T00:57:28.557" UserId="-1" Text="" />
  <row Id="3582" PostHistoryTypeId="2" PostId="899" RevisionGUID="85747f6e-b152-41cb-b2e4-3f432d4050f5" CreationDate="2016-06-12T01:12:06.080" UserId="621" Text="A colleague of mine mentioned that in college he wrote a slot machine program on an Intel 8080 using an LCD display.  What kind of display communication protocol existed on the Intel 8080?  How was information sent from the chip to the display" />
  <row Id="3583" PostHistoryTypeId="1" PostId="899" RevisionGUID="85747f6e-b152-41cb-b2e4-3f432d4050f5" CreationDate="2016-06-12T01:12:06.080" UserId="621" Text="LCD Displays with the Intel 8080" />
  <row Id="3584" PostHistoryTypeId="3" PostId="899" RevisionGUID="85747f6e-b152-41cb-b2e4-3f432d4050f5" CreationDate="2016-06-12T01:12:06.080" UserId="621" Text="&lt;display&gt;&lt;intel&gt;&lt;intel-8080&gt;&lt;lcd-display&gt;" />
  <row Id="3585" PostHistoryTypeId="5" PostId="890" RevisionGUID="72dc48f9-6dbf-48b2-979f-6421b626b61d" CreationDate="2016-06-12T01:17:01.803" UserId="621" Comment="added 16 characters in body" Text="I've seen various posts online about Nintendo cartridge dumping.  Two popular posts which come to mind are Thijs Alkemade's [Game Boy cartridge dumping on a Raspberry Pi][1] series and NintendoPlayer's [feature][2] on preserving N64 prototype carts.&#xD;&#xA;&#xD;&#xA;The &quot;current&quot; process to dump an N64 game requires a GameShark Pro and older hardware (a box with a parallel port running Windows XP or below).  I put current in quotes because the guides I've been reading are at least 10 years old.&#xD;&#xA;&#xD;&#xA;Assuming I am using a MacBook Pro (or other modern system/microcontroller), what is the feasibility of dumping a Nintendo 64 game using a Raspberry Pi or other tool (possibly an 8 bit Saleae logic analyzer) without having to fall back on older hardware?&#xD;&#xA;&#xD;&#xA;  [1]: https://blog.thijsalkema.de/blog/2013/05/14/game-boy-cartridge-dumping-on-a-raspberry-pi-part-1/&#xD;&#xA;  [2]: http://www.nintendoplayer.com/feature/n64/" />
  <row Id="3586" PostHistoryTypeId="2" PostId="900" RevisionGUID="74023784-7874-4a65-ac11-1ea87f047c2c" CreationDate="2016-06-12T01:29:52.600" UserId="105" Text="The 8080 is not a microcontroller, but a microprocessor, so it had no special provision for LCD displays, as modern microcontroller may have, except maybe for the ability to use packed BCD numbers. It had no in-built host peripherals that would support protocols like RS232 or SPI.&#xD;&#xA;&#xD;&#xA;You don't mention what kind of LCD display your college used, so this is only an assumption (and your question may be put on hold precisely due to the lack of information about this) but for the most basic LCD display, a 7-segment display, the software may have used BCD for storing numbers. That way, a number could be easily output from the data bus (8-bit parallel) to a latch &quot;listening&quot; in a I/O port. The output of that latch could be feed a BCD-to-7 segment converter/driver, with in turn would be connected to the display.&#xD;&#xA;&#xD;&#xA;So, the protocol would have been 8-bit parallel (the 8080 data bus) with strobe (the signal generated by the address and bus cycle decoding , that is used to open the latch)." />
  <row Id="3587" PostHistoryTypeId="5" PostId="899" RevisionGUID="185b8892-3275-4db1-93cb-cef9b829f996" CreationDate="2016-06-12T01:31:05.633" UserId="621" Comment="added 69 characters in body" Text="A colleague of mine mentioned that in college he wrote a slot machine program on an Intel 8080 using an LCD display.  What kind of display communication protocol existed on the Intel 8080?  How was information sent from the chip to the display?&#xD;&#xA;&#xD;&#xA;The display in question was some sort of three 7-segmented LCDs." />
  <row Id="3588" PostHistoryTypeId="5" PostId="900" RevisionGUID="4e943d7f-d532-42a5-ad7b-7e6d80db7be3" CreationDate="2016-06-12T02:07:10.080" UserId="105" Comment="added 1063 characters in body" Text="The 8080 is not a microcontroller, but a microprocessor, so it had no special provision for LCD displays, as modern microcontroller may have, except maybe for the ability to use packed BCD numbers. It had no in-built host peripherals that would support protocols like RS232 or SPI.&#xD;&#xA;&#xD;&#xA;You don't mention what kind of LCD display your college used, so this is only an assumption (and your question may be put on hold precisely due to the lack of information about this) but for the most basic LCD display, a 7-segment display, the software may have used BCD for storing numbers. That way, a number could be easily output from the data bus (8-bit parallel) to a latch &quot;listening&quot; in a I/O port. The output of that latch could be feed a BCD-to-7 segment converter/driver, with in turn would be connected to the display.&#xD;&#xA;&#xD;&#xA;So, the protocol would have been 8-bit parallel (the 8080 data bus) with strobe (the signal generated by the address and bus cycle decoding , that is used to open the latch). This would have been work like this:&#xD;&#xA;&#xD;&#xA;First, the current machine cycle must be decoded in order to know whether it is a I/O operation, memory operation, stack, instruction fetch, etc. The 8080 didn't have special pins, like the Z80A, to inform the system about the nature of the machine cycle. Instead of that, the 8080 used the SYNC pin to signal the beginning of a machine cycle, whose type would be encoded in the data bus during the time SYNC is active. The 8080 chipset included a machien cycle decoder, the 8212 controller, that was connected to the 8080 as this:&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;Now the hardware designer would have to use a 8-bit latch whose enable input would be triggered by certain value present in the lower part of the address bus (or most frequenctly, triggered by having a certain value in some bit of the lower address bus), and the WR signal and the OUT signal from the 8212. This 8 bit value, if packed BCD coded, can feed two 7-segment displays to show two digits.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/oYQtE.png" />
</posthistory>